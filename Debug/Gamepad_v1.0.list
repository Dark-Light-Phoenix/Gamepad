
Gamepad_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbb8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800cd90  0800cd90  0001cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cddc  0800cddc  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  0800cddc  0800cddc  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cddc  0800cddc  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cddc  0800cddc  0001cddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde0  0800cde0  0001cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800cde4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e40  20000168  0800cf4c  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fa8  0800cf4c  00020fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2ef  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041e0  00000000  00000000  0003c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  000406b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a6  00000000  00000000  00041f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222fc  00000000  00000000  000431d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db5c  00000000  00000000  000654d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9dd4  00000000  00000000  0008302e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000679c  00000000  00000000  0015ce04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001635a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cd78 	.word	0x0800cd78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800cd78 	.word	0x0800cd78

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ADC_DMA_Init>:

int8_t adc_x1, adc_x2;
int8_t adc_y1, adc_y2;

void ADC_DMA_Init (void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA (&hadc1, (uint32_t *)adc_buffer1, BUFFER_SIZE);
 8000a08:	2202      	movs	r2, #2
 8000a0a:	4907      	ldr	r1, [pc, #28]	; (8000a28 <ADC_DMA_Init+0x24>)
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <ADC_DMA_Init+0x28>)
 8000a0e:	f001 fdb3 	bl	8002578 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA (&hadc2, (uint32_t *)adc_buffer2, BUFFER_SIZE);
 8000a12:	2202      	movs	r2, #2
 8000a14:	4906      	ldr	r1, [pc, #24]	; (8000a30 <ADC_DMA_Init+0x2c>)
 8000a16:	4807      	ldr	r0, [pc, #28]	; (8000a34 <ADC_DMA_Init+0x30>)
 8000a18:	f001 fdae 	bl	8002578 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start (&htim6);
 8000a1c:	4806      	ldr	r0, [pc, #24]	; (8000a38 <ADC_DMA_Init+0x34>)
 8000a1e:	f006 f92f 	bl	8006c80 <HAL_TIM_Base_Start>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000184 	.word	0x20000184
 8000a2c:	200004a0 	.word	0x200004a0
 8000a30:	2000018c 	.word	0x2000018c
 8000a34:	2000050c 	.word	0x2000050c
 8000a38:	200006d0 	.word	0x200006d0
 8000a3c:	00000000 	.word	0x00000000

08000a40 <ScaleData>:

void ScaleData (void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	adc_x1 = (int8_t)(((float)adc_buffer1 [0] / 4095.0) * 510) - 255;
 8000a44:	4b50      	ldr	r3, [pc, #320]	; (8000b88 <ScaleData+0x148>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a50:	ee17 0a90 	vmov	r0, s15
 8000a54:	f7ff fd44 	bl	80004e0 <__aeabi_f2d>
 8000a58:	a347      	add	r3, pc, #284	; (adr r3, 8000b78 <ScaleData+0x138>)
 8000a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a5e:	f7ff fec1 	bl	80007e4 <__aeabi_ddiv>
 8000a62:	4602      	mov	r2, r0
 8000a64:	460b      	mov	r3, r1
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	a345      	add	r3, pc, #276	; (adr r3, 8000b80 <ScaleData+0x140>)
 8000a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a70:	f7ff fd8e 	bl	8000590 <__aeabi_dmul>
 8000a74:	4602      	mov	r2, r0
 8000a76:	460b      	mov	r3, r1
 8000a78:	4610      	mov	r0, r2
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f7ff ff9a 	bl	80009b4 <__aeabi_d2iz>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	3301      	adds	r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	b25a      	sxtb	r2, r3
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <ScaleData+0x14c>)
 8000a8e:	701a      	strb	r2, [r3, #0]
	adc_y1 = (int8_t)(((float)adc_buffer1 [1] / 4095.0) * 510) - 255;
 8000a90:	4b3d      	ldr	r3, [pc, #244]	; (8000b88 <ScaleData+0x148>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a9c:	ee17 0a90 	vmov	r0, s15
 8000aa0:	f7ff fd1e 	bl	80004e0 <__aeabi_f2d>
 8000aa4:	a334      	add	r3, pc, #208	; (adr r3, 8000b78 <ScaleData+0x138>)
 8000aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aaa:	f7ff fe9b 	bl	80007e4 <__aeabi_ddiv>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	a332      	add	r3, pc, #200	; (adr r3, 8000b80 <ScaleData+0x140>)
 8000ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000abc:	f7ff fd68 	bl	8000590 <__aeabi_dmul>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f7ff ff74 	bl	80009b4 <__aeabi_d2iz>
 8000acc:	4603      	mov	r3, r0
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	b25a      	sxtb	r2, r3
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <ScaleData+0x150>)
 8000ada:	701a      	strb	r2, [r3, #0]
	adc_x2 = (int8_t)(((float)adc_buffer2 [0] / 4095.0) * 510) - 255;
 8000adc:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <ScaleData+0x154>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	ee07 3a90 	vmov	s15, r3
 8000ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ae8:	ee17 0a90 	vmov	r0, s15
 8000aec:	f7ff fcf8 	bl	80004e0 <__aeabi_f2d>
 8000af0:	a321      	add	r3, pc, #132	; (adr r3, 8000b78 <ScaleData+0x138>)
 8000af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af6:	f7ff fe75 	bl	80007e4 <__aeabi_ddiv>
 8000afa:	4602      	mov	r2, r0
 8000afc:	460b      	mov	r3, r1
 8000afe:	4610      	mov	r0, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	a31f      	add	r3, pc, #124	; (adr r3, 8000b80 <ScaleData+0x140>)
 8000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b08:	f7ff fd42 	bl	8000590 <__aeabi_dmul>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4610      	mov	r0, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	f7ff ff4e 	bl	80009b4 <__aeabi_d2iz>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	b25a      	sxtb	r2, r3
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <ScaleData+0x158>)
 8000b26:	701a      	strb	r2, [r3, #0]
	adc_y2 = (int8_t)(((float)adc_buffer2 [1] / 4095.0) * 510) - 255;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <ScaleData+0x154>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b34:	ee17 0a90 	vmov	r0, s15
 8000b38:	f7ff fcd2 	bl	80004e0 <__aeabi_f2d>
 8000b3c:	a30e      	add	r3, pc, #56	; (adr r3, 8000b78 <ScaleData+0x138>)
 8000b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b42:	f7ff fe4f 	bl	80007e4 <__aeabi_ddiv>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	a30c      	add	r3, pc, #48	; (adr r3, 8000b80 <ScaleData+0x140>)
 8000b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b54:	f7ff fd1c 	bl	8000590 <__aeabi_dmul>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f7ff ff28 	bl	80009b4 <__aeabi_d2iz>
 8000b64:	4603      	mov	r3, r0
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	b25a      	sxtb	r2, r3
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <ScaleData+0x15c>)
 8000b72:	701a      	strb	r2, [r3, #0]
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	00000000 	.word	0x00000000
 8000b7c:	40affe00 	.word	0x40affe00
 8000b80:	00000000 	.word	0x00000000
 8000b84:	407fe000 	.word	0x407fe000
 8000b88:	20000184 	.word	0x20000184
 8000b8c:	20000194 	.word	0x20000194
 8000b90:	20000196 	.word	0x20000196
 8000b94:	2000018c 	.word	0x2000018c
 8000b98:	20000195 	.word	0x20000195
 8000b9c:	20000197 	.word	0x20000197

08000ba0 <setColor>:
uint16_t pwmData [(numLEDs * LEDbits) * 2];

int counter = 0;

void setColor (uint8_t green, uint8_t red, uint8_t blue, int ledIndex)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	460b      	mov	r3, r1
 8000bae:	71bb      	strb	r3, [r7, #6]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	717b      	strb	r3, [r7, #5]
	uint8_t ledData [3] = {green, red, blue};
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	723b      	strb	r3, [r7, #8]
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	727b      	strb	r3, [r7, #9]
 8000bbc:	797b      	ldrb	r3, [r7, #5]
 8000bbe:	72bb      	strb	r3, [r7, #10]
	int bitIndex = ledIndex * (LEDbits * 2);
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	617b      	str	r3, [r7, #20]

	for (int color = 0; color < 3; color++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	e034      	b.n	8000c3c <setColor+0x9c>
	{
		for (int bit = 0; bit < 8; bit++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e02b      	b.n	8000c30 <setColor+0x90>
		{
			if (ledData [color] & (1 << (7 - bit)))
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	fa42 f303 	asr.w	r3, r2, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00b      	beq.n	8000c0e <setColor+0x6e>
			{
				pwmData [bitIndex] = T1H;
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <setColor+0xb0>)
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	2122      	movs	r1, #34	; 0x22
 8000bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pwmData [bitIndex + 1] = T1L;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <setColor+0xb0>)
 8000c06:	210e      	movs	r1, #14
 8000c08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c0c:	e00a      	b.n	8000c24 <setColor+0x84>
			}
			else
			{
				pwmData [bitIndex] = T0H;
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <setColor+0xb0>)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	210e      	movs	r1, #14
 8000c14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pwmData [bitIndex + 1] = T0L;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <setColor+0xb0>)
 8000c1e:	212d      	movs	r1, #45	; 0x2d
 8000c20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			bitIndex += 2;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3302      	adds	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
		for (int bit = 0; bit < 8; bit++)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	ddd0      	ble.n	8000bd8 <setColor+0x38>
	for (int color = 0; color < 3; color++)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	ddc7      	ble.n	8000bd2 <setColor+0x32>
		}
	}
	PWMPush();
 8000c42:	f000 f807 	bl	8000c54 <PWMPush>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000198 	.word	0x20000198

08000c54 <PWMPush>:

void PWMPush (void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA (&htim17, TIM_CHANNEL_1, (uint32_t*)pwmData, (numLEDs * LEDbits) * 2);
 8000c58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <PWMPush+0x24>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <PWMPush+0x28>)
 8000c62:	f006 f8c7 	bl	8006df4 <HAL_TIM_PWM_Start_DMA>
	HAL_Delay (10);
 8000c66:	200a      	movs	r0, #10
 8000c68:	f001 f8a0 	bl	8001dac <HAL_Delay>
	HAL_TIM_PWM_Stop_DMA (&htim17, TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <PWMPush+0x28>)
 8000c70:	f006 fad8 	bl	8007224 <HAL_TIM_PWM_Stop_DMA>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000198 	.word	0x20000198
 8000c7c:	2000071c 	.word	0x2000071c

08000c80 <UpdateButton>:
};

GamepadReport_TypeDef gamepad_report = {0};

void UpdateButton (void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
    gamepad_report.buttons = 0;
 8000c84:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <UpdateButton+0xc4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	801a      	strh	r2, [r3, #0]

    if (Left)      gamepad_report.buttons |= (1 << 0);
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <UpdateButton+0xc8>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <UpdateButton+0x20>
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <UpdateButton+0xc4>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <UpdateButton+0xc4>)
 8000c9e:	801a      	strh	r2, [r3, #0]
    if (Up)        gamepad_report.buttons |= (1 << 1);
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <UpdateButton+0xcc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d006      	beq.n	8000cb6 <UpdateButton+0x36>
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <UpdateButton+0xc4>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <UpdateButton+0xc4>)
 8000cb4:	801a      	strh	r2, [r3, #0]
    if (Right)     gamepad_report.buttons |= (1 << 2);
 8000cb6:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <UpdateButton+0xd0>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d006      	beq.n	8000ccc <UpdateButton+0x4c>
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <UpdateButton+0xc4>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <UpdateButton+0xc4>)
 8000cca:	801a      	strh	r2, [r3, #0]
    if (Down)      gamepad_report.buttons |= (1 << 3);
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <UpdateButton+0xd4>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <UpdateButton+0x62>
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <UpdateButton+0xc4>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <UpdateButton+0xc4>)
 8000ce0:	801a      	strh	r2, [r3, #0]
    if (Circle)    gamepad_report.buttons |= (1 << 4);
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <UpdateButton+0xd8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <UpdateButton+0x78>
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <UpdateButton+0xc4>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <UpdateButton+0xc4>)
 8000cf6:	801a      	strh	r2, [r3, #0]
    if (Triangle)  gamepad_report.buttons |= (1 << 5);
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <UpdateButton+0xdc>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <UpdateButton+0x8e>
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <UpdateButton+0xc4>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <UpdateButton+0xc4>)
 8000d0c:	801a      	strh	r2, [r3, #0]
    if (Chrest)    gamepad_report.buttons |= (1 << 6);
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <UpdateButton+0xe0>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <UpdateButton+0xa4>
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <UpdateButton+0xc4>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <UpdateButton+0xc4>)
 8000d22:	801a      	strh	r2, [r3, #0]
    if (Square)    gamepad_report.buttons |= (1 << 7);
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <UpdateButton+0xe4>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <UpdateButton+0xba>
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <UpdateButton+0xc4>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <UpdateButton+0xc4>)
 8000d38:	801a      	strh	r2, [r3, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	20000498 	.word	0x20000498
 8000d48:	200007c8 	.word	0x200007c8
 8000d4c:	200007c9 	.word	0x200007c9
 8000d50:	200007ca 	.word	0x200007ca
 8000d54:	200007cb 	.word	0x200007cb
 8000d58:	200007cc 	.word	0x200007cc
 8000d5c:	200007cd 	.word	0x200007cd
 8000d60:	200007ce 	.word	0x200007ce
 8000d64:	200007cf 	.word	0x200007cf

08000d68 <UpdateJoystick>:

void UpdateJoystick (void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	ScaleData();
 8000d6c:	f7ff fe68 	bl	8000a40 <ScaleData>
    gamepad_report.x1 = adc_x1;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <UpdateJoystick+0x34>)
 8000d72:	f993 2000 	ldrsb.w	r2, [r3]
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <UpdateJoystick+0x38>)
 8000d78:	709a      	strb	r2, [r3, #2]
    gamepad_report.y1 = adc_y1;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <UpdateJoystick+0x3c>)
 8000d7c:	f993 2000 	ldrsb.w	r2, [r3]
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <UpdateJoystick+0x38>)
 8000d82:	70da      	strb	r2, [r3, #3]
    gamepad_report.x2 = adc_x2;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <UpdateJoystick+0x40>)
 8000d86:	f993 2000 	ldrsb.w	r2, [r3]
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <UpdateJoystick+0x38>)
 8000d8c:	711a      	strb	r2, [r3, #4]
    gamepad_report.y2 = adc_y2;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <UpdateJoystick+0x44>)
 8000d90:	f993 2000 	ldrsb.w	r2, [r3]
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <UpdateJoystick+0x38>)
 8000d96:	715a      	strb	r2, [r3, #5]
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000194 	.word	0x20000194
 8000da0:	20000498 	.word	0x20000498
 8000da4:	20000196 	.word	0x20000196
 8000da8:	20000195 	.word	0x20000195
 8000dac:	20000197 	.word	0x20000197

08000db0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 || hadc == &hadc2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x24>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d003      	beq.n	8000dc8 <HAL_ADC_ConvCpltCallback+0x18>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0x28>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d101      	bne.n	8000dcc <HAL_ADC_ConvCpltCallback+0x1c>
	{
		SendReport ();
 8000dc8:	f000 f808 	bl	8000ddc <SendReport>
	}
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200004a0 	.word	0x200004a0
 8000dd8:	2000050c 	.word	0x2000050c

08000ddc <SendReport>:

void SendReport (void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    UpdateButton();
 8000de0:	f7ff ff4e 	bl	8000c80 <UpdateButton>
    UpdateJoystick();
 8000de4:	f7ff ffc0 	bl	8000d68 <UpdateJoystick>
    USBD_HID_SendReport (&hUsbDeviceFS, (uint8_t *) &gamepad_report, sizeof (gamepad_report));
 8000de8:	2206      	movs	r2, #6
 8000dea:	4903      	ldr	r1, [pc, #12]	; (8000df8 <SendReport+0x1c>)
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <SendReport+0x20>)
 8000dee:	f00a fa05 	bl	800b1fc <USBD_HID_SendReport>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000498 	.word	0x20000498
 8000dfc:	200007e8 	.word	0x200007e8

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f000 ff61 	bl	8001cca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f81c 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f000 fb04 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e10:	f000 fac8 	bl	80013a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e14:	f000 f860 	bl	8000ed8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e18:	f000 f8d8 	bl	8000fcc <MX_ADC2_Init>
  MX_USB_Device_Init();
 8000e1c:	f00b fb6a 	bl	800c4f4 <MX_USB_Device_Init>
  MX_TIM6_Init();
 8000e20:	f000 fa10 	bl	8001244 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000e24:	f000 f93a 	bl	800109c <MX_TIM3_Init>
  MX_TIM17_Init();
 8000e28:	f000 fa44 	bl	80012b4 <MX_TIM17_Init>
  MX_TIM4_Init();
 8000e2c:	f000 f9ae 	bl	800118c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ADC_DMA_Init();
 8000e30:	f7ff fde8 	bl	8000a04 <ADC_DMA_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_ConvCpltCallback (hadc);
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <main+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ffb9 	bl	8000db0 <HAL_ADC_ConvCpltCallback>
 8000e3e:	e7f9      	b.n	8000e34 <main+0x34>
 8000e40:	200007d0 	.word	0x200007d0

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	; 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	2238      	movs	r2, #56	; 0x38
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f00b ff64 	bl	800cd20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e6a:	f004 ff17 	bl	8005c9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000e80:	2303      	movs	r3, #3
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000e84:	230c      	movs	r3, #12
 8000e86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 ffb3 	bl	8005e04 <HAL_RCC_OscConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000ea4:	f000 fbd6 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000eac:	2302      	movs	r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 fab1 	bl	8006428 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ecc:	f000 fbc2 	bl	8001654 <Error_Handler>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3750      	adds	r7, #80	; 0x50
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2220      	movs	r2, #32
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00b ff15 	bl	800cd20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000ef8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000efc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f40:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f66:	f001 f983 	bl	8002270 <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f70:	f000 fb70 	bl	8001654 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000f80:	f002 fb48 	bl	8003614 <HAL_ADCEx_MultiModeConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f8a:	f000 fb63 	bl	8001654 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_ADC1_Init+0xf0>)
 8000f90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f92:	2306      	movs	r3, #6
 8000f94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9a:	237f      	movs	r3, #127	; 0x7f
 8000f9c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <MX_ADC1_Init+0xec>)
 8000fac:	f001 fdd0 	bl	8002b50 <HAL_ADC_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fb6:	f000 fb4d 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	3730      	adds	r7, #48	; 0x30
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200004a0 	.word	0x200004a0
 8000fc8:	0c900008 	.word	0x0c900008

08000fcc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00b fea1 	bl	800cd20 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MX_ADC2_Init+0xc4>)
 8000fe0:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <MX_ADC2_Init+0xc8>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_ADC2_Init+0xc4>)
 8000fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_ADC2_Init+0xc4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MX_ADC2_Init+0xc4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <MX_ADC2_Init+0xc4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_ADC2_Init+0xc4>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_ADC2_Init+0xc4>)
 8001006:	2204      	movs	r2, #4
 8001008:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC2_Init+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC2_Init+0xc4>)
 8001012:	2200      	movs	r2, #0
 8001014:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_ADC2_Init+0xc4>)
 8001018:	2201      	movs	r2, #1
 800101a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC2_Init+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC2_Init+0xc4>)
 8001026:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_ADC2_Init+0xc4>)
 800102e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_ADC2_Init+0xc4>)
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC2_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_ADC2_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_ADC2_Init+0xc4>)
 800104c:	f001 f910 	bl	8002270 <HAL_ADC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001056:	f000 fafd 	bl	8001654 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_ADC2_Init+0xcc>)
 800105c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105e:	2306      	movs	r3, #6
 8001060:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001066:	237f      	movs	r3, #127	; 0x7f
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106a:	2304      	movs	r3, #4
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_ADC2_Init+0xc4>)
 8001078:	f001 fd6a 	bl	8002b50 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001082:	f000 fae7 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000050c 	.word	0x2000050c
 8001094:	50000100 	.word	0x50000100
 8001098:	08600004 	.word	0x08600004

0800109c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	; 0x38
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <MX_TIM3_Init+0xe8>)
 80010d0:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <MX_TIM3_Init+0xec>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <MX_TIM3_Init+0xe8>)
 80010d6:	f240 128f 	movw	r2, #399	; 0x18f
 80010da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <MX_TIM3_Init+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 599;
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <MX_TIM3_Init+0xe8>)
 80010e4:	f240 2257 	movw	r2, #599	; 0x257
 80010e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <MX_TIM3_Init+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b24      	ldr	r3, [pc, #144]	; (8001184 <MX_TIM3_Init+0xe8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010f6:	4823      	ldr	r0, [pc, #140]	; (8001184 <MX_TIM3_Init+0xe8>)
 80010f8:	f005 fd6a 	bl	8006bd0 <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001102:	f000 faa7 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800110c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001110:	4619      	mov	r1, r3
 8001112:	481c      	ldr	r0, [pc, #112]	; (8001184 <MX_TIM3_Init+0xe8>)
 8001114:	f006 fbe2 	bl	80078dc <HAL_TIM_ConfigClockSource>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800111e:	f000 fa99 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <MX_TIM3_Init+0xe8>)
 8001124:	f005 fe0e 	bl	8006d44 <HAL_TIM_PWM_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800112e:	f000 fa91 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4810      	ldr	r0, [pc, #64]	; (8001184 <MX_TIM3_Init+0xe8>)
 8001142:	f007 fa31 	bl	80085a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800114c:	f000 fa82 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001150:	2360      	movs	r3, #96	; 0x60
 8001152:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001160:	463b      	mov	r3, r7
 8001162:	2204      	movs	r2, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_TIM3_Init+0xe8>)
 8001168:	f006 faa4 	bl	80076b4 <HAL_TIM_PWM_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001172:	f000 fa6f 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <MX_TIM3_Init+0xe8>)
 8001178:	f000 fc48 	bl	8001a0c <HAL_TIM_MspPostInit>

}
 800117c:	bf00      	nop
 800117e:	3738      	adds	r7, #56	; 0x38
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000638 	.word	0x20000638
 8001188:	40000400 	.word	0x40000400

0800118c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <MX_TIM4_Init+0xb0>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <MX_TIM4_Init+0xb4>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 399;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_TIM4_Init+0xb0>)
 80011b8:	f240 128f 	movw	r2, #399	; 0x18f
 80011bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_TIM4_Init+0xb0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 599;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM4_Init+0xb0>)
 80011c6:	f240 2257 	movw	r2, #599	; 0x257
 80011ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_TIM4_Init+0xb0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_TIM4_Init+0xb0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <MX_TIM4_Init+0xb0>)
 80011da:	f005 fdb3 	bl	8006d44 <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80011e4:	f000 fa36 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_TIM4_Init+0xb0>)
 80011f8:	f007 f9d6 	bl	80085a8 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001202:	f000 fa27 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	2360      	movs	r3, #96	; 0x60
 8001208:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	2208      	movs	r2, #8
 800121a:	4619      	mov	r1, r3
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <MX_TIM4_Init+0xb0>)
 800121e:	f006 fa49 	bl	80076b4 <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001228:	f000 fa14 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <MX_TIM4_Init+0xb0>)
 800122e:	f000 fbed 	bl	8001a0c <HAL_TIM_MspPostInit>

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000684 	.word	0x20000684
 8001240:	40000800 	.word	0x40000800

08001244 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_TIM6_Init+0x68>)
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <MX_TIM6_Init+0x6c>)
 8001258:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_TIM6_Init+0x68>)
 800125c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001260:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_TIM6_Init+0x68>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_TIM6_Init+0x68>)
 800126a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_TIM6_Init+0x68>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM6_Init+0x68>)
 8001278:	f005 fcaa 	bl	8006bd0 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001282:	f000 f9e7 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001286:	2320      	movs	r3, #32
 8001288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_TIM6_Init+0x68>)
 8001294:	f007 f988 	bl	80085a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800129e:	f000 f9d9 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200006d0 	.word	0x200006d0
 80012b0:	40001000 	.word	0x40001000

080012b4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]
 80012cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2234      	movs	r2, #52	; 0x34
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00b fd23 	bl	800cd20 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <MX_TIM17_Init+0xe8>)
 80012dc:	4a30      	ldr	r2, [pc, #192]	; (80013a0 <MX_TIM17_Init+0xec>)
 80012de:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <MX_TIM17_Init+0xe8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <MX_TIM17_Init+0xe8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 59;
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <MX_TIM17_Init+0xe8>)
 80012ee:	223b      	movs	r2, #59	; 0x3b
 80012f0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_TIM17_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_TIM17_Init+0xe8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_TIM17_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001304:	4825      	ldr	r0, [pc, #148]	; (800139c <MX_TIM17_Init+0xe8>)
 8001306:	f005 fc63 	bl	8006bd0 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001310:	f000 f9a0 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001314:	4821      	ldr	r0, [pc, #132]	; (800139c <MX_TIM17_Init+0xe8>)
 8001316:	f005 fd15 	bl	8006d44 <HAL_TIM_PWM_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 f998 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001324:	2360      	movs	r3, #96	; 0x60
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132c:	2300      	movs	r3, #0
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001340:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <MX_TIM17_Init+0xe8>)
 800134a:	f006 f9b3 	bl	80076b4 <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8001354:	f000 f97e 	bl	8001654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800136c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001370:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	4619      	mov	r1, r3
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM17_Init+0xe8>)
 8001380:	f007 f994 	bl	80086ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 800138a:	f000 f963 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM17_Init+0xe8>)
 8001390:	f000 fb3c 	bl	8001a0c <HAL_TIM_MspPostInit>

}
 8001394:	bf00      	nop
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000071c 	.word	0x2000071c
 80013a0:	40014800 	.word	0x40014800

080013a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_DMA_Init+0x70>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	4a19      	ldr	r2, [pc, #100]	; (8001414 <MX_DMA_Init+0x70>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6493      	str	r3, [r2, #72]	; 0x48
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_DMA_Init+0x70>)
 80013b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_DMA_Init+0x70>)
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_DMA_Init+0x70>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6493      	str	r3, [r2, #72]	; 0x48
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_DMA_Init+0x70>)
 80013d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	200b      	movs	r0, #11
 80013e0:	f002 fa97 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013e4:	200b      	movs	r0, #11
 80013e6:	f002 faae 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200c      	movs	r0, #12
 80013f0:	f002 fa8f 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013f4:	200c      	movs	r0, #12
 80013f6:	f002 faa6 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	200d      	movs	r0, #13
 8001400:	f002 fa87 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001404:	200d      	movs	r0, #13
 8001406:	f002 fa9e 	bl	8003946 <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a63      	ldr	r2, [pc, #396]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 8001434:	f043 0320 	orr.w	r3, r3, #32
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 800144c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <MX_GPIO_Init+0x1a8>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4848      	ldr	r0, [pc, #288]	; (80015c4 <MX_GPIO_Init+0x1ac>)
 80014a4:	f002 fd44 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a8:	2308      	movs	r3, #8
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f002 fd37 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014c2:	2320      	movs	r3, #32
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014c6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f002 fd29 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80014de:	23d1      	movs	r3, #209	; 0xd1
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4835      	ldr	r0, [pc, #212]	; (80015c8 <MX_GPIO_Init+0x1b0>)
 80014f4:	f002 fd1c 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80014f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f002 fd0d 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f002 fcfe 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001534:	2308      	movs	r3, #8
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001538:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	481f      	ldr	r0, [pc, #124]	; (80015c8 <MX_GPIO_Init+0x1b0>)
 800154a:	f002 fcf1 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800154e:	2320      	movs	r3, #32
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4819      	ldr	r0, [pc, #100]	; (80015c8 <MX_GPIO_Init+0x1b0>)
 8001562:	f002 fce5 	bl	8003f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2006      	movs	r0, #6
 800156c:	f002 f9d1 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001570:	2006      	movs	r0, #6
 8001572:	f002 f9e8 	bl	8003946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2009      	movs	r0, #9
 800157c:	f002 f9c9 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001580:	2009      	movs	r0, #9
 8001582:	f002 f9e0 	bl	8003946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	200a      	movs	r0, #10
 800158c:	f002 f9c1 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001590:	200a      	movs	r0, #10
 8001592:	f002 f9d8 	bl	8003946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2017      	movs	r0, #23
 800159c:	f002 f9b9 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a0:	2017      	movs	r0, #23
 80015a2:	f002 f9d0 	bl	8003946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2028      	movs	r0, #40	; 0x28
 80015ac:	f002 f9b1 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015b0:	2028      	movs	r0, #40	; 0x28
 80015b2:	f002 f9c8 	bl	8003946 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	48001800 	.word	0x48001800
 80015c8:	48000400 	.word	0x48000400

080015cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
	/*if (GPIO_Pin == GPIO_PIN_5)
	{
		  CounterSwitch();
	}*/
	if (GPIO_Pin == GPIO_PIN_5)
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d130      	bne.n	800163e <HAL_GPIO_EXTI_Callback+0x72>
	{
		if (Push == 0)
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d106      	bne.n	80015f2 <HAL_GPIO_EXTI_Callback+0x26>
		{
			Push = HAL_GetTick();
 80015e4:	f000 fbd6 	bl	8001d94 <HAL_GetTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015ee:	601a      	str	r2, [r3, #0]
				setColor (0, 0, 0, 0);
			}
		}

	}
}
 80015f0:	e025      	b.n	800163e <HAL_GPIO_EXTI_Callback+0x72>
			DelayPush = HAL_GetTick();
 80015f2:	f000 fbcf 	bl	8001d94 <HAL_GetTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_GPIO_EXTI_Callback+0x80>)
 80015fc:	601a      	str	r2, [r3, #0]
			if (DelayPush - Push <= 200)
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_GPIO_EXTI_Callback+0x80>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2bc8      	cmp	r3, #200	; 0xc8
 800160a:	dc09      	bgt.n	8001620 <HAL_GPIO_EXTI_Callback+0x54>
				Chrest = 1;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_GPIO_EXTI_Callback+0x84>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
				setColor (255, 0, 0, 0);
 8001612:	2300      	movs	r3, #0
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	20ff      	movs	r0, #255	; 0xff
 800161a:	f7ff fac1 	bl	8000ba0 <setColor>
}
 800161e:	e00e      	b.n	800163e <HAL_GPIO_EXTI_Callback+0x72>
				Push = 0;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
				DelayPush = 0;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_GPIO_EXTI_Callback+0x80>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
				Chrest = 0;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_GPIO_EXTI_Callback+0x84>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
				setColor (0, 0, 0, 0);
 8001632:	2300      	movs	r3, #0
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fab1 	bl	8000ba0 <setColor>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200007d4 	.word	0x200007d4
 800164c:	200007d8 	.word	0x200007d8
 8001650:	200007ce 	.word	0x200007ce

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_MspInit+0x44>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_MspInit+0x44>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6613      	str	r3, [r2, #96]	; 0x60
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_MspInit+0x44>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_MspInit+0x44>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_MspInit+0x44>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6593      	str	r3, [r2, #88]	; 0x58
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_MspInit+0x44>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001696:	f004 fba5 	bl	8005de4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b09c      	sub	sp, #112	; 0x70
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	2244      	movs	r2, #68	; 0x44
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00b fb29 	bl	800cd20 <memset>
  if(hadc->Instance==ADC1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d6:	d172      	bne.n	80017be <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80016e2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 f881 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80016f4:	f7ff ffae 	bl	8001654 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016f8:	4b6e      	ldr	r3, [pc, #440]	; (80018b4 <HAL_ADC_MspInit+0x20c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a6d      	ldr	r2, [pc, #436]	; (80018b4 <HAL_ADC_MspInit+0x20c>)
 8001700:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001702:	4b6c      	ldr	r3, [pc, #432]	; (80018b4 <HAL_ADC_MspInit+0x20c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d10b      	bne.n	8001722 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800170a:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a6a      	ldr	r2, [pc, #424]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a64      	ldr	r2, [pc, #400]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b62      	ldr	r3, [pc, #392]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800173a:	2305      	movs	r3, #5
 800173c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173e:	2303      	movs	r3, #3
 8001740:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f002 fbee 	bl	8003f30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001754:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_ADC_MspInit+0x214>)
 8001756:	4a5a      	ldr	r2, [pc, #360]	; (80018c0 <HAL_ADC_MspInit+0x218>)
 8001758:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <HAL_ADC_MspInit+0x214>)
 800175c:	2205      	movs	r2, #5
 800175e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b56      	ldr	r3, [pc, #344]	; (80018bc <HAL_ADC_MspInit+0x214>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b55      	ldr	r3, [pc, #340]	; (80018bc <HAL_ADC_MspInit+0x214>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_ADC_MspInit+0x214>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001772:	4b52      	ldr	r3, [pc, #328]	; (80018bc <HAL_ADC_MspInit+0x214>)
 8001774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001778:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800177a:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_ADC_MspInit+0x214>)
 800177c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001780:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001782:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <HAL_ADC_MspInit+0x214>)
 8001784:	2220      	movs	r2, #32
 8001786:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <HAL_ADC_MspInit+0x214>)
 800178a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001790:	484a      	ldr	r0, [pc, #296]	; (80018bc <HAL_ADC_MspInit+0x214>)
 8001792:	f002 f8f3 	bl	800397c <HAL_DMA_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 800179c:	f7ff ff5a 	bl	8001654 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a46      	ldr	r2, [pc, #280]	; (80018bc <HAL_ADC_MspInit+0x214>)
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54
 80017a6:	4a45      	ldr	r2, [pc, #276]	; (80018bc <HAL_ADC_MspInit+0x214>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2012      	movs	r0, #18
 80017b2:	f002 f8ae 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017b6:	2012      	movs	r0, #18
 80017b8:	f002 f8c5 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80017bc:	e076      	b.n	80018ac <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a40      	ldr	r2, [pc, #256]	; (80018c4 <HAL_ADC_MspInit+0x21c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d171      	bne.n	80018ac <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017d2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	4618      	mov	r0, r3
 80017da:	f005 f809 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 80017e4:	f7ff ff36 	bl	8001654 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_ADC_MspInit+0x20c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <HAL_ADC_MspInit+0x20c>)
 80017f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017f2:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <HAL_ADC_MspInit+0x20c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10b      	bne.n	8001812 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a28      	ldr	r2, [pc, #160]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_ADC_MspInit+0x210>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800182a:	2342      	movs	r3, #66	; 0x42
 800182c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800182e:	2303      	movs	r3, #3
 8001830:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f002 fb76 	bl	8003f30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 8001846:	4a21      	ldr	r2, [pc, #132]	; (80018cc <HAL_ADC_MspInit+0x224>)
 8001848:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 800184c:	2224      	movs	r2, #36	; 0x24
 800184e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 8001864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001868:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 800186c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001870:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 8001874:	2220      	movs	r2, #32
 8001876:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 800187a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 8001882:	f002 f87b 	bl	800397c <HAL_DMA_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_ADC_MspInit+0x1e8>
      Error_Handler();
 800188c:	f7ff fee2 	bl	8001654 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <HAL_ADC_MspInit+0x220>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2012      	movs	r0, #18
 80018a2:	f002 f836 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80018a6:	2012      	movs	r0, #18
 80018a8:	f002 f84d 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 80018ac:	bf00      	nop
 80018ae:	3770      	adds	r7, #112	; 0x70
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200007dc 	.word	0x200007dc
 80018b8:	40021000 	.word	0x40021000
 80018bc:	20000578 	.word	0x20000578
 80018c0:	40020008 	.word	0x40020008
 80018c4:	50000100 	.word	0x50000100
 80018c8:	200005d8 	.word	0x200005d8
 80018cc:	4002001c 	.word	0x4002001c

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a35      	ldr	r2, [pc, #212]	; (80019b4 <HAL_TIM_Base_MspInit+0xe4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10c      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	4a34      	ldr	r2, [pc, #208]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6593      	str	r3, [r2, #88]	; 0x58
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80018fa:	e056      	b.n	80019aa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a2e      	ldr	r2, [pc, #184]	; (80019bc <HAL_TIM_Base_MspInit+0xec>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10c      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
}
 800191e:	e044      	b.n	80019aa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM17)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a26      	ldr	r2, [pc, #152]	; (80019c0 <HAL_TIM_Base_MspInit+0xf0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d13f      	bne.n	80019aa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192e:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6613      	str	r3, [r2, #96]	; 0x60
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_TIM_Base_MspInit+0xe8>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <HAL_TIM_Base_MspInit+0xf8>)
 8001946:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 800194a:	2254      	movs	r2, #84	; 0x54
 800194c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001950:	2210      	movs	r2, #16
 8001952:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001966:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 800196a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196e:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001978:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 800197e:	4811      	ldr	r0, [pc, #68]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001980:	f001 fffc 	bl	800397c <HAL_DMA_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 800198a:	f7ff fe63 	bl	8001654 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_TIM_Base_MspInit+0xf4>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	201a      	movs	r0, #26
 80019a0:	f001 ffb7 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80019a4:	201a      	movs	r0, #26
 80019a6:	f001 ffce 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40000400 	.word	0x40000400
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40001000 	.word	0x40001000
 80019c0:	40014800 	.word	0x40014800
 80019c4:	20000768 	.word	0x20000768
 80019c8:	40020030 	.word	0x40020030

080019cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_TIM_PWM_MspInit+0x38>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10b      	bne.n	80019f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40000800 	.word	0x40000800
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a34      	ldr	r2, [pc, #208]	; (8001afc <HAL_TIM_MspPostInit+0xf0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d11d      	bne.n	8001a6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a33      	ldr	r2, [pc, #204]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a46:	2310      	movs	r3, #16
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4a:	2312      	movs	r3, #18
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a56:	2302      	movs	r3, #2
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f002 fa64 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001a68:	e044      	b.n	8001af4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <HAL_TIM_MspPostInit+0xf8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d11d      	bne.n	8001ab0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a78:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a80:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4817      	ldr	r0, [pc, #92]	; (8001b08 <HAL_TIM_MspPostInit+0xfc>)
 8001aaa:	f002 fa41 	bl	8003f30 <HAL_GPIO_Init>
}
 8001aae:	e021      	b.n	8001af4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM17)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <HAL_TIM_MspPostInit+0x100>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d11c      	bne.n	8001af4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_TIM_MspPostInit+0xf4>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f002 fa1e 	bl	8003f30 <HAL_GPIO_Init>
}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40000800 	.word	0x40000800
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	40014800 	.word	0x40014800

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler+0x4>

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler+0x4>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5c:	f000 f908 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f002 fb63 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b76:	2008      	movs	r0, #8
 8001b78:	f002 fb5c 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b84:	2010      	movs	r0, #16
 8001b86:	f002 fb55 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <DMA1_Channel1_IRQHandler+0x10>)
 8001b96:	f002 f87b 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000578 	.word	0x20000578

08001ba4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <DMA1_Channel2_IRQHandler+0x10>)
 8001baa:	f002 f871 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200005d8 	.word	0x200005d8

08001bb8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <DMA1_Channel3_IRQHandler+0x10>)
 8001bbe:	f002 f867 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000768 	.word	0x20000768

08001bcc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <ADC1_2_IRQHandler+0x14>)
 8001bd2:	f000 fd85 	bl	80026e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <ADC1_2_IRQHandler+0x18>)
 8001bd8:	f000 fd82 	bl	80026e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200004a0 	.word	0x200004a0
 8001be4:	2000050c 	.word	0x2000050c

08001be8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <USB_LP_IRQHandler+0x10>)
 8001bee:	f002 fc29 	bl	8004444 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000cb8 	.word	0x20000cb8

08001bfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c00:	2020      	movs	r0, #32
 8001c02:	f002 fb17 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c06:	2040      	movs	r0, #64	; 0x40
 8001c08:	f002 fb14 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c0c:	2080      	movs	r0, #128	; 0x80
 8001c0e:	f002 fb11 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c16:	f002 fb0d 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c1e:	f002 fb09 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001c2e:	f005 fbf1 	bl	8007414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000071c 	.word	0x2000071c

08001c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001c40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c44:	f002 faf6 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c4c:	f002 faf2 	bl	8004234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c7c:	f7ff ffea 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	; (8001cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <LoopForever+0xe>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	; (8001cc4 <LoopForever+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f00b f843 	bl	800cd30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001caa:	f7ff f8a9 	bl	8000e00 <main>

08001cae <LoopForever>:

LoopForever:
    b LoopForever
 8001cae:	e7fe      	b.n	8001cae <LoopForever>
  ldr   r0, =_estack
 8001cb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001cbc:	0800cde4 	.word	0x0800cde4
  ldr r2, =_sbss
 8001cc0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001cc4:	20000fa8 	.word	0x20000fa8

08001cc8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <COMP1_2_3_IRQHandler>

08001cca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f001 fe11 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cda:	200f      	movs	r0, #15
 8001cdc:	f000 f80e 	bl	8001cfc <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	e001      	b.n	8001cf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cec:	f7ff fcb8 	bl	8001660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]

}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_InitTick+0x68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d022      	beq.n	8001d56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_InitTick+0x6c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_InitTick+0x68>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fe1c 	bl	8003962 <HAL_SYSTICK_Config>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10f      	bne.n	8001d50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	d809      	bhi.n	8001d4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d36:	2200      	movs	r2, #0
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3e:	f001 fde8 	bl	8003912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_InitTick+0x70>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e004      	b.n	8001d5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_IncTick+0x1c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_IncTick+0x20>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_IncTick+0x1c>)
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	200007e0 	.word	0x200007e0
 8001d90:	20000008 	.word	0x20000008

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200007e0 	.word	0x200007e0

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d004      	beq.n	8001dd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_Delay+0x40>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd0:	bf00      	nop
 8001dd2:	f7ff ffdf 	bl	8001d94 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d8f7      	bhi.n	8001dd2 <HAL_Delay+0x26>
  {
  }
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000008 	.word	0x20000008

08001df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3360      	adds	r3, #96	; 0x60
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <LL_ADC_SetOffset+0x44>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e90:	bf00      	nop
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	03fff000 	.word	0x03fff000

08001ea0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3360      	adds	r3, #96	; 0x60
 8001eae:	461a      	mov	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3360      	adds	r3, #96	; 0x60
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b087      	sub	sp, #28
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3360      	adds	r3, #96	; 0x60
 8001f12:	461a      	mov	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f2c:	bf00      	nop
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3360      	adds	r3, #96	; 0x60
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	615a      	str	r2, [r3, #20]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b087      	sub	sp, #28
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3330      	adds	r3, #48	; 0x30
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	4413      	add	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	211f      	movs	r1, #31
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	401a      	ands	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0e9b      	lsrs	r3, r3, #26
 8001ff2:	f003 011f 	and.w	r1, r3, #31
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	431a      	orrs	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3314      	adds	r3, #20
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	0e5b      	lsrs	r3, r3, #25
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0d1b      	lsrs	r3, r3, #20
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2107      	movs	r1, #7
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	0d1b      	lsrs	r3, r3, #20
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	43db      	mvns	r3, r3
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0318 	and.w	r3, r3, #24
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020b4:	40d9      	lsrs	r1, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	400b      	ands	r3, r1
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	0007ffff 	.word	0x0007ffff

080020d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 031f 	and.w	r3, r3, #31
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002120:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6093      	str	r3, [r2, #8]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002148:	d101      	bne.n	800214e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800216c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002170:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002198:	d101      	bne.n	800219e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <LL_ADC_IsEnabled+0x18>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <LL_ADC_IsEnabled+0x1a>
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800220a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b04      	cmp	r3, #4
 8002234:	d101      	bne.n	800223a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b08      	cmp	r3, #8
 800225a:	d101      	bne.n	8002260 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e167      	b.n	800255a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fa05 	bl	80016a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff3f 	bl	8002134 <LL_ADC_IsDeepPowerDownEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff25 	bl	8002110 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff5a 	bl	8002184 <LL_ADC_IsInternalRegulatorEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d115      	bne.n	8002302 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff3e 	bl	800215c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e0:	4ba0      	ldr	r3, [pc, #640]	; (8002564 <HAL_ADC_Init+0x2f4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	4aa0      	ldr	r2, [pc, #640]	; (8002568 <HAL_ADC_Init+0x2f8>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	3301      	adds	r3, #1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022f4:	e002      	b.n	80022fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f9      	bne.n	80022f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff3c 	bl	8002184 <LL_ADC_IsInternalRegulatorEnabled>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10d      	bne.n	800232e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ff75 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 8002338:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 8100 	bne.w	8002548 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 80fc 	bne.w	8002548 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002358:	f043 0202 	orr.w	r2, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff35 	bl	80021d4 <LL_ADC_IsEnabled>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d111      	bne.n	8002394 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002370:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002374:	f7ff ff2e 	bl	80021d4 <LL_ADC_IsEnabled>
 8002378:	4604      	mov	r4, r0
 800237a:	487c      	ldr	r0, [pc, #496]	; (800256c <HAL_ADC_Init+0x2fc>)
 800237c:	f7ff ff2a 	bl	80021d4 <LL_ADC_IsEnabled>
 8002380:	4603      	mov	r3, r0
 8002382:	4323      	orrs	r3, r4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4619      	mov	r1, r3
 800238e:	4878      	ldr	r0, [pc, #480]	; (8002570 <HAL_ADC_Init+0x300>)
 8002390:	f7ff fd2e 	bl	8001df0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7f5b      	ldrb	r3, [r3, #29]
 8002398:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800239e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d106      	bne.n	80023d0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	045b      	lsls	r3, r3, #17
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b60      	ldr	r3, [pc, #384]	; (8002574 <HAL_ADC_Init+0x304>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff14 	bl	8002248 <LL_ADC_INJ_IsConversionOngoing>
 8002420:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d16d      	bne.n	8002504 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d16a      	bne.n	8002504 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002432:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800244a:	f023 0302 	bic.w	r3, r3, #2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	430b      	orrs	r3, r1
 8002456:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d017      	beq.n	8002490 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800246e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002478:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800247c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6911      	ldr	r1, [r2, #16]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800248e:	e013      	b.n	80024b8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800249e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d118      	bne.n	80024f4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024e4:	430a      	orrs	r2, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
 80024f2:	e007      	b.n	8002504 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10c      	bne.n	8002526 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f023 010f 	bic.w	r1, r3, #15
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	1e5a      	subs	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
 8002524:	e007      	b.n	8002536 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 020f 	bic.w	r2, r2, #15
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	65da      	str	r2, [r3, #92]	; 0x5c
 8002546:	e007      	b.n	8002558 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	f043 0210 	orr.w	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002558:	7ffb      	ldrb	r3, [r7, #31]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000
 8002568:	053e2d63 	.word	0x053e2d63
 800256c:	50000100 	.word	0x50000100
 8002570:	50000300 	.word	0x50000300
 8002574:	fff04007 	.word	0xfff04007

08002578 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002584:	4851      	ldr	r0, [pc, #324]	; (80026cc <HAL_ADC_Start_DMA+0x154>)
 8002586:	f7ff fda7 	bl	80020d8 <LL_ADC_GetMultimode>
 800258a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fe46 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 808f 	bne.w	80026bc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_Start_DMA+0x34>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e08a      	b.n	80026c2 <HAL_ADC_Start_DMA+0x14a>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d002      	beq.n	80025c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d173      	bne.n	80026ae <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 feb2 	bl	8003330 <ADC_Enable>
 80025cc:	4603      	mov	r3, r0
 80025ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d166      	bne.n	80026a4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a38      	ldr	r2, [pc, #224]	; (80026d0 <HAL_ADC_Start_DMA+0x158>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d002      	beq.n	80025fa <HAL_ADC_Start_DMA+0x82>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	e001      	b.n	80025fe <HAL_ADC_Start_DMA+0x86>
 80025fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4293      	cmp	r3, r2
 8002604:	d002      	beq.n	800260c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002628:	f023 0206 	bic.w	r2, r3, #6
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	661a      	str	r2, [r3, #96]	; 0x60
 8002630:	e002      	b.n	8002638 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <HAL_ADC_Start_DMA+0x15c>)
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002644:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <HAL_ADC_Start_DMA+0x160>)
 8002646:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	4a23      	ldr	r2, [pc, #140]	; (80026dc <HAL_ADC_Start_DMA+0x164>)
 800264e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	221c      	movs	r2, #28
 8002656:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0210 	orr.w	r2, r2, #16
 800266e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3340      	adds	r3, #64	; 0x40
 800268a:	4619      	mov	r1, r3
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f001 fa1c 	bl	8003acc <HAL_DMA_Start_IT>
 8002694:	4603      	mov	r3, r0
 8002696:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fdac 	bl	80021fa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80026a2:	e00d      	b.n	80026c0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80026ac:	e008      	b.n	80026c0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80026ba:	e001      	b.n	80026c0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	50000300 	.word	0x50000300
 80026d0:	50000100 	.word	0x50000100
 80026d4:	0800343d 	.word	0x0800343d
 80026d8:	08003515 	.word	0x08003515
 80026dc:	08003531 	.word	0x08003531

080026e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026fc:	4883      	ldr	r0, [pc, #524]	; (800290c <HAL_ADC_IRQHandler+0x22c>)
 80026fe:	f7ff fceb 	bl	80020d8 <LL_ADC_GetMultimode>
 8002702:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d017      	beq.n	800273e <HAL_ADC_IRQHandler+0x5e>
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d012      	beq.n	800273e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 ff65 	bl	8003600 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2202      	movs	r2, #2
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_ADC_IRQHandler+0x72>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8085 	beq.w	8002868 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d07f      	beq.n	8002868 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fc05 	bl	8001f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d064      	beq.n	800285a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5e      	ldr	r2, [pc, #376]	; (8002910 <HAL_ADC_IRQHandler+0x230>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d002      	beq.n	80027a0 <HAL_ADC_IRQHandler+0xc0>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	e001      	b.n	80027a4 <HAL_ADC_IRQHandler+0xc4>
 80027a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d008      	beq.n	80027be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d002      	beq.n	80027be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b09      	cmp	r3, #9
 80027bc:	d104      	bne.n	80027c8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	e00d      	b.n	80027e4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a50      	ldr	r2, [pc, #320]	; (8002910 <HAL_ADC_IRQHandler+0x230>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d002      	beq.n	80027d8 <HAL_ADC_IRQHandler+0xf8>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	e001      	b.n	80027dc <HAL_ADC_IRQHandler+0xfc>
 80027d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027dc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d135      	bne.n	800285a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d12e      	bne.n	800285a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fd0e 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d11a      	bne.n	8002842 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 020c 	bic.w	r2, r2, #12
 800281a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d112      	bne.n	800285a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002840:	e00b      	b.n	800285a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	f043 0210 	orr.w	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe faa8 	bl	8000db0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	220c      	movs	r2, #12
 8002866:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_ADC_IRQHandler+0x19c>
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 809e 	beq.w	80029c4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8098 	beq.w	80029c4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fbae 	bl	8002012 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80028b6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fb69 	bl	8001f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028c2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_ADC_IRQHandler+0x230>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d002      	beq.n	80028d4 <HAL_ADC_IRQHandler+0x1f4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	e001      	b.n	80028d8 <HAL_ADC_IRQHandler+0x1f8>
 80028d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4293      	cmp	r3, r2
 80028de:	d008      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b06      	cmp	r3, #6
 80028ea:	d002      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b07      	cmp	r3, #7
 80028f0:	d104      	bne.n	80028fc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	e011      	b.n	8002920 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a03      	ldr	r2, [pc, #12]	; (8002910 <HAL_ADC_IRQHandler+0x230>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d006      	beq.n	8002914 <HAL_ADC_IRQHandler+0x234>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	e005      	b.n	8002918 <HAL_ADC_IRQHandler+0x238>
 800290c:	50000300 	.word	0x50000300
 8002910:	50000100 	.word	0x50000100
 8002914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002918:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d047      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_ADC_IRQHandler+0x260>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03f      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800293c:	2b00      	cmp	r3, #0
 800293e:	d13a      	bne.n	80029b6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d133      	bne.n	80029b6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d12e      	bne.n	80029b6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fc73 	bl	8002248 <LL_ADC_INJ_IsConversionOngoing>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d11a      	bne.n	800299e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002976:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d112      	bne.n	80029b6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	65da      	str	r2, [r3, #92]	; 0x5c
 800299c:	e00b      	b.n	80029b6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f043 0210 	orr.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fdfa 	bl	80035b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2260      	movs	r2, #96	; 0x60
 80029c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d011      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x312>
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00c      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f89f 	bl	8002b28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <HAL_ADC_IRQHandler+0x342>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fde0 	bl	80035d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d012      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x372>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00d      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fdd2 	bl	80035ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d036      	beq.n	8002aca <HAL_ADC_IRQHandler+0x3ea>
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d031      	beq.n	8002aca <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	e014      	b.n	8002a9e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a7a:	4825      	ldr	r0, [pc, #148]	; (8002b10 <HAL_ADC_IRQHandler+0x430>)
 8002a7c:	f7ff fb3a 	bl	80020f4 <LL_ADC_GetMultiDMATransfer>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002a86:	2301      	movs	r3, #1
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	e008      	b.n	8002a9e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab4:	f043 0202 	orr.w	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f83d 	bl	8002b3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d018      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x426>
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d013      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aee:	f043 0208 	orr.w	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002afe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fd5f 	bl	80035c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	50000300 	.word	0x50000300

08002b14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b0b6      	sub	sp, #216	; 0xd8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x22>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e3c8      	b.n	8003304 <HAL_ADC_ConfigChannel+0x7b4>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fb4f 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 83ad 	bne.w	80032e6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f7ff fa0e 	bl	8001fba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fb3d 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 8002ba8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fb49 	bl	8002248 <LL_ADC_INJ_IsConversionOngoing>
 8002bb6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 81d9 	bne.w	8002f76 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 81d4 	bne.w	8002f76 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2200      	movs	r2, #0
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7ff fa28 	bl	8002038 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f9bc 	bl	8001f6e <LL_ADC_SetSamplingTimeCommonConfig>
 8002bf6:	e00e      	b.n	8002c16 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6819      	ldr	r1, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	461a      	mov	r2, r3
 8002c06:	f7ff fa17 	bl	8002038 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f9ac 	bl	8001f6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	08db      	lsrs	r3, r3, #3
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d022      	beq.n	8002c7e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6919      	ldr	r1, [r3, #16]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c48:	f7ff f906 	bl	8001e58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6919      	ldr	r1, [r3, #16]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f7ff f952 	bl	8001f02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d102      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x124>
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	e000      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x126>
 8002c74:	2300      	movs	r3, #0
 8002c76:	461a      	mov	r2, r3
 8002c78:	f7ff f95e 	bl	8001f38 <LL_ADC_SetOffsetSaturation>
 8002c7c:	e17b      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff f90b 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x15a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff f900 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	e01e      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x198>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f8f5 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e004      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1b0>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	e018      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x1e2>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e004      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d106      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff f8c4 	bl	8001ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f8a8 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x220>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f89d 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	f003 021f 	and.w	r2, r3, #31
 8002d6e:	e01e      	b.n	8002dae <HAL_ADC_ConfigChannel+0x25e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f892 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002d9e:	2320      	movs	r3, #32
 8002da0:	e004      	b.n	8002dac <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x276>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	e018      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x2a8>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002dda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002dea:	2320      	movs	r3, #32
 8002dec:	e004      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d106      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f861 	bl	8001ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff f845 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x2e6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff f83a 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	e01e      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x324>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f82f 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e004      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x33c>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	0e9b      	lsrs	r3, r3, #26
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	e016      	b.n	8002eba <HAL_ADC_ConfigChannel+0x36a>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002eac:	2320      	movs	r3, #32
 8002eae:	e004      	b.n	8002eba <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d106      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f800 	bl	8001ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2103      	movs	r1, #3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe ffe4 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x3a8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2103      	movs	r1, #3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe ffd9 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	f003 021f 	and.w	r2, r3, #31
 8002ef6:	e017      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x3d8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2103      	movs	r1, #3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe ffce 	bl	8001ea0 <LL_ADC_GetOffsetChannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f12:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	e003      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x3f0>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	e011      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x414>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e003      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d106      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2103      	movs	r1, #3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe ffab 	bl	8001ecc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f92a 	bl	80021d4 <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 8140 	bne.w	8003208 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f7ff f87b 	bl	8002090 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a8f      	ldr	r2, [pc, #572]	; (80031dc <HAL_ADC_ConfigChannel+0x68c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	f040 8131 	bne.w	8003208 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x47e>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2b09      	cmp	r3, #9
 8002fc4:	bf94      	ite	ls
 8002fc6:	2301      	movls	r3, #1
 8002fc8:	2300      	movhi	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	e019      	b.n	8003002 <HAL_ADC_ConfigChannel+0x4b2>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fde:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e003      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2b09      	cmp	r3, #9
 8002ffa:	bf94      	ite	ls
 8002ffc:	2301      	movls	r3, #1
 8002ffe:	2300      	movhi	r3, #0
 8003000:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003002:	2b00      	cmp	r3, #0
 8003004:	d079      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x4d2>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0e9b      	lsrs	r3, r3, #26
 8003018:	3301      	adds	r3, #1
 800301a:	069b      	lsls	r3, r3, #26
 800301c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003020:	e015      	b.n	800304e <HAL_ADC_ConfigChannel+0x4fe>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003032:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800303a:	2320      	movs	r3, #32
 800303c:	e003      	b.n	8003046 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3301      	adds	r3, #1
 8003048:	069b      	lsls	r3, r3, #26
 800304a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_ADC_ConfigChannel+0x51e>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	3301      	adds	r3, #1
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	e017      	b.n	800309e <HAL_ADC_ConfigChannel+0x54e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800307c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e003      	b.n	8003092 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800308a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	ea42 0103 	orr.w	r1, r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x574>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	3301      	adds	r3, #1
 80030b6:	f003 021f 	and.w	r2, r3, #31
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	051b      	lsls	r3, r3, #20
 80030c2:	e018      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x5a6>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80030dc:	2320      	movs	r3, #32
 80030de:	e003      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80030e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f003 021f 	and.w	r2, r3, #31
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f6:	430b      	orrs	r3, r1
 80030f8:	e081      	b.n	80031fe <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x5c6>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	0e9b      	lsrs	r3, r3, #26
 800310c:	3301      	adds	r3, #1
 800310e:	069b      	lsls	r3, r3, #26
 8003110:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003114:	e015      	b.n	8003142 <HAL_ADC_ConfigChannel+0x5f2>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800312e:	2320      	movs	r3, #32
 8003130:	e003      	b.n	800313a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	3301      	adds	r3, #1
 800313c:	069b      	lsls	r3, r3, #26
 800313e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x612>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	3301      	adds	r3, #1
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	e017      	b.n	8003192 <HAL_ADC_ConfigChannel+0x642>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	61fb      	str	r3, [r7, #28]
  return result;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800317a:	2320      	movs	r3, #32
 800317c:	e003      	b.n	8003186 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	ea42 0103 	orr.w	r1, r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_ADC_ConfigChannel+0x66e>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	0e9b      	lsrs	r3, r3, #26
 80031a8:	3301      	adds	r3, #1
 80031aa:	f003 021f 	and.w	r2, r3, #31
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	3b1e      	subs	r3, #30
 80031b6:	051b      	lsls	r3, r3, #20
 80031b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031bc:	e01e      	b.n	80031fc <HAL_ADC_ConfigChannel+0x6ac>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	613b      	str	r3, [r7, #16]
  return result;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80031d6:	2320      	movs	r3, #32
 80031d8:	e006      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x698>
 80031da:	bf00      	nop
 80031dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	3b1e      	subs	r3, #30
 80031f6:	051b      	lsls	r3, r3, #20
 80031f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003202:	4619      	mov	r1, r3
 8003204:	f7fe ff18 	bl	8002038 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_ADC_ConfigChannel+0x7bc>)
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d071      	beq.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003214:	483e      	ldr	r0, [pc, #248]	; (8003310 <HAL_ADC_ConfigChannel+0x7c0>)
 8003216:	f7fe fe11 	bl	8001e3c <LL_ADC_GetCommonPathInternalCh>
 800321a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <HAL_ADC_ConfigChannel+0x7c4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_ADC_ConfigChannel+0x6e2>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <HAL_ADC_ConfigChannel+0x7c8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d127      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d121      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003246:	d157      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800324c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003250:	4619      	mov	r1, r3
 8003252:	482f      	ldr	r0, [pc, #188]	; (8003310 <HAL_ADC_ConfigChannel+0x7c0>)
 8003254:	f7fe fddf 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_ADC_ConfigChannel+0x7cc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	4a30      	ldr	r2, [pc, #192]	; (8003320 <HAL_ADC_ConfigChannel+0x7d0>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003272:	e002      	b.n	800327a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3b01      	subs	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f9      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003280:	e03a      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a27      	ldr	r2, [pc, #156]	; (8003324 <HAL_ADC_ConfigChannel+0x7d4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d113      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800328c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10d      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a22      	ldr	r2, [pc, #136]	; (8003328 <HAL_ADC_ConfigChannel+0x7d8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d02a      	beq.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032aa:	4619      	mov	r1, r3
 80032ac:	4818      	ldr	r0, [pc, #96]	; (8003310 <HAL_ADC_ConfigChannel+0x7c0>)
 80032ae:	f7fe fdb2 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032b2:	e021      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_ADC_ConfigChannel+0x7dc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d11c      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a16      	ldr	r2, [pc, #88]	; (8003328 <HAL_ADC_ConfigChannel+0x7d8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d011      	beq.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032dc:	4619      	mov	r1, r3
 80032de:	480c      	ldr	r0, [pc, #48]	; (8003310 <HAL_ADC_ConfigChannel+0x7c0>)
 80032e0:	f7fe fd99 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
 80032e4:	e008      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003300:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003304:	4618      	mov	r0, r3
 8003306:	37d8      	adds	r7, #216	; 0xd8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	80080000 	.word	0x80080000
 8003310:	50000300 	.word	0x50000300
 8003314:	c3210000 	.word	0xc3210000
 8003318:	90c00010 	.word	0x90c00010
 800331c:	20000000 	.word	0x20000000
 8003320:	053e2d63 	.word	0x053e2d63
 8003324:	c7520000 	.word	0xc7520000
 8003328:	50000100 	.word	0x50000100
 800332c:	cb840000 	.word	0xcb840000

08003330 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe ff47 	bl	80021d4 <LL_ADC_IsEnabled>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d169      	bne.n	8003420 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	4b36      	ldr	r3, [pc, #216]	; (800342c <ADC_Enable+0xfc>)
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	f043 0210 	orr.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e055      	b.n	8003422 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe ff16 	bl	80021ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003380:	482b      	ldr	r0, [pc, #172]	; (8003430 <ADC_Enable+0x100>)
 8003382:	f7fe fd5b 	bl	8001e3c <LL_ADC_GetCommonPathInternalCh>
 8003386:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003390:	4b28      	ldr	r3, [pc, #160]	; (8003434 <ADC_Enable+0x104>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	4a28      	ldr	r2, [pc, #160]	; (8003438 <ADC_Enable+0x108>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033aa:	e002      	b.n	80033b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f9      	bne.n	80033ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033b8:	f7fe fcec 	bl	8001d94 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033be:	e028      	b.n	8003412 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe ff05 	bl	80021d4 <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d104      	bne.n	80033da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe fee9 	bl	80021ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033da:	f7fe fcdb 	bl	8001d94 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d914      	bls.n	8003412 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d00d      	beq.n	8003412 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f043 0210 	orr.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e007      	b.n	8003422 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d1cf      	bne.n	80033c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	8000003f 	.word	0x8000003f
 8003430:	50000300 	.word	0x50000300
 8003434:	20000000 	.word	0x20000000
 8003438:	053e2d63 	.word	0x053e2d63

0800343c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003452:	2b00      	cmp	r3, #0
 8003454:	d14b      	bne.n	80034ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d021      	beq.n	80034b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fd8d 	bl	8001f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d032      	beq.n	80034e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d12b      	bne.n	80034e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11f      	bne.n	80034e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80034b2:	e018      	b.n	80034e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d111      	bne.n	80034e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7fd fc62 	bl	8000db0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034ec:	e00e      	b.n	800350c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff fb1e 	bl	8002b3c <HAL_ADC_ErrorCallback>
}
 8003500:	e004      	b.n	800350c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff faf6 	bl	8002b14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354e:	f043 0204 	orr.w	r2, r3, #4
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff faf0 	bl	8002b3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <LL_ADC_IsEnabled>:
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <LL_ADC_IsEnabled+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <LL_ADC_IsEnabled+0x1a>
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_ADC_REG_IsConversionOngoing>:
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b04      	cmp	r3, #4
 800359c:	d101      	bne.n	80035a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b0a1      	sub	sp, #132	; 0x84
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800362e:	2302      	movs	r3, #2
 8003630:	e08b      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800363a:	2300      	movs	r3, #0
 800363c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800363e:	2300      	movs	r3, #0
 8003640:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800364a:	d102      	bne.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	e001      	b.n	8003656 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e06a      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff87 	bl	800358a <LL_ADC_REG_IsConversionOngoing>
 800367c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff81 	bl	800358a <LL_ADC_REG_IsConversionOngoing>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d14c      	bne.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800368e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003690:	2b00      	cmp	r3, #0
 8003692:	d149      	bne.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003694:	4b30      	ldr	r3, [pc, #192]	; (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003696:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d028      	beq.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036b2:	035b      	lsls	r3, r3, #13
 80036b4:	430b      	orrs	r3, r1
 80036b6:	431a      	orrs	r2, r3
 80036b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036c0:	f7ff ff50 	bl	8003564 <LL_ADC_IsEnabled>
 80036c4:	4604      	mov	r4, r0
 80036c6:	4823      	ldr	r0, [pc, #140]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036c8:	f7ff ff4c 	bl	8003564 <LL_ADC_IsEnabled>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4323      	orrs	r3, r4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d133      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036dc:	f023 030f 	bic.w	r3, r3, #15
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	6811      	ldr	r1, [r2, #0]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	6892      	ldr	r2, [r2, #8]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f0:	e024      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003702:	f7ff ff2f 	bl	8003564 <LL_ADC_IsEnabled>
 8003706:	4604      	mov	r4, r0
 8003708:	4812      	ldr	r0, [pc, #72]	; (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800370a:	f7ff ff2b 	bl	8003564 <LL_ADC_IsEnabled>
 800370e:	4603      	mov	r3, r0
 8003710:	4323      	orrs	r3, r4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d112      	bne.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800371e:	f023 030f 	bic.w	r3, r3, #15
 8003722:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003724:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003726:	e009      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800373a:	e000      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800373c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003746:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800374a:	4618      	mov	r0, r3
 800374c:	3784      	adds	r7, #132	; 0x84
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop
 8003754:	50000100 	.word	0x50000100
 8003758:	50000300 	.word	0x50000300

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378e:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	60d3      	str	r3, [r2, #12]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff8e 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff29 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003920:	f7ff ff40 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 8003924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff90 	bl	8003850 <NVIC_EncodePriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff5f 	bl	80037fc <__NVIC_SetPriority>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff33 	bl	80037c0 <__NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffa4 	bl	80038b8 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e08d      	b.n	8003aaa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <HAL_DMA_Init+0x138>)
 8003996:	429a      	cmp	r2, r3
 8003998:	d80f      	bhi.n	80039ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	4b45      	ldr	r3, [pc, #276]	; (8003ab8 <HAL_DMA_Init+0x13c>)
 80039a2:	4413      	add	r3, r2
 80039a4:	4a45      	ldr	r2, [pc, #276]	; (8003abc <HAL_DMA_Init+0x140>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	009a      	lsls	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a42      	ldr	r2, [pc, #264]	; (8003ac0 <HAL_DMA_Init+0x144>)
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
 80039b8:	e00e      	b.n	80039d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <HAL_DMA_Init+0x148>)
 80039c2:	4413      	add	r3, r2
 80039c4:	4a3d      	ldr	r2, [pc, #244]	; (8003abc <HAL_DMA_Init+0x140>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	009a      	lsls	r2, r3, #2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a3c      	ldr	r2, [pc, #240]	; (8003ac8 <HAL_DMA_Init+0x14c>)
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa1e 	bl	8003e6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a38:	d102      	bne.n	8003a40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d010      	beq.n	8003a80 <HAL_DMA_Init+0x104>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d80c      	bhi.n	8003a80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa3e 	bl	8003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	e008      	b.n	8003a92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40020407 	.word	0x40020407
 8003ab8:	bffdfff8 	.word	0xbffdfff8
 8003abc:	cccccccd 	.word	0xcccccccd
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	bffdfbf8 	.word	0xbffdfbf8
 8003ac8:	40020400 	.word	0x40020400

08003acc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_DMA_Start_IT+0x20>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e066      	b.n	8003bba <HAL_DMA_Start_IT+0xee>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d155      	bne.n	8003bac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f962 	bl	8003dee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 020e 	orr.w	r2, r2, #14
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e00f      	b.n	8003b64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0204 	bic.w	r2, r2, #4
 8003b52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 020a 	orr.w	r2, r2, #10
 8003b62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e005      	b.n	8003bb8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e047      	b.n	8003c86 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 020e 	bic.w	r2, r2, #14
 8003c04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f003 021f 	and.w	r2, r3, #31
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2101      	movs	r1, #1
 8003c34:	fa01 f202 	lsl.w	r2, r1, r2
 8003c38:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c42:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00c      	beq.n	8003c66 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c64:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
    }
  }
  return status;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d026      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x7a>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d021      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d071      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d08:	e06c      	b.n	8003de4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	2202      	movs	r2, #2
 8003d14:	409a      	lsls	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d02e      	beq.n	8003d7c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d029      	beq.n	8003d7c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 020a 	bic.w	r2, r2, #10
 8003d44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f003 021f 	and.w	r2, r3, #31
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d60:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d038      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d7a:	e033      	b.n	8003de4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2208      	movs	r2, #8
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d025      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 020e 	bic.w	r2, r2, #14
 8003da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f003 021f 	and.w	r2, r3, #31
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2101      	movs	r1, #1
 8003db8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
}
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e04:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e16:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d108      	bne.n	8003e4e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e4c:	e007      	b.n	8003e5e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d802      	bhi.n	8003e86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e80:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e001      	b.n	8003e8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e88:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	3b08      	subs	r3, #8
 8003e96:	4a12      	ldr	r2, [pc, #72]	; (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	089b      	lsrs	r3, r3, #2
 8003ea6:	009a      	lsls	r2, r3, #2
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003eb6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40020407 	.word	0x40020407
 8003ed8:	40020800 	.word	0x40020800
 8003edc:	40020820 	.word	0x40020820
 8003ee0:	cccccccd 	.word	0xcccccccd
 8003ee4:	40020880 	.word	0x40020880

08003ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	461a      	mov	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f0a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2201      	movs	r2, #1
 8003f16:	409a      	lsls	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	1000823f 	.word	0x1000823f
 8003f2c:	40020940 	.word	0x40020940

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f3e:	e15a      	b.n	80041f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 814c 	beq.w	80041f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d005      	beq.n	8003f70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d130      	bne.n	8003fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0201 	and.w	r2, r3, #1
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d017      	beq.n	800400e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2203      	movs	r2, #3
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d123      	bne.n	8004062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	08da      	lsrs	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3208      	adds	r2, #8
 8004022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	220f      	movs	r2, #15
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	08da      	lsrs	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3208      	adds	r2, #8
 800405c:	6939      	ldr	r1, [r7, #16]
 800405e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0203 	and.w	r2, r3, #3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80a6 	beq.w	80041f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a4:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <HAL_GPIO_Init+0x2e4>)
 80040a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a8:	4a5a      	ldr	r2, [pc, #360]	; (8004214 <HAL_GPIO_Init+0x2e4>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6613      	str	r3, [r2, #96]	; 0x60
 80040b0:	4b58      	ldr	r3, [pc, #352]	; (8004214 <HAL_GPIO_Init+0x2e4>)
 80040b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040bc:	4a56      	ldr	r2, [pc, #344]	; (8004218 <HAL_GPIO_Init+0x2e8>)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	220f      	movs	r2, #15
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040e6:	d01f      	beq.n	8004128 <HAL_GPIO_Init+0x1f8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a4c      	ldr	r2, [pc, #304]	; (800421c <HAL_GPIO_Init+0x2ec>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d019      	beq.n	8004124 <HAL_GPIO_Init+0x1f4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a4b      	ldr	r2, [pc, #300]	; (8004220 <HAL_GPIO_Init+0x2f0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <HAL_GPIO_Init+0x1f0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a4a      	ldr	r2, [pc, #296]	; (8004224 <HAL_GPIO_Init+0x2f4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00d      	beq.n	800411c <HAL_GPIO_Init+0x1ec>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a49      	ldr	r2, [pc, #292]	; (8004228 <HAL_GPIO_Init+0x2f8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <HAL_GPIO_Init+0x1e8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a48      	ldr	r2, [pc, #288]	; (800422c <HAL_GPIO_Init+0x2fc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <HAL_GPIO_Init+0x1e4>
 8004110:	2305      	movs	r3, #5
 8004112:	e00a      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004114:	2306      	movs	r3, #6
 8004116:	e008      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004118:	2304      	movs	r3, #4
 800411a:	e006      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 800411c:	2303      	movs	r3, #3
 800411e:	e004      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004120:	2302      	movs	r3, #2
 8004122:	e002      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_GPIO_Init+0x1fa>
 8004128:	2300      	movs	r3, #0
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	f002 0203 	and.w	r2, r2, #3
 8004130:	0092      	lsls	r2, r2, #2
 8004132:	4093      	lsls	r3, r2
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800413a:	4937      	ldr	r1, [pc, #220]	; (8004218 <HAL_GPIO_Init+0x2e8>)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_GPIO_Init+0x300>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800416c:	4a30      	ldr	r2, [pc, #192]	; (8004230 <HAL_GPIO_Init+0x300>)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004172:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <HAL_GPIO_Init+0x300>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004196:	4a26      	ldr	r2, [pc, #152]	; (8004230 <HAL_GPIO_Init+0x300>)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800419c:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_GPIO_Init+0x300>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_GPIO_Init+0x300>)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <HAL_GPIO_Init+0x300>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ea:	4a11      	ldr	r2, [pc, #68]	; (8004230 <HAL_GPIO_Init+0x300>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3301      	adds	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	f47f ae9d 	bne.w	8003f40 <HAL_GPIO_Init+0x10>
  }
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40021000 	.word	0x40021000
 8004218:	40010000 	.word	0x40010000
 800421c:	48000400 	.word	0x48000400
 8004220:	48000800 	.word	0x48000800
 8004224:	48000c00 	.word	0x48000c00
 8004228:	48001000 	.word	0x48001000
 800422c:	48001400 	.word	0x48001400
 8004230:	40010400 	.word	0x40010400

08004234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800424a:	4a05      	ldr	r2, [pc, #20]	; (8004260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd f9ba 	bl	80015cc <HAL_GPIO_EXTI_Callback>
  }
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40010400 	.word	0x40010400

08004264 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0c0      	b.n	80043f8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f008 fa68 	bl	800c760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2203      	movs	r2, #3
 8004294:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f004 faee 	bl	800887e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	e03e      	b.n	8004326 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	440b      	add	r3, r1
 80042b6:	3311      	adds	r3, #17
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	440b      	add	r3, r1
 80042ca:	3310      	adds	r3, #16
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	3313      	adds	r3, #19
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	3320      	adds	r3, #32
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	440b      	add	r3, r1
 8004306:	3324      	adds	r3, #36	; 0x24
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	3301      	adds	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	791b      	ldrb	r3, [r3, #4]
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	429a      	cmp	r2, r3
 800432e:	d3bb      	bcc.n	80042a8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	e044      	b.n	80043c0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004336:	7bfa      	ldrb	r2, [r7, #15]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	440b      	add	r3, r1
 8004344:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	440b      	add	r3, r1
 800435a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	440b      	add	r3, r1
 8004370:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	440b      	add	r3, r1
 8004386:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	440b      	add	r3, r1
 800439c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043a4:	7bfa      	ldrb	r2, [r7, #15]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	3301      	adds	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	791b      	ldrb	r3, [r3, #4]
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3b5      	bcc.n	8004336 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80043d6:	f004 fa6d 	bl	80088b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7a9b      	ldrb	r3, [r3, #10]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d102      	bne.n	80043f6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f001 fc29 	bl	8005c48 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_PCD_Start+0x16>
 8004412:	2302      	movs	r3, #2
 8004414:	e012      	b.n	800443c <HAL_PCD_Start+0x3c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f004 fa14 	bl	8008850 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f006 fcd4 	bl	800adda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f006 fcd9 	bl	800ae08 <USB_ReadInterrupts>
 8004456:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 faec 	bl	8004a40 <PCD_EP_ISR_Handler>

    return;
 8004468:	e110      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d013      	beq.n	800449c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004486:	b292      	uxth	r2, r2
 8004488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f008 f9f8 	bl	800c882 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004492:	2100      	movs	r1, #0
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f8fc 	bl	8004692 <HAL_PCD_SetAddress>

    return;
 800449a:	e0f7      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044b8:	b292      	uxth	r2, r2
 80044ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80044be:	e0e5      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044dc:	b292      	uxth	r2, r2
 80044de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80044e2:	e0d3      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d034      	beq.n	8004558 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0204 	bic.w	r2, r2, #4
 8004500:	b292      	uxth	r2, r2
 8004502:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800450e:	b29a      	uxth	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0208 	bic.w	r2, r2, #8
 8004518:	b292      	uxth	r2, r2
 800451a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004524:	2b01      	cmp	r3, #1
 8004526:	d107      	bne.n	8004538 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004530:	2100      	movs	r1, #0
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f008 fb74 	bl	800cc20 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f008 f9db 	bl	800c8f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004550:	b292      	uxth	r2, r2
 8004552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004556:	e099      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	2b00      	cmp	r3, #0
 8004560:	d027      	beq.n	80045b2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0208 	orr.w	r2, r2, #8
 8004574:	b292      	uxth	r2, r2
 8004576:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458c:	b292      	uxth	r2, r2
 800458e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0204 	orr.w	r2, r2, #4
 80045a4:	b292      	uxth	r2, r2
 80045a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f008 f988 	bl	800c8c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045b0:	e06c      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d040      	beq.n	800463e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ce:	b292      	uxth	r2, r2
 80045d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d12b      	bne.n	8004636 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0204 	orr.w	r2, r2, #4
 80045f0:	b292      	uxth	r2, r2
 80045f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0208 	orr.w	r2, r2, #8
 8004608:	b292      	uxth	r2, r2
 800460a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800461e:	b29b      	uxth	r3, r3
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800462c:	2101      	movs	r1, #1
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f008 faf6 	bl	800cc20 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004634:	e02a      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f008 f942 	bl	800c8c0 <HAL_PCD_SuspendCallback>
    return;
 800463c:	e026      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00f      	beq.n	8004668 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800465a:	b292      	uxth	r2, r2
 800465c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f008 f900 	bl	800c866 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004666:	e011      	b.n	800468c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00c      	beq.n	800468c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004684:	b292      	uxth	r2, r2
 8004686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800468a:	bf00      	nop
  }
}
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_PCD_SetAddress+0x1a>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e012      	b.n	80046d2 <HAL_PCD_SetAddress+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f006 fb75 	bl	800adb2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	461a      	mov	r2, r3
 80046e8:	4603      	mov	r3, r0
 80046ea:	70fb      	strb	r3, [r7, #3]
 80046ec:	460b      	mov	r3, r1
 80046ee:	803b      	strh	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da0e      	bge.n	800471e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 0207 	and.w	r2, r3, #7
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	3310      	adds	r3, #16
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	705a      	strb	r2, [r3, #1]
 800471c:	e00e      	b.n	800473c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 0207 	and.w	r2, r3, #7
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004748:	883a      	ldrh	r2, [r7, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	78ba      	ldrb	r2, [r7, #2]
 8004752:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004754:	78bb      	ldrb	r3, [r7, #2]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d102      	bne.n	8004760 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_PCD_EP_Open+0x94>
 800476a:	2302      	movs	r3, #2
 800476c:	e00e      	b.n	800478c <HAL_PCD_EP_Open+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	4618      	mov	r0, r3
 800477e:	f004 f8b7 	bl	80088f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800478a:	7afb      	ldrb	r3, [r7, #11]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da0e      	bge.n	80047c6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	f003 0207 	and.w	r2, r3, #7
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	3310      	adds	r3, #16
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4413      	add	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	705a      	strb	r2, [r3, #1]
 80047c4:	e00e      	b.n	80047e4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047c6:	78fb      	ldrb	r3, [r7, #3]
 80047c8:	f003 0207 	and.w	r2, r3, #7
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4413      	add	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_PCD_EP_Close+0x6a>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e00e      	b.n	800481c <HAL_PCD_EP_Close+0x88>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	4618      	mov	r0, r3
 800480e:	f004 fc33 	bl	8009078 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	460b      	mov	r3, r1
 8004832:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004834:	7afb      	ldrb	r3, [r7, #11]
 8004836:	f003 0207 	and.w	r2, r3, #7
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2200      	movs	r2, #0
 800485c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004864:	7afb      	ldrb	r3, [r7, #11]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	b2da      	uxtb	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	4618      	mov	r0, r3
 8004878:	f004 fdeb 	bl	8009452 <USB_EPStartXfer>

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b086      	sub	sp, #24
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	460b      	mov	r3, r1
 8004894:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004896:	7afb      	ldrb	r3, [r7, #11]
 8004898:	f003 0207 	and.w	r2, r3, #7
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	3310      	adds	r3, #16
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2201      	movs	r2, #1
 80048d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6979      	ldr	r1, [r7, #20]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f004 fdb4 	bl	8009452 <USB_EPStartXfer>

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	7912      	ldrb	r2, [r2, #4]
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e03e      	b.n	8004990 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004916:	2b00      	cmp	r3, #0
 8004918:	da0e      	bge.n	8004938 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 0207 	and.w	r2, r3, #7
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	3310      	adds	r3, #16
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4413      	add	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	705a      	strb	r2, [r3, #1]
 8004936:	e00c      	b.n	8004952 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_PCD_EP_SetStall+0x7e>
 800496e:	2302      	movs	r3, #2
 8004970:	e00e      	b.n	8004990 <HAL_PCD_EP_SetStall+0x9c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	4618      	mov	r0, r3
 8004982:	f006 f917 	bl	800abb4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	7912      	ldrb	r2, [r2, #4]
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e040      	b.n	8004a38 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da0e      	bge.n	80049dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	f003 0207 	and.w	r2, r3, #7
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	3310      	adds	r3, #16
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	705a      	strb	r2, [r3, #1]
 80049da:	e00e      	b.n	80049fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 0207 	and.w	r2, r3, #7
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_PCD_EP_ClrStall+0x82>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e00e      	b.n	8004a38 <HAL_PCD_EP_ClrStall+0xa0>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68f9      	ldr	r1, [r7, #12]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f006 f914 	bl	800ac56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b096      	sub	sp, #88	; 0x58
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a48:	e3ae      	b.n	80051a8 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004a64:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 8170 	bne.w	8004d4e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d14d      	bne.n	8004b16 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	81fb      	strh	r3, [r7, #14]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	89fb      	ldrh	r3, [r7, #14]
 8004a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	4413      	add	r3, r2
 8004abe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	441a      	add	r2, r3
 8004ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ada:	2100      	movs	r1, #0
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f007 fea8 	bl	800c832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7b1b      	ldrb	r3, [r3, #12]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 835d 	beq.w	80051a8 <PCD_EP_ISR_Handler+0x768>
 8004aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8358 	bne.w	80051a8 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	7b1b      	ldrb	r3, [r3, #12]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b292      	uxth	r2, r2
 8004b0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	731a      	strb	r2, [r3, #12]
 8004b14:	e348      	b.n	80051a8 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b1c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d032      	beq.n	8004b9a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b68:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f006 f99c 	bl	800aeac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b80:	4013      	ands	r3, r2
 8004b82:	823b      	strh	r3, [r7, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	8a3a      	ldrh	r2, [r7, #16]
 8004b8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b8e:	b292      	uxth	r2, r2
 8004b90:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f007 fe20 	bl	800c7d8 <HAL_PCD_SetupStageCallback>
 8004b98:	e306      	b.n	80051a8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b9a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f280 8302 	bge.w	80051a8 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	83fb      	strh	r3, [r7, #30]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	8bfa      	ldrh	r2, [r7, #30]
 8004bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d019      	beq.n	8004c26 <PCD_EP_ISR_Handler+0x1e6>
 8004bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d015      	beq.n	8004c26 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c00:	6959      	ldr	r1, [r3, #20]
 8004c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c04:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c08:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f006 f94e 	bl	800aeac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	441a      	add	r2, r3
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f007 fdeb 	bl	800c7fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004c30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 82b5 	bne.w	80051a8 <PCD_EP_ISR_Handler+0x768>
 8004c3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c4a:	f000 82ad 	beq.w	80051a8 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4413      	add	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b3e      	cmp	r3, #62	; 0x3e
 8004c84:	d91d      	bls.n	8004cc2 <PCD_EP_ISR_Handler+0x282>
 8004c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <PCD_EP_ISR_Handler+0x260>
 8004c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	029b      	lsls	r3, r3, #10
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	e026      	b.n	8004d10 <PCD_EP_ISR_Handler+0x2d0>
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <PCD_EP_ISR_Handler+0x2a0>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e017      	b.n	8004d10 <PCD_EP_ISR_Handler+0x2d0>
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <PCD_EP_ISR_Handler+0x2ba>
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d20:	827b      	strh	r3, [r7, #18]
 8004d22:	8a7b      	ldrh	r3, [r7, #18]
 8004d24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d28:	827b      	strh	r3, [r7, #18]
 8004d2a:	8a7b      	ldrh	r3, [r7, #18]
 8004d2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d30:	827b      	strh	r3, [r7, #18]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	8a7b      	ldrh	r3, [r7, #18]
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]
 8004d4c:	e22c      	b.n	80051a8 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d62:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f280 80f6 	bge.w	8004f58 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d82:	4013      	ands	r3, r2
 8004d84:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d9e:	b292      	uxth	r2, r2
 8004da0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004da2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dba:	7b1b      	ldrb	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d123      	bne.n	8004e08 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004de8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 808e 	beq.w	8004f0e <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df8:	6959      	ldr	r1, [r3, #20]
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfc:	88da      	ldrh	r2, [r3, #6]
 8004dfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004e02:	f006 f853 	bl	800aeac <USB_ReadPMA>
 8004e06:	e082      	b.n	8004f0e <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e0a:	78db      	ldrb	r3, [r3, #3]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d10a      	bne.n	8004e26 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004e10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e14:	461a      	mov	r2, r3
 8004e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f9d3 	bl	80051c4 <HAL_PCD_EP_DB_Receive>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004e24:	e073      	b.n	8004f0e <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e40:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d022      	beq.n	8004eca <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ea8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004eac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d02c      	beq.n	8004f0e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eba:	6959      	ldr	r1, [r3, #20]
 8004ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ebe:	891a      	ldrh	r2, [r3, #8]
 8004ec0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ec4:	f005 fff2 	bl	800aeac <USB_ReadPMA>
 8004ec8:	e021      	b.n	8004f0e <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4413      	add	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004ef2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f00:	6959      	ldr	r1, [r3, #20]
 8004f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f04:	895a      	ldrh	r2, [r3, #10]
 8004f06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f0a:	f005 ffcf 	bl	800aeac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f16:	441a      	add	r2, r3
 8004f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f24:	441a      	add	r2, r3
 8004f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f28:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <PCD_EP_ISR_Handler+0x4fe>
 8004f32:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d206      	bcs.n	8004f4c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f007 fc59 	bl	800c7fc <HAL_PCD_DataOutStageCallback>
 8004f4a:	e005      	b.n	8004f58 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f52:	4618      	mov	r0, r3
 8004f54:	f004 fa7d 	bl	8009452 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8121 	beq.w	80051a8 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f66:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	3310      	adds	r3, #16
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb8:	78db      	ldrb	r3, [r3, #3]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	f040 80a2 	bne.w	8005104 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc8:	7b1b      	ldrb	r3, [r3, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 8093 	beq.w	80050f6 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d046      	beq.n	800506a <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d126      	bne.n	8005032 <PCD_EP_ISR_Handler+0x5f2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	4413      	add	r3, r2
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	00da      	lsls	r2, r3, #3
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	4413      	add	r3, r2
 8005006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005016:	b29a      	uxth	r2, r3
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502a:	b29a      	uxth	r2, r3
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e061      	b.n	80050f6 <PCD_EP_ISR_Handler+0x6b6>
 8005032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d15d      	bne.n	80050f6 <PCD_EP_ISR_Handler+0x6b6>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005048:	b29b      	uxth	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	4413      	add	r3, r2
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	00da      	lsls	r2, r3, #3
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	4413      	add	r3, r2
 800505c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	2200      	movs	r2, #0
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	e045      	b.n	80050f6 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d126      	bne.n	80050c6 <PCD_EP_ISR_Handler+0x686>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005086:	b29b      	uxth	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	4413      	add	r3, r2
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
 8005090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	00da      	lsls	r2, r3, #3
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	4413      	add	r3, r2
 800509a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800509e:	633b      	str	r3, [r7, #48]	; 0x30
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	801a      	strh	r2, [r3, #0]
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050be:	b29a      	uxth	r2, r3
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	e017      	b.n	80050f6 <PCD_EP_ISR_Handler+0x6b6>
 80050c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d113      	bne.n	80050f6 <PCD_EP_ISR_Handler+0x6b6>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050dc:	4413      	add	r3, r2
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	00da      	lsls	r2, r3, #3
 80050e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e8:	4413      	add	r3, r2
 80050ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	2200      	movs	r2, #0
 80050f4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f007 fb98 	bl	800c832 <HAL_PCD_DataInStageCallback>
 8005102:	e051      	b.n	80051a8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d144      	bne.n	800519a <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005118:	b29b      	uxth	r3, r3
 800511a:	461a      	mov	r2, r3
 800511c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4413      	add	r3, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	4413      	add	r3, r2
 800512a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005134:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005140:	429a      	cmp	r2, r3
 8005142:	d907      	bls.n	8005154 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8005144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800514c:	1ad2      	subs	r2, r2, r3
 800514e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005150:	619a      	str	r2, [r3, #24]
 8005152:	e002      	b.n	800515a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005156:	2200      	movs	r2, #0
 8005158:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800515a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	4619      	mov	r1, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f007 fb62 	bl	800c832 <HAL_PCD_DataInStageCallback>
 800516e:	e01b      	b.n	80051a8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005178:	441a      	add	r2, r3
 800517a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800517c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800517e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005186:	441a      	add	r2, r3
 8005188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005192:	4618      	mov	r0, r3
 8005194:	f004 f95d 	bl	8009452 <USB_EPStartXfer>
 8005198:	e006      	b.n	80051a8 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800519a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800519e:	461a      	mov	r2, r3
 80051a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f917 	bl	80053d6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	b21b      	sxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f6ff ac48 	blt.w	8004a4a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3758      	adds	r7, #88	; 0x58
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d07c      	beq.n	80052d6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	4413      	add	r3, r2
 80051f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005200:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	8b7b      	ldrh	r3, [r7, #26]
 8005208:	429a      	cmp	r2, r3
 800520a:	d306      	bcc.n	800521a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	8b7b      	ldrh	r3, [r7, #26]
 8005212:	1ad2      	subs	r2, r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	619a      	str	r2, [r3, #24]
 8005218:	e002      	b.n	8005220 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2200      	movs	r2, #0
 800521e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d123      	bne.n	8005270 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	833b      	strh	r3, [r7, #24]
 8005244:	8b3b      	ldrh	r3, [r7, #24]
 8005246:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800524a:	833b      	strh	r3, [r7, #24]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	8b3b      	ldrh	r3, [r7, #24]
 800525c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	b29b      	uxth	r3, r3
 800526e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01f      	beq.n	80052ba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005294:	82fb      	strh	r3, [r7, #22]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	8afb      	ldrh	r3, [r7, #22]
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80052ba:	8b7b      	ldrh	r3, [r7, #26]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8085 	beq.w	80053cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	6959      	ldr	r1, [r3, #20]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	891a      	ldrh	r2, [r3, #8]
 80052ce:	8b7b      	ldrh	r3, [r7, #26]
 80052d0:	f005 fdec 	bl	800aeac <USB_ReadPMA>
 80052d4:	e07a      	b.n	80053cc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052de:	b29b      	uxth	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	4413      	add	r3, r2
 80052f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	8b7b      	ldrh	r3, [r7, #26]
 8005302:	429a      	cmp	r2, r3
 8005304:	d306      	bcc.n	8005314 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	8b7b      	ldrh	r3, [r7, #26]
 800530c:	1ad2      	subs	r2, r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	619a      	str	r2, [r3, #24]
 8005312:	e002      	b.n	800531a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d123      	bne.n	800536a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	83fb      	strh	r3, [r7, #30]
 800533e:	8bfb      	ldrh	r3, [r7, #30]
 8005340:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005344:	83fb      	strh	r3, [r7, #30]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	8bfb      	ldrh	r3, [r7, #30]
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d11f      	bne.n	80053b4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	83bb      	strh	r3, [r7, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	8bbb      	ldrh	r3, [r7, #28]
 80053a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053b4:	8b7b      	ldrh	r3, [r7, #26]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6959      	ldr	r1, [r3, #20]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	895a      	ldrh	r2, [r3, #10]
 80053c6:	8b7b      	ldrh	r3, [r7, #26]
 80053c8:	f005 fd70 	bl	800aeac <USB_ReadPMA>
    }
  }

  return count;
 80053cc:	8b7b      	ldrh	r3, [r7, #26]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b0a4      	sub	sp, #144	; 0x90
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	4613      	mov	r3, r2
 80053e2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053e4:	88fb      	ldrh	r3, [r7, #6]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 81db 	beq.w	80057a6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4413      	add	r3, r2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	4413      	add	r3, r2
 800540a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005414:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005420:	429a      	cmp	r2, r3
 8005422:	d907      	bls.n	8005434 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	699a      	ldr	r2, [r3, #24]
 8005428:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800542c:	1ad2      	subs	r2, r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	619a      	str	r2, [r3, #24]
 8005432:	e002      	b.n	800543a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2200      	movs	r2, #0
 8005438:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f040 80b9 	bne.w	80055b6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d126      	bne.n	800549a <HAL_PCD_EP_DB_Transmit+0xc4>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	4413      	add	r3, r2
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	00da      	lsls	r2, r3, #3
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	4413      	add	r3, r2
 800546e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800547e:	b29a      	uxth	r2, r3
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005492:	b29a      	uxth	r2, r3
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	e01a      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d116      	bne.n	80054d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b6:	4413      	add	r3, r2
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	00da      	lsls	r2, r3, #3
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	4413      	add	r3, r2
 80054c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054c8:	633b      	str	r3, [r7, #48]	; 0x30
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	2200      	movs	r2, #0
 80054ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d126      	bne.n	800552c <HAL_PCD_EP_DB_Transmit+0x156>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	00da      	lsls	r2, r3, #3
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005510:	b29a      	uxth	r2, r3
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005524:	b29a      	uxth	r2, r3
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	801a      	strh	r2, [r3, #0]
 800552a:	e017      	b.n	800555c <HAL_PCD_EP_DB_Transmit+0x186>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d113      	bne.n	800555c <HAL_PCD_EP_DB_Transmit+0x186>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800553c:	b29b      	uxth	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	4413      	add	r3, r2
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	00da      	lsls	r2, r3, #3
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	4413      	add	r3, r2
 8005550:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	2200      	movs	r2, #0
 800555a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f007 f965 	bl	800c832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 82fa 	beq.w	8005b68 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	82fb      	strh	r3, [r7, #22]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	441a      	add	r2, r3
 800559e:	8afb      	ldrh	r3, [r7, #22]
 80055a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	8013      	strh	r3, [r2, #0]
 80055b4:	e2d8      	b.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d021      	beq.n	8005604 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	441a      	add	r2, r3
 80055ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80055f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005600:	b29b      	uxth	r3, r3
 8005602:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800560a:	2b01      	cmp	r3, #1
 800560c:	f040 82ac 	bne.w	8005b68 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005618:	441a      	add	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	69da      	ldr	r2, [r3, #28]
 8005622:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005626:	441a      	add	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	429a      	cmp	r2, r3
 8005636:	d30b      	bcc.n	8005650 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005648:	1ad2      	subs	r2, r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	621a      	str	r2, [r3, #32]
 800564e:	e017      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d108      	bne.n	800566a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005658:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800565c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005668:	e00a      	b.n	8005680 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d165      	bne.n	8005754 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005696:	b29b      	uxth	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569c:	4413      	add	r3, r2
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	00da      	lsls	r2, r3, #3
 80056a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a8:	4413      	add	r3, r2
 80056aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056c4:	2b3e      	cmp	r3, #62	; 0x3e
 80056c6:	d91d      	bls.n	8005704 <HAL_PCD_EP_DB_Transmit+0x32e>
 80056c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80056d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_PCD_EP_DB_Transmit+0x30c>
 80056dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056de:	3b01      	subs	r3, #1
 80056e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	029b      	lsls	r3, r3, #10
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e044      	b.n	800578e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <HAL_PCD_EP_DB_Transmit+0x34c>
 800570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571a:	b29a      	uxth	r2, r3
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e035      	b.n	800578e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	64bb      	str	r3, [r7, #72]	; 0x48
 800572a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_PCD_EP_DB_Transmit+0x366>
 8005736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005738:	3301      	adds	r3, #1
 800573a:	64bb      	str	r3, [r7, #72]	; 0x48
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29a      	uxth	r2, r3
 8005742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005744:	b29b      	uxth	r3, r3
 8005746:	029b      	lsls	r3, r3, #10
 8005748:	b29b      	uxth	r3, r3
 800574a:	4313      	orrs	r3, r2
 800574c:	b29a      	uxth	r2, r3
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	e01c      	b.n	800578e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d118      	bne.n	800578e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576a:	b29b      	uxth	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005770:	4413      	add	r3, r2
 8005772:	647b      	str	r3, [r7, #68]	; 0x44
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	00da      	lsls	r2, r3, #3
 800577a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577c:	4413      	add	r3, r2
 800577e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005782:	643b      	str	r3, [r7, #64]	; 0x40
 8005784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005788:	b29a      	uxth	r2, r3
 800578a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6959      	ldr	r1, [r3, #20]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	891a      	ldrh	r2, [r3, #8]
 800579a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f005 fb42 	bl	800ae28 <USB_WritePMA>
 80057a4:	e1e0      	b.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d307      	bcc.n	80057ea <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	619a      	str	r2, [r3, #24]
 80057e8:	e002      	b.n	80057f0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2200      	movs	r2, #0
 80057ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f040 80c0 	bne.w	800597a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d126      	bne.n	8005850 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005816:	4413      	add	r3, r2
 8005818:	67fb      	str	r3, [r7, #124]	; 0x7c
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	00da      	lsls	r2, r3, #3
 8005820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005822:	4413      	add	r3, r2
 8005824:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005828:	67bb      	str	r3, [r7, #120]	; 0x78
 800582a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005834:	b29a      	uxth	r2, r3
 8005836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005848:	b29a      	uxth	r2, r3
 800584a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e01a      	b.n	8005886 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d116      	bne.n	8005886 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	667b      	str	r3, [r7, #100]	; 0x64
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005866:	b29b      	uxth	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586c:	4413      	add	r3, r2
 800586e:	667b      	str	r3, [r7, #100]	; 0x64
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	00da      	lsls	r2, r3, #3
 8005876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005878:	4413      	add	r3, r2
 800587a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800587e:	663b      	str	r3, [r7, #96]	; 0x60
 8005880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005882:	2200      	movs	r2, #0
 8005884:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	677b      	str	r3, [r7, #116]	; 0x74
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d12b      	bne.n	80058ec <HAL_PCD_EP_DB_Transmit+0x516>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	66fb      	str	r3, [r7, #108]	; 0x6c
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	4413      	add	r3, r2
 80058aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	00da      	lsls	r2, r3, #3
 80058b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b4:	4413      	add	r3, r2
 80058b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	e017      	b.n	800591c <HAL_PCD_EP_DB_Transmit+0x546>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d113      	bne.n	800591c <HAL_PCD_EP_DB_Transmit+0x546>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005902:	4413      	add	r3, r2
 8005904:	677b      	str	r3, [r7, #116]	; 0x74
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	00da      	lsls	r2, r3, #3
 800590c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800590e:	4413      	add	r3, r2
 8005910:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005914:	673b      	str	r3, [r7, #112]	; 0x70
 8005916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005918:	2200      	movs	r2, #0
 800591a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	4619      	mov	r1, r3
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f006 ff85 	bl	800c832 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 811a 	bne.w	8005b68 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	441a      	add	r2, r3
 8005960:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
 8005978:	e0f6      	b.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d121      	bne.n	80059c8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	441a      	add	r2, r3
 80059b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	f040 80ca 	bne.w	8005b68 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059dc:	441a      	add	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059ea:	441a      	add	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6a1a      	ldr	r2, [r3, #32]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d30b      	bcc.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a0c:	1ad2      	subs	r2, r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	621a      	str	r2, [r3, #32]
 8005a12:	e017      	b.n	8005a44 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d108      	bne.n	8005a2e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005a1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a2c:	e00a      	b.n	8005a44 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	657b      	str	r3, [r7, #84]	; 0x54
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d165      	bne.n	8005b1e <HAL_PCD_EP_DB_Transmit+0x748>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a66:	4413      	add	r3, r2
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	00da      	lsls	r2, r3, #3
 8005a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a72:	4413      	add	r3, r2
 8005a74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a78:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a90:	d91d      	bls.n	8005ace <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	029b      	lsls	r3, r3, #10
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	4313      	orrs	r3, r2
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	e041      	b.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <HAL_PCD_EP_DB_Transmit+0x716>
 8005ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e032      	b.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_PCD_EP_DB_Transmit+0x730>
 8005b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b02:	3301      	adds	r3, #1
 8005b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	e019      	b.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d115      	bne.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b34:	4413      	add	r3, r2
 8005b36:	657b      	str	r3, [r7, #84]	; 0x54
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	00da      	lsls	r2, r3, #3
 8005b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b46:	653b      	str	r3, [r7, #80]	; 0x50
 8005b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b50:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6959      	ldr	r1, [r3, #20]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	895a      	ldrh	r2, [r3, #10]
 8005b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f005 f960 	bl	800ae28 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b82:	82bb      	strh	r3, [r7, #20]
 8005b84:	8abb      	ldrh	r3, [r7, #20]
 8005b86:	f083 0310 	eor.w	r3, r3, #16
 8005b8a:	82bb      	strh	r3, [r7, #20]
 8005b8c:	8abb      	ldrh	r3, [r7, #20]
 8005b8e:	f083 0320 	eor.w	r3, r3, #32
 8005b92:	82bb      	strh	r3, [r7, #20]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	441a      	add	r2, r3
 8005ba2:	8abb      	ldrh	r3, [r7, #20]
 8005ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3790      	adds	r7, #144	; 0x90
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	817b      	strh	r3, [r7, #10]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005bd4:	897b      	ldrh	r3, [r7, #10]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005be0:	897b      	ldrh	r3, [r7, #10]
 8005be2:	f003 0207 	and.w	r2, r3, #7
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	3310      	adds	r3, #16
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e009      	b.n	8005c0c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bf8:	897a      	ldrh	r2, [r7, #10]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c0c:	893b      	ldrh	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d107      	bne.n	8005c22 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	80da      	strh	r2, [r3, #6]
 8005c20:	e00b      	b.n	8005c3a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2201      	movs	r2, #1
 8005c26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	0c1b      	lsrs	r3, r3, #16
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f043 0302 	orr.w	r3, r3, #2
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d141      	bne.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005caa:	4b4b      	ldr	r3, [pc, #300]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb6:	d131      	bne.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cb8:	4b47      	ldr	r3, [pc, #284]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cbe:	4a46      	ldr	r2, [pc, #280]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cc8:	4b43      	ldr	r3, [pc, #268]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cd0:	4a41      	ldr	r2, [pc, #260]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cd8:	4b40      	ldr	r3, [pc, #256]	; (8005ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2232      	movs	r2, #50	; 0x32
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	4a3f      	ldr	r2, [pc, #252]	; (8005de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	0c9b      	lsrs	r3, r3, #18
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cee:	e002      	b.n	8005cf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d02:	d102      	bne.n	8005d0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f2      	bne.n	8005cf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d0a:	4b33      	ldr	r3, [pc, #204]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d16:	d158      	bne.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e057      	b.n	8005dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d1c:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d22:	4a2d      	ldr	r2, [pc, #180]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d2c:	e04d      	b.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d34:	d141      	bne.n	8005dba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d36:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d42:	d131      	bne.n	8005da8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4a:	4a23      	ldr	r2, [pc, #140]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d54:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d64:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2232      	movs	r2, #50	; 0x32
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	0c9b      	lsrs	r3, r3, #18
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d7a:	e002      	b.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	d102      	bne.n	8005d96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f2      	bne.n	8005d7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da2:	d112      	bne.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e011      	b.n	8005dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dae:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005db8:	e007      	b.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005dc2:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	40007000 	.word	0x40007000
 8005ddc:	20000000 	.word	0x20000000
 8005de0:	431bde83 	.word	0x431bde83

08005de4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005df2:	6093      	str	r3, [r2, #8]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40007000 	.word	0x40007000

08005e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e2fe      	b.n	8006414 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d075      	beq.n	8005f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e22:	4b97      	ldr	r3, [pc, #604]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e2c:	4b94      	ldr	r3, [pc, #592]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d102      	bne.n	8005e42 <HAL_RCC_OscConfig+0x3e>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d002      	beq.n	8005e48 <HAL_RCC_OscConfig+0x44>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d10b      	bne.n	8005e60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	4b8d      	ldr	r3, [pc, #564]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d05b      	beq.n	8005f0c <HAL_RCC_OscConfig+0x108>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d157      	bne.n	8005f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e2d9      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	d106      	bne.n	8005e78 <HAL_RCC_OscConfig+0x74>
 8005e6a:	4b85      	ldr	r3, [pc, #532]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a84      	ldr	r2, [pc, #528]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCC_OscConfig+0xb0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0x98>
 8005e82:	4b7f      	ldr	r3, [pc, #508]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a7e      	ldr	r2, [pc, #504]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b7c      	ldr	r3, [pc, #496]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a7b      	ldr	r2, [pc, #492]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCC_OscConfig+0xb0>
 8005e9c:	4b78      	ldr	r3, [pc, #480]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a77      	ldr	r2, [pc, #476]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b75      	ldr	r3, [pc, #468]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a74      	ldr	r2, [pc, #464]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fb ff6a 	bl	8001d94 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fb ff66 	bl	8001d94 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e29e      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ed6:	4b6a      	ldr	r3, [pc, #424]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0xc0>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fb ff56 	bl	8001d94 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fb ff52 	bl	8001d94 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e28a      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005efe:	4b60      	ldr	r3, [pc, #384]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0xe8>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d075      	beq.n	8006006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f1a:	4b59      	ldr	r3, [pc, #356]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f24:	4b56      	ldr	r3, [pc, #344]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b0c      	cmp	r3, #12
 8005f32:	d102      	bne.n	8005f3a <HAL_RCC_OscConfig+0x136>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d002      	beq.n	8005f40 <HAL_RCC_OscConfig+0x13c>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d11f      	bne.n	8005f80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f40:	4b4f      	ldr	r3, [pc, #316]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_OscConfig+0x154>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e25d      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f58:	4b49      	ldr	r3, [pc, #292]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	4946      	ldr	r1, [pc, #280]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f6c:	4b45      	ldr	r3, [pc, #276]	; (8006084 <HAL_RCC_OscConfig+0x280>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fb fec3 	bl	8001cfc <HAL_InitTick>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d043      	beq.n	8006004 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e249      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d023      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f88:	4b3d      	ldr	r3, [pc, #244]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a3c      	ldr	r2, [pc, #240]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fb fefe 	bl	8001d94 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9c:	f7fb fefa 	bl	8001d94 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e232      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fae:	4b34      	ldr	r3, [pc, #208]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fba:	4b31      	ldr	r3, [pc, #196]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	492d      	ldr	r1, [pc, #180]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	604b      	str	r3, [r1, #4]
 8005fce:	e01a      	b.n	8006006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd0:	4b2b      	ldr	r3, [pc, #172]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fb feda 	bl	8001d94 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe4:	f7fb fed6 	bl	8001d94 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e20e      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ff6:	4b22      	ldr	r3, [pc, #136]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x1e0>
 8006002:	e000      	b.n	8006006 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006004:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d041      	beq.n	8006096 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01c      	beq.n	8006054 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601a:	4b19      	ldr	r3, [pc, #100]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 800601c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006020:	4a17      	ldr	r2, [pc, #92]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602a:	f7fb feb3 	bl	8001d94 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006032:	f7fb feaf 	bl	8001d94 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e1e7      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8006046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0ef      	beq.n	8006032 <HAL_RCC_OscConfig+0x22e>
 8006052:	e020      	b.n	8006096 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8006056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006064:	f7fb fe96 	bl	8001d94 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800606a:	e00d      	b.n	8006088 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800606c:	f7fb fe92 	bl	8001d94 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d906      	bls.n	8006088 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e1ca      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000
 8006084:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006088:	4b8c      	ldr	r3, [pc, #560]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1ea      	bne.n	800606c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 80a6 	beq.w	80061f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060a4:	2300      	movs	r3, #0
 80060a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060a8:	4b84      	ldr	r3, [pc, #528]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_RCC_OscConfig+0x2b4>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <HAL_RCC_OscConfig+0x2b6>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060be:	4b7f      	ldr	r3, [pc, #508]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c2:	4a7e      	ldr	r2, [pc, #504]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80060c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c8:	6593      	str	r3, [r2, #88]	; 0x58
 80060ca:	4b7c      	ldr	r3, [pc, #496]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80060cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060d6:	2301      	movs	r3, #1
 80060d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060da:	4b79      	ldr	r3, [pc, #484]	; (80062c0 <HAL_RCC_OscConfig+0x4bc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d118      	bne.n	8006118 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060e6:	4b76      	ldr	r3, [pc, #472]	; (80062c0 <HAL_RCC_OscConfig+0x4bc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a75      	ldr	r2, [pc, #468]	; (80062c0 <HAL_RCC_OscConfig+0x4bc>)
 80060ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060f2:	f7fb fe4f 	bl	8001d94 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fa:	f7fb fe4b 	bl	8001d94 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e183      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800610c:	4b6c      	ldr	r3, [pc, #432]	; (80062c0 <HAL_RCC_OscConfig+0x4bc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d108      	bne.n	8006132 <HAL_RCC_OscConfig+0x32e>
 8006120:	4b66      	ldr	r3, [pc, #408]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	4a65      	ldr	r2, [pc, #404]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006130:	e024      	b.n	800617c <HAL_RCC_OscConfig+0x378>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b05      	cmp	r3, #5
 8006138:	d110      	bne.n	800615c <HAL_RCC_OscConfig+0x358>
 800613a:	4b60      	ldr	r3, [pc, #384]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	4a5e      	ldr	r2, [pc, #376]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006142:	f043 0304 	orr.w	r3, r3, #4
 8006146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800614a:	4b5c      	ldr	r3, [pc, #368]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006150:	4a5a      	ldr	r2, [pc, #360]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800615a:	e00f      	b.n	800617c <HAL_RCC_OscConfig+0x378>
 800615c:	4b57      	ldr	r3, [pc, #348]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	4a56      	ldr	r2, [pc, #344]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800616c:	4b53      	ldr	r3, [pc, #332]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	4a52      	ldr	r2, [pc, #328]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006174:	f023 0304 	bic.w	r3, r3, #4
 8006178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d016      	beq.n	80061b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fb fe06 	bl	8001d94 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fb fe02 	bl	8001d94 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	; 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e138      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061a2:	4b46      	ldr	r3, [pc, #280]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80061a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0ed      	beq.n	800618c <HAL_RCC_OscConfig+0x388>
 80061b0:	e015      	b.n	80061de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b2:	f7fb fdef 	bl	8001d94 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061b8:	e00a      	b.n	80061d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ba:	f7fb fdeb 	bl	8001d94 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e121      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061d0:	4b3a      	ldr	r3, [pc, #232]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80061d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1ed      	bne.n	80061ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061de:	7ffb      	ldrb	r3, [r7, #31]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d105      	bne.n	80061f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e4:	4b35      	ldr	r3, [pc, #212]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80061e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e8:	4a34      	ldr	r2, [pc, #208]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80061ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d03c      	beq.n	8006276 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01c      	beq.n	800623e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006204:	4b2d      	ldr	r3, [pc, #180]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800620a:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7fb fdbe 	bl	8001d94 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800621c:	f7fb fdba 	bl	8001d94 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e0f2      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800622e:	4b23      	ldr	r3, [pc, #140]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0ef      	beq.n	800621c <HAL_RCC_OscConfig+0x418>
 800623c:	e01b      	b.n	8006276 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800623e:	4b1f      	ldr	r3, [pc, #124]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006244:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624e:	f7fb fda1 	bl	8001d94 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006256:	f7fb fd9d 	bl	8001d94 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e0d5      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006268:	4b14      	ldr	r3, [pc, #80]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800626a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1ef      	bne.n	8006256 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 80c9 	beq.w	8006412 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 030c 	and.w	r3, r3, #12
 8006288:	2b0c      	cmp	r3, #12
 800628a:	f000 8083 	beq.w	8006394 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d15e      	bne.n	8006354 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a08      	ldr	r2, [pc, #32]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800629c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a2:	f7fb fd77 	bl	8001d94 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062a8:	e00c      	b.n	80062c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062aa:	f7fb fd73 	bl	8001d94 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d905      	bls.n	80062c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e0ab      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
 80062bc:	40021000 	.word	0x40021000
 80062c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c4:	4b55      	ldr	r3, [pc, #340]	; (800641c <HAL_RCC_OscConfig+0x618>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ec      	bne.n	80062aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062d0:	4b52      	ldr	r3, [pc, #328]	; (800641c <HAL_RCC_OscConfig+0x618>)
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	4b52      	ldr	r3, [pc, #328]	; (8006420 <HAL_RCC_OscConfig+0x61c>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6a11      	ldr	r1, [r2, #32]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062e0:	3a01      	subs	r2, #1
 80062e2:	0112      	lsls	r2, r2, #4
 80062e4:	4311      	orrs	r1, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80062ea:	0212      	lsls	r2, r2, #8
 80062ec:	4311      	orrs	r1, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062f2:	0852      	lsrs	r2, r2, #1
 80062f4:	3a01      	subs	r2, #1
 80062f6:	0552      	lsls	r2, r2, #21
 80062f8:	4311      	orrs	r1, r2
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062fe:	0852      	lsrs	r2, r2, #1
 8006300:	3a01      	subs	r2, #1
 8006302:	0652      	lsls	r2, r2, #25
 8006304:	4311      	orrs	r1, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800630a:	06d2      	lsls	r2, r2, #27
 800630c:	430a      	orrs	r2, r1
 800630e:	4943      	ldr	r1, [pc, #268]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006310:	4313      	orrs	r3, r2
 8006312:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006314:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a40      	ldr	r2, [pc, #256]	; (800641c <HAL_RCC_OscConfig+0x618>)
 800631a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800631e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006320:	4b3e      	ldr	r3, [pc, #248]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4a3d      	ldr	r2, [pc, #244]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800632a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fb fd32 	bl	8001d94 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006334:	f7fb fd2e 	bl	8001d94 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e066      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006346:	4b35      	ldr	r3, [pc, #212]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x530>
 8006352:	e05e      	b.n	8006412 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006354:	4b31      	ldr	r3, [pc, #196]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a30      	ldr	r2, [pc, #192]	; (800641c <HAL_RCC_OscConfig+0x618>)
 800635a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800635e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006360:	f7fb fd18 	bl	8001d94 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006368:	f7fb fd14 	bl	8001d94 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e04c      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800637a:	4b28      	ldr	r3, [pc, #160]	; (800641c <HAL_RCC_OscConfig+0x618>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006386:	4b25      	ldr	r3, [pc, #148]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	4924      	ldr	r1, [pc, #144]	; (800641c <HAL_RCC_OscConfig+0x618>)
 800638c:	4b25      	ldr	r3, [pc, #148]	; (8006424 <HAL_RCC_OscConfig+0x620>)
 800638e:	4013      	ands	r3, r2
 8006390:	60cb      	str	r3, [r1, #12]
 8006392:	e03e      	b.n	8006412 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e039      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063a0:	4b1e      	ldr	r3, [pc, #120]	; (800641c <HAL_RCC_OscConfig+0x618>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 0203 	and.w	r2, r3, #3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d12c      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	3b01      	subs	r3, #1
 80063c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d123      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d11b      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d113      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	3b01      	subs	r3, #1
 80063f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d109      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	3b01      	subs	r3, #1
 8006408:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d001      	beq.n	8006412 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3720      	adds	r7, #32
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40021000 	.word	0x40021000
 8006420:	019f800c 	.word	0x019f800c
 8006424:	feeefffc 	.word	0xfeeefffc

08006428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e11e      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006440:	4b91      	ldr	r3, [pc, #580]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d910      	bls.n	8006470 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	4b8e      	ldr	r3, [pc, #568]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f023 020f 	bic.w	r2, r3, #15
 8006456:	498c      	ldr	r1, [pc, #560]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b8a      	ldr	r3, [pc, #552]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e106      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d073      	beq.n	8006564 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d129      	bne.n	80064d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006484:	4b81      	ldr	r3, [pc, #516]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0f4      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006494:	f000 f966 	bl	8006764 <RCC_GetSysClockFreqFromPLLSource>
 8006498:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4a7c      	ldr	r2, [pc, #496]	; (8006690 <HAL_RCC_ClockConfig+0x268>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d93f      	bls.n	8006522 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064a2:	4b7a      	ldr	r3, [pc, #488]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d033      	beq.n	8006522 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d12f      	bne.n	8006522 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064c2:	4b72      	ldr	r3, [pc, #456]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ca:	4a70      	ldr	r2, [pc, #448]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064d2:	2380      	movs	r3, #128	; 0x80
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e024      	b.n	8006522 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d107      	bne.n	80064f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064e0:	4b6a      	ldr	r3, [pc, #424]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0c6      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064f0:	4b66      	ldr	r3, [pc, #408]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0be      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006500:	f000 f8ce 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 8006504:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4a61      	ldr	r2, [pc, #388]	; (8006690 <HAL_RCC_ClockConfig+0x268>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d909      	bls.n	8006522 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800650e:	4b5f      	ldr	r3, [pc, #380]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006516:	4a5d      	ldr	r2, [pc, #372]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006522:	4b5a      	ldr	r3, [pc, #360]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f023 0203 	bic.w	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4957      	ldr	r1, [pc, #348]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006530:	4313      	orrs	r3, r2
 8006532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006534:	f7fb fc2e 	bl	8001d94 <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653a:	e00a      	b.n	8006552 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800653c:	f7fb fc2a 	bl	8001d94 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	; 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e095      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006552:	4b4e      	ldr	r3, [pc, #312]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 020c 	and.w	r2, r3, #12
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	429a      	cmp	r2, r3
 8006562:	d1eb      	bne.n	800653c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d023      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800657c:	4b43      	ldr	r3, [pc, #268]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	4a42      	ldr	r2, [pc, #264]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006582:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006586:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006594:	4b3d      	ldr	r3, [pc, #244]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800659c:	4a3b      	ldr	r2, [pc, #236]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800659e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a4:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	4936      	ldr	r1, [pc, #216]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
 80065b6:	e008      	b.n	80065ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d105      	bne.n	80065ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065be:	4b33      	ldr	r3, [pc, #204]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	4a32      	ldr	r2, [pc, #200]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80065c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065ca:	4b2f      	ldr	r3, [pc, #188]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d21d      	bcs.n	8006614 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d8:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f023 020f 	bic.w	r2, r3, #15
 80065e0:	4929      	ldr	r1, [pc, #164]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065e8:	f7fb fbd4 	bl	8001d94 <HAL_GetTick>
 80065ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ee:	e00a      	b.n	8006606 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f0:	f7fb fbd0 	bl	8001d94 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e03b      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006606:	4b20      	ldr	r3, [pc, #128]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d1ed      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006620:	4b1a      	ldr	r3, [pc, #104]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4917      	ldr	r1, [pc, #92]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800662e:	4313      	orrs	r3, r2
 8006630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	490f      	ldr	r1, [pc, #60]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800664e:	4313      	orrs	r3, r2
 8006650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006652:	f000 f825 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 8006656:	4602      	mov	r2, r0
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	091b      	lsrs	r3, r3, #4
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	490c      	ldr	r1, [pc, #48]	; (8006694 <HAL_RCC_ClockConfig+0x26c>)
 8006664:	5ccb      	ldrb	r3, [r1, r3]
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x270>)
 8006670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <HAL_RCC_ClockConfig+0x274>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fb fb40 	bl	8001cfc <HAL_InitTick>
 800667c:	4603      	mov	r3, r0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40022000 	.word	0x40022000
 800668c:	40021000 	.word	0x40021000
 8006690:	04c4b400 	.word	0x04c4b400
 8006694:	0800cdcc 	.word	0x0800cdcc
 8006698:	20000000 	.word	0x20000000
 800669c:	20000004 	.word	0x20000004

080066a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066a6:	4b2c      	ldr	r3, [pc, #176]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d102      	bne.n	80066b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <HAL_RCC_GetSysClockFreq+0xbc>)
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	e047      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066b8:	4b27      	ldr	r3, [pc, #156]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d102      	bne.n	80066ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066c4:	4b26      	ldr	r3, [pc, #152]	; (8006760 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	e03e      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066ca:	4b23      	ldr	r3, [pc, #140]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b0c      	cmp	r3, #12
 80066d4:	d136      	bne.n	8006744 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066d6:	4b20      	ldr	r3, [pc, #128]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	3301      	adds	r3, #1
 80066ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d10c      	bne.n	800670e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066f4:	4a1a      	ldr	r2, [pc, #104]	; (8006760 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fc:	4a16      	ldr	r2, [pc, #88]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066fe:	68d2      	ldr	r2, [r2, #12]
 8006700:	0a12      	lsrs	r2, r2, #8
 8006702:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	617b      	str	r3, [r7, #20]
      break;
 800670c:	e00c      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800670e:	4a13      	ldr	r2, [pc, #76]	; (800675c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	fbb2 f3f3 	udiv	r3, r2, r3
 8006716:	4a10      	ldr	r2, [pc, #64]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006718:	68d2      	ldr	r2, [r2, #12]
 800671a:	0a12      	lsrs	r2, r2, #8
 800671c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	617b      	str	r3, [r7, #20]
      break;
 8006726:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	0e5b      	lsrs	r3, r3, #25
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	3301      	adds	r3, #1
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	e001      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006748:	693b      	ldr	r3, [r7, #16]
}
 800674a:	4618      	mov	r0, r3
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000
 800675c:	00f42400 	.word	0x00f42400
 8006760:	02dc6c00 	.word	0x02dc6c00

08006764 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800676a:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006774:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	091b      	lsrs	r3, r3, #4
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	3301      	adds	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d10c      	bne.n	80067a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006788:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006790:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006792:	68d2      	ldr	r2, [r2, #12]
 8006794:	0a12      	lsrs	r2, r2, #8
 8006796:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	617b      	str	r3, [r7, #20]
    break;
 80067a0:	e00c      	b.n	80067bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067aa:	4a0e      	ldr	r2, [pc, #56]	; (80067e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ac:	68d2      	ldr	r2, [r2, #12]
 80067ae:	0a12      	lsrs	r2, r2, #8
 80067b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	617b      	str	r3, [r7, #20]
    break;
 80067ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067bc:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	0e5b      	lsrs	r3, r3, #25
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	3301      	adds	r3, #1
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80067d6:	687b      	ldr	r3, [r7, #4]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	40021000 	.word	0x40021000
 80067e8:	02dc6c00 	.word	0x02dc6c00
 80067ec:	00f42400 	.word	0x00f42400

080067f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80067f8:	2300      	movs	r3, #0
 80067fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067fc:	2300      	movs	r3, #0
 80067fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8098 	beq.w	800693e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800680e:	2300      	movs	r3, #0
 8006810:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006812:	4b43      	ldr	r3, [pc, #268]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800681e:	4b40      	ldr	r3, [pc, #256]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006822:	4a3f      	ldr	r2, [pc, #252]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006828:	6593      	str	r3, [r2, #88]	; 0x58
 800682a:	4b3d      	ldr	r3, [pc, #244]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006836:	2301      	movs	r3, #1
 8006838:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800683a:	4b3a      	ldr	r3, [pc, #232]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a39      	ldr	r2, [pc, #228]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006844:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006846:	f7fb faa5 	bl	8001d94 <HAL_GetTick>
 800684a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800684c:	e009      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800684e:	f7fb faa1 	bl	8001d94 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d902      	bls.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	74fb      	strb	r3, [r7, #19]
        break;
 8006860:	e005      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006862:	4b30      	ldr	r3, [pc, #192]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0ef      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800686e:	7cfb      	ldrb	r3, [r7, #19]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d159      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006874:	4b2a      	ldr	r3, [pc, #168]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01e      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	429a      	cmp	r2, r3
 800688e:	d019      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006890:	4b23      	ldr	r3, [pc, #140]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800689c:	4b20      	ldr	r3, [pc, #128]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068ac:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b2:	4a1b      	ldr	r2, [pc, #108]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068bc:	4a18      	ldr	r2, [pc, #96]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d016      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ce:	f7fb fa61 	bl	8001d94 <HAL_GetTick>
 80068d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d4:	e00b      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7fb fa5d 	bl	8001d94 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d902      	bls.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	74fb      	strb	r3, [r7, #19]
            break;
 80068ec:	e006      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ee:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ec      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80068fc:	7cfb      	ldrb	r3, [r7, #19]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10b      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006902:	4b07      	ldr	r3, [pc, #28]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	4903      	ldr	r1, [pc, #12]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006918:	e008      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800691a:	7cfb      	ldrb	r3, [r7, #19]
 800691c:	74bb      	strb	r3, [r7, #18]
 800691e:	e005      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006920:	40021000 	.word	0x40021000
 8006924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	7cfb      	ldrb	r3, [r7, #19]
 800692a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800692c:	7c7b      	ldrb	r3, [r7, #17]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d105      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006932:	4ba6      	ldr	r3, [pc, #664]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	4aa5      	ldr	r2, [pc, #660]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800693c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800694a:	4ba0      	ldr	r3, [pc, #640]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800694c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006950:	f023 0203 	bic.w	r2, r3, #3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	499c      	ldr	r1, [pc, #624]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800696c:	4b97      	ldr	r3, [pc, #604]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006972:	f023 020c 	bic.w	r2, r3, #12
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	4994      	ldr	r1, [pc, #592]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800697c:	4313      	orrs	r3, r2
 800697e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800698e:	4b8f      	ldr	r3, [pc, #572]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	498b      	ldr	r1, [pc, #556]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069b0:	4b86      	ldr	r3, [pc, #536]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	4983      	ldr	r1, [pc, #524]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069d2:	4b7e      	ldr	r3, [pc, #504]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	497a      	ldr	r1, [pc, #488]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069f4:	4b75      	ldr	r3, [pc, #468]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	4972      	ldr	r1, [pc, #456]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a16:	4b6d      	ldr	r3, [pc, #436]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	4969      	ldr	r1, [pc, #420]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a38:	4b64      	ldr	r3, [pc, #400]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	4961      	ldr	r1, [pc, #388]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a5a:	4b5c      	ldr	r3, [pc, #368]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	4958      	ldr	r1, [pc, #352]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d015      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a7c:	4b53      	ldr	r3, [pc, #332]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	4950      	ldr	r1, [pc, #320]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a9a:	d105      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a9c:	4b4b      	ldr	r3, [pc, #300]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4a4a      	ldr	r2, [pc, #296]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d015      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ab4:	4b45      	ldr	r3, [pc, #276]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	4942      	ldr	r1, [pc, #264]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad2:	d105      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ad4:	4b3d      	ldr	r3, [pc, #244]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	4a3c      	ldr	r2, [pc, #240]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ade:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d015      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006aec:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afa:	4934      	ldr	r1, [pc, #208]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b0a:	d105      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b0c:	4b2f      	ldr	r3, [pc, #188]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	4a2e      	ldr	r2, [pc, #184]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b24:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b32:	4926      	ldr	r1, [pc, #152]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b42:	d105      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b44:	4b21      	ldr	r3, [pc, #132]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d015      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	4918      	ldr	r1, [pc, #96]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b7a:	d105      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b7c:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	4a12      	ldr	r2, [pc, #72]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b94:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	490a      	ldr	r1, [pc, #40]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4a04      	ldr	r2, [pc, #16]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40021000 	.word	0x40021000

08006bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e049      	b.n	8006c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fa fe6a 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f001 f876 	bl	8007d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d001      	beq.n	8006c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e042      	b.n	8006d1e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <HAL_TIM_Base_Start+0xac>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d018      	beq.n	8006cdc <HAL_TIM_Base_Start+0x5c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb2:	d013      	beq.n	8006cdc <HAL_TIM_Base_Start+0x5c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	; (8006d30 <HAL_TIM_Base_Start+0xb0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00e      	beq.n	8006cdc <HAL_TIM_Base_Start+0x5c>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1c      	ldr	r2, [pc, #112]	; (8006d34 <HAL_TIM_Base_Start+0xb4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d009      	beq.n	8006cdc <HAL_TIM_Base_Start+0x5c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1a      	ldr	r2, [pc, #104]	; (8006d38 <HAL_TIM_Base_Start+0xb8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d004      	beq.n	8006cdc <HAL_TIM_Base_Start+0x5c>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <HAL_TIM_Base_Start+0xbc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d115      	bne.n	8006d08 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <HAL_TIM_Base_Start+0xc0>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b06      	cmp	r3, #6
 8006cec:	d015      	beq.n	8006d1a <HAL_TIM_Base_Start+0x9a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf4:	d011      	beq.n	8006d1a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d06:	e008      	b.n	8006d1a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	e000      	b.n	8006d1c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40013400 	.word	0x40013400
 8006d3c:	40014000 	.word	0x40014000
 8006d40:	00010007 	.word	0x00010007

08006d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e049      	b.n	8006dea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fa fe2e 	bl	80019cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f000 ffbc 	bl	8007d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d109      	bne.n	8006e20 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	bf0c      	ite	eq
 8006e18:	2301      	moveq	r3, #1
 8006e1a:	2300      	movne	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	e03c      	b.n	8006e9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d109      	bne.n	8006e3a <HAL_TIM_PWM_Start_DMA+0x46>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	bf0c      	ite	eq
 8006e32:	2301      	moveq	r3, #1
 8006e34:	2300      	movne	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	e02f      	b.n	8006e9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d109      	bne.n	8006e54 <HAL_TIM_PWM_Start_DMA+0x60>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	e022      	b.n	8006e9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b0c      	cmp	r3, #12
 8006e58:	d109      	bne.n	8006e6e <HAL_TIM_PWM_Start_DMA+0x7a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	e015      	b.n	8006e9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b10      	cmp	r3, #16
 8006e72:	d109      	bne.n	8006e88 <HAL_TIM_PWM_Start_DMA+0x94>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	e008      	b.n	8006e9a <HAL_TIM_PWM_Start_DMA+0xa6>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	bf0c      	ite	eq
 8006e94:	2301      	moveq	r3, #1
 8006e96:	2300      	movne	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e1a6      	b.n	80071f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_TIM_PWM_Start_DMA+0xc8>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	e03c      	b.n	8006f36 <HAL_TIM_PWM_Start_DMA+0x142>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d109      	bne.n	8006ed6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	e02f      	b.n	8006f36 <HAL_TIM_PWM_Start_DMA+0x142>
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d109      	bne.n	8006ef0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2301      	moveq	r3, #1
 8006eea:	2300      	movne	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	e022      	b.n	8006f36 <HAL_TIM_PWM_Start_DMA+0x142>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b0c      	cmp	r3, #12
 8006ef4:	d109      	bne.n	8006f0a <HAL_TIM_PWM_Start_DMA+0x116>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	bf0c      	ite	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	2300      	movne	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	e015      	b.n	8006f36 <HAL_TIM_PWM_Start_DMA+0x142>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b10      	cmp	r3, #16
 8006f0e:	d109      	bne.n	8006f24 <HAL_TIM_PWM_Start_DMA+0x130>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	e008      	b.n	8006f36 <HAL_TIM_PWM_Start_DMA+0x142>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	bf0c      	ite	eq
 8006f30:	2301      	moveq	r3, #1
 8006f32:	2300      	movne	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d034      	beq.n	8006fa4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_TIM_PWM_Start_DMA+0x152>
 8006f40:	887b      	ldrh	r3, [r7, #2]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e152      	b.n	80071f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <HAL_TIM_PWM_Start_DMA+0x166>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f58:	e026      	b.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_PWM_Start_DMA+0x176>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f68:	e01e      	b.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_PWM_Start_DMA+0x186>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f78:	e016      	b.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b0c      	cmp	r3, #12
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIM_PWM_Start_DMA+0x196>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f88:	e00e      	b.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b10      	cmp	r3, #16
 8006f8e:	d104      	bne.n	8006f9a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f98:	e006      	b.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fa2:	e001      	b.n	8006fa8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e123      	b.n	80071f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b0c      	cmp	r3, #12
 8006fac:	f200 80ae 	bhi.w	800710c <HAL_TIM_PWM_Start_DMA+0x318>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fed 	.word	0x08006fed
 8006fbc:	0800710d 	.word	0x0800710d
 8006fc0:	0800710d 	.word	0x0800710d
 8006fc4:	0800710d 	.word	0x0800710d
 8006fc8:	08007035 	.word	0x08007035
 8006fcc:	0800710d 	.word	0x0800710d
 8006fd0:	0800710d 	.word	0x0800710d
 8006fd4:	0800710d 	.word	0x0800710d
 8006fd8:	0800707d 	.word	0x0800707d
 8006fdc:	0800710d 	.word	0x0800710d
 8006fe0:	0800710d 	.word	0x0800710d
 8006fe4:	0800710d 	.word	0x0800710d
 8006fe8:	080070c5 	.word	0x080070c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	4a81      	ldr	r2, [pc, #516]	; (80071f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	4a80      	ldr	r2, [pc, #512]	; (80071fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	4a7f      	ldr	r2, [pc, #508]	; (8007200 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007002:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3334      	adds	r3, #52	; 0x34
 8007010:	461a      	mov	r2, r3
 8007012:	887b      	ldrh	r3, [r7, #2]
 8007014:	f7fc fd5a 	bl	8003acc <HAL_DMA_Start_IT>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e0e6      	b.n	80071f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007030:	60da      	str	r2, [r3, #12]
      break;
 8007032:	e06e      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	4a6f      	ldr	r2, [pc, #444]	; (80071f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	4a6e      	ldr	r2, [pc, #440]	; (80071fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8007042:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	4a6d      	ldr	r2, [pc, #436]	; (8007200 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800704a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3338      	adds	r3, #56	; 0x38
 8007058:	461a      	mov	r2, r3
 800705a:	887b      	ldrh	r3, [r7, #2]
 800705c:	f7fc fd36 	bl	8003acc <HAL_DMA_Start_IT>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e0c2      	b.n	80071f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007078:	60da      	str	r2, [r3, #12]
      break;
 800707a:	e04a      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	4a5d      	ldr	r2, [pc, #372]	; (80071f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007082:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	4a5c      	ldr	r2, [pc, #368]	; (80071fc <HAL_TIM_PWM_Start_DMA+0x408>)
 800708a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	4a5b      	ldr	r2, [pc, #364]	; (8007200 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007092:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	333c      	adds	r3, #60	; 0x3c
 80070a0:	461a      	mov	r2, r3
 80070a2:	887b      	ldrh	r3, [r7, #2]
 80070a4:	f7fc fd12 	bl	8003acc <HAL_DMA_Start_IT>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e09e      	b.n	80071f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070c0:	60da      	str	r2, [r3, #12]
      break;
 80070c2:	e026      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	4a4b      	ldr	r2, [pc, #300]	; (80071f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 80070ca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	4a4a      	ldr	r2, [pc, #296]	; (80071fc <HAL_TIM_PWM_Start_DMA+0x408>)
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	4a49      	ldr	r2, [pc, #292]	; (8007200 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80070da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3340      	adds	r3, #64	; 0x40
 80070e8:	461a      	mov	r2, r3
 80070ea:	887b      	ldrh	r3, [r7, #2]
 80070ec:	f7fc fcee 	bl	8003acc <HAL_DMA_Start_IT>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e07a      	b.n	80071f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007108:	60da      	str	r2, [r3, #12]
      break;
 800710a:	e002      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
      break;
 8007110:	bf00      	nop
  }

  if (status == HAL_OK)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d16a      	bne.n	80071ee <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	4618      	mov	r0, r3
 8007122:	f001 fa1b 	bl	800855c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a36      	ldr	r2, [pc, #216]	; (8007204 <HAL_TIM_PWM_Start_DMA+0x410>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d013      	beq.n	8007158 <HAL_TIM_PWM_Start_DMA+0x364>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a34      	ldr	r2, [pc, #208]	; (8007208 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00e      	beq.n	8007158 <HAL_TIM_PWM_Start_DMA+0x364>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a33      	ldr	r2, [pc, #204]	; (800720c <HAL_TIM_PWM_Start_DMA+0x418>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d009      	beq.n	8007158 <HAL_TIM_PWM_Start_DMA+0x364>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a31      	ldr	r2, [pc, #196]	; (8007210 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_TIM_PWM_Start_DMA+0x364>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a30      	ldr	r2, [pc, #192]	; (8007214 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d101      	bne.n	800715c <HAL_TIM_PWM_Start_DMA+0x368>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <HAL_TIM_PWM_Start_DMA+0x36a>
 800715c:	2300      	movs	r3, #0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007170:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a23      	ldr	r2, [pc, #140]	; (8007204 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d018      	beq.n	80071ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007184:	d013      	beq.n	80071ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a23      	ldr	r2, [pc, #140]	; (8007218 <HAL_TIM_PWM_Start_DMA+0x424>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00e      	beq.n	80071ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a21      	ldr	r2, [pc, #132]	; (800721c <HAL_TIM_PWM_Start_DMA+0x428>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <HAL_TIM_PWM_Start_DMA+0x414>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a18      	ldr	r2, [pc, #96]	; (800720c <HAL_TIM_PWM_Start_DMA+0x418>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d115      	bne.n	80071da <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b06      	cmp	r3, #6
 80071be:	d015      	beq.n	80071ec <HAL_TIM_PWM_Start_DMA+0x3f8>
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c6:	d011      	beq.n	80071ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d8:	e008      	b.n	80071ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0201 	orr.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	e000      	b.n	80071ee <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	08007bef 	.word	0x08007bef
 80071fc:	08007c97 	.word	0x08007c97
 8007200:	08007b5d 	.word	0x08007b5d
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40013400 	.word	0x40013400
 800720c:	40014000 	.word	0x40014000
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800
 8007218:	40000400 	.word	0x40000400
 800721c:	40000800 	.word	0x40000800
 8007220:	00010007 	.word	0x00010007

08007224 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b0c      	cmp	r3, #12
 8007236:	d855      	bhi.n	80072e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	08007275 	.word	0x08007275
 8007244:	080072e5 	.word	0x080072e5
 8007248:	080072e5 	.word	0x080072e5
 800724c:	080072e5 	.word	0x080072e5
 8007250:	08007291 	.word	0x08007291
 8007254:	080072e5 	.word	0x080072e5
 8007258:	080072e5 	.word	0x080072e5
 800725c:	080072e5 	.word	0x080072e5
 8007260:	080072ad 	.word	0x080072ad
 8007264:	080072e5 	.word	0x080072e5
 8007268:	080072e5 	.word	0x080072e5
 800726c:	080072e5 	.word	0x080072e5
 8007270:	080072c9 	.word	0x080072c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007282:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	4618      	mov	r0, r3
 800728a:	f7fc fc9a 	bl	8003bc2 <HAL_DMA_Abort_IT>
      break;
 800728e:	e02c      	b.n	80072ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fc fc8c 	bl	8003bc2 <HAL_DMA_Abort_IT>
      break;
 80072aa:	e01e      	b.n	80072ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fc fc7e 	bl	8003bc2 <HAL_DMA_Abort_IT>
      break;
 80072c6:	e010      	b.n	80072ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fc fc70 	bl	8003bc2 <HAL_DMA_Abort_IT>
      break;
 80072e2:	e002      	b.n	80072ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
      break;
 80072e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8081 	bne.w	80073f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2200      	movs	r2, #0
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 f92e 	bl	800855c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a3e      	ldr	r2, [pc, #248]	; (8007400 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a3d      	ldr	r2, [pc, #244]	; (8007404 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a3b      	ldr	r2, [pc, #236]	; (8007408 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a3a      	ldr	r2, [pc, #232]	; (800740c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a38      	ldr	r2, [pc, #224]	; (8007410 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d101      	bne.n	8007336 <HAL_TIM_PWM_Stop_DMA+0x112>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d017      	beq.n	800736c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6a1a      	ldr	r2, [r3, #32]
 8007342:	f241 1311 	movw	r3, #4369	; 0x1111
 8007346:	4013      	ands	r3, r2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10f      	bne.n	800736c <HAL_TIM_PWM_Stop_DMA+0x148>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a1a      	ldr	r2, [r3, #32]
 8007352:	f244 4344 	movw	r3, #17476	; 0x4444
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d107      	bne.n	800736c <HAL_TIM_PWM_Stop_DMA+0x148>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800736a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6a1a      	ldr	r2, [r3, #32]
 8007372:	f241 1311 	movw	r3, #4369	; 0x1111
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10f      	bne.n	800739c <HAL_TIM_PWM_Stop_DMA+0x178>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	f244 4344 	movw	r3, #17476	; 0x4444
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d107      	bne.n	800739c <HAL_TIM_PWM_Stop_DMA+0x178>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <HAL_TIM_PWM_Stop_DMA+0x188>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073aa:	e023      	b.n	80073f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d104      	bne.n	80073bc <HAL_TIM_PWM_Stop_DMA+0x198>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ba:	e01b      	b.n	80073f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d104      	bne.n	80073cc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073ca:	e013      	b.n	80073f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b0c      	cmp	r3, #12
 80073d0:	d104      	bne.n	80073dc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073da:	e00b      	b.n	80073f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b10      	cmp	r3, #16
 80073e0:	d104      	bne.n	80073ec <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073ea:	e003      	b.n	80073f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40013400 	.word	0x40013400
 8007408:	40014000 	.word	0x40014000
 800740c:	40014400 	.word	0x40014400
 8007410:	40014800 	.word	0x40014800

08007414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d020      	beq.n	8007478 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01b      	beq.n	8007478 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0202 	mvn.w	r2, #2
 8007448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fb4a 	bl	8007af8 <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fb3c 	bl	8007ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb4d 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	d020      	beq.n	80074c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01b      	beq.n	80074c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0204 	mvn.w	r2, #4
 8007494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2202      	movs	r2, #2
 800749a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fb24 	bl	8007af8 <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fb16 	bl	8007ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fb27 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 0308 	and.w	r3, r3, #8
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d020      	beq.n	8007510 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01b      	beq.n	8007510 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0208 	mvn.w	r2, #8
 80074e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2204      	movs	r2, #4
 80074e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fafe 	bl	8007af8 <HAL_TIM_IC_CaptureCallback>
 80074fc:	e005      	b.n	800750a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 faf0 	bl	8007ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fb01 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b00      	cmp	r3, #0
 8007518:	d020      	beq.n	800755c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01b      	beq.n	800755c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0210 	mvn.w	r2, #16
 800752c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2208      	movs	r2, #8
 8007532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fad8 	bl	8007af8 <HAL_TIM_IC_CaptureCallback>
 8007548:	e005      	b.n	8007556 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 faca 	bl	8007ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fadb 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00c      	beq.n	8007580 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f06f 0201 	mvn.w	r2, #1
 8007578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 faa8 	bl	8007ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007586:	2b00      	cmp	r3, #0
 8007588:	d104      	bne.n	8007594 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00c      	beq.n	80075ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80075a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 f915 	bl	80087d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00c      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 f90d 	bl	80087ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00c      	beq.n	80075f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d007      	beq.n	80075f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fa9f 	bl	8007b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00c      	beq.n	800761a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f06f 0220 	mvn.w	r2, #32
 8007612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f8d5 	bl	80087c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00c      	beq.n	800763e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f8e1 	bl	8008800 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00c      	beq.n	8007662 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d007      	beq.n	8007662 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800765a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f8d9 	bl	8008814 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00c      	beq.n	8007686 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800767e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 f8d1 	bl	8008828 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00c      	beq.n	80076aa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d007      	beq.n	80076aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80076a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 f8c9 	bl	800883c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d101      	bne.n	80076d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e0ff      	b.n	80078d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b14      	cmp	r3, #20
 80076de:	f200 80f0 	bhi.w	80078c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800773d 	.word	0x0800773d
 80076ec:	080078c3 	.word	0x080078c3
 80076f0:	080078c3 	.word	0x080078c3
 80076f4:	080078c3 	.word	0x080078c3
 80076f8:	0800777d 	.word	0x0800777d
 80076fc:	080078c3 	.word	0x080078c3
 8007700:	080078c3 	.word	0x080078c3
 8007704:	080078c3 	.word	0x080078c3
 8007708:	080077bf 	.word	0x080077bf
 800770c:	080078c3 	.word	0x080078c3
 8007710:	080078c3 	.word	0x080078c3
 8007714:	080078c3 	.word	0x080078c3
 8007718:	080077ff 	.word	0x080077ff
 800771c:	080078c3 	.word	0x080078c3
 8007720:	080078c3 	.word	0x080078c3
 8007724:	080078c3 	.word	0x080078c3
 8007728:	08007841 	.word	0x08007841
 800772c:	080078c3 	.word	0x080078c3
 8007730:	080078c3 	.word	0x080078c3
 8007734:	080078c3 	.word	0x080078c3
 8007738:	08007881 	.word	0x08007881
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fb78 	bl	8007e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0208 	orr.w	r2, r2, #8
 8007756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0204 	bic.w	r2, r2, #4
 8007766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6999      	ldr	r1, [r3, #24]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	619a      	str	r2, [r3, #24]
      break;
 800777a:	e0a5      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fbe8 	bl	8007f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6999      	ldr	r1, [r3, #24]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	021a      	lsls	r2, r3, #8
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	619a      	str	r2, [r3, #24]
      break;
 80077bc:	e084      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fc51 	bl	800806c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0208 	orr.w	r2, r2, #8
 80077d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0204 	bic.w	r2, r2, #4
 80077e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	61da      	str	r2, [r3, #28]
      break;
 80077fc:	e064      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fcb9 	bl	800817c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69d9      	ldr	r1, [r3, #28]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	021a      	lsls	r2, r3, #8
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	61da      	str	r2, [r3, #28]
      break;
 800783e:	e043      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fd22 	bl	8008290 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0208 	orr.w	r2, r2, #8
 800785a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0204 	bic.w	r2, r2, #4
 800786a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	691a      	ldr	r2, [r3, #16]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800787e:	e023      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fd66 	bl	8008358 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800789a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	021a      	lsls	r2, r3, #8
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80078c0:	e002      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
      break;
 80078c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_TIM_ConfigClockSource+0x1c>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e0de      	b.n	8007ab6 <HAL_TIM_ConfigClockSource+0x1da>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800791a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a63      	ldr	r2, [pc, #396]	; (8007ac0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	f000 80a9 	beq.w	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8007938:	4a61      	ldr	r2, [pc, #388]	; (8007ac0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	f200 80ae 	bhi.w	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8007940:	4a60      	ldr	r2, [pc, #384]	; (8007ac4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	f000 80a1 	beq.w	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8007948:	4a5e      	ldr	r2, [pc, #376]	; (8007ac4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	f200 80a6 	bhi.w	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8007950:	4a5d      	ldr	r2, [pc, #372]	; (8007ac8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007952:	4293      	cmp	r3, r2
 8007954:	f000 8099 	beq.w	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8007958:	4a5b      	ldr	r2, [pc, #364]	; (8007ac8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800795a:	4293      	cmp	r3, r2
 800795c:	f200 809e 	bhi.w	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8007960:	4a5a      	ldr	r2, [pc, #360]	; (8007acc <HAL_TIM_ConfigClockSource+0x1f0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	f000 8091 	beq.w	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8007968:	4a58      	ldr	r2, [pc, #352]	; (8007acc <HAL_TIM_ConfigClockSource+0x1f0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	f200 8096 	bhi.w	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8007970:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007974:	f000 8089 	beq.w	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 8007978:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800797c:	f200 808e 	bhi.w	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 8007980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007984:	d03e      	beq.n	8007a04 <HAL_TIM_ConfigClockSource+0x128>
 8007986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798a:	f200 8087 	bhi.w	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 800798e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007992:	f000 8086 	beq.w	8007aa2 <HAL_TIM_ConfigClockSource+0x1c6>
 8007996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800799a:	d87f      	bhi.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 800799c:	2b70      	cmp	r3, #112	; 0x70
 800799e:	d01a      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0xfa>
 80079a0:	2b70      	cmp	r3, #112	; 0x70
 80079a2:	d87b      	bhi.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80079a4:	2b60      	cmp	r3, #96	; 0x60
 80079a6:	d050      	beq.n	8007a4a <HAL_TIM_ConfigClockSource+0x16e>
 80079a8:	2b60      	cmp	r3, #96	; 0x60
 80079aa:	d877      	bhi.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80079ac:	2b50      	cmp	r3, #80	; 0x50
 80079ae:	d03c      	beq.n	8007a2a <HAL_TIM_ConfigClockSource+0x14e>
 80079b0:	2b50      	cmp	r3, #80	; 0x50
 80079b2:	d873      	bhi.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80079b4:	2b40      	cmp	r3, #64	; 0x40
 80079b6:	d058      	beq.n	8007a6a <HAL_TIM_ConfigClockSource+0x18e>
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d86f      	bhi.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80079bc:	2b30      	cmp	r3, #48	; 0x30
 80079be:	d064      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80079c0:	2b30      	cmp	r3, #48	; 0x30
 80079c2:	d86b      	bhi.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80079c4:	2b20      	cmp	r3, #32
 80079c6:	d060      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d867      	bhi.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d05c      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d05a      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x1ae>
 80079d4:	e062      	b.n	8007a9c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079e6:	f000 fd99 	bl	800851c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	609a      	str	r2, [r3, #8]
      break;
 8007a02:	e04f      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a14:	f000 fd82 	bl	800851c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a26:	609a      	str	r2, [r3, #8]
      break;
 8007a28:	e03c      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	461a      	mov	r2, r3
 8007a38:	f000 fcf4 	bl	8008424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2150      	movs	r1, #80	; 0x50
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fd4d 	bl	80084e2 <TIM_ITRx_SetConfig>
      break;
 8007a48:	e02c      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a56:	461a      	mov	r2, r3
 8007a58:	f000 fd13 	bl	8008482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2160      	movs	r1, #96	; 0x60
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fd3d 	bl	80084e2 <TIM_ITRx_SetConfig>
      break;
 8007a68:	e01c      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a76:	461a      	mov	r2, r3
 8007a78:	f000 fcd4 	bl	8008424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2140      	movs	r1, #64	; 0x40
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fd2d 	bl	80084e2 <TIM_ITRx_SetConfig>
      break;
 8007a88:	e00c      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4619      	mov	r1, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	f000 fd24 	bl	80084e2 <TIM_ITRx_SetConfig>
      break;
 8007a9a:	e003      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa0:	e000      	b.n	8007aa4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	00100070 	.word	0x00100070
 8007ac4:	00100040 	.word	0x00100040
 8007ac8:	00100030 	.word	0x00100030
 8007acc:	00100020 	.word	0x00100020

08007ad0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d107      	bne.n	8007b84 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b82:	e02a      	b.n	8007bda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d107      	bne.n	8007b9e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2202      	movs	r2, #2
 8007b92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b9c:	e01d      	b.n	8007bda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d107      	bne.n	8007bb8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2204      	movs	r2, #4
 8007bac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb6:	e010      	b.n	8007bda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d107      	bne.n	8007bd2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bd0:	e003      	b.n	8007bda <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff ffb4 	bl	8007b48 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	771a      	strb	r2, [r3, #28]
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d10b      	bne.n	8007c1e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d136      	bne.n	8007c82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c1c:	e031      	b.n	8007c82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d10b      	bne.n	8007c40 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d125      	bne.n	8007c82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c3e:	e020      	b.n	8007c82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d10b      	bne.n	8007c62 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d114      	bne.n	8007c82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c60:	e00f      	b.n	8007c82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d10a      	bne.n	8007c82 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d103      	bne.n	8007c82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff ff42 	bl	8007b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	771a      	strb	r2, [r3, #28]
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d103      	bne.n	8007cb6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	771a      	strb	r2, [r3, #28]
 8007cb4:	e019      	b.n	8007cea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d103      	bne.n	8007cc8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	771a      	strb	r2, [r3, #28]
 8007cc6:	e010      	b.n	8007cea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d103      	bne.n	8007cda <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	771a      	strb	r2, [r3, #28]
 8007cd8:	e007      	b.n	8007cea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d102      	bne.n	8007cea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2208      	movs	r2, #8
 8007ce8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff ff18 	bl	8007b20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	771a      	strb	r2, [r3, #28]
}
 8007cf6:	bf00      	nop
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
	...

08007d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a42      	ldr	r2, [pc, #264]	; (8007e1c <TIM_Base_SetConfig+0x11c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00f      	beq.n	8007d38 <TIM_Base_SetConfig+0x38>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1e:	d00b      	beq.n	8007d38 <TIM_Base_SetConfig+0x38>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a3f      	ldr	r2, [pc, #252]	; (8007e20 <TIM_Base_SetConfig+0x120>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d007      	beq.n	8007d38 <TIM_Base_SetConfig+0x38>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a3e      	ldr	r2, [pc, #248]	; (8007e24 <TIM_Base_SetConfig+0x124>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <TIM_Base_SetConfig+0x38>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a3d      	ldr	r2, [pc, #244]	; (8007e28 <TIM_Base_SetConfig+0x128>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d108      	bne.n	8007d4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a33      	ldr	r2, [pc, #204]	; (8007e1c <TIM_Base_SetConfig+0x11c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d01b      	beq.n	8007d8a <TIM_Base_SetConfig+0x8a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d58:	d017      	beq.n	8007d8a <TIM_Base_SetConfig+0x8a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a30      	ldr	r2, [pc, #192]	; (8007e20 <TIM_Base_SetConfig+0x120>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <TIM_Base_SetConfig+0x8a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2f      	ldr	r2, [pc, #188]	; (8007e24 <TIM_Base_SetConfig+0x124>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00f      	beq.n	8007d8a <TIM_Base_SetConfig+0x8a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2e      	ldr	r2, [pc, #184]	; (8007e28 <TIM_Base_SetConfig+0x128>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00b      	beq.n	8007d8a <TIM_Base_SetConfig+0x8a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2d      	ldr	r2, [pc, #180]	; (8007e2c <TIM_Base_SetConfig+0x12c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d007      	beq.n	8007d8a <TIM_Base_SetConfig+0x8a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a2c      	ldr	r2, [pc, #176]	; (8007e30 <TIM_Base_SetConfig+0x130>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <TIM_Base_SetConfig+0x8a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a2b      	ldr	r2, [pc, #172]	; (8007e34 <TIM_Base_SetConfig+0x134>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d108      	bne.n	8007d9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a16      	ldr	r2, [pc, #88]	; (8007e1c <TIM_Base_SetConfig+0x11c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00f      	beq.n	8007de8 <TIM_Base_SetConfig+0xe8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a17      	ldr	r2, [pc, #92]	; (8007e28 <TIM_Base_SetConfig+0x128>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00b      	beq.n	8007de8 <TIM_Base_SetConfig+0xe8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a16      	ldr	r2, [pc, #88]	; (8007e2c <TIM_Base_SetConfig+0x12c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d007      	beq.n	8007de8 <TIM_Base_SetConfig+0xe8>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <TIM_Base_SetConfig+0x130>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d003      	beq.n	8007de8 <TIM_Base_SetConfig+0xe8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a14      	ldr	r2, [pc, #80]	; (8007e34 <TIM_Base_SetConfig+0x134>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d103      	bne.n	8007df0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d105      	bne.n	8007e0e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f023 0201 	bic.w	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	611a      	str	r2, [r3, #16]
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40012c00 	.word	0x40012c00
 8007e20:	40000400 	.word	0x40000400
 8007e24:	40000800 	.word	0x40000800
 8007e28:	40013400 	.word	0x40013400
 8007e2c:	40014000 	.word	0x40014000
 8007e30:	40014400 	.word	0x40014400
 8007e34:	40014800 	.word	0x40014800

08007e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	f023 0201 	bic.w	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0303 	bic.w	r3, r3, #3
 8007e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f023 0302 	bic.w	r3, r3, #2
 8007e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a2c      	ldr	r2, [pc, #176]	; (8007f44 <TIM_OC1_SetConfig+0x10c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d00f      	beq.n	8007eb8 <TIM_OC1_SetConfig+0x80>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a2b      	ldr	r2, [pc, #172]	; (8007f48 <TIM_OC1_SetConfig+0x110>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00b      	beq.n	8007eb8 <TIM_OC1_SetConfig+0x80>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a2a      	ldr	r2, [pc, #168]	; (8007f4c <TIM_OC1_SetConfig+0x114>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d007      	beq.n	8007eb8 <TIM_OC1_SetConfig+0x80>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a29      	ldr	r2, [pc, #164]	; (8007f50 <TIM_OC1_SetConfig+0x118>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d003      	beq.n	8007eb8 <TIM_OC1_SetConfig+0x80>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a28      	ldr	r2, [pc, #160]	; (8007f54 <TIM_OC1_SetConfig+0x11c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10c      	bne.n	8007ed2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f023 0308 	bic.w	r3, r3, #8
 8007ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f023 0304 	bic.w	r3, r3, #4
 8007ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a1b      	ldr	r2, [pc, #108]	; (8007f44 <TIM_OC1_SetConfig+0x10c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00f      	beq.n	8007efa <TIM_OC1_SetConfig+0xc2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a1a      	ldr	r2, [pc, #104]	; (8007f48 <TIM_OC1_SetConfig+0x110>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00b      	beq.n	8007efa <TIM_OC1_SetConfig+0xc2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a19      	ldr	r2, [pc, #100]	; (8007f4c <TIM_OC1_SetConfig+0x114>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d007      	beq.n	8007efa <TIM_OC1_SetConfig+0xc2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a18      	ldr	r2, [pc, #96]	; (8007f50 <TIM_OC1_SetConfig+0x118>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d003      	beq.n	8007efa <TIM_OC1_SetConfig+0xc2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a17      	ldr	r2, [pc, #92]	; (8007f54 <TIM_OC1_SetConfig+0x11c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d111      	bne.n	8007f1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	621a      	str	r2, [r3, #32]
}
 8007f38:	bf00      	nop
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40014400 	.word	0x40014400
 8007f54:	40014800 	.word	0x40014800

08007f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	f023 0210 	bic.w	r2, r3, #16
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	021b      	lsls	r3, r3, #8
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f023 0320 	bic.w	r3, r3, #32
 8007fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a28      	ldr	r2, [pc, #160]	; (8008058 <TIM_OC2_SetConfig+0x100>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d003      	beq.n	8007fc4 <TIM_OC2_SetConfig+0x6c>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a27      	ldr	r2, [pc, #156]	; (800805c <TIM_OC2_SetConfig+0x104>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d10d      	bne.n	8007fe0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	011b      	lsls	r3, r3, #4
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a1d      	ldr	r2, [pc, #116]	; (8008058 <TIM_OC2_SetConfig+0x100>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00f      	beq.n	8008008 <TIM_OC2_SetConfig+0xb0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a1c      	ldr	r2, [pc, #112]	; (800805c <TIM_OC2_SetConfig+0x104>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00b      	beq.n	8008008 <TIM_OC2_SetConfig+0xb0>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <TIM_OC2_SetConfig+0x108>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d007      	beq.n	8008008 <TIM_OC2_SetConfig+0xb0>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <TIM_OC2_SetConfig+0x10c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d003      	beq.n	8008008 <TIM_OC2_SetConfig+0xb0>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a19      	ldr	r2, [pc, #100]	; (8008068 <TIM_OC2_SetConfig+0x110>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d113      	bne.n	8008030 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800800e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4313      	orrs	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	621a      	str	r2, [r3, #32]
}
 800804a:	bf00      	nop
 800804c:	371c      	adds	r7, #28
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	40012c00 	.word	0x40012c00
 800805c:	40013400 	.word	0x40013400
 8008060:	40014000 	.word	0x40014000
 8008064:	40014400 	.word	0x40014400
 8008068:	40014800 	.word	0x40014800

0800806c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800809a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f023 0303 	bic.w	r3, r3, #3
 80080a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	021b      	lsls	r3, r3, #8
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a27      	ldr	r2, [pc, #156]	; (8008168 <TIM_OC3_SetConfig+0xfc>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d003      	beq.n	80080d6 <TIM_OC3_SetConfig+0x6a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a26      	ldr	r2, [pc, #152]	; (800816c <TIM_OC3_SetConfig+0x100>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d10d      	bne.n	80080f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a1c      	ldr	r2, [pc, #112]	; (8008168 <TIM_OC3_SetConfig+0xfc>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00f      	beq.n	800811a <TIM_OC3_SetConfig+0xae>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a1b      	ldr	r2, [pc, #108]	; (800816c <TIM_OC3_SetConfig+0x100>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00b      	beq.n	800811a <TIM_OC3_SetConfig+0xae>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <TIM_OC3_SetConfig+0x104>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d007      	beq.n	800811a <TIM_OC3_SetConfig+0xae>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a19      	ldr	r2, [pc, #100]	; (8008174 <TIM_OC3_SetConfig+0x108>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d003      	beq.n	800811a <TIM_OC3_SetConfig+0xae>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a18      	ldr	r2, [pc, #96]	; (8008178 <TIM_OC3_SetConfig+0x10c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d113      	bne.n	8008142 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	621a      	str	r2, [r3, #32]
}
 800815c:	bf00      	nop
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	40012c00 	.word	0x40012c00
 800816c:	40013400 	.word	0x40013400
 8008170:	40014000 	.word	0x40014000
 8008174:	40014400 	.word	0x40014400
 8008178:	40014800 	.word	0x40014800

0800817c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	031b      	lsls	r3, r3, #12
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a28      	ldr	r2, [pc, #160]	; (800827c <TIM_OC4_SetConfig+0x100>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d003      	beq.n	80081e8 <TIM_OC4_SetConfig+0x6c>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a27      	ldr	r2, [pc, #156]	; (8008280 <TIM_OC4_SetConfig+0x104>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d10d      	bne.n	8008204 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	031b      	lsls	r3, r3, #12
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a1d      	ldr	r2, [pc, #116]	; (800827c <TIM_OC4_SetConfig+0x100>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00f      	beq.n	800822c <TIM_OC4_SetConfig+0xb0>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <TIM_OC4_SetConfig+0x104>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00b      	beq.n	800822c <TIM_OC4_SetConfig+0xb0>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a1b      	ldr	r2, [pc, #108]	; (8008284 <TIM_OC4_SetConfig+0x108>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <TIM_OC4_SetConfig+0xb0>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a1a      	ldr	r2, [pc, #104]	; (8008288 <TIM_OC4_SetConfig+0x10c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_OC4_SetConfig+0xb0>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a19      	ldr	r2, [pc, #100]	; (800828c <TIM_OC4_SetConfig+0x110>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d113      	bne.n	8008254 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008232:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800823a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	019b      	lsls	r3, r3, #6
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4313      	orrs	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	019b      	lsls	r3, r3, #6
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	4313      	orrs	r3, r2
 8008252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	621a      	str	r2, [r3, #32]
}
 800826e:	bf00      	nop
 8008270:	371c      	adds	r7, #28
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	40012c00 	.word	0x40012c00
 8008280:	40013400 	.word	0x40013400
 8008284:	40014000 	.word	0x40014000
 8008288:	40014400 	.word	0x40014400
 800828c:	40014800 	.word	0x40014800

08008290 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	041b      	lsls	r3, r3, #16
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4313      	orrs	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a17      	ldr	r2, [pc, #92]	; (8008344 <TIM_OC5_SetConfig+0xb4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00f      	beq.n	800830a <TIM_OC5_SetConfig+0x7a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a16      	ldr	r2, [pc, #88]	; (8008348 <TIM_OC5_SetConfig+0xb8>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d00b      	beq.n	800830a <TIM_OC5_SetConfig+0x7a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a15      	ldr	r2, [pc, #84]	; (800834c <TIM_OC5_SetConfig+0xbc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d007      	beq.n	800830a <TIM_OC5_SetConfig+0x7a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a14      	ldr	r2, [pc, #80]	; (8008350 <TIM_OC5_SetConfig+0xc0>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d003      	beq.n	800830a <TIM_OC5_SetConfig+0x7a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a13      	ldr	r2, [pc, #76]	; (8008354 <TIM_OC5_SetConfig+0xc4>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d109      	bne.n	800831e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008310:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	40012c00 	.word	0x40012c00
 8008348:	40013400 	.word	0x40013400
 800834c:	40014000 	.word	0x40014000
 8008350:	40014400 	.word	0x40014400
 8008354:	40014800 	.word	0x40014800

08008358 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800838a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800839e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	051b      	lsls	r3, r3, #20
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a18      	ldr	r2, [pc, #96]	; (8008410 <TIM_OC6_SetConfig+0xb8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00f      	beq.n	80083d4 <TIM_OC6_SetConfig+0x7c>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a17      	ldr	r2, [pc, #92]	; (8008414 <TIM_OC6_SetConfig+0xbc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00b      	beq.n	80083d4 <TIM_OC6_SetConfig+0x7c>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a16      	ldr	r2, [pc, #88]	; (8008418 <TIM_OC6_SetConfig+0xc0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d007      	beq.n	80083d4 <TIM_OC6_SetConfig+0x7c>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a15      	ldr	r2, [pc, #84]	; (800841c <TIM_OC6_SetConfig+0xc4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <TIM_OC6_SetConfig+0x7c>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a14      	ldr	r2, [pc, #80]	; (8008420 <TIM_OC6_SetConfig+0xc8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d109      	bne.n	80083e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	621a      	str	r2, [r3, #32]
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40012c00 	.word	0x40012c00
 8008414:	40013400 	.word	0x40013400
 8008418:	40014000 	.word	0x40014000
 800841c:	40014400 	.word	0x40014400
 8008420:	40014800 	.word	0x40014800

08008424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f023 0201 	bic.w	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800844e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f023 030a 	bic.w	r3, r3, #10
 8008460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	621a      	str	r2, [r3, #32]
}
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008482:	b480      	push	{r7}
 8008484:	b087      	sub	sp, #28
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	f023 0210 	bic.w	r2, r3, #16
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	031b      	lsls	r3, r3, #12
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80084f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	f043 0307 	orr.w	r3, r3, #7
 8008508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	609a      	str	r2, [r3, #8]
}
 8008510:	bf00      	nop
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	021a      	lsls	r2, r3, #8
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	431a      	orrs	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4313      	orrs	r3, r2
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	609a      	str	r2, [r3, #8]
}
 8008550:	bf00      	nop
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	2201      	movs	r2, #1
 8008570:	fa02 f303 	lsl.w	r3, r2, r3
 8008574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	43db      	mvns	r3, r3
 800857e:	401a      	ands	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a1a      	ldr	r2, [r3, #32]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f003 031f 	and.w	r3, r3, #31
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	fa01 f303 	lsl.w	r3, r1, r3
 8008594:	431a      	orrs	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	621a      	str	r2, [r3, #32]
}
 800859a:	bf00      	nop
 800859c:	371c      	adds	r7, #28
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
	...

080085a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085bc:	2302      	movs	r3, #2
 80085be:	e065      	b.n	800868c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a2c      	ldr	r2, [pc, #176]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d004      	beq.n	80085f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a2b      	ldr	r2, [pc, #172]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d108      	bne.n	8008606 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800860c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a1b      	ldr	r2, [pc, #108]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d018      	beq.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008636:	d013      	beq.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a18      	ldr	r2, [pc, #96]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00e      	beq.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d009      	beq.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a12      	ldr	r2, [pc, #72]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d004      	beq.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d10c      	bne.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008666:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	4313      	orrs	r3, r2
 8008670:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	40012c00 	.word	0x40012c00
 800869c:	40013400 	.word	0x40013400
 80086a0:	40000400 	.word	0x40000400
 80086a4:	40000800 	.word	0x40000800
 80086a8:	40014000 	.word	0x40014000

080086ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e073      	b.n	80087b0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	041b      	lsls	r3, r3, #16
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a19      	ldr	r2, [pc, #100]	; (80087bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d004      	beq.n	8008764 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a18      	ldr	r2, [pc, #96]	; (80087c0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d11c      	bne.n	800879e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	051b      	lsls	r3, r3, #20
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	4313      	orrs	r3, r2
 800878e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	40012c00 	.word	0x40012c00
 80087c0:	40013400 	.word	0x40013400

080087c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008860:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008864:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	b29a      	uxth	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800887e:	b480      	push	{r7}
 8008880:	b085      	sub	sp, #20
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008886:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800888a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	b29b      	uxth	r3, r3
 8008898:	43db      	mvns	r3, r3
 800889a:	b29b      	uxth	r3, r3
 800889c:	4013      	ands	r3, r2
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	1d3b      	adds	r3, r7, #4
 80088be:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b09d      	sub	sp, #116	; 0x74
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	b29b      	uxth	r3, r3
 800890e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008916:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	78db      	ldrb	r3, [r3, #3]
 800891e:	2b03      	cmp	r3, #3
 8008920:	d81f      	bhi.n	8008962 <USB_ActivateEndpoint+0x72>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <USB_ActivateEndpoint+0x38>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008939 	.word	0x08008939
 800892c:	08008955 	.word	0x08008955
 8008930:	0800896b 	.word	0x0800896b
 8008934:	08008947 	.word	0x08008947
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008938:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800893c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008940:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008944:	e012      	b.n	800896c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008946:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800894a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800894e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008952:	e00b      	b.n	800896c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008954:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008958:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800895c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008960:	e004      	b.n	800896c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008968:	e000      	b.n	800896c <USB_ActivateEndpoint+0x7c>
      break;
 800896a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	441a      	add	r2, r3
 8008976:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800897a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800897e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898a:	b29b      	uxth	r3, r3
 800898c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	b21b      	sxth	r3, r3
 800899e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a6:	b21a      	sxth	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	b21b      	sxth	r3, r3
 80089ae:	4313      	orrs	r3, r2
 80089b0:	b21b      	sxth	r3, r3
 80089b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	441a      	add	r2, r3
 80089c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80089c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	7b1b      	ldrb	r3, [r3, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 8178 	bne.w	8008cd2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	785b      	ldrb	r3, [r3, #1]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 8084 	beq.w	8008af4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	461a      	mov	r2, r3
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	4413      	add	r3, r2
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	00da      	lsls	r2, r3, #3
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	88db      	ldrh	r3, [r3, #6]
 8008a14:	085b      	lsrs	r3, r3, #1
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	827b      	strh	r3, [r7, #18]
 8008a2e:	8a7b      	ldrh	r3, [r7, #18]
 8008a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01b      	beq.n	8008a70 <USB_ActivateEndpoint+0x180>
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4e:	823b      	strh	r3, [r7, #16]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	441a      	add	r2, r3
 8008a5a:	8a3b      	ldrh	r3, [r7, #16]
 8008a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	78db      	ldrb	r3, [r3, #3]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d020      	beq.n	8008aba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a8e:	81bb      	strh	r3, [r7, #12]
 8008a90:	89bb      	ldrh	r3, [r7, #12]
 8008a92:	f083 0320 	eor.w	r3, r3, #32
 8008a96:	81bb      	strh	r3, [r7, #12]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	441a      	add	r2, r3
 8008aa2:	89bb      	ldrh	r3, [r7, #12]
 8008aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	8013      	strh	r3, [r2, #0]
 8008ab8:	e2d5      	b.n	8009066 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ad0:	81fb      	strh	r3, [r7, #14]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	441a      	add	r2, r3
 8008adc:	89fb      	ldrh	r3, [r7, #14]
 8008ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	8013      	strh	r3, [r2, #0]
 8008af2:	e2b8      	b.n	8009066 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	633b      	str	r3, [r7, #48]	; 0x30
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	4413      	add	r3, r2
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	00da      	lsls	r2, r3, #3
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	4413      	add	r3, r2
 8008b12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	88db      	ldrh	r3, [r3, #6]
 8008b1c:	085b      	lsrs	r3, r3, #1
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	461a      	mov	r2, r3
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	4413      	add	r3, r2
 8008b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	00da      	lsls	r2, r3, #3
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	4413      	add	r3, r2
 8008b46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	801a      	strh	r2, [r3, #0]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	2b3e      	cmp	r3, #62	; 0x3e
 8008b62:	d91d      	bls.n	8008ba0 <USB_ActivateEndpoint+0x2b0>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	095b      	lsrs	r3, r3, #5
 8008b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <USB_ActivateEndpoint+0x28e>
 8008b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	029b      	lsls	r3, r3, #10
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	801a      	strh	r2, [r3, #0]
 8008b9e:	e026      	b.n	8008bee <USB_ActivateEndpoint+0x2fe>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <USB_ActivateEndpoint+0x2ce>
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	801a      	strh	r2, [r3, #0]
 8008bbc:	e017      	b.n	8008bee <USB_ActivateEndpoint+0x2fe>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	085b      	lsrs	r3, r3, #1
 8008bc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <USB_ActivateEndpoint+0x2e8>
 8008bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	029b      	lsls	r3, r3, #10
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	4313      	orrs	r3, r2
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8008bfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d01b      	beq.n	8008c3e <USB_ActivateEndpoint+0x34e>
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1c:	843b      	strh	r3, [r7, #32]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	441a      	add	r2, r3
 8008c28:	8c3b      	ldrh	r3, [r7, #32]
 8008c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d124      	bne.n	8008c90 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5c:	83bb      	strh	r3, [r7, #28]
 8008c5e:	8bbb      	ldrh	r3, [r7, #28]
 8008c60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c64:	83bb      	strh	r3, [r7, #28]
 8008c66:	8bbb      	ldrh	r3, [r7, #28]
 8008c68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c6c:	83bb      	strh	r3, [r7, #28]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	441a      	add	r2, r3
 8008c78:	8bbb      	ldrh	r3, [r7, #28]
 8008c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	8013      	strh	r3, [r2, #0]
 8008c8e:	e1ea      	b.n	8009066 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca6:	83fb      	strh	r3, [r7, #30]
 8008ca8:	8bfb      	ldrh	r3, [r7, #30]
 8008caa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cae:	83fb      	strh	r3, [r7, #30]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	441a      	add	r2, r3
 8008cba:	8bfb      	ldrh	r3, [r7, #30]
 8008cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	8013      	strh	r3, [r2, #0]
 8008cd0:	e1c9      	b.n	8009066 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	78db      	ldrb	r3, [r3, #3]
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d11e      	bne.n	8008d18 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	441a      	add	r2, r3
 8008cfe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	8013      	strh	r3, [r2, #0]
 8008d16:	e01d      	b.n	8008d54 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	441a      	add	r2, r3
 8008d3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d64:	4413      	add	r3, r2
 8008d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	00da      	lsls	r2, r3, #3
 8008d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d76:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	891b      	ldrh	r3, [r3, #8]
 8008d7c:	085b      	lsrs	r3, r3, #1
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d86:	801a      	strh	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d98:	4413      	add	r3, r2
 8008d9a:	657b      	str	r3, [r7, #84]	; 0x54
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	00da      	lsls	r2, r3, #3
 8008da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da4:	4413      	add	r3, r2
 8008da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008daa:	653b      	str	r3, [r7, #80]	; 0x50
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	895b      	ldrh	r3, [r3, #10]
 8008db0:	085b      	lsrs	r3, r3, #1
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	785b      	ldrb	r3, [r3, #1]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f040 8093 	bne.w	8008eec <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008dd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d01b      	beq.n	8008e1a <USB_ActivateEndpoint+0x52a>
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	441a      	add	r2, r3
 8008e04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008e28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d01b      	beq.n	8008e6a <USB_ActivateEndpoint+0x57a>
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	441a      	add	r2, r3
 8008e54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e80:	873b      	strh	r3, [r7, #56]	; 0x38
 8008e82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e88:	873b      	strh	r3, [r7, #56]	; 0x38
 8008e8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e90:	873b      	strh	r3, [r7, #56]	; 0x38
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	441a      	add	r2, r3
 8008e9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	441a      	add	r2, r3
 8008ed4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	8013      	strh	r3, [r2, #0]
 8008eea:	e0bc      	b.n	8009066 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01d      	beq.n	8008f44 <USB_ActivateEndpoint+0x654>
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	441a      	add	r2, r3
 8008f2c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008f54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01d      	beq.n	8008f9c <USB_ActivateEndpoint+0x6ac>
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	441a      	add	r2, r3
 8008f84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	78db      	ldrb	r3, [r3, #3]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d024      	beq.n	8008fee <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008fbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008fc2:	f083 0320 	eor.w	r3, r3, #32
 8008fc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	441a      	add	r2, r3
 8008fd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	8013      	strh	r3, [r2, #0]
 8008fec:	e01d      	b.n	800902a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009004:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	441a      	add	r2, r3
 8009012:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800901a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800901e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009026:	b29b      	uxth	r3, r3
 8009028:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	b29b      	uxth	r3, r3
 8009038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800903c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009040:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	441a      	add	r2, r3
 800904e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800905a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800905e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009062:	b29b      	uxth	r3, r3
 8009064:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009066:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800906a:	4618      	mov	r0, r3
 800906c:	3774      	adds	r7, #116	; 0x74
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop

08009078 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009078:	b480      	push	{r7}
 800907a:	b08d      	sub	sp, #52	; 0x34
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	7b1b      	ldrb	r3, [r3, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f040 808e 	bne.w	80091a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d044      	beq.n	800911e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	81bb      	strh	r3, [r7, #12]
 80090a2:	89bb      	ldrh	r3, [r7, #12]
 80090a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01b      	beq.n	80090e4 <USB_DeactivateEndpoint+0x6c>
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c2:	817b      	strh	r3, [r7, #10]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	441a      	add	r2, r3
 80090ce:	897b      	ldrh	r3, [r7, #10]
 80090d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090fa:	813b      	strh	r3, [r7, #8]
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	441a      	add	r2, r3
 8009106:	893b      	ldrh	r3, [r7, #8]
 8009108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800910c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009118:	b29b      	uxth	r3, r3
 800911a:	8013      	strh	r3, [r2, #0]
 800911c:	e192      	b.n	8009444 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	827b      	strh	r3, [r7, #18]
 800912c:	8a7b      	ldrh	r3, [r7, #18]
 800912e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01b      	beq.n	800916e <USB_DeactivateEndpoint+0xf6>
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	b29b      	uxth	r3, r3
 8009144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800914c:	823b      	strh	r3, [r7, #16]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	441a      	add	r2, r3
 8009158:	8a3b      	ldrh	r3, [r7, #16]
 800915a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800915e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916a:	b29b      	uxth	r3, r3
 800916c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	b29b      	uxth	r3, r3
 800917c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009184:	81fb      	strh	r3, [r7, #14]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	441a      	add	r2, r3
 8009190:	89fb      	ldrh	r3, [r7, #14]
 8009192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800919a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800919e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	8013      	strh	r3, [r2, #0]
 80091a6:	e14d      	b.n	8009444 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f040 80a5 	bne.w	80092fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	843b      	strh	r3, [r7, #32]
 80091c0:	8c3b      	ldrh	r3, [r7, #32]
 80091c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01b      	beq.n	8009202 <USB_DeactivateEndpoint+0x18a>
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e0:	83fb      	strh	r3, [r7, #30]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	441a      	add	r2, r3
 80091ec:	8bfb      	ldrh	r3, [r7, #30]
 80091ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fe:	b29b      	uxth	r3, r3
 8009200:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	83bb      	strh	r3, [r7, #28]
 8009210:	8bbb      	ldrh	r3, [r7, #28]
 8009212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d01b      	beq.n	8009252 <USB_DeactivateEndpoint+0x1da>
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800922c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009230:	837b      	strh	r3, [r7, #26]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	441a      	add	r2, r3
 800923c:	8b7b      	ldrh	r3, [r7, #26]
 800923e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800924a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800924e:	b29b      	uxth	r3, r3
 8009250:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009268:	833b      	strh	r3, [r7, #24]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	441a      	add	r2, r3
 8009274:	8b3b      	ldrh	r3, [r7, #24]
 8009276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800927a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800927e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009282:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009286:	b29b      	uxth	r3, r3
 8009288:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800929c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a0:	82fb      	strh	r3, [r7, #22]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	441a      	add	r2, r3
 80092ac:	8afb      	ldrh	r3, [r7, #22]
 80092ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092be:	b29b      	uxth	r3, r3
 80092c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	881b      	ldrh	r3, [r3, #0]
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092d8:	82bb      	strh	r3, [r7, #20]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	441a      	add	r2, r3
 80092e4:	8abb      	ldrh	r3, [r7, #20]
 80092e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	8013      	strh	r3, [r2, #0]
 80092fa:	e0a3      	b.n	8009444 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800930a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800930c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d01b      	beq.n	800934c <USB_DeactivateEndpoint+0x2d4>
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	b29b      	uxth	r3, r3
 8009322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	441a      	add	r2, r3
 8009336:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800933c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009348:	b29b      	uxth	r3, r3
 800934a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	857b      	strh	r3, [r7, #42]	; 0x2a
 800935a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01b      	beq.n	800939c <USB_DeactivateEndpoint+0x324>
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937a:	853b      	strh	r3, [r7, #40]	; 0x28
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	441a      	add	r2, r3
 8009386:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800938c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009394:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009398:	b29b      	uxth	r3, r3
 800939a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	441a      	add	r2, r3
 80093be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	441a      	add	r2, r3
 80093f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009408:	b29b      	uxth	r3, r3
 800940a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	b29b      	uxth	r3, r3
 800941a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800941e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009422:	847b      	strh	r3, [r7, #34]	; 0x22
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	441a      	add	r2, r3
 800942e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800943c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009440:	b29b      	uxth	r3, r3
 8009442:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3734      	adds	r7, #52	; 0x34
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b0c2      	sub	sp, #264	; 0x108
 8009456:	af00      	add	r7, sp, #0
 8009458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009460:	6018      	str	r0, [r3, #0]
 8009462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800946a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800946c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	2b01      	cmp	r3, #1
 800947a:	f040 86b7 	bne.w	800a1ec <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800947e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699a      	ldr	r2, [r3, #24]
 800948a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	429a      	cmp	r2, r3
 8009498:	d908      	bls.n	80094ac <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800949a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80094aa:	e007      	b.n	80094bc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80094ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80094bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	7b1b      	ldrb	r3, [r3, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d13a      	bne.n	8009542 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80094cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6959      	ldr	r1, [r3, #20]
 80094d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	88da      	ldrh	r2, [r3, #6]
 80094e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80094ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80094f2:	6800      	ldr	r0, [r0, #0]
 80094f4:	f001 fc98 	bl	800ae28 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80094f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009512:	b29b      	uxth	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	4413      	add	r3, r2
 800951a:	613b      	str	r3, [r7, #16]
 800951c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	00da      	lsls	r2, r3, #3
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	4413      	add	r3, r2
 800952e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009538:	b29a      	uxth	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	801a      	strh	r2, [r3, #0]
 800953e:	f000 be1f 	b.w	800a180 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	78db      	ldrb	r3, [r3, #3]
 800954e:	2b02      	cmp	r3, #2
 8009550:	f040 8462 	bne.w	8009e18 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6a1a      	ldr	r2, [r3, #32]
 8009560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	429a      	cmp	r2, r3
 800956e:	f240 83df 	bls.w	8009d30 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009598:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800959c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	441a      	add	r2, r3
 80095b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80095c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80095ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6a1a      	ldr	r2, [r3, #32]
 80095da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	b29b      	uxth	r3, r3
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 81c7 	beq.w	80099a2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	633b      	str	r3, [r7, #48]	; 0x30
 8009620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d177      	bne.n	8009720 <USB_EPStartXfer+0x2ce>
 8009630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	62bb      	str	r3, [r7, #40]	; 0x28
 800963c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800964a:	b29b      	uxth	r3, r3
 800964c:	461a      	mov	r2, r3
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	4413      	add	r3, r2
 8009652:	62bb      	str	r3, [r7, #40]	; 0x28
 8009654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	00da      	lsls	r2, r3, #3
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	4413      	add	r3, r2
 8009666:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	b29b      	uxth	r3, r3
 8009672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009676:	b29a      	uxth	r2, r3
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009680:	2b3e      	cmp	r3, #62	; 0x3e
 8009682:	d921      	bls.n	80096c8 <USB_EPStartXfer+0x276>
 8009684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009688:	095b      	lsrs	r3, r3, #5
 800968a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009692:	f003 031f 	and.w	r3, r3, #31
 8009696:	2b00      	cmp	r3, #0
 8009698:	d104      	bne.n	80096a4 <USB_EPStartXfer+0x252>
 800969a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800969e:	3b01      	subs	r3, #1
 80096a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	881b      	ldrh	r3, [r3, #0]
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	029b      	lsls	r3, r3, #10
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4313      	orrs	r3, r2
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	801a      	strh	r2, [r3, #0]
 80096c6:	e050      	b.n	800976a <USB_EPStartXfer+0x318>
 80096c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <USB_EPStartXfer+0x294>
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096de:	b29a      	uxth	r2, r3
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	e041      	b.n	800976a <USB_EPStartXfer+0x318>
 80096e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ea:	085b      	lsrs	r3, r3, #1
 80096ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d004      	beq.n	8009706 <USB_EPStartXfer+0x2b4>
 80096fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009700:	3301      	adds	r3, #1
 8009702:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	b29a      	uxth	r2, r3
 800970c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009710:	b29b      	uxth	r3, r3
 8009712:	029b      	lsls	r3, r3, #10
 8009714:	b29b      	uxth	r3, r3
 8009716:	4313      	orrs	r3, r2
 8009718:	b29a      	uxth	r2, r3
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	801a      	strh	r2, [r3, #0]
 800971e:	e024      	b.n	800976a <USB_EPStartXfer+0x318>
 8009720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d11c      	bne.n	800976a <USB_EPStartXfer+0x318>
 8009730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800973e:	b29b      	uxth	r3, r3
 8009740:	461a      	mov	r2, r3
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	4413      	add	r3, r2
 8009746:	633b      	str	r3, [r7, #48]	; 0x30
 8009748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	00da      	lsls	r2, r3, #3
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	4413      	add	r3, r2
 800975a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800975e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009764:	b29a      	uxth	r2, r3
 8009766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800976a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	895b      	ldrh	r3, [r3, #10]
 8009776:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800977a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6959      	ldr	r1, [r3, #20]
 8009786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800978a:	b29b      	uxth	r3, r3
 800978c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009790:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009794:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009798:	6800      	ldr	r0, [r0, #0]
 800979a:	f001 fb45 	bl	800ae28 <USB_WritePMA>
            ep->xfer_buff += len;
 800979e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	695a      	ldr	r2, [r3, #20]
 80097aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ae:	441a      	add	r2, r3
 80097b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80097bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6a1a      	ldr	r2, [r3, #32]
 80097c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d90f      	bls.n	80097f8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80097d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6a1a      	ldr	r2, [r3, #32]
 80097e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e8:	1ad2      	subs	r2, r2, r3
 80097ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	621a      	str	r2, [r3, #32]
 80097f6:	e00e      	b.n	8009816 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80097f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800980c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800981a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	785b      	ldrb	r3, [r3, #1]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d177      	bne.n	8009916 <USB_EPStartXfer+0x4c4>
 8009826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009840:	b29b      	uxth	r3, r3
 8009842:	461a      	mov	r2, r3
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	4413      	add	r3, r2
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	00da      	lsls	r2, r3, #3
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	4413      	add	r3, r2
 800985c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800986c:	b29a      	uxth	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	801a      	strh	r2, [r3, #0]
 8009872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009876:	2b3e      	cmp	r3, #62	; 0x3e
 8009878:	d921      	bls.n	80098be <USB_EPStartXfer+0x46c>
 800987a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009888:	f003 031f 	and.w	r3, r3, #31
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <USB_EPStartXfer+0x448>
 8009890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009894:	3b01      	subs	r3, #1
 8009896:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	b29a      	uxth	r2, r3
 80098a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	029b      	lsls	r3, r3, #10
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	4313      	orrs	r3, r2
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	801a      	strh	r2, [r3, #0]
 80098bc:	e056      	b.n	800996c <USB_EPStartXfer+0x51a>
 80098be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <USB_EPStartXfer+0x48a>
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	801a      	strh	r2, [r3, #0]
 80098da:	e047      	b.n	800996c <USB_EPStartXfer+0x51a>
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e0:	085b      	lsrs	r3, r3, #1
 80098e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <USB_EPStartXfer+0x4aa>
 80098f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098f6:	3301      	adds	r3, #1
 80098f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	b29a      	uxth	r2, r3
 8009902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009906:	b29b      	uxth	r3, r3
 8009908:	029b      	lsls	r3, r3, #10
 800990a:	b29b      	uxth	r3, r3
 800990c:	4313      	orrs	r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	801a      	strh	r2, [r3, #0]
 8009914:	e02a      	b.n	800996c <USB_EPStartXfer+0x51a>
 8009916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d122      	bne.n	800996c <USB_EPStartXfer+0x51a>
 8009926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	623b      	str	r3, [r7, #32]
 8009932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009940:	b29b      	uxth	r3, r3
 8009942:	461a      	mov	r2, r3
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	4413      	add	r3, r2
 8009948:	623b      	str	r3, [r7, #32]
 800994a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	00da      	lsls	r2, r3, #3
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	4413      	add	r3, r2
 800995c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009960:	61fb      	str	r3, [r7, #28]
 8009962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009966:	b29a      	uxth	r2, r3
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800996c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	891b      	ldrh	r3, [r3, #8]
 8009978:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800997c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6959      	ldr	r1, [r3, #20]
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800998c:	b29b      	uxth	r3, r3
 800998e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009992:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009996:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800999a:	6800      	ldr	r0, [r0, #0]
 800999c:	f001 fa44 	bl	800ae28 <USB_WritePMA>
 80099a0:	e3ee      	b.n	800a180 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80099a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	785b      	ldrb	r3, [r3, #1]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d177      	bne.n	8009aa2 <USB_EPStartXfer+0x650>
 80099b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80099be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	461a      	mov	r2, r3
 80099d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d2:	4413      	add	r3, r2
 80099d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80099d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	00da      	lsls	r2, r3, #3
 80099e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099e6:	4413      	add	r3, r2
 80099e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099ec:	647b      	str	r3, [r7, #68]	; 0x44
 80099ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fc:	801a      	strh	r2, [r3, #0]
 80099fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a02:	2b3e      	cmp	r3, #62	; 0x3e
 8009a04:	d921      	bls.n	8009a4a <USB_EPStartXfer+0x5f8>
 8009a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a0a:	095b      	lsrs	r3, r3, #5
 8009a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a14:	f003 031f 	and.w	r3, r3, #31
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <USB_EPStartXfer+0x5d4>
 8009a1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a20:	3b01      	subs	r3, #1
 8009a22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	029b      	lsls	r3, r3, #10
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	4313      	orrs	r3, r2
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a46:	801a      	strh	r2, [r3, #0]
 8009a48:	e056      	b.n	8009af8 <USB_EPStartXfer+0x6a6>
 8009a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <USB_EPStartXfer+0x616>
 8009a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	e047      	b.n	8009af8 <USB_EPStartXfer+0x6a6>
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a6c:	085b      	lsrs	r3, r3, #1
 8009a6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d004      	beq.n	8009a88 <USB_EPStartXfer+0x636>
 8009a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a82:	3301      	adds	r3, #1
 8009a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	029b      	lsls	r3, r3, #10
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a9e:	801a      	strh	r2, [r3, #0]
 8009aa0:	e02a      	b.n	8009af8 <USB_EPStartXfer+0x6a6>
 8009aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	785b      	ldrb	r3, [r3, #1]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d122      	bne.n	8009af8 <USB_EPStartXfer+0x6a6>
 8009ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	653b      	str	r3, [r7, #80]	; 0x50
 8009abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ad2:	4413      	add	r3, r2
 8009ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8009ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	00da      	lsls	r2, r3, #3
 8009ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	891b      	ldrh	r3, [r3, #8]
 8009b04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6959      	ldr	r1, [r3, #20]
 8009b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009b22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009b26:	6800      	ldr	r0, [r0, #0]
 8009b28:	f001 f97e 	bl	800ae28 <USB_WritePMA>
            ep->xfer_buff += len;
 8009b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695a      	ldr	r2, [r3, #20]
 8009b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b3c:	441a      	add	r2, r3
 8009b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6a1a      	ldr	r2, [r3, #32]
 8009b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d90f      	bls.n	8009b86 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6a1a      	ldr	r2, [r3, #32]
 8009b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b76:	1ad2      	subs	r2, r2, r3
 8009b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	621a      	str	r2, [r3, #32]
 8009b84:	e00e      	b.n	8009ba4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	643b      	str	r3, [r7, #64]	; 0x40
 8009bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	785b      	ldrb	r3, [r3, #1]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d177      	bne.n	8009cb0 <USB_EPStartXfer+0x85e>
 8009bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be0:	4413      	add	r3, r2
 8009be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	00da      	lsls	r2, r3, #3
 8009bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0a:	801a      	strh	r2, [r3, #0]
 8009c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c10:	2b3e      	cmp	r3, #62	; 0x3e
 8009c12:	d921      	bls.n	8009c58 <USB_EPStartXfer+0x806>
 8009c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c18:	095b      	lsrs	r3, r3, #5
 8009c1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c22:	f003 031f 	and.w	r3, r3, #31
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d104      	bne.n	8009c34 <USB_EPStartXfer+0x7e2>
 8009c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	029b      	lsls	r3, r3, #10
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	4313      	orrs	r3, r2
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c54:	801a      	strh	r2, [r3, #0]
 8009c56:	e050      	b.n	8009cfa <USB_EPStartXfer+0x8a8>
 8009c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10a      	bne.n	8009c76 <USB_EPStartXfer+0x824>
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c72:	801a      	strh	r2, [r3, #0]
 8009c74:	e041      	b.n	8009cfa <USB_EPStartXfer+0x8a8>
 8009c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c7a:	085b      	lsrs	r3, r3, #1
 8009c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <USB_EPStartXfer+0x844>
 8009c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c90:	3301      	adds	r3, #1
 8009c92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	029b      	lsls	r3, r3, #10
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cac:	801a      	strh	r2, [r3, #0]
 8009cae:	e024      	b.n	8009cfa <USB_EPStartXfer+0x8a8>
 8009cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	785b      	ldrb	r3, [r3, #1]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d11c      	bne.n	8009cfa <USB_EPStartXfer+0x8a8>
 8009cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cd4:	4413      	add	r3, r2
 8009cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8009cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	00da      	lsls	r2, r3, #3
 8009ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce8:	4413      	add	r3, r2
 8009cea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	895b      	ldrh	r3, [r3, #10]
 8009d06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6959      	ldr	r1, [r3, #20]
 8009d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d28:	6800      	ldr	r0, [r0, #0]
 8009d2a:	f001 f87d 	bl	800ae28 <USB_WritePMA>
 8009d2e:	e227      	b.n	800a180 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	441a      	add	r2, r3
 8009d84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dbc:	4413      	add	r3, r2
 8009dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	00da      	lsls	r2, r3, #3
 8009dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009dd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009de0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	891b      	ldrh	r3, [r3, #8]
 8009dee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6959      	ldr	r1, [r3, #20]
 8009dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009e0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009e10:	6800      	ldr	r0, [r0, #0]
 8009e12:	f001 f809 	bl	800ae28 <USB_WritePMA>
 8009e16:	e1b3      	b.n	800a180 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	6a1a      	ldr	r2, [r3, #32]
 8009e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e28:	1ad2      	subs	r2, r2, r3
 8009e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 80c6 	beq.w	8009fea <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	673b      	str	r3, [r7, #112]	; 0x70
 8009e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	785b      	ldrb	r3, [r3, #1]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d177      	bne.n	8009f6a <USB_EPStartXfer+0xb18>
 8009e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e9a:	4413      	add	r3, r2
 8009e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	00da      	lsls	r2, r3, #3
 8009eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eae:	4413      	add	r3, r2
 8009eb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8009eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eca:	2b3e      	cmp	r3, #62	; 0x3e
 8009ecc:	d921      	bls.n	8009f12 <USB_EPStartXfer+0xac0>
 8009ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009edc:	f003 031f 	and.w	r3, r3, #31
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d104      	bne.n	8009eee <USB_EPStartXfer+0xa9c>
 8009ee4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	029b      	lsls	r3, r3, #10
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	4313      	orrs	r3, r2
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f0e:	801a      	strh	r2, [r3, #0]
 8009f10:	e050      	b.n	8009fb4 <USB_EPStartXfer+0xb62>
 8009f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10a      	bne.n	8009f30 <USB_EPStartXfer+0xade>
 8009f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f2c:	801a      	strh	r2, [r3, #0]
 8009f2e:	e041      	b.n	8009fb4 <USB_EPStartXfer+0xb62>
 8009f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f34:	085b      	lsrs	r3, r3, #1
 8009f36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d004      	beq.n	8009f50 <USB_EPStartXfer+0xafe>
 8009f46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	029b      	lsls	r3, r3, #10
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	4313      	orrs	r3, r2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f66:	801a      	strh	r2, [r3, #0]
 8009f68:	e024      	b.n	8009fb4 <USB_EPStartXfer+0xb62>
 8009f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	785b      	ldrb	r3, [r3, #1]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d11c      	bne.n	8009fb4 <USB_EPStartXfer+0xb62>
 8009f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f8e:	4413      	add	r3, r2
 8009f90:	673b      	str	r3, [r7, #112]	; 0x70
 8009f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	00da      	lsls	r2, r3, #3
 8009fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	895b      	ldrh	r3, [r3, #10]
 8009fc0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6959      	ldr	r1, [r3, #20]
 8009fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009fda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009fde:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009fe2:	6800      	ldr	r0, [r0, #0]
 8009fe4:	f000 ff20 	bl	800ae28 <USB_WritePMA>
 8009fe8:	e0ca      	b.n	800a180 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	785b      	ldrb	r3, [r3, #1]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d177      	bne.n	800a0ea <USB_EPStartXfer+0xc98>
 8009ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a014:	b29b      	uxth	r3, r3
 800a016:	461a      	mov	r2, r3
 800a018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a01a:	4413      	add	r3, r2
 800a01c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	00da      	lsls	r2, r3, #3
 800a02c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a02e:	4413      	add	r3, r2
 800a030:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a034:	67bb      	str	r3, [r7, #120]	; 0x78
 800a036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a040:	b29a      	uxth	r2, r3
 800a042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04a:	2b3e      	cmp	r3, #62	; 0x3e
 800a04c:	d921      	bls.n	800a092 <USB_EPStartXfer+0xc40>
 800a04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a052:	095b      	lsrs	r3, r3, #5
 800a054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a05c:	f003 031f 	and.w	r3, r3, #31
 800a060:	2b00      	cmp	r3, #0
 800a062:	d104      	bne.n	800a06e <USB_EPStartXfer+0xc1c>
 800a064:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a068:	3b01      	subs	r3, #1
 800a06a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a06e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	b29a      	uxth	r2, r3
 800a074:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a078:	b29b      	uxth	r3, r3
 800a07a:	029b      	lsls	r3, r3, #10
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	4313      	orrs	r3, r2
 800a080:	b29b      	uxth	r3, r3
 800a082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a08e:	801a      	strh	r2, [r3, #0]
 800a090:	e05c      	b.n	800a14c <USB_EPStartXfer+0xcfa>
 800a092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10a      	bne.n	800a0b0 <USB_EPStartXfer+0xc5e>
 800a09a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ac:	801a      	strh	r2, [r3, #0]
 800a0ae:	e04d      	b.n	800a14c <USB_EPStartXfer+0xcfa>
 800a0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b4:	085b      	lsrs	r3, r3, #1
 800a0b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d004      	beq.n	800a0d0 <USB_EPStartXfer+0xc7e>
 800a0c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	029b      	lsls	r3, r3, #10
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0e6:	801a      	strh	r2, [r3, #0]
 800a0e8:	e030      	b.n	800a14c <USB_EPStartXfer+0xcfa>
 800a0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	785b      	ldrb	r3, [r3, #1]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d128      	bne.n	800a14c <USB_EPStartXfer+0xcfa>
 800a0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a10c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a116:	b29b      	uxth	r3, r3
 800a118:	461a      	mov	r2, r3
 800a11a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a11e:	4413      	add	r3, r2
 800a120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	00da      	lsls	r2, r3, #3
 800a132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a136:	4413      	add	r3, r2
 800a138:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a13c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a144:	b29a      	uxth	r2, r3
 800a146:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a14a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	891b      	ldrh	r3, [r3, #8]
 800a158:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6959      	ldr	r1, [r3, #20]
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a172:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a176:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a17a:	6800      	ldr	r0, [r0, #0]
 800a17c:	f000 fe54 	bl	800ae28 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a6:	817b      	strh	r3, [r7, #10]
 800a1a8:	897b      	ldrh	r3, [r7, #10]
 800a1aa:	f083 0310 	eor.w	r3, r3, #16
 800a1ae:	817b      	strh	r3, [r7, #10]
 800a1b0:	897b      	ldrh	r3, [r7, #10]
 800a1b2:	f083 0320 	eor.w	r3, r3, #32
 800a1b6:	817b      	strh	r3, [r7, #10]
 800a1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	441a      	add	r2, r3
 800a1d2:	897b      	ldrh	r3, [r7, #10]
 800a1d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	8013      	strh	r3, [r2, #0]
 800a1e8:	f000 bcde 	b.w	800aba8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	7b1b      	ldrb	r3, [r3, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f040 80bb 	bne.w	800a374 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	429a      	cmp	r2, r3
 800a218:	d917      	bls.n	800a24a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a22a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23a:	1ad2      	subs	r2, r2, r3
 800a23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	619a      	str	r2, [r3, #24]
 800a248:	e00e      	b.n	800a268 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2200      	movs	r2, #0
 800a266:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a26c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a284:	b29b      	uxth	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a28c:	4413      	add	r3, r2
 800a28e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	00da      	lsls	r2, r3, #3
 800a2a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a2ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2c0:	801a      	strh	r2, [r3, #0]
 800a2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c6:	2b3e      	cmp	r3, #62	; 0x3e
 800a2c8:	d924      	bls.n	800a314 <USB_EPStartXfer+0xec2>
 800a2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ce:	095b      	lsrs	r3, r3, #5
 800a2d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2d8:	f003 031f 	and.w	r3, r3, #31
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d104      	bne.n	800a2ea <USB_EPStartXfer+0xe98>
 800a2e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	029b      	lsls	r3, r3, #10
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a308:	b29a      	uxth	r2, r3
 800a30a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a30e:	801a      	strh	r2, [r3, #0]
 800a310:	f000 bc10 	b.w	800ab34 <USB_EPStartXfer+0x16e2>
 800a314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10c      	bne.n	800a336 <USB_EPStartXfer+0xee4>
 800a31c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a332:	801a      	strh	r2, [r3, #0]
 800a334:	e3fe      	b.n	800ab34 <USB_EPStartXfer+0x16e2>
 800a336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a33a:	085b      	lsrs	r3, r3, #1
 800a33c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d004      	beq.n	800a356 <USB_EPStartXfer+0xf04>
 800a34c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a350:	3301      	adds	r3, #1
 800a352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a362:	b29b      	uxth	r3, r3
 800a364:	029b      	lsls	r3, r3, #10
 800a366:	b29b      	uxth	r3, r3
 800a368:	4313      	orrs	r3, r2
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a370:	801a      	strh	r2, [r3, #0]
 800a372:	e3df      	b.n	800ab34 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	78db      	ldrb	r3, [r3, #3]
 800a380:	2b02      	cmp	r3, #2
 800a382:	f040 8218 	bne.w	800a7b6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f040 809d 	bne.w	800a4d2 <USB_EPStartXfer+0x1080>
 800a398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a39c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3bc:	4413      	add	r3, r2
 800a3be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	00da      	lsls	r2, r3, #3
 800a3d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a3de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3f0:	801a      	strh	r2, [r3, #0]
 800a3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	2b3e      	cmp	r3, #62	; 0x3e
 800a400:	d92b      	bls.n	800a45a <USB_EPStartXfer+0x1008>
 800a402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	095b      	lsrs	r3, r3, #5
 800a410:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	f003 031f 	and.w	r3, r3, #31
 800a424:	2b00      	cmp	r3, #0
 800a426:	d104      	bne.n	800a432 <USB_EPStartXfer+0xfe0>
 800a428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42c:	3b01      	subs	r3, #1
 800a42e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	b29a      	uxth	r2, r3
 800a43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a43e:	b29b      	uxth	r3, r3
 800a440:	029b      	lsls	r3, r3, #10
 800a442:	b29b      	uxth	r3, r3
 800a444:	4313      	orrs	r3, r2
 800a446:	b29b      	uxth	r3, r3
 800a448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a44c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a450:	b29a      	uxth	r2, r3
 800a452:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a456:	801a      	strh	r2, [r3, #0]
 800a458:	e070      	b.n	800a53c <USB_EPStartXfer+0x10ea>
 800a45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10c      	bne.n	800a484 <USB_EPStartXfer+0x1032>
 800a46a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	b29b      	uxth	r3, r3
 800a472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a480:	801a      	strh	r2, [r3, #0]
 800a482:	e05b      	b.n	800a53c <USB_EPStartXfer+0x10ea>
 800a484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	085b      	lsrs	r3, r3, #1
 800a492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <USB_EPStartXfer+0x1062>
 800a4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a4b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	029b      	lsls	r3, r3, #10
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4ce:	801a      	strh	r2, [r3, #0]
 800a4d0:	e034      	b.n	800a53c <USB_EPStartXfer+0x10ea>
 800a4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d12c      	bne.n	800a53c <USB_EPStartXfer+0x10ea>
 800a4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	461a      	mov	r2, r3
 800a502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a506:	4413      	add	r3, r2
 800a508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	00da      	lsls	r2, r3, #3
 800a51a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a51e:	4413      	add	r3, r2
 800a520:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	b29a      	uxth	r2, r3
 800a536:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a53a:	801a      	strh	r2, [r3, #0]
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	2b00      	cmp	r3, #0
 800a558:	f040 809d 	bne.w	800a696 <USB_EPStartXfer+0x1244>
 800a55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a56e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a578:	b29b      	uxth	r3, r3
 800a57a:	461a      	mov	r2, r3
 800a57c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a580:	4413      	add	r3, r2
 800a582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	00da      	lsls	r2, r3, #3
 800a594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a598:	4413      	add	r3, r2
 800a59a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a59e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5a6:	881b      	ldrh	r3, [r3, #0]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5b4:	801a      	strh	r2, [r3, #0]
 800a5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	2b3e      	cmp	r3, #62	; 0x3e
 800a5c4:	d92b      	bls.n	800a61e <USB_EPStartXfer+0x11cc>
 800a5c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	095b      	lsrs	r3, r3, #5
 800a5d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	f003 031f 	and.w	r3, r3, #31
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d104      	bne.n	800a5f6 <USB_EPStartXfer+0x11a4>
 800a5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a602:	b29b      	uxth	r3, r3
 800a604:	029b      	lsls	r3, r3, #10
 800a606:	b29b      	uxth	r3, r3
 800a608:	4313      	orrs	r3, r2
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a614:	b29a      	uxth	r2, r3
 800a616:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a61a:	801a      	strh	r2, [r3, #0]
 800a61c:	e069      	b.n	800a6f2 <USB_EPStartXfer+0x12a0>
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10c      	bne.n	800a648 <USB_EPStartXfer+0x11f6>
 800a62e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	b29b      	uxth	r3, r3
 800a636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a63a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a63e:	b29a      	uxth	r2, r3
 800a640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a644:	801a      	strh	r2, [r3, #0]
 800a646:	e054      	b.n	800a6f2 <USB_EPStartXfer+0x12a0>
 800a648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a65a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a65e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d004      	beq.n	800a678 <USB_EPStartXfer+0x1226>
 800a66e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a672:	3301      	adds	r3, #1
 800a674:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	b29a      	uxth	r2, r3
 800a680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a684:	b29b      	uxth	r3, r3
 800a686:	029b      	lsls	r3, r3, #10
 800a688:	b29b      	uxth	r3, r3
 800a68a:	4313      	orrs	r3, r2
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a692:	801a      	strh	r2, [r3, #0]
 800a694:	e02d      	b.n	800a6f2 <USB_EPStartXfer+0x12a0>
 800a696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a69a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	785b      	ldrb	r3, [r3, #1]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d125      	bne.n	800a6f2 <USB_EPStartXfer+0x12a0>
 800a6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6bc:	4413      	add	r3, r2
 800a6be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	00da      	lsls	r2, r3, #3
 800a6d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a6f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 8218 	beq.w	800ab34 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a724:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <USB_EPStartXfer+0x12ea>
 800a730:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10d      	bne.n	800a758 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a73c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 81f5 	bne.w	800ab34 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a74a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	f040 81ee 	bne.w	800ab34 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	881b      	ldrh	r3, [r3, #0]
 800a774:	b29b      	uxth	r3, r3
 800a776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	441a      	add	r2, r3
 800a79c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a7a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	8013      	strh	r3, [r2, #0]
 800a7b4:	e1be      	b.n	800ab34 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	78db      	ldrb	r3, [r3, #3]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	f040 81b4 	bne.w	800ab30 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	699a      	ldr	r2, [r3, #24]
 800a7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d917      	bls.n	800a814 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	699a      	ldr	r2, [r3, #24]
 800a800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a804:	1ad2      	subs	r2, r2, r3
 800a806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	619a      	str	r2, [r3, #24]
 800a812:	e00e      	b.n	800a832 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2200      	movs	r2, #0
 800a830:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f040 8085 	bne.w	800a94e <USB_EPStartXfer+0x14fc>
 800a844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a860:	b29b      	uxth	r3, r3
 800a862:	461a      	mov	r2, r3
 800a864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a868:	4413      	add	r3, r2
 800a86a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	00da      	lsls	r2, r3, #3
 800a87c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a880:	4413      	add	r3, r2
 800a882:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a88a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a896:	b29a      	uxth	r2, r3
 800a898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a89c:	801a      	strh	r2, [r3, #0]
 800a89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a2:	2b3e      	cmp	r3, #62	; 0x3e
 800a8a4:	d923      	bls.n	800a8ee <USB_EPStartXfer+0x149c>
 800a8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8aa:	095b      	lsrs	r3, r3, #5
 800a8ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b4:	f003 031f 	and.w	r3, r3, #31
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d104      	bne.n	800a8c6 <USB_EPStartXfer+0x1474>
 800a8bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a8c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8ca:	881b      	ldrh	r3, [r3, #0]
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	029b      	lsls	r3, r3, #10
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8ea:	801a      	strh	r2, [r3, #0]
 800a8ec:	e060      	b.n	800a9b0 <USB_EPStartXfer+0x155e>
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10c      	bne.n	800a910 <USB_EPStartXfer+0x14be>
 800a8f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a906:	b29a      	uxth	r2, r3
 800a908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a90c:	801a      	strh	r2, [r3, #0]
 800a90e:	e04f      	b.n	800a9b0 <USB_EPStartXfer+0x155e>
 800a910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a914:	085b      	lsrs	r3, r3, #1
 800a916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	d004      	beq.n	800a930 <USB_EPStartXfer+0x14de>
 800a926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a92a:	3301      	adds	r3, #1
 800a92c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	b29a      	uxth	r2, r3
 800a938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	029b      	lsls	r3, r3, #10
 800a940:	b29b      	uxth	r3, r3
 800a942:	4313      	orrs	r3, r2
 800a944:	b29a      	uxth	r2, r3
 800a946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a94a:	801a      	strh	r2, [r3, #0]
 800a94c:	e030      	b.n	800a9b0 <USB_EPStartXfer+0x155e>
 800a94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	785b      	ldrb	r3, [r3, #1]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d128      	bne.n	800a9b0 <USB_EPStartXfer+0x155e>
 800a95e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	461a      	mov	r2, r3
 800a97e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a982:	4413      	add	r3, r2
 800a984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	00da      	lsls	r2, r3, #3
 800a996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a99a:	4413      	add	r3, r2
 800a99c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a9ae:	801a      	strh	r2, [r3, #0]
 800a9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	785b      	ldrb	r3, [r3, #1]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f040 8085 	bne.w	800aada <USB_EPStartXfer+0x1688>
 800a9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	00da      	lsls	r2, r3, #3
 800aa08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa28:	801a      	strh	r2, [r3, #0]
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	2b3e      	cmp	r3, #62	; 0x3e
 800aa30:	d923      	bls.n	800aa7a <USB_EPStartXfer+0x1628>
 800aa32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa36:	095b      	lsrs	r3, r3, #5
 800aa38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa40:	f003 031f 	and.w	r3, r3, #31
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d104      	bne.n	800aa52 <USB_EPStartXfer+0x1600>
 800aa48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	029b      	lsls	r3, r3, #10
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	4313      	orrs	r3, r2
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa76:	801a      	strh	r2, [r3, #0]
 800aa78:	e05c      	b.n	800ab34 <USB_EPStartXfer+0x16e2>
 800aa7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10c      	bne.n	800aa9c <USB_EPStartXfer+0x164a>
 800aa82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	e04b      	b.n	800ab34 <USB_EPStartXfer+0x16e2>
 800aa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa0:	085b      	lsrs	r3, r3, #1
 800aaa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <USB_EPStartXfer+0x166a>
 800aab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aab6:	3301      	adds	r3, #1
 800aab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aabc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	029b      	lsls	r3, r3, #10
 800aacc:	b29b      	uxth	r3, r3
 800aace:	4313      	orrs	r3, r2
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aad6:	801a      	strh	r2, [r3, #0]
 800aad8:	e02c      	b.n	800ab34 <USB_EPStartXfer+0x16e2>
 800aada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	785b      	ldrb	r3, [r3, #1]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d124      	bne.n	800ab34 <USB_EPStartXfer+0x16e2>
 800aaea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab00:	4413      	add	r3, r2
 800ab02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	00da      	lsls	r2, r3, #3
 800ab14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab18:	4413      	add	r3, r2
 800ab1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab2c:	801a      	strh	r2, [r3, #0]
 800ab2e:	e001      	b.n	800ab34 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e03a      	b.n	800abaa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ab5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ab62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ab6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ab6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ab76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	441a      	add	r2, r3
 800ab90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ab94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	785b      	ldrb	r3, [r3, #1]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d020      	beq.n	800ac08 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4413      	add	r3, r2
 800abd0:	881b      	ldrh	r3, [r3, #0]
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abdc:	81bb      	strh	r3, [r7, #12]
 800abde:	89bb      	ldrh	r3, [r7, #12]
 800abe0:	f083 0310 	eor.w	r3, r3, #16
 800abe4:	81bb      	strh	r3, [r7, #12]
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	441a      	add	r2, r3
 800abf0:	89bb      	ldrh	r3, [r7, #12]
 800abf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	8013      	strh	r3, [r2, #0]
 800ac06:	e01f      	b.n	800ac48 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac1e:	81fb      	strh	r3, [r7, #14]
 800ac20:	89fb      	ldrh	r3, [r7, #14]
 800ac22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ac26:	81fb      	strh	r3, [r7, #14]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	441a      	add	r2, r3
 800ac32:	89fb      	ldrh	r3, [r7, #14]
 800ac34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b087      	sub	sp, #28
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	7b1b      	ldrb	r3, [r3, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f040 809d 	bne.w	800ada4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	785b      	ldrb	r3, [r3, #1]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d04c      	beq.n	800ad0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	823b      	strh	r3, [r7, #16]
 800ac80:	8a3b      	ldrh	r3, [r7, #16]
 800ac82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d01b      	beq.n	800acc2 <USB_EPClearStall+0x6c>
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca0:	81fb      	strh	r3, [r7, #14]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	441a      	add	r2, r3
 800acac:	89fb      	ldrh	r3, [r7, #14]
 800acae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	78db      	ldrb	r3, [r3, #3]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d06c      	beq.n	800ada4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace0:	81bb      	strh	r3, [r7, #12]
 800ace2:	89bb      	ldrh	r3, [r7, #12]
 800ace4:	f083 0320 	eor.w	r3, r3, #32
 800ace8:	81bb      	strh	r3, [r7, #12]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	441a      	add	r2, r3
 800acf4:	89bb      	ldrh	r3, [r7, #12]
 800acf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	8013      	strh	r3, [r2, #0]
 800ad0a:	e04b      	b.n	800ada4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4413      	add	r3, r2
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	82fb      	strh	r3, [r7, #22]
 800ad1a:	8afb      	ldrh	r3, [r7, #22]
 800ad1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d01b      	beq.n	800ad5c <USB_EPClearStall+0x106>
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	881b      	ldrh	r3, [r3, #0]
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad3a:	82bb      	strh	r3, [r7, #20]
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	441a      	add	r2, r3
 800ad46:	8abb      	ldrh	r3, [r7, #20]
 800ad48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad72:	827b      	strh	r3, [r7, #18]
 800ad74:	8a7b      	ldrh	r3, [r7, #18]
 800ad76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad7a:	827b      	strh	r3, [r7, #18]
 800ad7c:	8a7b      	ldrh	r3, [r7, #18]
 800ad7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad82:	827b      	strh	r3, [r7, #18]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	441a      	add	r2, r3
 800ad8e:	8a7b      	ldrh	r3, [r7, #18]
 800ad90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b083      	sub	sp, #12
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	460b      	mov	r3, r1
 800adbc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d103      	bne.n	800adcc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2280      	movs	r2, #128	; 0x80
 800adc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ade8:	b29b      	uxth	r3, r3
 800adea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b08b      	sub	sp, #44	; 0x2c
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	4611      	mov	r1, r2
 800ae34:	461a      	mov	r2, r3
 800ae36:	460b      	mov	r3, r1
 800ae38:	80fb      	strh	r3, [r7, #6]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ae3e:	88bb      	ldrh	r3, [r7, #4]
 800ae40:	3301      	adds	r3, #1
 800ae42:	085b      	lsrs	r3, r3, #1
 800ae44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae4e:	88fa      	ldrh	r2, [r7, #6]
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5e:	e01b      	b.n	800ae98 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	b21a      	sxth	r2, r3
 800ae70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	b21b      	sxth	r3, r3
 800ae78:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	8a7a      	ldrh	r2, [r7, #18]
 800ae7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	3302      	adds	r3, #2
 800ae84:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	3b01      	subs	r3, #1
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e0      	bne.n	800ae60 <USB_WritePMA+0x38>
  }
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	372c      	adds	r7, #44	; 0x2c
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b08b      	sub	sp, #44	; 0x2c
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	461a      	mov	r2, r3
 800aeba:	460b      	mov	r3, r1
 800aebc:	80fb      	strh	r3, [r7, #6]
 800aebe:	4613      	mov	r3, r2
 800aec0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aec2:	88bb      	ldrh	r3, [r7, #4]
 800aec4:	085b      	lsrs	r3, r3, #1
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aed2:	88fa      	ldrh	r2, [r7, #6]
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aedc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	627b      	str	r3, [r7, #36]	; 0x24
 800aee2:	e018      	b.n	800af16 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	3302      	adds	r3, #2
 800aef0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	b2da      	uxtb	r2, r3
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	3301      	adds	r3, #1
 800aefe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	0a1b      	lsrs	r3, r3, #8
 800af04:	b2da      	uxtb	r2, r3
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	3301      	adds	r3, #1
 800af0e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	3b01      	subs	r3, #1
 800af14:	627b      	str	r3, [r7, #36]	; 0x24
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e3      	bne.n	800aee4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800af1c:	88bb      	ldrh	r3, [r7, #4]
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	b29b      	uxth	r3, r3
 800af24:	2b00      	cmp	r3, #0
 800af26:	d007      	beq.n	800af38 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	b2da      	uxtb	r2, r3
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	701a      	strb	r2, [r3, #0]
  }
}
 800af38:	bf00      	nop
 800af3a:	372c      	adds	r7, #44	; 0x2c
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800af50:	2010      	movs	r0, #16
 800af52:	f001 fe9b 	bl	800cc8c <USBD_static_malloc>
 800af56:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d105      	bne.n	800af6a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800af66:	2302      	movs	r3, #2
 800af68:	e01b      	b.n	800afa2 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	7c1b      	ldrb	r3, [r3, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d103      	bne.n	800af82 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2207      	movs	r2, #7
 800af7e:	875a      	strh	r2, [r3, #58]	; 0x3a
 800af80:	e002      	b.n	800af88 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2201      	movs	r2, #1
 800af86:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800af88:	2304      	movs	r3, #4
 800af8a:	2203      	movs	r2, #3
 800af8c:	2181      	movs	r1, #129	; 0x81
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f001 fd35 	bl	800c9fe <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b082      	sub	sp, #8
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	460b      	mov	r3, r1
 800afb4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800afb6:	2181      	movs	r1, #129	; 0x81
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 fd46 	bl	800ca4a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d009      	beq.n	800afe8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afda:	4618      	mov	r0, r3
 800afdc:	f001 fe64 	bl	800cca8 <USBD_static_free>
    pdev->pClassData = NULL;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b004:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b014:	2303      	movs	r3, #3
 800b016:	e0e8      	b.n	800b1ea <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b020:	2b00      	cmp	r3, #0
 800b022:	d046      	beq.n	800b0b2 <USBD_HID_Setup+0xbe>
 800b024:	2b20      	cmp	r3, #32
 800b026:	f040 80d8 	bne.w	800b1da <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	3b02      	subs	r3, #2
 800b030:	2b09      	cmp	r3, #9
 800b032:	d836      	bhi.n	800b0a2 <USBD_HID_Setup+0xae>
 800b034:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <USBD_HID_Setup+0x48>)
 800b036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03a:	bf00      	nop
 800b03c:	0800b093 	.word	0x0800b093
 800b040:	0800b073 	.word	0x0800b073
 800b044:	0800b0a3 	.word	0x0800b0a3
 800b048:	0800b0a3 	.word	0x0800b0a3
 800b04c:	0800b0a3 	.word	0x0800b0a3
 800b050:	0800b0a3 	.word	0x0800b0a3
 800b054:	0800b0a3 	.word	0x0800b0a3
 800b058:	0800b0a3 	.word	0x0800b0a3
 800b05c:	0800b081 	.word	0x0800b081
 800b060:	0800b065 	.word	0x0800b065
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	885b      	ldrh	r3, [r3, #2]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	461a      	mov	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	601a      	str	r2, [r3, #0]
          break;
 800b070:	e01e      	b.n	800b0b0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2201      	movs	r2, #1
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 f9d8 	bl	800c42e <USBD_CtlSendData>
          break;
 800b07e:	e017      	b.n	800b0b0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	885b      	ldrh	r3, [r3, #2]
 800b084:	0a1b      	lsrs	r3, r3, #8
 800b086:	b29b      	uxth	r3, r3
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	461a      	mov	r2, r3
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	605a      	str	r2, [r3, #4]
          break;
 800b090:	e00e      	b.n	800b0b0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3304      	adds	r3, #4
 800b096:	2201      	movs	r2, #1
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f001 f9c7 	bl	800c42e <USBD_CtlSendData>
          break;
 800b0a0:	e006      	b.n	800b0b0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 f951 	bl	800c34c <USBD_CtlError>
          ret = USBD_FAIL;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	75fb      	strb	r3, [r7, #23]
          break;
 800b0ae:	bf00      	nop
      }
      break;
 800b0b0:	e09a      	b.n	800b1e8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	785b      	ldrb	r3, [r3, #1]
 800b0b6:	2b0b      	cmp	r3, #11
 800b0b8:	f200 8086 	bhi.w	800b1c8 <USBD_HID_Setup+0x1d4>
 800b0bc:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <USBD_HID_Setup+0xd0>)
 800b0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c2:	bf00      	nop
 800b0c4:	0800b0f5 	.word	0x0800b0f5
 800b0c8:	0800b1d7 	.word	0x0800b1d7
 800b0cc:	0800b1c9 	.word	0x0800b1c9
 800b0d0:	0800b1c9 	.word	0x0800b1c9
 800b0d4:	0800b1c9 	.word	0x0800b1c9
 800b0d8:	0800b1c9 	.word	0x0800b1c9
 800b0dc:	0800b11f 	.word	0x0800b11f
 800b0e0:	0800b1c9 	.word	0x0800b1c9
 800b0e4:	0800b1c9 	.word	0x0800b1c9
 800b0e8:	0800b1c9 	.word	0x0800b1c9
 800b0ec:	0800b177 	.word	0x0800b177
 800b0f0:	0800b1a1 	.word	0x0800b1a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d107      	bne.n	800b110 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b100:	f107 030a 	add.w	r3, r7, #10
 800b104:	2202      	movs	r2, #2
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 f990 	bl	800c42e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b10e:	e063      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 f91a 	bl	800c34c <USBD_CtlError>
            ret = USBD_FAIL;
 800b118:	2303      	movs	r3, #3
 800b11a:	75fb      	strb	r3, [r7, #23]
          break;
 800b11c:	e05c      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	885b      	ldrh	r3, [r3, #2]
 800b122:	0a1b      	lsrs	r3, r3, #8
 800b124:	b29b      	uxth	r3, r3
 800b126:	2b22      	cmp	r3, #34	; 0x22
 800b128:	d108      	bne.n	800b13c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	88db      	ldrh	r3, [r3, #6]
 800b12e:	2b4a      	cmp	r3, #74	; 0x4a
 800b130:	bf28      	it	cs
 800b132:	234a      	movcs	r3, #74	; 0x4a
 800b134:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800b136:	4b2f      	ldr	r3, [pc, #188]	; (800b1f4 <USBD_HID_Setup+0x200>)
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	e015      	b.n	800b168 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	885b      	ldrh	r3, [r3, #2]
 800b140:	0a1b      	lsrs	r3, r3, #8
 800b142:	b29b      	uxth	r3, r3
 800b144:	2b21      	cmp	r3, #33	; 0x21
 800b146:	d108      	bne.n	800b15a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800b148:	4b2b      	ldr	r3, [pc, #172]	; (800b1f8 <USBD_HID_Setup+0x204>)
 800b14a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	88db      	ldrh	r3, [r3, #6]
 800b150:	2b09      	cmp	r3, #9
 800b152:	bf28      	it	cs
 800b154:	2309      	movcs	r3, #9
 800b156:	82bb      	strh	r3, [r7, #20]
 800b158:	e006      	b.n	800b168 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f001 f8f5 	bl	800c34c <USBD_CtlError>
            ret = USBD_FAIL;
 800b162:	2303      	movs	r3, #3
 800b164:	75fb      	strb	r3, [r7, #23]
            break;
 800b166:	e037      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800b168:	8abb      	ldrh	r3, [r7, #20]
 800b16a:	461a      	mov	r2, r3
 800b16c:	6939      	ldr	r1, [r7, #16]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f001 f95d 	bl	800c42e <USBD_CtlSendData>
          break;
 800b174:	e030      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d107      	bne.n	800b192 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3308      	adds	r3, #8
 800b186:	2201      	movs	r2, #1
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f001 f94f 	bl	800c42e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b190:	e022      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 f8d9 	bl	800c34c <USBD_CtlError>
            ret = USBD_FAIL;
 800b19a:	2303      	movs	r3, #3
 800b19c:	75fb      	strb	r3, [r7, #23]
          break;
 800b19e:	e01b      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	2b03      	cmp	r3, #3
 800b1aa:	d106      	bne.n	800b1ba <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	885b      	ldrh	r3, [r3, #2]
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1b8:	e00e      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f001 f8c5 	bl	800c34c <USBD_CtlError>
            ret = USBD_FAIL;
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b1c6:	e007      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f001 f8be 	bl	800c34c <USBD_CtlError>
          ret = USBD_FAIL;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	75fb      	strb	r3, [r7, #23]
          break;
 800b1d4:	e000      	b.n	800b1d8 <USBD_HID_Setup+0x1e4>
          break;
 800b1d6:	bf00      	nop
      }
      break;
 800b1d8:	e006      	b.n	800b1e8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f001 f8b5 	bl	800c34c <USBD_CtlError>
      ret = USBD_FAIL;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e6:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	200000c8 	.word	0x200000c8
 800b1f8:	200000b0 	.word	0x200000b0

0800b1fc <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b210:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800b218:	2303      	movs	r3, #3
 800b21a:	e013      	b.n	800b244 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b03      	cmp	r3, #3
 800b226:	d10c      	bne.n	800b242 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	7b1b      	ldrb	r3, [r3, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d108      	bne.n	800b242 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2201      	movs	r2, #1
 800b234:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800b236:	88fb      	ldrh	r3, [r7, #6]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	2181      	movs	r1, #129	; 0x81
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f001 fcac 	bl	800cb9a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2222      	movs	r2, #34	; 0x22
 800b258:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800b25a:	4b03      	ldr	r3, [pc, #12]	; (800b268 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	20000044 	.word	0x20000044

0800b26c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2222      	movs	r2, #34	; 0x22
 800b278:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800b27a:	4b03      	ldr	r3, [pc, #12]	; (800b288 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	20000068 	.word	0x20000068

0800b28c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2222      	movs	r2, #34	; 0x22
 800b298:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800b29a:	4b03      	ldr	r3, [pc, #12]	; (800b2a8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr
 800b2a8:	2000008c 	.word	0x2000008c

0800b2ac <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2be:	2200      	movs	r2, #0
 800b2c0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	220a      	movs	r2, #10
 800b2dc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800b2de:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	200000bc 	.word	0x200000bc

0800b2f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b304:	2303      	movs	r3, #3
 800b306:	e01f      	b.n	800b348 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d003      	beq.n	800b32e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	79fa      	ldrb	r2, [r7, #7]
 800b33a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f001 faf5 	bl	800c92c <USBD_LL_Init>
 800b342:	4603      	mov	r3, r0
 800b344:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b346:	7dfb      	ldrb	r3, [r7, #23]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b364:	2303      	movs	r3, #3
 800b366:	e016      	b.n	800b396 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00b      	beq.n	800b394 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b384:	f107 020e 	add.w	r2, r7, #14
 800b388:	4610      	mov	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	4602      	mov	r2, r0
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 fb0e 	bl	800c9c8 <USBD_LL_Start>
 800b3ac:	4603      	mov	r3, r0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d009      	beq.n	800b3fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	78fa      	ldrb	r2, [r7, #3]
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	4798      	blx	r3
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b416:	2b00      	cmp	r3, #0
 800b418:	d007      	beq.n	800b42a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	78fa      	ldrb	r2, [r7, #3]
 800b424:	4611      	mov	r1, r2
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	4798      	blx	r3
  }

  return USBD_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	4618      	mov	r0, r3
 800b448:	f000 ff46 	bl	800c2d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b45a:	461a      	mov	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b468:	f003 031f 	and.w	r3, r3, #31
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d01a      	beq.n	800b4a6 <USBD_LL_SetupStage+0x72>
 800b470:	2b02      	cmp	r3, #2
 800b472:	d822      	bhi.n	800b4ba <USBD_LL_SetupStage+0x86>
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <USBD_LL_SetupStage+0x4a>
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d00a      	beq.n	800b492 <USBD_LL_SetupStage+0x5e>
 800b47c:	e01d      	b.n	800b4ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b484:	4619      	mov	r1, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f9ee 	bl	800b868 <USBD_StdDevReq>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]
      break;
 800b490:	e020      	b.n	800b4d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa52 	bl	800b944 <USBD_StdItfReq>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a4:	e016      	b.n	800b4d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa91 	bl	800b9d6 <USBD_StdEPReq>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4b8:	e00c      	b.n	800b4d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 fadd 	bl	800ca88 <USBD_LL_StallEP>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b4d2:	bf00      	nop
  }

  return ret;
 800b4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b086      	sub	sp, #24
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b4ec:	7afb      	ldrb	r3, [r7, #11]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d138      	bne.n	800b564 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b4f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b500:	2b03      	cmp	r3, #3
 800b502:	d14a      	bne.n	800b59a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	689a      	ldr	r2, [r3, #8]
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d913      	bls.n	800b538 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	689a      	ldr	r2, [r3, #8]
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	1ad2      	subs	r2, r2, r3
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	68da      	ldr	r2, [r3, #12]
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	4293      	cmp	r3, r2
 800b528:	bf28      	it	cs
 800b52a:	4613      	movcs	r3, r2
 800b52c:	461a      	mov	r2, r3
 800b52e:	6879      	ldr	r1, [r7, #4]
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 ffa8 	bl	800c486 <USBD_CtlContinueRx>
 800b536:	e030      	b.n	800b59a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b03      	cmp	r3, #3
 800b542:	d10b      	bne.n	800b55c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f000 ffa3 	bl	800c4a8 <USBD_CtlSendStatus>
 800b562:	e01a      	b.n	800b59a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d114      	bne.n	800b59a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00e      	beq.n	800b59a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	7afa      	ldrb	r2, [r7, #11]
 800b586:	4611      	mov	r1, r2
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	4798      	blx	r3
 800b58c:	4603      	mov	r3, r0
 800b58e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	e000      	b.n	800b59c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b5b2:	7afb      	ldrb	r3, [r7, #11]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d16b      	bne.n	800b690 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d156      	bne.n	800b676 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	689a      	ldr	r2, [r3, #8]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d914      	bls.n	800b5fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	1ad2      	subs	r2, r2, r3
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 ff3a 	bl	800c464 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f001 faf0 	bl	800cbdc <USBD_LL_PrepareReceive>
 800b5fc:	e03b      	b.n	800b676 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	429a      	cmp	r2, r3
 800b608:	d11c      	bne.n	800b644 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b612:	429a      	cmp	r2, r3
 800b614:	d316      	bcc.n	800b644 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b620:	429a      	cmp	r2, r3
 800b622:	d20f      	bcs.n	800b644 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b624:	2200      	movs	r2, #0
 800b626:	2100      	movs	r1, #0
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 ff1b 	bl	800c464 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b636:	2300      	movs	r3, #0
 800b638:	2200      	movs	r2, #0
 800b63a:	2100      	movs	r1, #0
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f001 facd 	bl	800cbdc <USBD_LL_PrepareReceive>
 800b642:	e018      	b.n	800b676 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	2b03      	cmp	r3, #3
 800b64e:	d10b      	bne.n	800b668 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d005      	beq.n	800b668 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b668:	2180      	movs	r1, #128	; 0x80
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f001 fa0c 	bl	800ca88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 ff2c 	bl	800c4ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d122      	bne.n	800b6c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7ff fe98 	bl	800b3b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b68e:	e01a      	b.n	800b6c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b03      	cmp	r3, #3
 800b69a:	d114      	bne.n	800b6c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00e      	beq.n	800b6c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	7afa      	ldrb	r2, [r7, #11]
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	4798      	blx	r3
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b6c2:	7dfb      	ldrb	r3, [r7, #23]
 800b6c4:	e000      	b.n	800b6c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b700:	2303      	movs	r3, #3
 800b702:	e02f      	b.n	800b764 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00f      	beq.n	800b72e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d009      	beq.n	800b72e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	6852      	ldr	r2, [r2, #4]
 800b726:	b2d2      	uxtb	r2, r2
 800b728:	4611      	mov	r1, r2
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b72e:	2340      	movs	r3, #64	; 0x40
 800b730:	2200      	movs	r2, #0
 800b732:	2100      	movs	r1, #0
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 f962 	bl	800c9fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2240      	movs	r2, #64	; 0x40
 800b746:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b74a:	2340      	movs	r3, #64	; 0x40
 800b74c:	2200      	movs	r2, #0
 800b74e:	2180      	movs	r1, #128	; 0x80
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f001 f954 	bl	800c9fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2240      	movs	r2, #64	; 0x40
 800b760:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	78fa      	ldrb	r2, [r7, #3]
 800b77c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	2b04      	cmp	r3, #4
 800b7ca:	d106      	bne.n	800b7da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	e012      	b.n	800b824 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b03      	cmp	r3, #3
 800b808:	d10b      	bne.n	800b822 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d005      	beq.n	800b822 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	3301      	adds	r3, #1
 800b842:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b84a:	8a3b      	ldrh	r3, [r7, #16]
 800b84c:	021b      	lsls	r3, r3, #8
 800b84e:	b21a      	sxth	r2, r3
 800b850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b854:	4313      	orrs	r3, r2
 800b856:	b21b      	sxth	r3, r3
 800b858:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b85a:	89fb      	ldrh	r3, [r7, #14]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	371c      	adds	r7, #28
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b87e:	2b40      	cmp	r3, #64	; 0x40
 800b880:	d005      	beq.n	800b88e <USBD_StdDevReq+0x26>
 800b882:	2b40      	cmp	r3, #64	; 0x40
 800b884:	d853      	bhi.n	800b92e <USBD_StdDevReq+0xc6>
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00b      	beq.n	800b8a2 <USBD_StdDevReq+0x3a>
 800b88a:	2b20      	cmp	r3, #32
 800b88c:	d14f      	bne.n	800b92e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	4798      	blx	r3
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a0:	e04a      	b.n	800b938 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	785b      	ldrb	r3, [r3, #1]
 800b8a6:	2b09      	cmp	r3, #9
 800b8a8:	d83b      	bhi.n	800b922 <USBD_StdDevReq+0xba>
 800b8aa:	a201      	add	r2, pc, #4	; (adr r2, 800b8b0 <USBD_StdDevReq+0x48>)
 800b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b0:	0800b905 	.word	0x0800b905
 800b8b4:	0800b919 	.word	0x0800b919
 800b8b8:	0800b923 	.word	0x0800b923
 800b8bc:	0800b90f 	.word	0x0800b90f
 800b8c0:	0800b923 	.word	0x0800b923
 800b8c4:	0800b8e3 	.word	0x0800b8e3
 800b8c8:	0800b8d9 	.word	0x0800b8d9
 800b8cc:	0800b923 	.word	0x0800b923
 800b8d0:	0800b8fb 	.word	0x0800b8fb
 800b8d4:	0800b8ed 	.word	0x0800b8ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f9de 	bl	800bc9c <USBD_GetDescriptor>
          break;
 800b8e0:	e024      	b.n	800b92c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fb6d 	bl	800bfc4 <USBD_SetAddress>
          break;
 800b8ea:	e01f      	b.n	800b92c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fbac 	bl	800c04c <USBD_SetConfig>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73fb      	strb	r3, [r7, #15]
          break;
 800b8f8:	e018      	b.n	800b92c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fc4b 	bl	800c198 <USBD_GetConfig>
          break;
 800b902:	e013      	b.n	800b92c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fc7c 	bl	800c204 <USBD_GetStatus>
          break;
 800b90c:	e00e      	b.n	800b92c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fcab 	bl	800c26c <USBD_SetFeature>
          break;
 800b916:	e009      	b.n	800b92c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fcba 	bl	800c294 <USBD_ClrFeature>
          break;
 800b920:	e004      	b.n	800b92c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fd11 	bl	800c34c <USBD_CtlError>
          break;
 800b92a:	bf00      	nop
      }
      break;
 800b92c:	e004      	b.n	800b938 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fd0b 	bl	800c34c <USBD_CtlError>
      break;
 800b936:	bf00      	nop
  }

  return ret;
 800b938:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop

0800b944 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b95a:	2b40      	cmp	r3, #64	; 0x40
 800b95c:	d005      	beq.n	800b96a <USBD_StdItfReq+0x26>
 800b95e:	2b40      	cmp	r3, #64	; 0x40
 800b960:	d82f      	bhi.n	800b9c2 <USBD_StdItfReq+0x7e>
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <USBD_StdItfReq+0x26>
 800b966:	2b20      	cmp	r3, #32
 800b968:	d12b      	bne.n	800b9c2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b970:	b2db      	uxtb	r3, r3
 800b972:	3b01      	subs	r3, #1
 800b974:	2b02      	cmp	r3, #2
 800b976:	d81d      	bhi.n	800b9b4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	889b      	ldrh	r3, [r3, #4]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d813      	bhi.n	800b9aa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	4798      	blx	r3
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	88db      	ldrh	r3, [r3, #6]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d110      	bne.n	800b9be <USBD_StdItfReq+0x7a>
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10d      	bne.n	800b9be <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fd80 	bl	800c4a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9a8:	e009      	b.n	800b9be <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fccd 	bl	800c34c <USBD_CtlError>
          break;
 800b9b2:	e004      	b.n	800b9be <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fcc8 	bl	800c34c <USBD_CtlError>
          break;
 800b9bc:	e000      	b.n	800b9c0 <USBD_StdItfReq+0x7c>
          break;
 800b9be:	bf00      	nop
      }
      break;
 800b9c0:	e004      	b.n	800b9cc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fcc1 	bl	800c34c <USBD_CtlError>
      break;
 800b9ca:	bf00      	nop
  }

  return ret;
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b084      	sub	sp, #16
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	889b      	ldrh	r3, [r3, #4]
 800b9e8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9f2:	2b40      	cmp	r3, #64	; 0x40
 800b9f4:	d007      	beq.n	800ba06 <USBD_StdEPReq+0x30>
 800b9f6:	2b40      	cmp	r3, #64	; 0x40
 800b9f8:	f200 8145 	bhi.w	800bc86 <USBD_StdEPReq+0x2b0>
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00c      	beq.n	800ba1a <USBD_StdEPReq+0x44>
 800ba00:	2b20      	cmp	r3, #32
 800ba02:	f040 8140 	bne.w	800bc86 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	4798      	blx	r3
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]
      break;
 800ba18:	e13a      	b.n	800bc90 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	785b      	ldrb	r3, [r3, #1]
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d007      	beq.n	800ba32 <USBD_StdEPReq+0x5c>
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	f300 8129 	bgt.w	800bc7a <USBD_StdEPReq+0x2a4>
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d07f      	beq.n	800bb2c <USBD_StdEPReq+0x156>
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d03c      	beq.n	800baaa <USBD_StdEPReq+0xd4>
 800ba30:	e123      	b.n	800bc7a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d002      	beq.n	800ba44 <USBD_StdEPReq+0x6e>
 800ba3e:	2b03      	cmp	r3, #3
 800ba40:	d016      	beq.n	800ba70 <USBD_StdEPReq+0x9a>
 800ba42:	e02c      	b.n	800ba9e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00d      	beq.n	800ba66 <USBD_StdEPReq+0x90>
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	2b80      	cmp	r3, #128	; 0x80
 800ba4e:	d00a      	beq.n	800ba66 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba50:	7bbb      	ldrb	r3, [r7, #14]
 800ba52:	4619      	mov	r1, r3
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f001 f817 	bl	800ca88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba5a:	2180      	movs	r1, #128	; 0x80
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f001 f813 	bl	800ca88 <USBD_LL_StallEP>
 800ba62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba64:	e020      	b.n	800baa8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fc6f 	bl	800c34c <USBD_CtlError>
              break;
 800ba6e:	e01b      	b.n	800baa8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	885b      	ldrh	r3, [r3, #2]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10e      	bne.n	800ba96 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00b      	beq.n	800ba96 <USBD_StdEPReq+0xc0>
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	2b80      	cmp	r3, #128	; 0x80
 800ba82:	d008      	beq.n	800ba96 <USBD_StdEPReq+0xc0>
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	88db      	ldrh	r3, [r3, #6]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d104      	bne.n	800ba96 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fff9 	bl	800ca88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fd06 	bl	800c4a8 <USBD_CtlSendStatus>

              break;
 800ba9c:	e004      	b.n	800baa8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fc53 	bl	800c34c <USBD_CtlError>
              break;
 800baa6:	bf00      	nop
          }
          break;
 800baa8:	e0ec      	b.n	800bc84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d002      	beq.n	800babc <USBD_StdEPReq+0xe6>
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d016      	beq.n	800bae8 <USBD_StdEPReq+0x112>
 800baba:	e030      	b.n	800bb1e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00d      	beq.n	800bade <USBD_StdEPReq+0x108>
 800bac2:	7bbb      	ldrb	r3, [r7, #14]
 800bac4:	2b80      	cmp	r3, #128	; 0x80
 800bac6:	d00a      	beq.n	800bade <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 ffdb 	bl	800ca88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bad2:	2180      	movs	r1, #128	; 0x80
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 ffd7 	bl	800ca88 <USBD_LL_StallEP>
 800bada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800badc:	e025      	b.n	800bb2a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fc33 	bl	800c34c <USBD_CtlError>
              break;
 800bae6:	e020      	b.n	800bb2a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	885b      	ldrh	r3, [r3, #2]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d11b      	bne.n	800bb28 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
 800baf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d004      	beq.n	800bb04 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bafa:	7bbb      	ldrb	r3, [r7, #14]
 800bafc:	4619      	mov	r1, r3
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 ffe1 	bl	800cac6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fccf 	bl	800c4a8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	4798      	blx	r3
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bb1c:	e004      	b.n	800bb28 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fc13 	bl	800c34c <USBD_CtlError>
              break;
 800bb26:	e000      	b.n	800bb2a <USBD_StdEPReq+0x154>
              break;
 800bb28:	bf00      	nop
          }
          break;
 800bb2a:	e0ab      	b.n	800bc84 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d002      	beq.n	800bb3e <USBD_StdEPReq+0x168>
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d032      	beq.n	800bba2 <USBD_StdEPReq+0x1cc>
 800bb3c:	e097      	b.n	800bc6e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d007      	beq.n	800bb54 <USBD_StdEPReq+0x17e>
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
 800bb46:	2b80      	cmp	r3, #128	; 0x80
 800bb48:	d004      	beq.n	800bb54 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fbfd 	bl	800c34c <USBD_CtlError>
                break;
 800bb52:	e091      	b.n	800bc78 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	da0b      	bge.n	800bb74 <USBD_StdEPReq+0x19e>
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb62:	4613      	mov	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	3310      	adds	r3, #16
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	4413      	add	r3, r2
 800bb70:	3304      	adds	r3, #4
 800bb72:	e00b      	b.n	800bb8c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	4413      	add	r3, r2
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2200      	movs	r2, #0
 800bb92:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2202      	movs	r2, #2
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fc47 	bl	800c42e <USBD_CtlSendData>
              break;
 800bba0:	e06a      	b.n	800bc78 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da11      	bge.n	800bbce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
 800bbac:	f003 020f 	and.w	r2, r3, #15
 800bbb0:	6879      	ldr	r1, [r7, #4]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	440b      	add	r3, r1
 800bbbc:	3324      	adds	r3, #36	; 0x24
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d117      	bne.n	800bbf4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fbc0 	bl	800c34c <USBD_CtlError>
                  break;
 800bbcc:	e054      	b.n	800bc78 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
 800bbd0:	f003 020f 	and.w	r2, r3, #15
 800bbd4:	6879      	ldr	r1, [r7, #4]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	440b      	add	r3, r1
 800bbe0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d104      	bne.n	800bbf4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fbad 	bl	800c34c <USBD_CtlError>
                  break;
 800bbf2:	e041      	b.n	800bc78 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	da0b      	bge.n	800bc14 <USBD_StdEPReq+0x23e>
 800bbfc:	7bbb      	ldrb	r3, [r7, #14]
 800bbfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc02:	4613      	mov	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	3310      	adds	r3, #16
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	4413      	add	r3, r2
 800bc10:	3304      	adds	r3, #4
 800bc12:	e00b      	b.n	800bc2c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	4413      	add	r3, r2
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc2e:	7bbb      	ldrb	r3, [r7, #14]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <USBD_StdEPReq+0x264>
 800bc34:	7bbb      	ldrb	r3, [r7, #14]
 800bc36:	2b80      	cmp	r3, #128	; 0x80
 800bc38:	d103      	bne.n	800bc42 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	e00e      	b.n	800bc60 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 ff5c 	bl	800cb04 <USBD_LL_IsStallEP>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2201      	movs	r2, #1
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e002      	b.n	800bc60 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2202      	movs	r2, #2
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fbe1 	bl	800c42e <USBD_CtlSendData>
              break;
 800bc6c:	e004      	b.n	800bc78 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fb6b 	bl	800c34c <USBD_CtlError>
              break;
 800bc76:	bf00      	nop
          }
          break;
 800bc78:	e004      	b.n	800bc84 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fb65 	bl	800c34c <USBD_CtlError>
          break;
 800bc82:	bf00      	nop
      }
      break;
 800bc84:	e004      	b.n	800bc90 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fb5f 	bl	800c34c <USBD_CtlError>
      break;
 800bc8e:	bf00      	nop
  }

  return ret;
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	885b      	ldrh	r3, [r3, #2]
 800bcb6:	0a1b      	lsrs	r3, r3, #8
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	2b0e      	cmp	r3, #14
 800bcbe:	f200 8152 	bhi.w	800bf66 <USBD_GetDescriptor+0x2ca>
 800bcc2:	a201      	add	r2, pc, #4	; (adr r2, 800bcc8 <USBD_GetDescriptor+0x2c>)
 800bcc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc8:	0800bd39 	.word	0x0800bd39
 800bccc:	0800bd51 	.word	0x0800bd51
 800bcd0:	0800bd91 	.word	0x0800bd91
 800bcd4:	0800bf67 	.word	0x0800bf67
 800bcd8:	0800bf67 	.word	0x0800bf67
 800bcdc:	0800bf07 	.word	0x0800bf07
 800bce0:	0800bf33 	.word	0x0800bf33
 800bce4:	0800bf67 	.word	0x0800bf67
 800bce8:	0800bf67 	.word	0x0800bf67
 800bcec:	0800bf67 	.word	0x0800bf67
 800bcf0:	0800bf67 	.word	0x0800bf67
 800bcf4:	0800bf67 	.word	0x0800bf67
 800bcf8:	0800bf67 	.word	0x0800bf67
 800bcfc:	0800bf67 	.word	0x0800bf67
 800bd00:	0800bd05 	.word	0x0800bd05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00b      	beq.n	800bd28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	7c12      	ldrb	r2, [r2, #16]
 800bd1c:	f107 0108 	add.w	r1, r7, #8
 800bd20:	4610      	mov	r0, r2
 800bd22:	4798      	blx	r3
 800bd24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd26:	e126      	b.n	800bf76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fb0e 	bl	800c34c <USBD_CtlError>
        err++;
 800bd30:	7afb      	ldrb	r3, [r7, #11]
 800bd32:	3301      	adds	r3, #1
 800bd34:	72fb      	strb	r3, [r7, #11]
      break;
 800bd36:	e11e      	b.n	800bf76 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	7c12      	ldrb	r2, [r2, #16]
 800bd44:	f107 0108 	add.w	r1, r7, #8
 800bd48:	4610      	mov	r0, r2
 800bd4a:	4798      	blx	r3
 800bd4c:	60f8      	str	r0, [r7, #12]
      break;
 800bd4e:	e112      	b.n	800bf76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	7c1b      	ldrb	r3, [r3, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10d      	bne.n	800bd74 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd60:	f107 0208 	add.w	r2, r7, #8
 800bd64:	4610      	mov	r0, r2
 800bd66:	4798      	blx	r3
 800bd68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	2202      	movs	r2, #2
 800bd70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd72:	e100      	b.n	800bf76 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7c:	f107 0208 	add.w	r2, r7, #8
 800bd80:	4610      	mov	r0, r2
 800bd82:	4798      	blx	r3
 800bd84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	701a      	strb	r2, [r3, #0]
      break;
 800bd8e:	e0f2      	b.n	800bf76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	885b      	ldrh	r3, [r3, #2]
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b05      	cmp	r3, #5
 800bd98:	f200 80ac 	bhi.w	800bef4 <USBD_GetDescriptor+0x258>
 800bd9c:	a201      	add	r2, pc, #4	; (adr r2, 800bda4 <USBD_GetDescriptor+0x108>)
 800bd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda2:	bf00      	nop
 800bda4:	0800bdbd 	.word	0x0800bdbd
 800bda8:	0800bdf1 	.word	0x0800bdf1
 800bdac:	0800be25 	.word	0x0800be25
 800bdb0:	0800be59 	.word	0x0800be59
 800bdb4:	0800be8d 	.word	0x0800be8d
 800bdb8:	0800bec1 	.word	0x0800bec1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00b      	beq.n	800bde0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	7c12      	ldrb	r2, [r2, #16]
 800bdd4:	f107 0108 	add.w	r1, r7, #8
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
 800bddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdde:	e091      	b.n	800bf04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bde0:	6839      	ldr	r1, [r7, #0]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fab2 	bl	800c34c <USBD_CtlError>
            err++;
 800bde8:	7afb      	ldrb	r3, [r7, #11]
 800bdea:	3301      	adds	r3, #1
 800bdec:	72fb      	strb	r3, [r7, #11]
          break;
 800bdee:	e089      	b.n	800bf04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00b      	beq.n	800be14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	7c12      	ldrb	r2, [r2, #16]
 800be08:	f107 0108 	add.w	r1, r7, #8
 800be0c:	4610      	mov	r0, r2
 800be0e:	4798      	blx	r3
 800be10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be12:	e077      	b.n	800bf04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa98 	bl	800c34c <USBD_CtlError>
            err++;
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	3301      	adds	r3, #1
 800be20:	72fb      	strb	r3, [r7, #11]
          break;
 800be22:	e06f      	b.n	800bf04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00b      	beq.n	800be48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	7c12      	ldrb	r2, [r2, #16]
 800be3c:	f107 0108 	add.w	r1, r7, #8
 800be40:	4610      	mov	r0, r2
 800be42:	4798      	blx	r3
 800be44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be46:	e05d      	b.n	800bf04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fa7e 	bl	800c34c <USBD_CtlError>
            err++;
 800be50:	7afb      	ldrb	r3, [r7, #11]
 800be52:	3301      	adds	r3, #1
 800be54:	72fb      	strb	r3, [r7, #11]
          break;
 800be56:	e055      	b.n	800bf04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00b      	beq.n	800be7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	7c12      	ldrb	r2, [r2, #16]
 800be70:	f107 0108 	add.w	r1, r7, #8
 800be74:	4610      	mov	r0, r2
 800be76:	4798      	blx	r3
 800be78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be7a:	e043      	b.n	800bf04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa64 	bl	800c34c <USBD_CtlError>
            err++;
 800be84:	7afb      	ldrb	r3, [r7, #11]
 800be86:	3301      	adds	r3, #1
 800be88:	72fb      	strb	r3, [r7, #11]
          break;
 800be8a:	e03b      	b.n	800bf04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00b      	beq.n	800beb0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be9e:	695b      	ldr	r3, [r3, #20]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	7c12      	ldrb	r2, [r2, #16]
 800bea4:	f107 0108 	add.w	r1, r7, #8
 800bea8:	4610      	mov	r0, r2
 800beaa:	4798      	blx	r3
 800beac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beae:	e029      	b.n	800bf04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800beb0:	6839      	ldr	r1, [r7, #0]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fa4a 	bl	800c34c <USBD_CtlError>
            err++;
 800beb8:	7afb      	ldrb	r3, [r7, #11]
 800beba:	3301      	adds	r3, #1
 800bebc:	72fb      	strb	r3, [r7, #11]
          break;
 800bebe:	e021      	b.n	800bf04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00b      	beq.n	800bee4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	7c12      	ldrb	r2, [r2, #16]
 800bed8:	f107 0108 	add.w	r1, r7, #8
 800bedc:	4610      	mov	r0, r2
 800bede:	4798      	blx	r3
 800bee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bee2:	e00f      	b.n	800bf04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bee4:	6839      	ldr	r1, [r7, #0]
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fa30 	bl	800c34c <USBD_CtlError>
            err++;
 800beec:	7afb      	ldrb	r3, [r7, #11]
 800beee:	3301      	adds	r3, #1
 800bef0:	72fb      	strb	r3, [r7, #11]
          break;
 800bef2:	e007      	b.n	800bf04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fa28 	bl	800c34c <USBD_CtlError>
          err++;
 800befc:	7afb      	ldrb	r3, [r7, #11]
 800befe:	3301      	adds	r3, #1
 800bf00:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bf02:	bf00      	nop
      }
      break;
 800bf04:	e037      	b.n	800bf76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	7c1b      	ldrb	r3, [r3, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf16:	f107 0208 	add.w	r2, r7, #8
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	4798      	blx	r3
 800bf1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf20:	e029      	b.n	800bf76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf22:	6839      	ldr	r1, [r7, #0]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fa11 	bl	800c34c <USBD_CtlError>
        err++;
 800bf2a:	7afb      	ldrb	r3, [r7, #11]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	72fb      	strb	r3, [r7, #11]
      break;
 800bf30:	e021      	b.n	800bf76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	7c1b      	ldrb	r3, [r3, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10d      	bne.n	800bf56 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf42:	f107 0208 	add.w	r2, r7, #8
 800bf46:	4610      	mov	r0, r2
 800bf48:	4798      	blx	r3
 800bf4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	2207      	movs	r2, #7
 800bf52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf54:	e00f      	b.n	800bf76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f9f7 	bl	800c34c <USBD_CtlError>
        err++;
 800bf5e:	7afb      	ldrb	r3, [r7, #11]
 800bf60:	3301      	adds	r3, #1
 800bf62:	72fb      	strb	r3, [r7, #11]
      break;
 800bf64:	e007      	b.n	800bf76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f9ef 	bl	800c34c <USBD_CtlError>
      err++;
 800bf6e:	7afb      	ldrb	r3, [r7, #11]
 800bf70:	3301      	adds	r3, #1
 800bf72:	72fb      	strb	r3, [r7, #11]
      break;
 800bf74:	bf00      	nop
  }

  if (err != 0U)
 800bf76:	7afb      	ldrb	r3, [r7, #11]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d11e      	bne.n	800bfba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	88db      	ldrh	r3, [r3, #6]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d016      	beq.n	800bfb2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf84:	893b      	ldrh	r3, [r7, #8]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00e      	beq.n	800bfa8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	88da      	ldrh	r2, [r3, #6]
 800bf8e:	893b      	ldrh	r3, [r7, #8]
 800bf90:	4293      	cmp	r3, r2
 800bf92:	bf28      	it	cs
 800bf94:	4613      	movcs	r3, r2
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf9a:	893b      	ldrh	r3, [r7, #8]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	68f9      	ldr	r1, [r7, #12]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fa44 	bl	800c42e <USBD_CtlSendData>
 800bfa6:	e009      	b.n	800bfbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f9ce 	bl	800c34c <USBD_CtlError>
 800bfb0:	e004      	b.n	800bfbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fa78 	bl	800c4a8 <USBD_CtlSendStatus>
 800bfb8:	e000      	b.n	800bfbc <USBD_GetDescriptor+0x320>
    return;
 800bfba:	bf00      	nop
  }
}
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop

0800bfc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	889b      	ldrh	r3, [r3, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d131      	bne.n	800c03a <USBD_SetAddress+0x76>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	88db      	ldrh	r3, [r3, #6]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d12d      	bne.n	800c03a <USBD_SetAddress+0x76>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	885b      	ldrh	r3, [r3, #2]
 800bfe2:	2b7f      	cmp	r3, #127	; 0x7f
 800bfe4:	d829      	bhi.n	800c03a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	885b      	ldrh	r3, [r3, #2]
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b03      	cmp	r3, #3
 800bffc:	d104      	bne.n	800c008 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 f9a3 	bl	800c34c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c006:	e01d      	b.n	800c044 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	7bfa      	ldrb	r2, [r7, #15]
 800c00c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fda1 	bl	800cb5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fa44 	bl	800c4a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d004      	beq.n	800c030 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2202      	movs	r2, #2
 800c02a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c02e:	e009      	b.n	800c044 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c038:	e004      	b.n	800c044 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f985 	bl	800c34c <USBD_CtlError>
  }
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	885b      	ldrh	r3, [r3, #2]
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	4b4c      	ldr	r3, [pc, #304]	; (800c194 <USBD_SetConfig+0x148>)
 800c062:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c064:	4b4b      	ldr	r3, [pc, #300]	; (800c194 <USBD_SetConfig+0x148>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d905      	bls.n	800c078 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f96c 	bl	800c34c <USBD_CtlError>
    return USBD_FAIL;
 800c074:	2303      	movs	r3, #3
 800c076:	e088      	b.n	800c18a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	2b02      	cmp	r3, #2
 800c082:	d002      	beq.n	800c08a <USBD_SetConfig+0x3e>
 800c084:	2b03      	cmp	r3, #3
 800c086:	d025      	beq.n	800c0d4 <USBD_SetConfig+0x88>
 800c088:	e071      	b.n	800c16e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c08a:	4b42      	ldr	r3, [pc, #264]	; (800c194 <USBD_SetConfig+0x148>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d01c      	beq.n	800c0cc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c092:	4b40      	ldr	r3, [pc, #256]	; (800c194 <USBD_SetConfig+0x148>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c09c:	4b3d      	ldr	r3, [pc, #244]	; (800c194 <USBD_SetConfig+0x148>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff f992 	bl	800b3cc <USBD_SetClassConfig>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d004      	beq.n	800c0bc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f949 	bl	800c34c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0ba:	e065      	b.n	800c188 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f9f3 	bl	800c4a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2203      	movs	r2, #3
 800c0c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c0ca:	e05d      	b.n	800c188 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f9eb 	bl	800c4a8 <USBD_CtlSendStatus>
      break;
 800c0d2:	e059      	b.n	800c188 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0d4:	4b2f      	ldr	r3, [pc, #188]	; (800c194 <USBD_SetConfig+0x148>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d112      	bne.n	800c102 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c0e4:	4b2b      	ldr	r3, [pc, #172]	; (800c194 <USBD_SetConfig+0x148>)
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0ee:	4b29      	ldr	r3, [pc, #164]	; (800c194 <USBD_SetConfig+0x148>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff f985 	bl	800b404 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f9d4 	bl	800c4a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c100:	e042      	b.n	800c188 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c102:	4b24      	ldr	r3, [pc, #144]	; (800c194 <USBD_SetConfig+0x148>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d02a      	beq.n	800c166 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	b2db      	uxtb	r3, r3
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7ff f973 	bl	800b404 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c11e:	4b1d      	ldr	r3, [pc, #116]	; (800c194 <USBD_SetConfig+0x148>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c128:	4b1a      	ldr	r3, [pc, #104]	; (800c194 <USBD_SetConfig+0x148>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff f94c 	bl	800b3cc <USBD_SetClassConfig>
 800c134:	4603      	mov	r3, r0
 800c136:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c138:	7bfb      	ldrb	r3, [r7, #15]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00f      	beq.n	800c15e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f903 	bl	800c34c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff f958 	bl	800b404 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2202      	movs	r2, #2
 800c158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c15c:	e014      	b.n	800c188 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f9a2 	bl	800c4a8 <USBD_CtlSendStatus>
      break;
 800c164:	e010      	b.n	800c188 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f99e 	bl	800c4a8 <USBD_CtlSendStatus>
      break;
 800c16c:	e00c      	b.n	800c188 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f8eb 	bl	800c34c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c176:	4b07      	ldr	r3, [pc, #28]	; (800c194 <USBD_SetConfig+0x148>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff f941 	bl	800b404 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c182:	2303      	movs	r3, #3
 800c184:	73fb      	strb	r3, [r7, #15]
      break;
 800c186:	bf00      	nop
  }

  return ret;
 800c188:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	200007e4 	.word	0x200007e4

0800c198 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	88db      	ldrh	r3, [r3, #6]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d004      	beq.n	800c1b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f8cd 	bl	800c34c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c1b2:	e023      	b.n	800c1fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	dc02      	bgt.n	800c1c6 <USBD_GetConfig+0x2e>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	dc03      	bgt.n	800c1cc <USBD_GetConfig+0x34>
 800c1c4:	e015      	b.n	800c1f2 <USBD_GetConfig+0x5a>
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d00b      	beq.n	800c1e2 <USBD_GetConfig+0x4a>
 800c1ca:	e012      	b.n	800c1f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3308      	adds	r3, #8
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f927 	bl	800c42e <USBD_CtlSendData>
        break;
 800c1e0:	e00c      	b.n	800c1fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f91f 	bl	800c42e <USBD_CtlSendData>
        break;
 800c1f0:	e004      	b.n	800c1fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f8a9 	bl	800c34c <USBD_CtlError>
        break;
 800c1fa:	bf00      	nop
}
 800c1fc:	bf00      	nop
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c214:	b2db      	uxtb	r3, r3
 800c216:	3b01      	subs	r3, #1
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d81e      	bhi.n	800c25a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	88db      	ldrh	r3, [r3, #6]
 800c220:	2b02      	cmp	r3, #2
 800c222:	d004      	beq.n	800c22e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f890 	bl	800c34c <USBD_CtlError>
        break;
 800c22c:	e01a      	b.n	800c264 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d005      	beq.n	800c24a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	f043 0202 	orr.w	r2, r3, #2
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	330c      	adds	r3, #12
 800c24e:	2202      	movs	r2, #2
 800c250:	4619      	mov	r1, r3
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f8eb 	bl	800c42e <USBD_CtlSendData>
      break;
 800c258:	e004      	b.n	800c264 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f875 	bl	800c34c <USBD_CtlError>
      break;
 800c262:	bf00      	nop
  }
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	885b      	ldrh	r3, [r3, #2]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d106      	bne.n	800c28c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f90e 	bl	800c4a8 <USBD_CtlSendStatus>
  }
}
 800c28c:	bf00      	nop
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d80b      	bhi.n	800c2c4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	885b      	ldrh	r3, [r3, #2]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d10c      	bne.n	800c2ce <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f8f3 	bl	800c4a8 <USBD_CtlSendStatus>
      }
      break;
 800c2c2:	e004      	b.n	800c2ce <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f840 	bl	800c34c <USBD_CtlError>
      break;
 800c2cc:	e000      	b.n	800c2d0 <USBD_ClrFeature+0x3c>
      break;
 800c2ce:	bf00      	nop
  }
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	781a      	ldrb	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3301      	adds	r3, #1
 800c300:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f7ff fa92 	bl	800b82c <SWAPBYTE>
 800c308:	4603      	mov	r3, r0
 800c30a:	461a      	mov	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3301      	adds	r3, #1
 800c314:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3301      	adds	r3, #1
 800c31a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f7ff fa85 	bl	800b82c <SWAPBYTE>
 800c322:	4603      	mov	r3, r0
 800c324:	461a      	mov	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3301      	adds	r3, #1
 800c32e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	3301      	adds	r3, #1
 800c334:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7ff fa78 	bl	800b82c <SWAPBYTE>
 800c33c:	4603      	mov	r3, r0
 800c33e:	461a      	mov	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	80da      	strh	r2, [r3, #6]
}
 800c344:	bf00      	nop
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c356:	2180      	movs	r1, #128	; 0x80
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fb95 	bl	800ca88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c35e:	2100      	movs	r1, #0
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fb91 	bl	800ca88 <USBD_LL_StallEP>
}
 800c366:	bf00      	nop
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b086      	sub	sp, #24
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c37a:	2300      	movs	r3, #0
 800c37c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d036      	beq.n	800c3f2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c388:	6938      	ldr	r0, [r7, #16]
 800c38a:	f000 f836 	bl	800c3fa <USBD_GetLen>
 800c38e:	4603      	mov	r3, r0
 800c390:	3301      	adds	r3, #1
 800c392:	b29b      	uxth	r3, r3
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	b29a      	uxth	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c39c:	7dfb      	ldrb	r3, [r7, #23]
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	7812      	ldrb	r2, [r2, #0]
 800c3a6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	2203      	movs	r2, #3
 800c3b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c3be:	e013      	b.n	800c3e8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	7812      	ldrb	r2, [r2, #0]
 800c3ca:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	613b      	str	r3, [r7, #16]
    idx++;
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3d8:	7dfb      	ldrb	r3, [r7, #23]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	4413      	add	r3, r2
 800c3de:	2200      	movs	r2, #0
 800c3e0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1e7      	bne.n	800c3c0 <USBD_GetString+0x52>
 800c3f0:	e000      	b.n	800c3f4 <USBD_GetString+0x86>
    return;
 800c3f2:	bf00      	nop
  }
}
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b085      	sub	sp, #20
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c402:	2300      	movs	r3, #0
 800c404:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c40a:	e005      	b.n	800c418 <USBD_GetLen+0x1e>
  {
    len++;
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
 800c40e:	3301      	adds	r3, #1
 800c410:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	3301      	adds	r3, #1
 800c416:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d1f5      	bne.n	800c40c <USBD_GetLen+0x12>
  }

  return len;
 800c420:	7bfb      	ldrb	r3, [r7, #15]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3714      	adds	r7, #20
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b084      	sub	sp, #16
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2202      	movs	r2, #2
 800c43e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	2100      	movs	r1, #0
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f000 fba0 	bl	800cb9a <USBD_LL_Transmit>

  return USBD_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	2100      	movs	r1, #0
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 fb8f 	bl	800cb9a <USBD_LL_Transmit>

  return USBD_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b084      	sub	sp, #16
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	60f8      	str	r0, [r7, #12]
 800c48e:	60b9      	str	r1, [r7, #8]
 800c490:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	2100      	movs	r1, #0
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f000 fb9f 	bl	800cbdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2204      	movs	r2, #4
 800c4b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	2100      	movs	r1, #0
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fb6b 	bl	800cb9a <USBD_LL_Transmit>

  return USBD_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2205      	movs	r2, #5
 800c4da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4de:	2300      	movs	r3, #0
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fb79 	bl	800cbdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	490e      	ldr	r1, [pc, #56]	; (800c534 <MX_USB_Device_Init+0x40>)
 800c4fc:	480e      	ldr	r0, [pc, #56]	; (800c538 <MX_USB_Device_Init+0x44>)
 800c4fe:	f7fe fef7 	bl	800b2f0 <USBD_Init>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d001      	beq.n	800c50c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c508:	f7f5 f8a4 	bl	8001654 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800c50c:	490b      	ldr	r1, [pc, #44]	; (800c53c <MX_USB_Device_Init+0x48>)
 800c50e:	480a      	ldr	r0, [pc, #40]	; (800c538 <MX_USB_Device_Init+0x44>)
 800c510:	f7fe ff1e 	bl	800b350 <USBD_RegisterClass>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c51a:	f7f5 f89b 	bl	8001654 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c51e:	4806      	ldr	r0, [pc, #24]	; (800c538 <MX_USB_Device_Init+0x44>)
 800c520:	f7fe ff3d 	bl	800b39e <USBD_Start>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d001      	beq.n	800c52e <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800c52a:	f7f5 f893 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c52e:	bf00      	nop
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20000114 	.word	0x20000114
 800c538:	200007e8 	.word	0x200007e8
 800c53c:	2000000c 	.word	0x2000000c

0800c540 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	6039      	str	r1, [r7, #0]
 800c54a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	2212      	movs	r2, #18
 800c550:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800c552:	4b03      	ldr	r3, [pc, #12]	; (800c560 <USBD_HID_DeviceDescriptor+0x20>)
}
 800c554:	4618      	mov	r0, r3
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	20000134 	.word	0x20000134

0800c564 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4603      	mov	r3, r0
 800c56c:	6039      	str	r1, [r7, #0]
 800c56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2204      	movs	r2, #4
 800c574:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c576:	4b03      	ldr	r3, [pc, #12]	; (800c584 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800c578:	4618      	mov	r0, r3
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	20000148 	.word	0x20000148

0800c588 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	6039      	str	r1, [r7, #0]
 800c592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c594:	79fb      	ldrb	r3, [r7, #7]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d105      	bne.n	800c5a6 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	4907      	ldr	r1, [pc, #28]	; (800c5bc <USBD_HID_ProductStrDescriptor+0x34>)
 800c59e:	4808      	ldr	r0, [pc, #32]	; (800c5c0 <USBD_HID_ProductStrDescriptor+0x38>)
 800c5a0:	f7ff fee5 	bl	800c36e <USBD_GetString>
 800c5a4:	e004      	b.n	800c5b0 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	4904      	ldr	r1, [pc, #16]	; (800c5bc <USBD_HID_ProductStrDescriptor+0x34>)
 800c5aa:	4805      	ldr	r0, [pc, #20]	; (800c5c0 <USBD_HID_ProductStrDescriptor+0x38>)
 800c5ac:	f7ff fedf 	bl	800c36e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5b0:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <USBD_HID_ProductStrDescriptor+0x34>)
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	20000ab8 	.word	0x20000ab8
 800c5c0:	0800cd90 	.word	0x0800cd90

0800c5c4 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	4904      	ldr	r1, [pc, #16]	; (800c5e4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800c5d4:	4804      	ldr	r0, [pc, #16]	; (800c5e8 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800c5d6:	f7ff feca 	bl	800c36e <USBD_GetString>
  return USBD_StrDesc;
 800c5da:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	20000ab8 	.word	0x20000ab8
 800c5e8:	0800cd9c 	.word	0x0800cd9c

0800c5ec <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	221a      	movs	r2, #26
 800c5fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5fe:	f000 f843 	bl	800c688 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c602:	4b02      	ldr	r3, [pc, #8]	; (800c60c <USBD_HID_SerialStrDescriptor+0x20>)
}
 800c604:	4618      	mov	r0, r3
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	2000014c 	.word	0x2000014c

0800c610 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	6039      	str	r1, [r7, #0]
 800c61a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c61c:	79fb      	ldrb	r3, [r7, #7]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d105      	bne.n	800c62e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	4907      	ldr	r1, [pc, #28]	; (800c644 <USBD_HID_ConfigStrDescriptor+0x34>)
 800c626:	4808      	ldr	r0, [pc, #32]	; (800c648 <USBD_HID_ConfigStrDescriptor+0x38>)
 800c628:	f7ff fea1 	bl	800c36e <USBD_GetString>
 800c62c:	e004      	b.n	800c638 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	4904      	ldr	r1, [pc, #16]	; (800c644 <USBD_HID_ConfigStrDescriptor+0x34>)
 800c632:	4805      	ldr	r0, [pc, #20]	; (800c648 <USBD_HID_ConfigStrDescriptor+0x38>)
 800c634:	f7ff fe9b 	bl	800c36e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c638:	4b02      	ldr	r3, [pc, #8]	; (800c644 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20000ab8 	.word	0x20000ab8
 800c648:	0800cdb0 	.word	0x0800cdb0

0800c64c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	6039      	str	r1, [r7, #0]
 800c656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c658:	79fb      	ldrb	r3, [r7, #7]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d105      	bne.n	800c66a <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	4907      	ldr	r1, [pc, #28]	; (800c680 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800c662:	4808      	ldr	r0, [pc, #32]	; (800c684 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800c664:	f7ff fe83 	bl	800c36e <USBD_GetString>
 800c668:	e004      	b.n	800c674 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	4904      	ldr	r1, [pc, #16]	; (800c680 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800c66e:	4805      	ldr	r0, [pc, #20]	; (800c684 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800c670:	f7ff fe7d 	bl	800c36e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c674:	4b02      	ldr	r3, [pc, #8]	; (800c680 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	20000ab8 	.word	0x20000ab8
 800c684:	0800cdbc 	.word	0x0800cdbc

0800c688 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c68e:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <Get_SerialNum+0x44>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c694:	4b0e      	ldr	r3, [pc, #56]	; (800c6d0 <Get_SerialNum+0x48>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c69a:	4b0e      	ldr	r3, [pc, #56]	; (800c6d4 <Get_SerialNum+0x4c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d009      	beq.n	800c6c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6ae:	2208      	movs	r2, #8
 800c6b0:	4909      	ldr	r1, [pc, #36]	; (800c6d8 <Get_SerialNum+0x50>)
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f000 f814 	bl	800c6e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c6b8:	2204      	movs	r2, #4
 800c6ba:	4908      	ldr	r1, [pc, #32]	; (800c6dc <Get_SerialNum+0x54>)
 800c6bc:	68b8      	ldr	r0, [r7, #8]
 800c6be:	f000 f80f 	bl	800c6e0 <IntToUnicode>
  }
}
 800c6c2:	bf00      	nop
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	1fff7590 	.word	0x1fff7590
 800c6d0:	1fff7594 	.word	0x1fff7594
 800c6d4:	1fff7598 	.word	0x1fff7598
 800c6d8:	2000014e 	.word	0x2000014e
 800c6dc:	2000015e 	.word	0x2000015e

0800c6e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	75fb      	strb	r3, [r7, #23]
 800c6f6:	e027      	b.n	800c748 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	0f1b      	lsrs	r3, r3, #28
 800c6fc:	2b09      	cmp	r3, #9
 800c6fe:	d80b      	bhi.n	800c718 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	0f1b      	lsrs	r3, r3, #28
 800c704:	b2da      	uxtb	r2, r3
 800c706:	7dfb      	ldrb	r3, [r7, #23]
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	4619      	mov	r1, r3
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	440b      	add	r3, r1
 800c710:	3230      	adds	r2, #48	; 0x30
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	701a      	strb	r2, [r3, #0]
 800c716:	e00a      	b.n	800c72e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	0f1b      	lsrs	r3, r3, #28
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
 800c720:	005b      	lsls	r3, r3, #1
 800c722:	4619      	mov	r1, r3
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	440b      	add	r3, r1
 800c728:	3237      	adds	r2, #55	; 0x37
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	011b      	lsls	r3, r3, #4
 800c732:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c734:	7dfb      	ldrb	r3, [r7, #23]
 800c736:	005b      	lsls	r3, r3, #1
 800c738:	3301      	adds	r3, #1
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	4413      	add	r3, r2
 800c73e:	2200      	movs	r2, #0
 800c740:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	3301      	adds	r3, #1
 800c746:	75fb      	strb	r3, [r7, #23]
 800c748:	7dfa      	ldrb	r2, [r7, #23]
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d3d3      	bcc.n	800c6f8 <IntToUnicode+0x18>
  }
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	371c      	adds	r7, #28
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
	...

0800c760 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b094      	sub	sp, #80	; 0x50
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c768:	f107 030c 	add.w	r3, r7, #12
 800c76c:	2244      	movs	r2, #68	; 0x44
 800c76e:	2100      	movs	r1, #0
 800c770:	4618      	mov	r0, r3
 800c772:	f000 fad5 	bl	800cd20 <memset>
  if(pcdHandle->Instance==USB)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a15      	ldr	r2, [pc, #84]	; (800c7d0 <HAL_PCD_MspInit+0x70>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d123      	bne.n	800c7c8 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c784:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c786:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c78a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c78c:	f107 030c 	add.w	r3, r7, #12
 800c790:	4618      	mov	r0, r3
 800c792:	f7fa f82d 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800c79c:	f7f4 ff5a 	bl	8001654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c7a0:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <HAL_PCD_MspInit+0x74>)
 800c7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7a4:	4a0b      	ldr	r2, [pc, #44]	; (800c7d4 <HAL_PCD_MspInit+0x74>)
 800c7a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7aa:	6593      	str	r3, [r2, #88]	; 0x58
 800c7ac:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <HAL_PCD_MspInit+0x74>)
 800c7ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7b4:	60bb      	str	r3, [r7, #8]
 800c7b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	2014      	movs	r0, #20
 800c7be:	f7f7 f8a8 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c7c2:	2014      	movs	r0, #20
 800c7c4:	f7f7 f8bf 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c7c8:	bf00      	nop
 800c7ca:	3750      	adds	r7, #80	; 0x50
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	40005c00 	.word	0x40005c00
 800c7d4:	40021000 	.word	0x40021000

0800c7d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	f7fe fe20 	bl	800b434 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c7f4:	bf00      	nop
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	460b      	mov	r3, r1
 800c806:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c80e:	78fa      	ldrb	r2, [r7, #3]
 800c810:	6879      	ldr	r1, [r7, #4]
 800c812:	4613      	mov	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	440b      	add	r3, r1
 800c81c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	78fb      	ldrb	r3, [r7, #3]
 800c824:	4619      	mov	r1, r3
 800c826:	f7fe fe5a 	bl	800b4de <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c82a:	bf00      	nop
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b082      	sub	sp, #8
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	460b      	mov	r3, r1
 800c83c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c844:	78fa      	ldrb	r2, [r7, #3]
 800c846:	6879      	ldr	r1, [r7, #4]
 800c848:	4613      	mov	r3, r2
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4413      	add	r3, r2
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	440b      	add	r3, r1
 800c852:	3324      	adds	r3, #36	; 0x24
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	78fb      	ldrb	r3, [r7, #3]
 800c858:	4619      	mov	r1, r3
 800c85a:	f7fe fea3 	bl	800b5a4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c85e:	bf00      	nop
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b082      	sub	sp, #8
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c874:	4618      	mov	r0, r3
 800c876:	f7fe ffb7 	bl	800b7e8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c87a:	bf00      	nop
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b084      	sub	sp, #16
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c88a:	2301      	movs	r3, #1
 800c88c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	795b      	ldrb	r3, [r3, #5]
 800c892:	2b02      	cmp	r3, #2
 800c894:	d001      	beq.n	800c89a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c896:	f7f4 fedd 	bl	8001654 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c8a0:	7bfa      	ldrb	r2, [r7, #15]
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fe ff61 	bl	800b76c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7fe ff0d 	bl	800b6d0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
	...

0800c8c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe ff5c 	bl	800b78c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	7a5b      	ldrb	r3, [r3, #9]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d005      	beq.n	800c8e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8dc:	4b04      	ldr	r3, [pc, #16]	; (800c8f0 <HAL_PCD_SuspendCallback+0x30>)
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	4a03      	ldr	r2, [pc, #12]	; (800c8f0 <HAL_PCD_SuspendCallback+0x30>)
 800c8e2:	f043 0306 	orr.w	r3, r3, #6
 800c8e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c8e8:	bf00      	nop
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	e000ed00 	.word	0xe000ed00

0800c8f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	7a5b      	ldrb	r3, [r3, #9]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d007      	beq.n	800c914 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c904:	4b08      	ldr	r3, [pc, #32]	; (800c928 <HAL_PCD_ResumeCallback+0x34>)
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	4a07      	ldr	r2, [pc, #28]	; (800c928 <HAL_PCD_ResumeCallback+0x34>)
 800c90a:	f023 0306 	bic.w	r3, r3, #6
 800c90e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c910:	f000 f9d4 	bl	800ccbc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe ff4c 	bl	800b7b8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	e000ed00 	.word	0xe000ed00

0800c92c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c934:	4a22      	ldr	r2, [pc, #136]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4a20      	ldr	r2, [pc, #128]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c940:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c944:	4b1e      	ldr	r3, [pc, #120]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c946:	4a1f      	ldr	r2, [pc, #124]	; (800c9c4 <USBD_LL_Init+0x98>)
 800c948:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c94a:	4b1d      	ldr	r3, [pc, #116]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c94c:	2208      	movs	r2, #8
 800c94e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c950:	4b1b      	ldr	r3, [pc, #108]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c952:	2202      	movs	r2, #2
 800c954:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c956:	4b1a      	ldr	r3, [pc, #104]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c958:	2202      	movs	r2, #2
 800c95a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c95c:	4b18      	ldr	r3, [pc, #96]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c95e:	2200      	movs	r2, #0
 800c960:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c962:	4b17      	ldr	r3, [pc, #92]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c964:	2200      	movs	r2, #0
 800c966:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c968:	4b15      	ldr	r3, [pc, #84]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c96e:	4b14      	ldr	r3, [pc, #80]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c970:	2200      	movs	r2, #0
 800c972:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c974:	4812      	ldr	r0, [pc, #72]	; (800c9c0 <USBD_LL_Init+0x94>)
 800c976:	f7f7 fc75 	bl	8004264 <HAL_PCD_Init>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c980:	f7f4 fe68 	bl	8001654 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c98a:	2318      	movs	r3, #24
 800c98c:	2200      	movs	r2, #0
 800c98e:	2100      	movs	r1, #0
 800c990:	f7f9 f917 	bl	8005bc2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c99a:	2358      	movs	r3, #88	; 0x58
 800c99c:	2200      	movs	r2, #0
 800c99e:	2180      	movs	r1, #128	; 0x80
 800c9a0:	f7f9 f90f 	bl	8005bc2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c9aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	2181      	movs	r1, #129	; 0x81
 800c9b2:	f7f9 f906 	bl	8005bc2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	20000cb8 	.word	0x20000cb8
 800c9c4:	40005c00 	.word	0x40005c00

0800c9c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f7 fd0e 	bl	8004400 <HAL_PCD_Start>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 f96c 	bl	800ccc8 <USBD_Get_USB_Status>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	4608      	mov	r0, r1
 800ca08:	4611      	mov	r1, r2
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	70fb      	strb	r3, [r7, #3]
 800ca10:	460b      	mov	r3, r1
 800ca12:	70bb      	strb	r3, [r7, #2]
 800ca14:	4613      	mov	r3, r2
 800ca16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca26:	78bb      	ldrb	r3, [r7, #2]
 800ca28:	883a      	ldrh	r2, [r7, #0]
 800ca2a:	78f9      	ldrb	r1, [r7, #3]
 800ca2c:	f7f7 fe55 	bl	80046da <HAL_PCD_EP_Open>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 f946 	bl	800ccc8 <USBD_Get_USB_Status>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	460b      	mov	r3, r1
 800ca54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca64:	78fa      	ldrb	r2, [r7, #3]
 800ca66:	4611      	mov	r1, r2
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7f7 fe93 	bl	8004794 <HAL_PCD_EP_Close>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f000 f927 	bl	800ccc8 <USBD_Get_USB_Status>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800caa2:	78fa      	ldrb	r2, [r7, #3]
 800caa4:	4611      	mov	r1, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f7 ff24 	bl	80048f4 <HAL_PCD_EP_SetStall>
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 f908 	bl	800ccc8 <USBD_Get_USB_Status>
 800cab8:	4603      	mov	r3, r0
 800caba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b084      	sub	sp, #16
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	460b      	mov	r3, r1
 800cad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cae0:	78fa      	ldrb	r2, [r7, #3]
 800cae2:	4611      	mov	r1, r2
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7f7 ff57 	bl	8004998 <HAL_PCD_EP_ClrStall>
 800caea:	4603      	mov	r3, r0
 800caec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f000 f8e9 	bl	800ccc8 <USBD_Get_USB_Status>
 800caf6:	4603      	mov	r3, r0
 800caf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cafa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	da0b      	bge.n	800cb38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb26:	68f9      	ldr	r1, [r7, #12]
 800cb28:	4613      	mov	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	00db      	lsls	r3, r3, #3
 800cb30:	440b      	add	r3, r1
 800cb32:	3312      	adds	r3, #18
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	e00b      	b.n	800cb50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb38:	78fb      	ldrb	r3, [r7, #3]
 800cb3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb3e:	68f9      	ldr	r1, [r7, #12]
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	440b      	add	r3, r1
 800cb4a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800cb4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb76:	78fa      	ldrb	r2, [r7, #3]
 800cb78:	4611      	mov	r1, r2
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7f7 fd89 	bl	8004692 <HAL_PCD_SetAddress>
 800cb80:	4603      	mov	r3, r0
 800cb82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 f89e 	bl	800ccc8 <USBD_Get_USB_Status>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb90:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b086      	sub	sp, #24
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	60f8      	str	r0, [r7, #12]
 800cba2:	607a      	str	r2, [r7, #4]
 800cba4:	603b      	str	r3, [r7, #0]
 800cba6:	460b      	mov	r3, r1
 800cba8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbb8:	7af9      	ldrb	r1, [r7, #11]
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	f7f7 fe62 	bl	8004886 <HAL_PCD_EP_Transmit>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 f87d 	bl	800ccc8 <USBD_Get_USB_Status>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3718      	adds	r7, #24
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	607a      	str	r2, [r7, #4]
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbec:	2300      	movs	r3, #0
 800cbee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbfa:	7af9      	ldrb	r1, [r7, #11]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	f7f7 fe10 	bl	8004824 <HAL_PCD_EP_Receive>
 800cc04:	4603      	mov	r3, r0
 800cc06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 f85c 	bl	800ccc8 <USBD_Get_USB_Status>
 800cc10:	4603      	mov	r3, r0
 800cc12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc14:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
	...

0800cc20 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <HAL_PCDEx_LPM_Callback+0x18>
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d013      	beq.n	800cc5e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cc36:	e023      	b.n	800cc80 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	7a5b      	ldrb	r3, [r3, #9]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d007      	beq.n	800cc50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cc40:	f000 f83c 	bl	800ccbc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc44:	4b10      	ldr	r3, [pc, #64]	; (800cc88 <HAL_PCDEx_LPM_Callback+0x68>)
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	4a0f      	ldr	r2, [pc, #60]	; (800cc88 <HAL_PCDEx_LPM_Callback+0x68>)
 800cc4a:	f023 0306 	bic.w	r3, r3, #6
 800cc4e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fe fdae 	bl	800b7b8 <USBD_LL_Resume>
    break;
 800cc5c:	e010      	b.n	800cc80 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fd91 	bl	800b78c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7a5b      	ldrb	r3, [r3, #9]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d005      	beq.n	800cc7e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc72:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <HAL_PCDEx_LPM_Callback+0x68>)
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	4a04      	ldr	r2, [pc, #16]	; (800cc88 <HAL_PCDEx_LPM_Callback+0x68>)
 800cc78:	f043 0306 	orr.w	r3, r3, #6
 800cc7c:	6113      	str	r3, [r2, #16]
    break;
 800cc7e:	bf00      	nop
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	e000ed00 	.word	0xe000ed00

0800cc8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cc94:	4b03      	ldr	r3, [pc, #12]	; (800cca4 <USBD_static_malloc+0x18>)
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	20000f94 	.word	0x20000f94

0800cca8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]

}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ccc0:	f7f4 f8c0 	bl	8000e44 <SystemClock_Config>
}
 800ccc4:	bf00      	nop
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
 800ccd8:	2b03      	cmp	r3, #3
 800ccda:	d817      	bhi.n	800cd0c <USBD_Get_USB_Status+0x44>
 800ccdc:	a201      	add	r2, pc, #4	; (adr r2, 800cce4 <USBD_Get_USB_Status+0x1c>)
 800ccde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce2:	bf00      	nop
 800cce4:	0800ccf5 	.word	0x0800ccf5
 800cce8:	0800ccfb 	.word	0x0800ccfb
 800ccec:	0800cd01 	.word	0x0800cd01
 800ccf0:	0800cd07 	.word	0x0800cd07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf8:	e00b      	b.n	800cd12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfe:	e008      	b.n	800cd12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd00:	2301      	movs	r3, #1
 800cd02:	73fb      	strb	r3, [r7, #15]
    break;
 800cd04:	e005      	b.n	800cd12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd06:	2303      	movs	r3, #3
 800cd08:	73fb      	strb	r3, [r7, #15]
    break;
 800cd0a:	e002      	b.n	800cd12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd10:	bf00      	nop
  }
  return usb_status;
 800cd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3714      	adds	r7, #20
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <memset>:
 800cd20:	4402      	add	r2, r0
 800cd22:	4603      	mov	r3, r0
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d100      	bne.n	800cd2a <memset+0xa>
 800cd28:	4770      	bx	lr
 800cd2a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd2e:	e7f9      	b.n	800cd24 <memset+0x4>

0800cd30 <__libc_init_array>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	4d0d      	ldr	r5, [pc, #52]	; (800cd68 <__libc_init_array+0x38>)
 800cd34:	4c0d      	ldr	r4, [pc, #52]	; (800cd6c <__libc_init_array+0x3c>)
 800cd36:	1b64      	subs	r4, r4, r5
 800cd38:	10a4      	asrs	r4, r4, #2
 800cd3a:	2600      	movs	r6, #0
 800cd3c:	42a6      	cmp	r6, r4
 800cd3e:	d109      	bne.n	800cd54 <__libc_init_array+0x24>
 800cd40:	4d0b      	ldr	r5, [pc, #44]	; (800cd70 <__libc_init_array+0x40>)
 800cd42:	4c0c      	ldr	r4, [pc, #48]	; (800cd74 <__libc_init_array+0x44>)
 800cd44:	f000 f818 	bl	800cd78 <_init>
 800cd48:	1b64      	subs	r4, r4, r5
 800cd4a:	10a4      	asrs	r4, r4, #2
 800cd4c:	2600      	movs	r6, #0
 800cd4e:	42a6      	cmp	r6, r4
 800cd50:	d105      	bne.n	800cd5e <__libc_init_array+0x2e>
 800cd52:	bd70      	pop	{r4, r5, r6, pc}
 800cd54:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd58:	4798      	blx	r3
 800cd5a:	3601      	adds	r6, #1
 800cd5c:	e7ee      	b.n	800cd3c <__libc_init_array+0xc>
 800cd5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd62:	4798      	blx	r3
 800cd64:	3601      	adds	r6, #1
 800cd66:	e7f2      	b.n	800cd4e <__libc_init_array+0x1e>
 800cd68:	0800cddc 	.word	0x0800cddc
 800cd6c:	0800cddc 	.word	0x0800cddc
 800cd70:	0800cddc 	.word	0x0800cddc
 800cd74:	0800cde0 	.word	0x0800cde0

0800cd78 <_init>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr

0800cd84 <_fini>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	bf00      	nop
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr
