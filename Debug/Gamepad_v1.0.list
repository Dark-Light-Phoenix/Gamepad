
Gamepad_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0e0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800c2b8  0800c2b8  0001c2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c304  0800c304  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  0800c304  0800c304  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c304  0800c304  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c304  0800c304  0001c304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c308  0800c308  0001c308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800c30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e40  20000168  0800c474  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fa8  0800c474  00020fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c91e  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044d5  00000000  00000000  0003caf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c8  00000000  00000000  00040fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d2  00000000  00000000  00042898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a51  00000000  00000000  00043b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f1e1  00000000  00000000  000665bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9e47  00000000  00000000  0008579c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000671c  00000000  00000000  0015f5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00165d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c2a0 	.word	0x0800c2a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800c2a0 	.word	0x0800c2a0

08000218 <Left_Cascade>:
extern uint8_t Circle, Triangle, Chrest, Square;
extern uint8_t L1, L2;
extern uint8_t R1, R2;

void Left_Cascade (uint8_t *Left, uint8_t *Up, uint8_t *Right, uint8_t *Down)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	*Left = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4);
 8000226:	2110      	movs	r1, #16
 8000228:	4811      	ldr	r0, [pc, #68]	; (8000270 <Left_Cascade+0x58>)
 800022a:	f003 fa7f 	bl	800372c <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	461a      	mov	r2, r3
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	701a      	strb	r2, [r3, #0]
	*Up = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5);
 8000236:	2120      	movs	r1, #32
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <Left_Cascade+0x58>)
 800023a:	f003 fa77 	bl	800372c <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	701a      	strb	r2, [r3, #0]
	*Right = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6);
 8000246:	2140      	movs	r1, #64	; 0x40
 8000248:	4809      	ldr	r0, [pc, #36]	; (8000270 <Left_Cascade+0x58>)
 800024a:	f003 fa6f 	bl	800372c <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	461a      	mov	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	701a      	strb	r2, [r3, #0]
	*Down = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_7);
 8000256:	2180      	movs	r1, #128	; 0x80
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <Left_Cascade+0x58>)
 800025a:	f003 fa67 	bl	800372c <HAL_GPIO_ReadPin>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	701a      	strb	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	48000400 	.word	0x48000400

08000274 <Right_Cascade>:

void Right_Cascade (uint8_t *Circle, uint8_t *Triangle, uint8_t *Chrest, uint8_t *Square)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
 8000280:	603b      	str	r3, [r7, #0]
	*Circle = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10);
 8000282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f003 fa4f 	bl	800372c <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	701a      	strb	r2, [r3, #0]
	*Triangle = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9);
 8000296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f003 fa45 	bl	800372c <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	701a      	strb	r2, [r3, #0]
	*Chrest = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_8);
 80002aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f003 fa3b 	bl	800372c <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	701a      	strb	r2, [r3, #0]
	*Square = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_0);
 80002be:	2101      	movs	r1, #1
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <Right_Cascade+0x64>)
 80002c2:	f003 fa33 	bl	800372c <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	701a      	strb	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	48000400 	.word	0x48000400

080002dc <Triggers>:

void Triggers (uint8_t *L1, uint8_t *L2, uint8_t *R1, uint8_t *R2)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
 80002e8:	603b      	str	r3, [r7, #0]
	*L1 = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3);
 80002ea:	2108      	movs	r1, #8
 80002ec:	4814      	ldr	r0, [pc, #80]	; (8000340 <Triggers+0x64>)
 80002ee:	f003 fa1d 	bl	800372c <HAL_GPIO_ReadPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	701a      	strb	r2, [r3, #0]
	*L2 = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_15);
 80002fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f003 fa13 	bl	800372c <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	701a      	strb	r2, [r3, #0]
	*R1 = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_14);
 800030e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f003 fa09 	bl	800372c <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	701a      	strb	r2, [r3, #0]
	*R2 = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_13);
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f003 f9ff 	bl	800372c <HAL_GPIO_ReadPin>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	701a      	strb	r2, [r3, #0]
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	48000400 	.word	0x48000400

08000344 <ADC_DMA_Init>:

uint32_t adc_buffer1 [BUFFER_SIZE];
uint32_t adc_buffer2 [BUFFER_SIZE];

void ADC_DMA_Init (void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA (&hadc1, (uint32_t *)adc_buffer1, BUFFER_SIZE);
 8000348:	2202      	movs	r2, #2
 800034a:	4907      	ldr	r1, [pc, #28]	; (8000368 <ADC_DMA_Init+0x24>)
 800034c:	4807      	ldr	r0, [pc, #28]	; (800036c <ADC_DMA_Init+0x28>)
 800034e:	f001 fde5 	bl	8001f1c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA (&hadc2, (uint32_t *)adc_buffer2, BUFFER_SIZE);
 8000352:	2202      	movs	r2, #2
 8000354:	4906      	ldr	r1, [pc, #24]	; (8000370 <ADC_DMA_Init+0x2c>)
 8000356:	4807      	ldr	r0, [pc, #28]	; (8000374 <ADC_DMA_Init+0x30>)
 8000358:	f001 fde0 	bl	8001f1c <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start (&htim6);
 800035c:	4806      	ldr	r0, [pc, #24]	; (8000378 <ADC_DMA_Init+0x34>)
 800035e:	f005 ff23 	bl	80061a8 <HAL_TIM_Base_Start>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000184 	.word	0x20000184
 800036c:	200004a4 	.word	0x200004a4
 8000370:	2000018c 	.word	0x2000018c
 8000374:	20000510 	.word	0x20000510
 8000378:	200006d4 	.word	0x200006d4

0800037c <setColor>:
uint16_t pwmData [(numLEDs * LEDbits) * 2];

int counter = 0;

void setColor (uint8_t green, uint8_t red, uint8_t blue, int ledIndex)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	4603      	mov	r3, r0
 8000386:	71fb      	strb	r3, [r7, #7]
 8000388:	460b      	mov	r3, r1
 800038a:	71bb      	strb	r3, [r7, #6]
 800038c:	4613      	mov	r3, r2
 800038e:	717b      	strb	r3, [r7, #5]
	uint8_t ledData [3] = {green, red, blue};
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	723b      	strb	r3, [r7, #8]
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	727b      	strb	r3, [r7, #9]
 8000398:	797b      	ldrb	r3, [r7, #5]
 800039a:	72bb      	strb	r3, [r7, #10]
	int bitIndex = ledIndex * (LEDbits * 2);
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	4613      	mov	r3, r2
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	4413      	add	r3, r2
 80003a4:	011b      	lsls	r3, r3, #4
 80003a6:	617b      	str	r3, [r7, #20]

	for (int color = 0; color < 3; color++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	e034      	b.n	8000418 <setColor+0x9c>
	{
		for (int bit = 0; bit < 8; bit++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	e02b      	b.n	800040c <setColor+0x90>
		{
			if (ledData [color] & (1 << (7 - bit)))
 80003b4:	f107 0208 	add.w	r2, r7, #8
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	4413      	add	r3, r2
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	461a      	mov	r2, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f1c3 0307 	rsb	r3, r3, #7
 80003c6:	fa42 f303 	asr.w	r3, r2, r3
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d00b      	beq.n	80003ea <setColor+0x6e>
			{
				pwmData [bitIndex] = T1H;
 80003d2:	4a16      	ldr	r2, [pc, #88]	; (800042c <setColor+0xb0>)
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	2122      	movs	r1, #34	; 0x22
 80003d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pwmData [bitIndex + 1] = T1L;
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	3301      	adds	r3, #1
 80003e0:	4a12      	ldr	r2, [pc, #72]	; (800042c <setColor+0xb0>)
 80003e2:	210e      	movs	r1, #14
 80003e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003e8:	e00a      	b.n	8000400 <setColor+0x84>
			}
			else
			{
				pwmData [bitIndex] = T0H;
 80003ea:	4a10      	ldr	r2, [pc, #64]	; (800042c <setColor+0xb0>)
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	210e      	movs	r1, #14
 80003f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pwmData [bitIndex + 1] = T0L;
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	3301      	adds	r3, #1
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <setColor+0xb0>)
 80003fa:	212d      	movs	r1, #45	; 0x2d
 80003fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			bitIndex += 2;
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	3302      	adds	r3, #2
 8000404:	617b      	str	r3, [r7, #20]
		for (int bit = 0; bit < 8; bit++)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	3301      	adds	r3, #1
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	2b07      	cmp	r3, #7
 8000410:	ddd0      	ble.n	80003b4 <setColor+0x38>
	for (int color = 0; color < 3; color++)
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	3301      	adds	r3, #1
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	2b02      	cmp	r3, #2
 800041c:	ddc7      	ble.n	80003ae <setColor+0x32>
		}
	}
	PWMPush();
 800041e:	f000 f807 	bl	8000430 <PWMPush>
}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000194 	.word	0x20000194

08000430 <PWMPush>:

void PWMPush (void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA (&htim17, TIM_CHANNEL_1, (uint32_t*)pwmData, (numLEDs * LEDbits) * 2);
 8000434:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000438:	4a06      	ldr	r2, [pc, #24]	; (8000454 <PWMPush+0x24>)
 800043a:	2100      	movs	r1, #0
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <PWMPush+0x28>)
 800043e:	f005 ff6d 	bl	800631c <HAL_TIM_PWM_Start_DMA>
	HAL_Delay (10);
 8000442:	200a      	movs	r0, #10
 8000444:	f001 f9a6 	bl	8001794 <HAL_Delay>
	HAL_TIM_PWM_Stop_DMA (&htim17, TIM_CHANNEL_1);
 8000448:	2100      	movs	r1, #0
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <PWMPush+0x28>)
 800044c:	f006 f97e 	bl	800674c <HAL_TIM_PWM_Stop_DMA>
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000194 	.word	0x20000194
 8000458:	20000720 	.word	0x20000720

0800045c <CounterSwitch>:

void CounterSwitch (void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	counter++;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <CounterSwitch+0x2c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <CounterSwitch+0x2c>)
 8000468:	6013      	str	r3, [r2, #0]
	if (counter > 3)
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <CounterSwitch+0x2c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b03      	cmp	r3, #3
 8000470:	dd02      	ble.n	8000478 <CounterSwitch+0x1c>
	{
		counter = 0;
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <CounterSwitch+0x2c>)
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
	}
	ChangeMode (counter);
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <CounterSwitch+0x2c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f804 	bl	800048c <ChangeMode>
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000494 	.word	0x20000494

0800048c <ChangeMode>:

void ChangeMode (uint8_t mode)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
	switch(mode)
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b03      	cmp	r3, #3
 800049a:	d817      	bhi.n	80004cc <ChangeMode+0x40>
 800049c:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <ChangeMode+0x18>)
 800049e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a2:	bf00      	nop
 80004a4:	080004b5 	.word	0x080004b5
 80004a8:	080004bb 	.word	0x080004bb
 80004ac:	080004c1 	.word	0x080004c1
 80004b0:	080004c7 	.word	0x080004c7
	{
		case 0:
			clearLEDs();
 80004b4:	f000 f80e 	bl	80004d4 <clearLEDs>
			break;
 80004b8:	e008      	b.n	80004cc <ChangeMode+0x40>
		case 1:
			Blinking();
 80004ba:	f000 f822 	bl	8000502 <Blinking>
			break;
 80004be:	e005      	b.n	80004cc <ChangeMode+0x40>
		case 2:
			Gradient();
 80004c0:	f000 f887 	bl	80005d2 <Gradient>
			break;
 80004c4:	e002      	b.n	80004cc <ChangeMode+0x40>
		case 3:
			Wawe();
 80004c6:	f000 f88b 	bl	80005e0 <Wawe>
			break;
 80004ca:	bf00      	nop
	}
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <clearLEDs>:

void clearLEDs (void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
    for (int i = 0; i < numLEDs; i++)
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e008      	b.n	80004f2 <clearLEDs+0x1e>
    {
        setColor(0, 0, 0, i);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff ff48 	bl	800037c <setColor>
    for (int i = 0; i < numLEDs; i++)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b07      	cmp	r3, #7
 80004f6:	ddf3      	ble.n	80004e0 <clearLEDs+0xc>
    }
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <Blinking>:

void Blinking (void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b088      	sub	sp, #32
 8000506:	af00      	add	r7, sp, #0
	for (int green_u = 0; green_u <= 256; green_u++)
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
 800050c:	e028      	b.n	8000560 <Blinking+0x5e>
	{
		for (int red_u = 0; red_u <= 256; red_u++)
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	e01e      	b.n	8000552 <Blinking+0x50>
		{
			for (int blue_u = 0; blue_u <= 256; blue_u++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e014      	b.n	8000544 <Blinking+0x42>
			{
				for (int i = 0; i < 8; i++)
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	e00b      	b.n	8000538 <Blinking+0x36>
				{
					setColor (green_u, red_u, blue_u, i);
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	b2d8      	uxtb	r0, r3
 8000524:	69bb      	ldr	r3, [r7, #24]
 8000526:	b2d9      	uxtb	r1, r3
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	f7ff ff25 	bl	800037c <setColor>
				for (int i = 0; i < 8; i++)
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	3301      	adds	r3, #1
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	2b07      	cmp	r3, #7
 800053c:	ddf0      	ble.n	8000520 <Blinking+0x1e>
			for (int blue_u = 0; blue_u <= 256; blue_u++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800054a:	dde6      	ble.n	800051a <Blinking+0x18>
		for (int red_u = 0; red_u <= 256; red_u++)
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	3301      	adds	r3, #1
 8000550:	61bb      	str	r3, [r7, #24]
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000558:	dddc      	ble.n	8000514 <Blinking+0x12>
	for (int green_u = 0; green_u <= 256; green_u++)
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	3301      	adds	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000566:	ddd2      	ble.n	800050e <Blinking+0xc>
				}
			}
		}
	}

	for (int green_d = 256; green_d >= 0; green_d--)
 8000568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	e028      	b.n	80005c2 <Blinking+0xc0>
	{
		for (int red_d = 256; red_d >= 0; red_d--)
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	e01e      	b.n	80005b6 <Blinking+0xb4>
		{
			for (int blue_d = 256; blue_d >= 0; blue_d--)
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	e014      	b.n	80005aa <Blinking+0xa8>
			{
				for (int i = 0; i < 8; i++)
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	e00b      	b.n	800059e <Blinking+0x9c>
				{
					setColor (green_d, red_d, blue_d, i);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	f7ff fef2 	bl	800037c <setColor>
				for (int i = 0; i < 8; i++)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	ddf0      	ble.n	8000586 <Blinking+0x84>
			for (int blue_d = 256; blue_d >= 0; blue_d--)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	dae7      	bge.n	8000580 <Blinking+0x7e>
		for (int red_d = 256; red_d >= 0; red_d--)
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	dadd      	bge.n	8000578 <Blinking+0x76>
	for (int green_d = 256; green_d >= 0; green_d--)
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3b01      	subs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad3      	bge.n	8000570 <Blinking+0x6e>
				}
			}
		}
	}

}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <Gradient>:

void Gradient (void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <Wawe>:

void Wawe (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <UpdateButton>:
};

GamepadReport_TypeDef gamepad_report = {0};

void UpdateButton (void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
    gamepad_report.buttons = 0;
 80005f4:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <UpdateButton+0xc4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	801a      	strh	r2, [r3, #0]

    if (Left)      gamepad_report.buttons |= (1 << 0);
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <UpdateButton+0xc8>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d006      	beq.n	8000610 <UpdateButton+0x20>
 8000602:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <UpdateButton+0xc4>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <UpdateButton+0xc4>)
 800060e:	801a      	strh	r2, [r3, #0]
    if (Up)        gamepad_report.buttons |= (1 << 1);
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <UpdateButton+0xcc>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d006      	beq.n	8000626 <UpdateButton+0x36>
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <UpdateButton+0xc4>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	b29a      	uxth	r2, r3
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <UpdateButton+0xc4>)
 8000624:	801a      	strh	r2, [r3, #0]
    if (Right)     gamepad_report.buttons |= (1 << 2);
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <UpdateButton+0xd0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d006      	beq.n	800063c <UpdateButton+0x4c>
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <UpdateButton+0xc4>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <UpdateButton+0xc4>)
 800063a:	801a      	strh	r2, [r3, #0]
    if (Down)      gamepad_report.buttons |= (1 << 3);
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <UpdateButton+0xd4>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d006      	beq.n	8000652 <UpdateButton+0x62>
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <UpdateButton+0xc4>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <UpdateButton+0xc4>)
 8000650:	801a      	strh	r2, [r3, #0]
    if (Circle)    gamepad_report.buttons |= (1 << 4);
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <UpdateButton+0xd8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <UpdateButton+0x78>
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <UpdateButton+0xc4>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <UpdateButton+0xc4>)
 8000666:	801a      	strh	r2, [r3, #0]
    if (Triangle)  gamepad_report.buttons |= (1 << 5);
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <UpdateButton+0xdc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d006      	beq.n	800067e <UpdateButton+0x8e>
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <UpdateButton+0xc4>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	f043 0320 	orr.w	r3, r3, #32
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <UpdateButton+0xc4>)
 800067c:	801a      	strh	r2, [r3, #0]
    if (Chrest)    gamepad_report.buttons |= (1 << 6);
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <UpdateButton+0xe0>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d006      	beq.n	8000694 <UpdateButton+0xa4>
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <UpdateButton+0xc4>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <UpdateButton+0xc4>)
 8000692:	801a      	strh	r2, [r3, #0]
    if (Square)    gamepad_report.buttons |= (1 << 7);
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <UpdateButton+0xe4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <UpdateButton+0xba>
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <UpdateButton+0xc4>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <UpdateButton+0xc4>)
 80006a8:	801a      	strh	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	20000498 	.word	0x20000498
 80006b8:	200007cc 	.word	0x200007cc
 80006bc:	200007cd 	.word	0x200007cd
 80006c0:	200007ce 	.word	0x200007ce
 80006c4:	200007cf 	.word	0x200007cf
 80006c8:	200007d0 	.word	0x200007d0
 80006cc:	200007d1 	.word	0x200007d1
 80006d0:	200007d2 	.word	0x200007d2
 80006d4:	200007d3 	.word	0x200007d3

080006d8 <UpdateJoystick>:

void UpdateJoystick (void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
    gamepad_report.x1 = (uint8_t)((adc_buffer1 [0] * 255 / 4095) - 128);
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <UpdateJoystick+0xa0>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	1a9a      	subs	r2, r3, r2
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <UpdateJoystick+0xa4>)
 80006e8:	fba3 1302 	umull	r1, r3, r3, r2
 80006ec:	1ad2      	subs	r2, r2, r3
 80006ee:	0852      	lsrs	r2, r2, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	0adb      	lsrs	r3, r3, #11
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	3b80      	subs	r3, #128	; 0x80
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <UpdateJoystick+0xa8>)
 80006fe:	709a      	strb	r2, [r3, #2]
    gamepad_report.y1 = (uint8_t)((adc_buffer1 [1] * 255 / 4095) - 128);
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <UpdateJoystick+0xa0>)
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	4613      	mov	r3, r2
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	1a9a      	subs	r2, r3, r2
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <UpdateJoystick+0xa4>)
 800070c:	fba3 1302 	umull	r1, r3, r3, r2
 8000710:	1ad2      	subs	r2, r2, r3
 8000712:	0852      	lsrs	r2, r2, #1
 8000714:	4413      	add	r3, r2
 8000716:	0adb      	lsrs	r3, r3, #11
 8000718:	b2db      	uxtb	r3, r3
 800071a:	3b80      	subs	r3, #128	; 0x80
 800071c:	b2db      	uxtb	r3, r3
 800071e:	b25a      	sxtb	r2, r3
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <UpdateJoystick+0xa8>)
 8000722:	70da      	strb	r2, [r3, #3]
    gamepad_report.x2 = (uint8_t)((adc_buffer2 [0] * 255 / 4095) - 128);
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <UpdateJoystick+0xac>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4613      	mov	r3, r2
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	1a9a      	subs	r2, r3, r2
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <UpdateJoystick+0xa4>)
 8000730:	fba3 1302 	umull	r1, r3, r3, r2
 8000734:	1ad2      	subs	r2, r2, r3
 8000736:	0852      	lsrs	r2, r2, #1
 8000738:	4413      	add	r3, r2
 800073a:	0adb      	lsrs	r3, r3, #11
 800073c:	b2db      	uxtb	r3, r3
 800073e:	3b80      	subs	r3, #128	; 0x80
 8000740:	b2db      	uxtb	r3, r3
 8000742:	b25a      	sxtb	r2, r3
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <UpdateJoystick+0xa8>)
 8000746:	711a      	strb	r2, [r3, #4]
    gamepad_report.y2 = (uint8_t)((adc_buffer2 [1] * 255 / 4095) - 128);
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <UpdateJoystick+0xac>)
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	4613      	mov	r3, r2
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	1a9a      	subs	r2, r3, r2
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <UpdateJoystick+0xa4>)
 8000754:	fba3 1302 	umull	r1, r3, r3, r2
 8000758:	1ad2      	subs	r2, r2, r3
 800075a:	0852      	lsrs	r2, r2, #1
 800075c:	4413      	add	r3, r2
 800075e:	0adb      	lsrs	r3, r3, #11
 8000760:	b2db      	uxtb	r3, r3
 8000762:	3b80      	subs	r3, #128	; 0x80
 8000764:	b2db      	uxtb	r3, r3
 8000766:	b25a      	sxtb	r2, r3
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <UpdateJoystick+0xa8>)
 800076a:	715a      	strb	r2, [r3, #5]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000184 	.word	0x20000184
 800077c:	00100101 	.word	0x00100101
 8000780:	20000498 	.word	0x20000498
 8000784:	2000018c 	.word	0x2000018c

08000788 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if (hadc -> Instance == hadc1.Instance || hadc->Instance == hadc2.Instance)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	d005      	beq.n	80007a8 <HAL_ADC_ConvCpltCallback+0x20>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_ADC_ConvCpltCallback+0x30>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d101      	bne.n	80007ac <HAL_ADC_ConvCpltCallback+0x24>
	{
		SendReport ();
 80007a8:	f000 f808 	bl	80007bc <SendReport>
	}
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200004a4 	.word	0x200004a4
 80007b8:	20000510 	.word	0x20000510

080007bc <SendReport>:

void SendReport (void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    UpdateButton();
 80007c0:	f7ff ff16 	bl	80005f0 <UpdateButton>
    UpdateJoystick();
 80007c4:	f7ff ff88 	bl	80006d8 <UpdateJoystick>
    USBD_HID_SendReport (&hUsbDeviceFS, (uint8_t *) &gamepad_report, sizeof (gamepad_report));
 80007c8:	2206      	movs	r2, #6
 80007ca:	4903      	ldr	r1, [pc, #12]	; (80007d8 <SendReport+0x1c>)
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <SendReport+0x20>)
 80007ce:	f009 ffa9 	bl	800a724 <USBD_HID_SendReport>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000498 	.word	0x20000498
 80007dc:	200007e8 	.word	0x200007e8

080007e0 <HID_Report_Output>:

extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim3;

void HID_Report_Output (uint8_t *report)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	left_motor = report [0];
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HID_Report_Output+0x30>)
 80007ee:	701a      	strb	r2, [r3, #0]
	right_motor = report [1];
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	785a      	ldrb	r2, [r3, #1]
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <HID_Report_Output+0x34>)
 80007f6:	701a      	strb	r2, [r3, #0]

	ControlVibration (left_motor, right_motor);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HID_Report_Output+0x30>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4a05      	ldr	r2, [pc, #20]	; (8000814 <HID_Report_Output+0x34>)
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f808 	bl	8000818 <ControlVibration>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000049e 	.word	0x2000049e
 8000814:	2000049f 	.word	0x2000049f

08000818 <ControlVibration>:

void ControlVibration (uint8_t left_depth, uint8_t right_depth)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_depth);
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <ControlVibration+0x2c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_depth);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <ControlVibration+0x30>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000688 	.word	0x20000688
 8000848:	2000063c 	.word	0x2000063c

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 ff2f 	bl	80016b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f84c 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 fb34 	bl	8000ec4 <MX_GPIO_Init>
  MX_DMA_Init();
 800085c:	f000 faf8 	bl	8000e50 <MX_DMA_Init>
  MX_ADC1_Init();
 8000860:	f000 f890 	bl	8000984 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000864:	f000 f908 	bl	8000a78 <MX_ADC2_Init>
  MX_USB_Device_Init();
 8000868:	f00b f8d8 	bl	800ba1c <MX_USB_Device_Init>
  MX_TIM6_Init();
 800086c:	f000 fa40 	bl	8000cf0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000870:	f000 f96a 	bl	8000b48 <MX_TIM3_Init>
  MX_TIM17_Init();
 8000874:	f000 fa74 	bl	8000d60 <MX_TIM17_Init>
  MX_TIM4_Init();
 8000878:	f000 f9de 	bl	8000c38 <MX_TIM4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Left_Cascade (&Left, &Up, &Right, &Down);
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <main+0x6c>)
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <main+0x70>)
 8000880:	490f      	ldr	r1, [pc, #60]	; (80008c0 <main+0x74>)
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <main+0x78>)
 8000884:	f7ff fcc8 	bl	8000218 <Left_Cascade>
	  Right_Cascade (&Circle, &Triangle, &Chrest, &Square);
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <main+0x7c>)
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <main+0x80>)
 800088c:	4910      	ldr	r1, [pc, #64]	; (80008d0 <main+0x84>)
 800088e:	4811      	ldr	r0, [pc, #68]	; (80008d4 <main+0x88>)
 8000890:	f7ff fcf0 	bl	8000274 <Right_Cascade>
	  Triggers (&L1, &L2, &R1, &R2);
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <main+0x8c>)
 8000896:	4a11      	ldr	r2, [pc, #68]	; (80008dc <main+0x90>)
 8000898:	4911      	ldr	r1, [pc, #68]	; (80008e0 <main+0x94>)
 800089a:	4812      	ldr	r0, [pc, #72]	; (80008e4 <main+0x98>)
 800089c:	f7ff fd1e 	bl	80002dc <Triggers>
	  ADC_DMA_Init();
 80008a0:	f7ff fd50 	bl	8000344 <ADC_DMA_Init>
	  HAL_ADC_ConvCpltCallback (hadc);
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <main+0x9c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff6d 	bl	8000788 <HAL_ADC_ConvCpltCallback>
	  HID_Report_Output (&report);
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <main+0xa0>)
 80008b0:	f7ff ff96 	bl	80007e0 <HID_Report_Output>
	  Left_Cascade (&Left, &Up, &Right, &Down);
 80008b4:	e7e2      	b.n	800087c <main+0x30>
 80008b6:	bf00      	nop
 80008b8:	200007cf 	.word	0x200007cf
 80008bc:	200007ce 	.word	0x200007ce
 80008c0:	200007cd 	.word	0x200007cd
 80008c4:	200007cc 	.word	0x200007cc
 80008c8:	200007d3 	.word	0x200007d3
 80008cc:	200007d2 	.word	0x200007d2
 80008d0:	200007d1 	.word	0x200007d1
 80008d4:	200007d0 	.word	0x200007d0
 80008d8:	200007d7 	.word	0x200007d7
 80008dc:	200007d6 	.word	0x200007d6
 80008e0:	200007d5 	.word	0x200007d5
 80008e4:	200007d4 	.word	0x200007d4
 80008e8:	200007d8 	.word	0x200007d8
 80008ec:	200004a0 	.word	0x200004a0

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	2238      	movs	r2, #56	; 0x38
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f00b fca2 	bl	800c248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000912:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000916:	f004 fc55 	bl	80051c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091a:	2301      	movs	r3, #1
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000922:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000928:	2303      	movs	r3, #3
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800092c:	2303      	movs	r3, #3
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000930:	230c      	movs	r3, #12
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000938:	2304      	movs	r3, #4
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0318 	add.w	r3, r7, #24
 8000944:	4618      	mov	r0, r3
 8000946:	f004 fcf1 	bl	800532c <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000950:	f000 fb92 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000958:	2302      	movs	r3, #2
 800095a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f004 ffef 	bl	8005950 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000978:	f000 fb7e 	bl	8001078 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	; 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2220      	movs	r2, #32
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f00b fc53 	bl	800c248 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009a2:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009cc:	2204      	movs	r2, #4
 80009ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d0:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009de:	2201      	movs	r2, #1
 80009e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009ec:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <MX_ADC1_Init+0xec>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_ADC1_Init+0xec>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_ADC1_Init+0xec>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a10:	4817      	ldr	r0, [pc, #92]	; (8000a70 <MX_ADC1_Init+0xec>)
 8000a12:	f001 f8ff 	bl	8001c14 <HAL_ADC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000a1c:	f000 fb2c 	bl	8001078 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_ADC1_Init+0xec>)
 8000a2c:	f002 f86e 	bl	8002b0c <HAL_ADCEx_MultiModeConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a36:	f000 fb1f 	bl	8001078 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_ADC1_Init+0xf0>)
 8000a3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a46:	237f      	movs	r3, #127	; 0x7f
 8000a48:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_ADC1_Init+0xec>)
 8000a58:	f001 fb28 	bl	80020ac <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a62:	f000 fb09 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3730      	adds	r7, #48	; 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200004a4 	.word	0x200004a4
 8000a74:	0c900008 	.word	0x0c900008

08000a78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2220      	movs	r2, #32
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00b fbdf 	bl	800c248 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000a8c:	4a2c      	ldr	r2, [pc, #176]	; (8000b40 <MX_ADC2_Init+0xc8>)
 8000a8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000a92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000ad2:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ade:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000af8:	f001 f88c 	bl	8001c14 <HAL_ADC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000b02:	f000 fab9 	bl	8001078 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_ADC2_Init+0xcc>)
 8000b08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b0a:	2306      	movs	r3, #6
 8000b0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b12:	237f      	movs	r3, #127	; 0x7f
 8000b14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b16:	2304      	movs	r3, #4
 8000b18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_ADC2_Init+0xc4>)
 8000b24:	f001 fac2 	bl	80020ac <HAL_ADC_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000b2e:	f000 faa3 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000510 	.word	0x20000510
 8000b40:	50000100 	.word	0x50000100
 8000b44:	08600004 	.word	0x08600004

08000b48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000b7c:	4a2d      	ldr	r2, [pc, #180]	; (8000c34 <MX_TIM3_Init+0xec>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 8000b80:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000b82:	f240 128f 	movw	r2, #399	; 0x18f
 8000b86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 599;
 8000b8e:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000b90:	f240 2257 	movw	r2, #599	; 0x257
 8000b94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ba2:	4823      	ldr	r0, [pc, #140]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000ba4:	f005 faa8 	bl	80060f8 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000bae:	f000 fa63 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	481c      	ldr	r0, [pc, #112]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000bc0:	f006 f920 	bl	8006e04 <HAL_TIM_ConfigClockSource>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000bca:	f000 fa55 	bl	8001078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000bd0:	f005 fb4c 	bl	800626c <HAL_TIM_PWM_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bda:	f000 fa4d 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4810      	ldr	r0, [pc, #64]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000bee:	f006 ff6f 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bf8:	f000 fa3e 	bl	8001078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfc:	2360      	movs	r3, #96	; 0x60
 8000bfe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000c14:	f005 ffe2 	bl	8006bdc <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c1e:	f000 fa2b 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c22:	4803      	ldr	r0, [pc, #12]	; (8000c30 <MX_TIM3_Init+0xe8>)
 8000c24:	f000 fbf4 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000c28:	bf00      	nop
 8000c2a:	3738      	adds	r7, #56	; 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000063c 	.word	0x2000063c
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]
 8000c5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <MX_TIM4_Init+0xb4>)
 8000c60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 399;
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000c64:	f240 128f 	movw	r2, #399	; 0x18f
 8000c68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 599;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000c72:	f240 2257 	movw	r2, #599	; 0x257
 8000c76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000c86:	f005 faf1 	bl	800626c <HAL_TIM_PWM_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000c90:	f000 f9f2 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000ca4:	f006 ff14 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000cae:	f000 f9e3 	bl	8001078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000cca:	f005 ff87 	bl	8006bdc <HAL_TIM_PWM_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000cd4:	f000 f9d0 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <MX_TIM4_Init+0xb0>)
 8000cda:	f000 fb99 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000688 	.word	0x20000688
 8000cec:	40000800 	.word	0x40000800

08000cf0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_TIM6_Init+0x68>)
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <MX_TIM6_Init+0x6c>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_TIM6_Init+0x68>)
 8000d08:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MX_TIM6_Init+0x68>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_TIM6_Init+0x68>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_TIM6_Init+0x68>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_TIM6_Init+0x68>)
 8000d24:	f005 f9e8 	bl	80060f8 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d2e:	f000 f9a3 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d32:	2320      	movs	r3, #32
 8000d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_TIM6_Init+0x68>)
 8000d40:	f006 fec6 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d4a:	f000 f995 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200006d4 	.word	0x200006d4
 8000d5c:	40001000 	.word	0x40001000

08000d60 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2234      	movs	r2, #52	; 0x34
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00b fa61 	bl	800c248 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d86:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000d88:	4a30      	ldr	r2, [pc, #192]	; (8000e4c <MX_TIM17_Init+0xec>)
 8000d8a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 59;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000d9a:	223b      	movs	r2, #59	; 0x3b
 8000d9c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000db0:	4825      	ldr	r0, [pc, #148]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000db2:	f005 f9a1 	bl	80060f8 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000dbc:	f000 f95c 	bl	8001078 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000dc0:	4821      	ldr	r0, [pc, #132]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000dc2:	f005 fa53 	bl	800626c <HAL_TIM_PWM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000dcc:	f000 f954 	bl	8001078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd0:	2360      	movs	r3, #96	; 0x60
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000df6:	f005 fef1 	bl	8006bdc <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000e00:	f000 f93a 	bl	8001078 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000e2c:	f006 fed2 	bl	8007bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000e36:	f000 f91f 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM17_Init+0xe8>)
 8000e3c:	f000 fae8 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	; 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000720 	.word	0x20000720
 8000e4c:	40014800 	.word	0x40014800

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_DMA_Init+0x70>)
 8000e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5a:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <MX_DMA_Init+0x70>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6493      	str	r3, [r2, #72]	; 0x48
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_DMA_Init+0x70>)
 8000e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_DMA_Init+0x70>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e72:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <MX_DMA_Init+0x70>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6493      	str	r3, [r2, #72]	; 0x48
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_DMA_Init+0x70>)
 8000e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f001 ffbd 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e90:	200b      	movs	r0, #11
 8000e92:	f001 ffd4 	bl	8002e3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	200c      	movs	r0, #12
 8000e9c:	f001 ffb5 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ea0:	200c      	movs	r0, #12
 8000ea2:	f001 ffcc 	bl	8002e3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	200d      	movs	r0, #13
 8000eac:	f001 ffad 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000eb0:	200d      	movs	r0, #13
 8000eb2:	f001 ffc4 	bl	8002e3e <HAL_NVIC_EnableIRQ>

}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eda:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a5c      	ldr	r2, [pc, #368]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0320 	and.w	r3, r3, #32
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef2:	4b57      	ldr	r3, [pc, #348]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a56      	ldr	r2, [pc, #344]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b54      	ldr	r3, [pc, #336]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b51      	ldr	r3, [pc, #324]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a50      	ldr	r2, [pc, #320]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b48      	ldr	r3, [pc, #288]	; (8001050 <MX_GPIO_Init+0x18c>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f40:	2303      	movs	r3, #3
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4841      	ldr	r0, [pc, #260]	; (8001054 <MX_GPIO_Init+0x190>)
 8000f50:	f002 fa6a 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f54:	2308      	movs	r3, #8
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f002 fa5d 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f6e:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f002 fa4e 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000f8c:	23d1      	movs	r3, #209	; 0xd1
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	482d      	ldr	r0, [pc, #180]	; (8001058 <MX_GPIO_Init+0x194>)
 8000fa2:	f002 fa41 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f002 fa32 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481f      	ldr	r0, [pc, #124]	; (8001058 <MX_GPIO_Init+0x194>)
 8000fda:	f002 fa25 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <MX_GPIO_Init+0x194>)
 8000ff2:	f002 fa19 	bl	8003428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2006      	movs	r0, #6
 8000ffc:	f001 ff05 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001000:	2006      	movs	r0, #6
 8001002:	f001 ff1c 	bl	8002e3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2009      	movs	r0, #9
 800100c:	f001 fefd 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001010:	2009      	movs	r0, #9
 8001012:	f001 ff14 	bl	8002e3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	200a      	movs	r0, #10
 800101c:	f001 fef5 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001020:	200a      	movs	r0, #10
 8001022:	f001 ff0c 	bl	8002e3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2017      	movs	r0, #23
 800102c:	f001 feed 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001030:	2017      	movs	r0, #23
 8001032:	f001 ff04 	bl	8002e3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2028      	movs	r0, #40	; 0x28
 800103c:	f001 fee5 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001040:	2028      	movs	r0, #40	; 0x28
 8001042:	f001 fefc 	bl	8002e3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	48001800 	.word	0x48001800
 8001058:	48000400 	.word	0x48000400

0800105c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5)
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	2b20      	cmp	r3, #32
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_EXTI_Callback+0x14>
	{
		  CounterSwitch();
 800106c:	f7ff f9f6 	bl	800045c <CounterSwitch>
	}
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x44>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x44>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6613      	str	r3, [r2, #96]	; 0x60
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x44>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x44>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x44>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x44>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010ba:	f004 f927 	bl	800530c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09c      	sub	sp, #112	; 0x70
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	2244      	movs	r2, #68	; 0x44
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00b f8ab 	bl	800c248 <memset>
  if(hadc->Instance==ADC1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fa:	d16a      	bne.n	80011d2 <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001100:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001102:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001106:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f004 fe03 	bl	8005d18 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001118:	f7ff ffae 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800111c:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	4a65      	ldr	r2, [pc, #404]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 8001124:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001126:	4b64      	ldr	r3, [pc, #400]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d10b      	bne.n	8001146 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a62      	ldr	r2, [pc, #392]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001134:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b60      	ldr	r3, [pc, #384]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a5c      	ldr	r2, [pc, #368]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800115e:	2305      	movs	r3, #5
 8001160:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f002 f958 	bl	8003428 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001178:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 800117a:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_ADC_MspInit+0x1f8>)
 800117c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800117e:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 8001180:	2205      	movs	r2, #5
 8001182:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800118a:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001190:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001196:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 8001198:	f44f 7280 	mov.w	r2, #256	; 0x100
 800119c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800119e:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011a8:	2220      	movs	r2, #32
 80011aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011ac:	4b44      	ldr	r3, [pc, #272]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b4:	4842      	ldr	r0, [pc, #264]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011b6:	f001 fe5d 	bl	8002e74 <HAL_DMA_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80011c0:	f7ff ff5a 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a3e      	ldr	r2, [pc, #248]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54
 80011ca:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011d0:	e06e      	b.n	80012b0 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a3c      	ldr	r2, [pc, #240]	; (80012c8 <HAL_ADC_MspInit+0x1fc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d169      	bne.n	80012b0 <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011e6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 fd93 	bl	8005d18 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80011f8:	f7ff ff3e 	bl	8001078 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011fc:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 8001204:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10b      	bne.n	8001226 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a24      	ldr	r2, [pc, #144]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800123e:	2342      	movs	r3, #66	; 0x42
 8001240:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f002 f8e8 	bl	8003428 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_ADC_MspInit+0x200>)
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_ADC_MspInit+0x204>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001260:	2224      	movs	r2, #36	; 0x24
 8001262:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_ADC_MspInit+0x200>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001284:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001288:	2220      	movs	r2, #32
 800128a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_ADC_MspInit+0x200>)
 800128e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001292:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001296:	f001 fded 	bl	8002e74 <HAL_DMA_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 80012a0:	f7ff feea 	bl	8001078 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_ADC_MspInit+0x200>)
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_ADC_MspInit+0x200>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012b0:	bf00      	nop
 80012b2:	3770      	adds	r7, #112	; 0x70
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200007dc 	.word	0x200007dc
 80012bc:	40021000 	.word	0x40021000
 80012c0:	2000057c 	.word	0x2000057c
 80012c4:	40020008 	.word	0x40020008
 80012c8:	50000100 	.word	0x50000100
 80012cc:	200005dc 	.word	0x200005dc
 80012d0:	4002001c 	.word	0x4002001c

080012d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <HAL_TIM_Base_MspInit+0xe4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10c      	bne.n	8001300 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e6:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	4a34      	ldr	r2, [pc, #208]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6593      	str	r3, [r2, #88]	; 0x58
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80012fe:	e056      	b.n	80013ae <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a2e      	ldr	r2, [pc, #184]	; (80013c0 <HAL_TIM_Base_MspInit+0xec>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10c      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 8001310:	f043 0310 	orr.w	r3, r3, #16
 8001314:	6593      	str	r3, [r2, #88]	; 0x58
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
}
 8001322:	e044      	b.n	80013ae <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM17)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <HAL_TIM_Base_MspInit+0xf0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d13f      	bne.n	80013ae <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	4a22      	ldr	r2, [pc, #136]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001338:	6613      	str	r3, [r2, #96]	; 0x60
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_TIM_Base_MspInit+0xe8>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <HAL_TIM_Base_MspInit+0xf8>)
 800134a:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 800134e:	2254      	movs	r2, #84	; 0x54
 8001350:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 8001354:	2210      	movs	r2, #16
 8001356:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 8001366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136a:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 800136e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001372:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 800137c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001380:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 8001384:	f001 fd76 	bl	8002e74 <HAL_DMA_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 800138e:	f7ff fe73 	bl	8001078 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_TIM_Base_MspInit+0xf4>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	201a      	movs	r0, #26
 80013a4:	f001 fd31 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013a8:	201a      	movs	r0, #26
 80013aa:	f001 fd48 	bl	8002e3e <HAL_NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40000400 	.word	0x40000400
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40001000 	.word	0x40001000
 80013c4:	40014800 	.word	0x40014800
 80013c8:	2000076c 	.word	0x2000076c
 80013cc:	40020030 	.word	0x40020030

080013d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_TIM_PWM_MspInit+0x38>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_TIM_PWM_MspInit+0x3c>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_TIM_PWM_MspInit+0x3c>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_TIM_PWM_MspInit+0x3c>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40000800 	.word	0x40000800
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a34      	ldr	r2, [pc, #208]	; (8001500 <HAL_TIM_MspPostInit+0xf0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d11d      	bne.n	800146e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a33      	ldr	r2, [pc, #204]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144a:	2310      	movs	r3, #16
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144e:	2312      	movs	r3, #18
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800145a:	2302      	movs	r3, #2
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f001 ffde 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800146c:	e044      	b.n	80014f8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_TIM_MspPostInit+0xf8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d11d      	bne.n	80014b4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014a2:	2302      	movs	r3, #2
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4817      	ldr	r0, [pc, #92]	; (800150c <HAL_TIM_MspPostInit+0xfc>)
 80014ae:	f001 ffbb 	bl	8003428 <HAL_GPIO_Init>
}
 80014b2:	e021      	b.n	80014f8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM17)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_TIM_MspPostInit+0x100>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d11c      	bne.n	80014f8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_MspPostInit+0xf4>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f001 ff98 	bl	8003428 <HAL_GPIO_Init>
}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40000400 	.word	0x40000400
 8001504:	40021000 	.word	0x40021000
 8001508:	40000800 	.word	0x40000800
 800150c:	48000400 	.word	0x48000400
 8001510:	40014800 	.word	0x40014800

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f8fa 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800156c:	2001      	movs	r0, #1
 800156e:	f002 f8f5 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}

08001576 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800157a:	2008      	movs	r0, #8
 800157c:	f002 f8ee 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001588:	2010      	movs	r0, #16
 800158a:	f002 f8e7 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <DMA1_Channel1_IRQHandler+0x10>)
 800159a:	f001 fdf5 	bl	8003188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000057c 	.word	0x2000057c

080015a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <DMA1_Channel2_IRQHandler+0x10>)
 80015ae:	f001 fdeb 	bl	8003188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200005dc 	.word	0x200005dc

080015bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <DMA1_Channel3_IRQHandler+0x10>)
 80015c2:	f001 fde1 	bl	8003188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000076c 	.word	0x2000076c

080015d0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <USB_LP_IRQHandler+0x10>)
 80015d6:	f002 f9c9 	bl	800396c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000cb8 	.word	0x20000cb8

080015e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80015e8:	2020      	movs	r0, #32
 80015ea:	f002 f8b7 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80015ee:	2040      	movs	r0, #64	; 0x40
 80015f0:	f002 f8b4 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80015f4:	2080      	movs	r0, #128	; 0x80
 80015f6:	f002 f8b1 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80015fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015fe:	f002 f8ad 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001602:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001606:	f002 f8a9 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001616:	f005 f991 	bl	800693c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000720 	.word	0x20000720

08001624 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001628:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800162c:	f002 f896 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001630:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001634:	f002 f892 	bl	800375c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001662:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff ffea 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <LoopForever+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800168e:	f00a fde3 	bl	800c258 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001692:	f7ff f8db 	bl	800084c <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   r0, =_estack
 8001698:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80016a4:	0800c30c 	.word	0x0800c30c
  ldr r2, =_sbss
 80016a8:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80016ac:	20000fa8 	.word	0x20000fa8

080016b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_2_IRQHandler>

080016b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f001 fb99 	bl	8002df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 f80e 	bl	80016e4 <HAL_InitTick>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	e001      	b.n	80016d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d4:	f7ff fcd6 	bl	8001084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d8:	79fb      	ldrb	r3, [r7, #7]

}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_InitTick+0x68>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d022      	beq.n	800173e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_InitTick+0x6c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_InitTick+0x68>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001704:	fbb1 f3f3 	udiv	r3, r1, r3
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fba4 	bl	8002e5a <HAL_SYSTICK_Config>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10f      	bne.n	8001738 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	d809      	bhi.n	8001732 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171e:	2200      	movs	r2, #0
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	f04f 30ff 	mov.w	r0, #4294967295
 8001726:	f001 fb70 	bl	8002e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_InitTick+0x70>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e007      	b.n	8001742 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
 8001736:	e004      	b.n	8001742 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e001      	b.n	8001742 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000008 	.word	0x20000008
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_IncTick+0x1c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_IncTick+0x20>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4413      	add	r3, r2
 8001766:	4a03      	ldr	r2, [pc, #12]	; (8001774 <HAL_IncTick+0x1c>)
 8001768:	6013      	str	r3, [r2, #0]
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	200007e0 	.word	0x200007e0
 8001778:	20000008 	.word	0x20000008

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200007e0 	.word	0x200007e0

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d004      	beq.n	80017b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_Delay+0x40>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b8:	bf00      	nop
 80017ba:	f7ff ffdf 	bl	800177c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d8f7      	bhi.n	80017ba <HAL_Delay+0x26>
  {
  }
}
 80017ca:	bf00      	nop
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000008 	.word	0x20000008

080017d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3360      	adds	r3, #96	; 0x60
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <LL_ADC_SetOffset+0x44>)
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	4313      	orrs	r3, r2
 8001870:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001878:	bf00      	nop
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	03fff000 	.word	0x03fff000

08001888 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3360      	adds	r3, #96	; 0x60
 8001896:	461a      	mov	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3360      	adds	r3, #96	; 0x60
 80018c4:	461a      	mov	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b087      	sub	sp, #28
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3360      	adds	r3, #96	; 0x60
 80018fa:	461a      	mov	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	431a      	orrs	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3360      	adds	r3, #96	; 0x60
 8001930:	461a      	mov	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	615a      	str	r2, [r3, #20]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b087      	sub	sp, #28
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3330      	adds	r3, #48	; 0x30
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	4413      	add	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	211f      	movs	r1, #31
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	f003 011f 	and.w	r1, r3, #31
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	431a      	orrs	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ee:	bf00      	nop
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b087      	sub	sp, #28
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3314      	adds	r3, #20
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	0e5b      	lsrs	r3, r3, #25
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0d1b      	lsrs	r3, r3, #20
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	2107      	movs	r1, #7
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	0d1b      	lsrs	r3, r3, #20
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a44:	bf00      	nop
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0318 	and.w	r3, r3, #24
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a74:	40d9      	lsrs	r1, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	400b      	ands	r3, r1
 8001a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	0007ffff 	.word	0x0007ffff

08001a98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6093      	str	r3, [r2, #8]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aec:	d101      	bne.n	8001af2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <LL_ADC_IsEnabled+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_ADC_IsEnabled+0x1a>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb2:	f043 0204 	orr.w	r2, r3, #4
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d101      	bne.n	8001bde <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d101      	bne.n	8001c04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e167      	b.n	8001efe <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fa45 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff3f 	bl	8001ad8 <LL_ADC_IsDeepPowerDownEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff25 	bl	8001ab4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff5a 	bl	8001b28 <LL_ADC_IsInternalRegulatorEnabled>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff3e 	bl	8001b00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c84:	4ba0      	ldr	r3, [pc, #640]	; (8001f08 <HAL_ADC_Init+0x2f4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	099b      	lsrs	r3, r3, #6
 8001c8a:	4aa0      	ldr	r2, [pc, #640]	; (8001f0c <HAL_ADC_Init+0x2f8>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c98:	e002      	b.n	8001ca0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff3c 	bl	8001b28 <LL_ADC_IsInternalRegulatorEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	f043 0210 	orr.w	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff75 	bl	8001bc6 <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 8100 	bne.w	8001eec <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 80fc 	bne.w	8001eec <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cfc:	f043 0202 	orr.w	r2, r3, #2
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff35 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d111      	bne.n	8001d38 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d18:	f7ff ff2e 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	487c      	ldr	r0, [pc, #496]	; (8001f10 <HAL_ADC_Init+0x2fc>)
 8001d20:	f7ff ff2a 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4323      	orrs	r3, r4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4878      	ldr	r0, [pc, #480]	; (8001f14 <HAL_ADC_Init+0x300>)
 8001d34:	f7ff fd50 	bl	80017d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7f5b      	ldrb	r3, [r3, #29]
 8001d3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d106      	bne.n	8001d74 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	045b      	lsls	r3, r3, #17
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <HAL_ADC_Init+0x304>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff14 	bl	8001bec <LL_ADC_INJ_IsConversionOngoing>
 8001dc4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d16d      	bne.n	8001ea8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d16a      	bne.n	8001ea8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dd6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dde:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dee:	f023 0302 	bic.w	r3, r3, #2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d017      	beq.n	8001e34 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6911      	ldr	r1, [r2, #16]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001e32:	e013      	b.n	8001e5c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e58:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d118      	bne.n	8001e98 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e82:	4311      	orrs	r1, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	e007      	b.n	8001ea8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d10c      	bne.n	8001eca <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f023 010f 	bic.w	r1, r3, #15
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec8:	e007      	b.n	8001eda <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 020f 	bic.w	r2, r2, #15
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eea:	e007      	b.n	8001efc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	053e2d63 	.word	0x053e2d63
 8001f10:	50000100 	.word	0x50000100
 8001f14:	50000300 	.word	0x50000300
 8001f18:	fff04007 	.word	0xfff04007

08001f1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f28:	4851      	ldr	r0, [pc, #324]	; (8002070 <HAL_ADC_Start_DMA+0x154>)
 8001f2a:	f7ff fdb5 	bl	8001a98 <LL_ADC_GetMultimode>
 8001f2e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fe46 	bl	8001bc6 <LL_ADC_REG_IsConversionOngoing>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 808f 	bne.w	8002060 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_Start_DMA+0x34>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e08a      	b.n	8002066 <HAL_ADC_Start_DMA+0x14a>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d002      	beq.n	8001f6a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	d173      	bne.n	8002052 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fc8e 	bl	800288c <ADC_Enable>
 8001f70:	4603      	mov	r3, r0
 8001f72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d166      	bne.n	8002048 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a38      	ldr	r2, [pc, #224]	; (8002074 <HAL_ADC_Start_DMA+0x158>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d002      	beq.n	8001f9e <HAL_ADC_Start_DMA+0x82>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e001      	b.n	8001fa2 <HAL_ADC_Start_DMA+0x86>
 8001f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d002      	beq.n	8001fb0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	f023 0206 	bic.w	r2, r3, #6
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	661a      	str	r2, [r3, #96]	; 0x60
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_ADC_Start_DMA+0x15c>)
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	4a24      	ldr	r2, [pc, #144]	; (800207c <HAL_ADC_Start_DMA+0x160>)
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_ADC_Start_DMA+0x164>)
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	221c      	movs	r2, #28
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0210 	orr.w	r2, r2, #16
 8002012:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3340      	adds	r3, #64	; 0x40
 800202e:	4619      	mov	r1, r3
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f000 ffc6 	bl	8002fc4 <HAL_DMA_Start_IT>
 8002038:	4603      	mov	r3, r0
 800203a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fdac 	bl	8001b9e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002046:	e00d      	b.n	8002064 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002050:	e008      	b.n	8002064 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800205e:	e001      	b.n	8002064 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002060:	2302      	movs	r3, #2
 8002062:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002064:	7dfb      	ldrb	r3, [r7, #23]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	50000300 	.word	0x50000300
 8002074:	50000100 	.word	0x50000100
 8002078:	08002999 	.word	0x08002999
 800207c:	08002a71 	.word	0x08002a71
 8002080:	08002a8d 	.word	0x08002a8d

08002084 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0b6      	sub	sp, #216	; 0xd8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x22>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e3c8      	b.n	8002860 <HAL_ADC_ConfigChannel+0x7b4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fd73 	bl	8001bc6 <LL_ADC_REG_IsConversionOngoing>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 83ad 	bne.w	8002842 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	f7ff fc54 	bl	80019a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fd61 	bl	8001bc6 <LL_ADC_REG_IsConversionOngoing>
 8002104:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fd6d 	bl	8001bec <LL_ADC_INJ_IsConversionOngoing>
 8002112:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002116:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 81d9 	bne.w	80024d2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 81d4 	bne.w	80024d2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002132:	d10f      	bne.n	8002154 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	f7ff fc5b 	bl	80019fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fc02 	bl	8001956 <LL_ADC_SetSamplingTimeCommonConfig>
 8002152:	e00e      	b.n	8002172 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6819      	ldr	r1, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	461a      	mov	r2, r3
 8002162:	f7ff fc4a 	bl	80019fa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fbf2 	bl	8001956 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b04      	cmp	r3, #4
 8002192:	d022      	beq.n	80021da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6919      	ldr	r1, [r3, #16]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021a4:	f7ff fb4c 	bl	8001840 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6919      	ldr	r1, [r3, #16]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff fb98 	bl	80018ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x124>
 80021ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ce:	e000      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x126>
 80021d0:	2300      	movs	r3, #0
 80021d2:	461a      	mov	r2, r3
 80021d4:	f7ff fba4 	bl	8001920 <LL_ADC_SetOffsetSaturation>
 80021d8:	e17b      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fb51 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x15a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fb46 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	e01e      	b.n	8002244 <HAL_ADC_ConfigChannel+0x198>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fb3b 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800222c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002234:	2320      	movs	r3, #32
 8002236:	e004      	b.n	8002242 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_ADC_ConfigChannel+0x1b0>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	e018      	b.n	800228e <HAL_ADC_ConfigChannel+0x1e2>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002278:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e004      	b.n	800228e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800228e:	429a      	cmp	r2, r3
 8002290:	d106      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fb0a 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff faee 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x220>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fae3 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	f003 021f 	and.w	r2, r3, #31
 80022ca:	e01e      	b.n	800230a <HAL_ADC_ConfigChannel+0x25e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2101      	movs	r1, #1
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fad8 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80022fa:	2320      	movs	r3, #32
 80022fc:	e004      	b.n	8002308 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80022fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x276>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	e018      	b.n	8002354 <HAL_ADC_ConfigChannel+0x2a8>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800233a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800233e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e004      	b.n	8002354 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800234a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002354:	429a      	cmp	r2, r3
 8002356:	d106      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2200      	movs	r2, #0
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff faa7 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2102      	movs	r1, #2
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fa8b 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x2e6>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2102      	movs	r1, #2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fa80 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	e01e      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x324>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2102      	movs	r1, #2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fa75 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80023b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80023b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e004      	b.n	80023ce <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80023c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x33c>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	e016      	b.n	8002416 <HAL_ADC_ConfigChannel+0x36a>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800240c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002416:	429a      	cmp	r2, r3
 8002418:	d106      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fa46 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2103      	movs	r1, #3
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fa2a 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x3a8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2103      	movs	r1, #3
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fa1f 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	f003 021f 	and.w	r2, r3, #31
 8002452:	e017      	b.n	8002484 <HAL_ADC_ConfigChannel+0x3d8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2103      	movs	r1, #3
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fa14 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800246c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800246e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e003      	b.n	8002482 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800247a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_ADC_ConfigChannel+0x3f0>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	e011      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x414>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80024aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80024ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e003      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d106      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	2103      	movs	r1, #3
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff f9f1 	bl	80018b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fb4e 	bl	8001b78 <LL_ADC_IsEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 8140 	bne.w	8002764 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff faad 	bl	8001a50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4a8f      	ldr	r2, [pc, #572]	; (8002738 <HAL_ADC_ConfigChannel+0x68c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	f040 8131 	bne.w	8002764 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10b      	bne.n	800252a <HAL_ADC_ConfigChannel+0x47e>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0e9b      	lsrs	r3, r3, #26
 8002518:	3301      	adds	r3, #1
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2b09      	cmp	r3, #9
 8002520:	bf94      	ite	ls
 8002522:	2301      	movls	r3, #1
 8002524:	2300      	movhi	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e019      	b.n	800255e <HAL_ADC_ConfigChannel+0x4b2>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800253a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800253c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002542:	2320      	movs	r3, #32
 8002544:	e003      	b.n	800254e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2b09      	cmp	r3, #9
 8002556:	bf94      	ite	ls
 8002558:	2301      	movls	r3, #1
 800255a:	2300      	movhi	r3, #0
 800255c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255e:	2b00      	cmp	r3, #0
 8002560:	d079      	beq.n	8002656 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <HAL_ADC_ConfigChannel+0x4d2>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0e9b      	lsrs	r3, r3, #26
 8002574:	3301      	adds	r3, #1
 8002576:	069b      	lsls	r3, r3, #26
 8002578:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800257c:	e015      	b.n	80025aa <HAL_ADC_ConfigChannel+0x4fe>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800258c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e003      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800259a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	069b      	lsls	r3, r3, #26
 80025a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x51e>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0e9b      	lsrs	r3, r3, #26
 80025bc:	3301      	adds	r3, #1
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	e017      	b.n	80025fa <HAL_ADC_ConfigChannel+0x54e>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e003      	b.n	80025ee <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80025e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	ea42 0103 	orr.w	r1, r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x574>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	3301      	adds	r3, #1
 8002612:	f003 021f 	and.w	r2, r3, #31
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	051b      	lsls	r3, r3, #20
 800261e:	e018      	b.n	8002652 <HAL_ADC_ConfigChannel+0x5a6>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e003      	b.n	8002644 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f003 021f 	and.w	r2, r3, #31
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002652:	430b      	orrs	r3, r1
 8002654:	e081      	b.n	800275a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x5c6>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	3301      	adds	r3, #1
 800266a:	069b      	lsls	r3, r3, #26
 800266c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002670:	e015      	b.n	800269e <HAL_ADC_ConfigChannel+0x5f2>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e003      	b.n	8002696 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3301      	adds	r3, #1
 8002698:	069b      	lsls	r3, r3, #26
 800269a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_ADC_ConfigChannel+0x612>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	3301      	adds	r3, #1
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	e017      	b.n	80026ee <HAL_ADC_ConfigChannel+0x642>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	61fb      	str	r3, [r7, #28]
  return result;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e003      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	ea42 0103 	orr.w	r1, r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10d      	bne.n	800271a <HAL_ADC_ConfigChannel+0x66e>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	3301      	adds	r3, #1
 8002706:	f003 021f 	and.w	r2, r3, #31
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	3b1e      	subs	r3, #30
 8002712:	051b      	lsls	r3, r3, #20
 8002714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002718:	e01e      	b.n	8002758 <HAL_ADC_ConfigChannel+0x6ac>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	613b      	str	r3, [r7, #16]
  return result;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e006      	b.n	8002744 <HAL_ADC_ConfigChannel+0x698>
 8002736:	bf00      	nop
 8002738:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f003 021f 	and.w	r2, r3, #31
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	3b1e      	subs	r3, #30
 8002752:	051b      	lsls	r3, r3, #20
 8002754:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002758:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275e:	4619      	mov	r1, r3
 8002760:	f7ff f94b 	bl	80019fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <HAL_ADC_ConfigChannel+0x7bc>)
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d071      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002770:	483e      	ldr	r0, [pc, #248]	; (800286c <HAL_ADC_ConfigChannel+0x7c0>)
 8002772:	f7ff f857 	bl	8001824 <LL_ADC_GetCommonPathInternalCh>
 8002776:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a3c      	ldr	r2, [pc, #240]	; (8002870 <HAL_ADC_ConfigChannel+0x7c4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_ADC_ConfigChannel+0x6e2>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3a      	ldr	r2, [pc, #232]	; (8002874 <HAL_ADC_ConfigChannel+0x7c8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d127      	bne.n	80027de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800278e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d121      	bne.n	80027de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a2:	d157      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ac:	4619      	mov	r1, r3
 80027ae:	482f      	ldr	r0, [pc, #188]	; (800286c <HAL_ADC_ConfigChannel+0x7c0>)
 80027b0:	f7ff f825 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_ADC_ConfigChannel+0x7cc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <HAL_ADC_ConfigChannel+0x7d0>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ce:	e002      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f9      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027dc:	e03a      	b.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a27      	ldr	r2, [pc, #156]	; (8002880 <HAL_ADC_ConfigChannel+0x7d4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d113      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10d      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <HAL_ADC_ConfigChannel+0x7d8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d02a      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	4619      	mov	r1, r3
 8002808:	4818      	ldr	r0, [pc, #96]	; (800286c <HAL_ADC_ConfigChannel+0x7c0>)
 800280a:	f7fe fff8 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280e:	e021      	b.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_ADC_ConfigChannel+0x7dc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d11c      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800281a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_ADC_ConfigChannel+0x7d8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d011      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002838:	4619      	mov	r1, r3
 800283a:	480c      	ldr	r0, [pc, #48]	; (800286c <HAL_ADC_ConfigChannel+0x7c0>)
 800283c:	f7fe ffdf 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
 8002840:	e008      	b.n	8002854 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	f043 0220 	orr.w	r2, r3, #32
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800285c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002860:	4618      	mov	r0, r3
 8002862:	37d8      	adds	r7, #216	; 0xd8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	80080000 	.word	0x80080000
 800286c:	50000300 	.word	0x50000300
 8002870:	c3210000 	.word	0xc3210000
 8002874:	90c00010 	.word	0x90c00010
 8002878:	20000000 	.word	0x20000000
 800287c:	053e2d63 	.word	0x053e2d63
 8002880:	c7520000 	.word	0xc7520000
 8002884:	50000100 	.word	0x50000100
 8002888:	cb840000 	.word	0xcb840000

0800288c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f96b 	bl	8001b78 <LL_ADC_IsEnabled>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d169      	bne.n	800297c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <ADC_Enable+0xfc>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00d      	beq.n	80028d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e055      	b.n	800297e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f93a 	bl	8001b50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028dc:	482b      	ldr	r0, [pc, #172]	; (800298c <ADC_Enable+0x100>)
 80028de:	f7fe ffa1 	bl	8001824 <LL_ADC_GetCommonPathInternalCh>
 80028e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <ADC_Enable+0x104>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	099b      	lsrs	r3, r3, #6
 80028f2:	4a28      	ldr	r2, [pc, #160]	; (8002994 <ADC_Enable+0x108>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002906:	e002      	b.n	800290e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	3b01      	subs	r3, #1
 800290c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f9      	bne.n	8002908 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002914:	f7fe ff32 	bl	800177c <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800291a:	e028      	b.n	800296e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff f929 	bl	8001b78 <LL_ADC_IsEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f90d 	bl	8001b50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002936:	f7fe ff21 	bl	800177c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d914      	bls.n	800296e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d00d      	beq.n	800296e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	f043 0210 	orr.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e007      	b.n	800297e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d1cf      	bne.n	800291c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	8000003f 	.word	0x8000003f
 800298c:	50000300 	.word	0x50000300
 8002990:	20000000 	.word	0x20000000
 8002994:	053e2d63 	.word	0x053e2d63

08002998 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d14b      	bne.n	8002a4a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d021      	beq.n	8002a10 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe ffd3 	bl	800197c <LL_ADC_REG_IsTriggerSourceSWStart>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d032      	beq.n	8002a42 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d12b      	bne.n	8002a42 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11f      	bne.n	8002a42 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a0e:	e018      	b.n	8002a42 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d111      	bne.n	8002a42 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d105      	bne.n	8002a42 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7fd fea0 	bl	8000788 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a48:	e00e      	b.n	8002a68 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7ff fb1e 	bl	8002098 <HAL_ADC_ErrorCallback>
}
 8002a5c:	e004      	b.n	8002a68 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff fb00 	bl	8002084 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff faf0 	bl	8002098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <LL_ADC_IsEnabled>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <LL_ADC_IsEnabled+0x18>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <LL_ADC_IsEnabled+0x1a>
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d101      	bne.n	8002afe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b0a1      	sub	sp, #132	; 0x84
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e08b      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b32:	2300      	movs	r3, #0
 8002b34:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b36:	2300      	movs	r3, #0
 8002b38:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b42:	d102      	bne.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b44:	4b41      	ldr	r3, [pc, #260]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	e001      	b.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e06a      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ffb9 	bl	8002ae6 <LL_ADC_REG_IsConversionOngoing>
 8002b74:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ffb3 	bl	8002ae6 <LL_ADC_REG_IsConversionOngoing>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d14c      	bne.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d149      	bne.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002b8e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d028      	beq.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002baa:	035b      	lsls	r3, r3, #13
 8002bac:	430b      	orrs	r3, r1
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bb8:	f7ff ff82 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	4823      	ldr	r0, [pc, #140]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bc0:	f7ff ff7e 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4323      	orrs	r3, r4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d133      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bd4:	f023 030f 	bic.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	6811      	ldr	r1, [r2, #0]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	431a      	orrs	r2, r3
 8002be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002be8:	e024      	b.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bfa:	f7ff ff61 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4812      	ldr	r0, [pc, #72]	; (8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c02:	f7ff ff5d 	bl	8002ac0 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4323      	orrs	r3, r4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d112      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c16:	f023 030f 	bic.w	r3, r3, #15
 8002c1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c1c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1e:	e009      	b.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c32:	e000      	b.n	8002c36 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3784      	adds	r7, #132	; 0x84
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	50000300 	.word	0x50000300

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db0b      	blt.n	8002ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <__NVIC_EnableIRQ+0x38>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2001      	movs	r0, #1
 8002cda:	fa00 f202 	lsl.w	r2, r0, r2
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db0a      	blt.n	8002d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	490c      	ldr	r1, [pc, #48]	; (8002d40 <__NVIC_SetPriority+0x4c>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	440b      	add	r3, r1
 8002d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d1c:	e00a      	b.n	8002d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4908      	ldr	r1, [pc, #32]	; (8002d44 <__NVIC_SetPriority+0x50>)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	761a      	strb	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f1c3 0307 	rsb	r3, r3, #7
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	bf28      	it	cs
 8002d66:	2304      	movcs	r3, #4
 8002d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d902      	bls.n	8002d78 <NVIC_EncodePriority+0x30>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3b03      	subs	r3, #3
 8002d76:	e000      	b.n	8002d7a <NVIC_EncodePriority+0x32>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43d9      	mvns	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	4313      	orrs	r3, r2
         );
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc0:	d301      	bcc.n	8002dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00f      	b.n	8002de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <SysTick_Config+0x40>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dce:	210f      	movs	r1, #15
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f7ff ff8e 	bl	8002cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <SysTick_Config+0x40>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <SysTick_Config+0x40>)
 8002de0:	2207      	movs	r2, #7
 8002de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	e000e010 	.word	0xe000e010

08002df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ff29 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e18:	f7ff ff40 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f7ff ff90 	bl	8002d48 <NVIC_EncodePriority>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff5f 	bl	8002cf4 <__NVIC_SetPriority>
}
 8002e36:	bf00      	nop
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff33 	bl	8002cb8 <__NVIC_EnableIRQ>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ffa4 	bl	8002db0 <SysTick_Config>
 8002e68:	4603      	mov	r3, r0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e08d      	b.n	8002fa2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_DMA_Init+0x138>)
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d80f      	bhi.n	8002eb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b45      	ldr	r3, [pc, #276]	; (8002fb0 <HAL_DMA_Init+0x13c>)
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a45      	ldr	r2, [pc, #276]	; (8002fb4 <HAL_DMA_Init+0x140>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	009a      	lsls	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a42      	ldr	r2, [pc, #264]	; (8002fb8 <HAL_DMA_Init+0x144>)
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
 8002eb0:	e00e      	b.n	8002ed0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <HAL_DMA_Init+0x148>)
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <HAL_DMA_Init+0x140>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a3c      	ldr	r2, [pc, #240]	; (8002fc0 <HAL_DMA_Init+0x14c>)
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa1e 	bl	8003364 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f30:	d102      	bne.n	8002f38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d010      	beq.n	8002f78 <HAL_DMA_Init+0x104>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d80c      	bhi.n	8002f78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa3e 	bl	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	e008      	b.n	8002f8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40020407 	.word	0x40020407
 8002fb0:	bffdfff8 	.word	0xbffdfff8
 8002fb4:	cccccccd 	.word	0xcccccccd
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	bffdfbf8 	.word	0xbffdfbf8
 8002fc0:	40020400 	.word	0x40020400

08002fc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_DMA_Start_IT+0x20>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e066      	b.n	80030b2 <HAL_DMA_Start_IT+0xee>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d155      	bne.n	80030a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f962 	bl	80032e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 020e 	orr.w	r2, r2, #14
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e00f      	b.n	800305c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 020a 	orr.w	r2, r2, #10
 800305a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003078:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e005      	b.n	80030b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d00d      	beq.n	80030ee <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2204      	movs	r2, #4
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e047      	b.n	800317e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 020e 	bic.w	r2, r2, #14
 80030fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f003 021f 	and.w	r2, r3, #31
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f202 	lsl.w	r2, r1, r2
 8003130:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800313a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00c      	beq.n	800315e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003152:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800315c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
    }
  }
  return status;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2204      	movs	r2, #4
 80031aa:	409a      	lsls	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d026      	beq.n	8003202 <HAL_DMA_IRQHandler+0x7a>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d021      	beq.n	8003202 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0204 	bic.w	r2, r2, #4
 80031da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	f003 021f 	and.w	r2, r3, #31
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	2104      	movs	r1, #4
 80031ea:	fa01 f202 	lsl.w	r2, r1, r2
 80031ee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d071      	beq.n	80032dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003200:	e06c      	b.n	80032dc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2202      	movs	r2, #2
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d02e      	beq.n	8003274 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d029      	beq.n	8003274 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 020a 	bic.w	r2, r2, #10
 800323c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 021f 	and.w	r2, r3, #31
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2102      	movs	r1, #2
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d038      	beq.n	80032dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003272:	e033      	b.n	80032dc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	2208      	movs	r2, #8
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d02a      	beq.n	80032de <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d025      	beq.n	80032de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 020e 	bic.w	r2, r2, #14
 80032a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f003 021f 	and.w	r2, r3, #31
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f202 	lsl.w	r2, r1, r2
 80032b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
}
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032fc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f202 	lsl.w	r2, r1, r2
 8003322:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b10      	cmp	r3, #16
 8003332:	d108      	bne.n	8003346 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003344:	e007      	b.n	8003356 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	60da      	str	r2, [r3, #12]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d802      	bhi.n	800337e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	e001      	b.n	8003382 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003380:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3b08      	subs	r3, #8
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80033ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2201      	movs	r2, #1
 80033b8:	409a      	lsls	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40020407 	.word	0x40020407
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020820 	.word	0x40020820
 80033d8:	cccccccd 	.word	0xcccccccd
 80033dc:	40020880 	.word	0x40020880

080033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	461a      	mov	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a08      	ldr	r2, [pc, #32]	; (8003424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003402:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3b01      	subs	r3, #1
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2201      	movs	r2, #1
 800340e:	409a      	lsls	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	1000823f 	.word	0x1000823f
 8003424:	40020940 	.word	0x40020940

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003436:	e15a      	b.n	80036ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	4013      	ands	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 814c 	beq.w	80036e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d005      	beq.n	8003468 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003464:	2b02      	cmp	r3, #2
 8003466:	d130      	bne.n	80034ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800349e:	2201      	movs	r2, #1
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f003 0201 	and.w	r2, r3, #1
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d017      	beq.n	8003506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	2203      	movs	r2, #3
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4013      	ands	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d123      	bne.n	800355a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	08da      	lsrs	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3208      	adds	r2, #8
 800351a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	220f      	movs	r2, #15
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	08da      	lsrs	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3208      	adds	r2, #8
 8003554:	6939      	ldr	r1, [r7, #16]
 8003556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80a6 	beq.w	80036e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359c:	4b5b      	ldr	r3, [pc, #364]	; (800370c <HAL_GPIO_Init+0x2e4>)
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	4a5a      	ldr	r2, [pc, #360]	; (800370c <HAL_GPIO_Init+0x2e4>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6613      	str	r3, [r2, #96]	; 0x60
 80035a8:	4b58      	ldr	r3, [pc, #352]	; (800370c <HAL_GPIO_Init+0x2e4>)
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035b4:	4a56      	ldr	r2, [pc, #344]	; (8003710 <HAL_GPIO_Init+0x2e8>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	220f      	movs	r2, #15
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035de:	d01f      	beq.n	8003620 <HAL_GPIO_Init+0x1f8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a4c      	ldr	r2, [pc, #304]	; (8003714 <HAL_GPIO_Init+0x2ec>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d019      	beq.n	800361c <HAL_GPIO_Init+0x1f4>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a4b      	ldr	r2, [pc, #300]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_GPIO_Init+0x1f0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a4a      	ldr	r2, [pc, #296]	; (800371c <HAL_GPIO_Init+0x2f4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00d      	beq.n	8003614 <HAL_GPIO_Init+0x1ec>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a49      	ldr	r2, [pc, #292]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <HAL_GPIO_Init+0x1e8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a48      	ldr	r2, [pc, #288]	; (8003724 <HAL_GPIO_Init+0x2fc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_GPIO_Init+0x1e4>
 8003608:	2305      	movs	r3, #5
 800360a:	e00a      	b.n	8003622 <HAL_GPIO_Init+0x1fa>
 800360c:	2306      	movs	r3, #6
 800360e:	e008      	b.n	8003622 <HAL_GPIO_Init+0x1fa>
 8003610:	2304      	movs	r3, #4
 8003612:	e006      	b.n	8003622 <HAL_GPIO_Init+0x1fa>
 8003614:	2303      	movs	r3, #3
 8003616:	e004      	b.n	8003622 <HAL_GPIO_Init+0x1fa>
 8003618:	2302      	movs	r3, #2
 800361a:	e002      	b.n	8003622 <HAL_GPIO_Init+0x1fa>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_GPIO_Init+0x1fa>
 8003620:	2300      	movs	r3, #0
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	f002 0203 	and.w	r2, r2, #3
 8003628:	0092      	lsls	r2, r2, #2
 800362a:	4093      	lsls	r3, r2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003632:	4937      	ldr	r1, [pc, #220]	; (8003710 <HAL_GPIO_Init+0x2e8>)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	3302      	adds	r3, #2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003640:	4b39      	ldr	r3, [pc, #228]	; (8003728 <HAL_GPIO_Init+0x300>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43db      	mvns	r3, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003664:	4a30      	ldr	r2, [pc, #192]	; (8003728 <HAL_GPIO_Init+0x300>)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800366a:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_GPIO_Init+0x300>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	43db      	mvns	r3, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800368e:	4a26      	ldr	r2, [pc, #152]	; (8003728 <HAL_GPIO_Init+0x300>)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_GPIO_Init+0x300>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_GPIO_Init+0x300>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_GPIO_Init+0x300>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036e2:	4a11      	ldr	r2, [pc, #68]	; (8003728 <HAL_GPIO_Init+0x300>)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3301      	adds	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f47f ae9d 	bne.w	8003438 <HAL_GPIO_Init+0x10>
  }
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40021000 	.word	0x40021000
 8003710:	40010000 	.word	0x40010000
 8003714:	48000400 	.word	0x48000400
 8003718:	48000800 	.word	0x48000800
 800371c:	48000c00 	.word	0x48000c00
 8003720:	48001000 	.word	0x48001000
 8003724:	48001400 	.word	0x48001400
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e001      	b.n	800374e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003772:	4a05      	ldr	r2, [pc, #20]	; (8003788 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fc6e 	bl	800105c <HAL_GPIO_EXTI_Callback>
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0c0      	b.n	8003920 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f008 fa68 	bl	800bc88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2203      	movs	r2, #3
 80037bc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 faee 	bl	8007da6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
 80037ce:	e03e      	b.n	800384e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	440b      	add	r3, r1
 80037de:	3311      	adds	r3, #17
 80037e0:	2201      	movs	r2, #1
 80037e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	3310      	adds	r3, #16
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	3313      	adds	r3, #19
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	440b      	add	r3, r1
 800381a:	3320      	adds	r3, #32
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	3324      	adds	r3, #36	; 0x24
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	3301      	adds	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	791b      	ldrb	r3, [r3, #4]
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	429a      	cmp	r2, r3
 8003856:	d3bb      	bcc.n	80037d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e044      	b.n	80038e8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	f203 1353 	addw	r3, r3, #339	; 0x153
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	3301      	adds	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	791b      	ldrb	r3, [r3, #4]
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d3b5      	bcc.n	800385e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80038fe:	f004 fa6d 	bl	8007ddc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7a9b      	ldrb	r3, [r3, #10]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d102      	bne.n	800391e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f001 fc29 	bl	8005170 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_PCD_Start+0x16>
 800393a:	2302      	movs	r3, #2
 800393c:	e012      	b.n	8003964 <HAL_PCD_Start+0x3c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f004 fa14 	bl	8007d78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f006 fcd4 	bl	800a302 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f006 fcd9 	bl	800a330 <USB_ReadInterrupts>
 800397e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 faec 	bl	8003f68 <PCD_EP_ISR_Handler>

    return;
 8003990:	e110      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	b292      	uxth	r2, r2
 80039b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f008 f9f8 	bl	800bdaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80039ba:	2100      	movs	r1, #0
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f8fc 	bl	8003bba <HAL_PCD_SetAddress>

    return;
 80039c2:	e0f7      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039e0:	b292      	uxth	r2, r2
 80039e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80039e6:	e0e5      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a04:	b292      	uxth	r2, r2
 8003a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a0a:	e0d3      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d034      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0208 	bic.w	r2, r2, #8
 8003a40:	b292      	uxth	r2, r2
 8003a42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a58:	2100      	movs	r1, #0
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f008 fb74 	bl	800c148 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f008 f9db 	bl	800be1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a7e:	e099      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d027      	beq.n	8003ada <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0208 	orr.w	r2, r2, #8
 8003a9c:	b292      	uxth	r2, r2
 8003a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0204 	orr.w	r2, r2, #4
 8003acc:	b292      	uxth	r2, r2
 8003ace:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f008 f988 	bl	800bde8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ad8:	e06c      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d040      	beq.n	8003b66 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af6:	b292      	uxth	r2, r2
 8003af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d12b      	bne.n	8003b5e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0204 	orr.w	r2, r2, #4
 8003b18:	b292      	uxth	r2, r2
 8003b1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0208 	orr.w	r2, r2, #8
 8003b30:	b292      	uxth	r2, r2
 8003b32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b54:	2101      	movs	r1, #1
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f008 faf6 	bl	800c148 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003b5c:	e02a      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f008 f942 	bl	800bde8 <HAL_PCD_SuspendCallback>
    return;
 8003b64:	e026      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b82:	b292      	uxth	r2, r2
 8003b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f008 f900 	bl	800bd8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b8e:	e011      	b.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00c      	beq.n	8003bb4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bac:	b292      	uxth	r2, r2
 8003bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bb2:	bf00      	nop
  }
}
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_PCD_SetAddress+0x1a>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e012      	b.n	8003bfa <HAL_PCD_SetAddress+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f006 fb75 	bl	800a2da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4603      	mov	r3, r0
 8003c12:	70fb      	strb	r3, [r7, #3]
 8003c14:	460b      	mov	r3, r1
 8003c16:	803b      	strh	r3, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	da0e      	bge.n	8003c46 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	f003 0207 	and.w	r2, r3, #7
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	3310      	adds	r3, #16
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	705a      	strb	r2, [r3, #1]
 8003c44:	e00e      	b.n	8003c64 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	f003 0207 	and.w	r2, r3, #7
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c70:	883a      	ldrh	r2, [r7, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	78ba      	ldrb	r2, [r7, #2]
 8003c7a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c7c:	78bb      	ldrb	r3, [r7, #2]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d102      	bne.n	8003c88 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_PCD_EP_Open+0x94>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e00e      	b.n	8003cb4 <HAL_PCD_EP_Open+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 f8b7 	bl	8007e18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	da0e      	bge.n	8003cee <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	f003 0207 	and.w	r2, r3, #7
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	3310      	adds	r3, #16
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	705a      	strb	r2, [r3, #1]
 8003cec:	e00e      	b.n	8003d0c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	f003 0207 	and.w	r2, r3, #7
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_PCD_EP_Close+0x6a>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e00e      	b.n	8003d44 <HAL_PCD_EP_Close+0x88>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 fc33 	bl	80085a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	f003 0207 	and.w	r2, r3, #7
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4413      	add	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8c:	7afb      	ldrb	r3, [r7, #11]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f004 fdeb 	bl	800897a <USB_EPStartXfer>

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
 8003dc0:	f003 0207 	and.w	r2, r3, #7
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	3310      	adds	r3, #16
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2201      	movs	r2, #1
 8003df8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dfa:	7afb      	ldrb	r3, [r7, #11]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6979      	ldr	r1, [r7, #20]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fdb4 	bl	800897a <USB_EPStartXfer>

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	7912      	ldrb	r2, [r2, #4]
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e03e      	b.n	8003eb8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da0e      	bge.n	8003e60 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 0207 	and.w	r2, r3, #7
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3310      	adds	r3, #16
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	705a      	strb	r2, [r3, #1]
 8003e5e:	e00c      	b.n	8003e7a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_PCD_EP_SetStall+0x7e>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e00e      	b.n	8003eb8 <HAL_PCD_EP_SetStall+0x9c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f006 f917 	bl	800a0dc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	7912      	ldrb	r2, [r2, #4]
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e040      	b.n	8003f60 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da0e      	bge.n	8003f04 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	f003 0207 	and.w	r2, r3, #7
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	3310      	adds	r3, #16
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	705a      	strb	r2, [r3, #1]
 8003f02:	e00e      	b.n	8003f22 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	f003 0207 	and.w	r2, r3, #7
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_PCD_EP_ClrStall+0x82>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e00e      	b.n	8003f60 <HAL_PCD_EP_ClrStall+0xa0>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f006 f914 	bl	800a17e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b096      	sub	sp, #88	; 0x58
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f70:	e3ae      	b.n	80046d0 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003f8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 8170 	bne.w	8004276 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d14d      	bne.n	800403e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	81fb      	strh	r3, [r7, #14]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	89fb      	ldrh	r3, [r7, #14]
 8003fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3310      	adds	r3, #16
 8003fca:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	441a      	add	r2, r3
 8003ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004000:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004002:	2100      	movs	r1, #0
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f007 fea8 	bl	800bd5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7b1b      	ldrb	r3, [r3, #12]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 835d 	beq.w	80046d0 <PCD_EP_ISR_Handler+0x768>
 8004016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f040 8358 	bne.w	80046d0 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7b1b      	ldrb	r3, [r3, #12]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800402a:	b2da      	uxtb	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	b292      	uxth	r2, r2
 8004032:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	731a      	strb	r2, [r3, #12]
 800403c:	e348      	b.n	80046d0 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004044:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004050:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004058:	2b00      	cmp	r3, #0
 800405a:	d032      	beq.n	80040c2 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	4413      	add	r3, r2
 8004076:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004082:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800408e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004090:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004094:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004096:	b29b      	uxth	r3, r3
 8004098:	f006 f99c 	bl	800a3d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040a8:	4013      	ands	r3, r2
 80040aa:	823b      	strh	r3, [r7, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	8a3a      	ldrh	r2, [r7, #16]
 80040b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040b6:	b292      	uxth	r2, r2
 80040b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f007 fe20 	bl	800bd00 <HAL_PCD_SetupStageCallback>
 80040c0:	e306      	b.n	80046d0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f280 8302 	bge.w	80046d0 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040d8:	4013      	ands	r3, r2
 80040da:	83fb      	strh	r3, [r7, #30]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	8bfa      	ldrh	r2, [r7, #30]
 80040e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040e6:	b292      	uxth	r2, r2
 80040e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	4413      	add	r3, r2
 8004104:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800410e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004110:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d019      	beq.n	800414e <PCD_EP_ISR_Handler+0x1e6>
 800411a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d015      	beq.n	800414e <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004128:	6959      	ldr	r1, [r3, #20]
 800412a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800412c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800412e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004130:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004132:	b29b      	uxth	r3, r3
 8004134:	f006 f94e 	bl	800a3d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	441a      	add	r2, r3
 8004142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004144:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004146:	2100      	movs	r1, #0
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f007 fdeb 	bl	800bd24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004158:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800415c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 82b5 	bne.w	80046d0 <PCD_EP_ISR_Handler+0x768>
 8004166:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800416a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800416e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004172:	f000 82ad 	beq.w	80046d0 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004184:	b29b      	uxth	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	4413      	add	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	801a      	strh	r2, [r3, #0]
 80041a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b3e      	cmp	r3, #62	; 0x3e
 80041ac:	d91d      	bls.n	80041ea <PCD_EP_ISR_Handler+0x282>
 80041ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
 80041b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <PCD_EP_ISR_Handler+0x260>
 80041c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c4:	3b01      	subs	r3, #1
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	029b      	lsls	r3, r3, #10
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	4313      	orrs	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	801a      	strh	r2, [r3, #0]
 80041e8:	e026      	b.n	8004238 <PCD_EP_ISR_Handler+0x2d0>
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <PCD_EP_ISR_Handler+0x2a0>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004200:	b29a      	uxth	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	801a      	strh	r2, [r3, #0]
 8004206:	e017      	b.n	8004238 <PCD_EP_ISR_Handler+0x2d0>
 8004208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	647b      	str	r3, [r7, #68]	; 0x44
 8004210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <PCD_EP_ISR_Handler+0x2ba>
 800421c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800421e:	3301      	adds	r3, #1
 8004220:	647b      	str	r3, [r7, #68]	; 0x44
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29a      	uxth	r2, r3
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	b29b      	uxth	r3, r3
 800422c:	029b      	lsls	r3, r3, #10
 800422e:	b29b      	uxth	r3, r3
 8004230:	4313      	orrs	r3, r2
 8004232:	b29a      	uxth	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004248:	827b      	strh	r3, [r7, #18]
 800424a:	8a7b      	ldrh	r3, [r7, #18]
 800424c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004250:	827b      	strh	r3, [r7, #18]
 8004252:	8a7b      	ldrh	r3, [r7, #18]
 8004254:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004258:	827b      	strh	r3, [r7, #18]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	8a7b      	ldrh	r3, [r7, #18]
 8004260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004270:	b29b      	uxth	r3, r3
 8004272:	8013      	strh	r3, [r2, #0]
 8004274:	e22c      	b.n	80046d0 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800428a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800428e:	2b00      	cmp	r3, #0
 8004290:	f280 80f6 	bge.w	8004480 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042aa:	4013      	ands	r3, r2
 80042ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80042c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042c6:	b292      	uxth	r2, r2
 80042c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80042ca:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e2:	7b1b      	ldrb	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d123      	bne.n	8004330 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4413      	add	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	4413      	add	r3, r2
 8004302:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800430c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004310:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 808e 	beq.w	8004436 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004320:	6959      	ldr	r1, [r3, #20]
 8004322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004324:	88da      	ldrh	r2, [r3, #6]
 8004326:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800432a:	f006 f853 	bl	800a3d4 <USB_ReadPMA>
 800432e:	e082      	b.n	8004436 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004332:	78db      	ldrb	r3, [r3, #3]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d10a      	bne.n	800434e <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004338:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800433c:	461a      	mov	r2, r3
 800433e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f9d3 	bl	80046ec <HAL_PCD_EP_DB_Receive>
 8004346:	4603      	mov	r3, r0
 8004348:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800434c:	e073      	b.n	8004436 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800437e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800438e:	b29b      	uxth	r3, r3
 8004390:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d022      	beq.n	80043f2 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4413      	add	r3, r2
 80043c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80043d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02c      	beq.n	8004436 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e2:	6959      	ldr	r1, [r3, #20]
 80043e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e6:	891a      	ldrh	r2, [r3, #8]
 80043e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043ec:	f005 fff2 	bl	800a3d4 <USB_ReadPMA>
 80043f0:	e021      	b.n	8004436 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	4413      	add	r3, r2
 800440c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004416:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800441a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004428:	6959      	ldr	r1, [r3, #20]
 800442a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442c:	895a      	ldrh	r2, [r3, #10]
 800442e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004432:	f005 ffcf 	bl	800a3d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800443e:	441a      	add	r2, r3
 8004440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004442:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800444c:	441a      	add	r2, r3
 800444e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004450:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <PCD_EP_ISR_Handler+0x4fe>
 800445a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800445e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	429a      	cmp	r2, r3
 8004464:	d206      	bcs.n	8004474 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	4619      	mov	r1, r3
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f007 fc59 	bl	800bd24 <HAL_PCD_DataOutStageCallback>
 8004472:	e005      	b.n	8004480 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800447a:	4618      	mov	r0, r3
 800447c:	f004 fa7d 	bl	800897a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004480:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8121 	beq.w	80046d0 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800448e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	3310      	adds	r3, #16
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	441a      	add	r2, r3
 80044ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80044d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044da:	b29b      	uxth	r3, r3
 80044dc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80044de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e0:	78db      	ldrb	r3, [r3, #3]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	f040 80a2 	bne.w	800462c <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80044e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ea:	2200      	movs	r2, #0
 80044ec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80044ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f0:	7b1b      	ldrb	r3, [r3, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8093 	beq.w	800461e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d046      	beq.n	8004592 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d126      	bne.n	800455a <PCD_EP_ISR_Handler+0x5f2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451a:	b29b      	uxth	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	4413      	add	r3, r2
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
 8004524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	00da      	lsls	r2, r3, #3
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	4413      	add	r3, r2
 800452e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800453e:	b29a      	uxth	r2, r3
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	801a      	strh	r2, [r3, #0]
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004552:	b29a      	uxth	r2, r3
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	e061      	b.n	800461e <PCD_EP_ISR_Handler+0x6b6>
 800455a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d15d      	bne.n	800461e <PCD_EP_ISR_Handler+0x6b6>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004570:	b29b      	uxth	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	4413      	add	r3, r2
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	00da      	lsls	r2, r3, #3
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	4413      	add	r3, r2
 8004584:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	2200      	movs	r2, #0
 800458e:	801a      	strh	r2, [r3, #0]
 8004590:	e045      	b.n	800461e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d126      	bne.n	80045ee <PCD_EP_ISR_Handler+0x686>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b4:	4413      	add	r3, r2
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
 80045b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	00da      	lsls	r2, r3, #3
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	4413      	add	r3, r2
 80045c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045c6:	633b      	str	r3, [r7, #48]	; 0x30
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e017      	b.n	800461e <PCD_EP_ISR_Handler+0x6b6>
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d113      	bne.n	800461e <PCD_EP_ISR_Handler+0x6b6>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fe:	b29b      	uxth	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004604:	4413      	add	r3, r2
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	00da      	lsls	r2, r3, #3
 800460e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004610:	4413      	add	r3, r2
 8004612:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	2200      	movs	r2, #0
 800461c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800461e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f007 fb98 	bl	800bd5a <HAL_PCD_DataInStageCallback>
 800462a:	e051      	b.n	80046d0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800462c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d144      	bne.n	80046c2 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004640:	b29b      	uxth	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4413      	add	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	4413      	add	r3, r2
 8004652:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800465c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004668:	429a      	cmp	r2, r3
 800466a:	d907      	bls.n	800467c <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800466c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004674:	1ad2      	subs	r2, r2, r3
 8004676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004678:	619a      	str	r2, [r3, #24]
 800467a:	e002      	b.n	8004682 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800467c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800467e:	2200      	movs	r2, #0
 8004680:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800468a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f007 fb62 	bl	800bd5a <HAL_PCD_DataInStageCallback>
 8004696:	e01b      	b.n	80046d0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046a0:	441a      	add	r2, r3
 80046a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80046a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046ae:	441a      	add	r2, r3
 80046b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 f95d 	bl	800897a <USB_EPStartXfer>
 80046c0:	e006      	b.n	80046d0 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046c6:	461a      	mov	r2, r3
 80046c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f917 	bl	80048fe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046d8:	b29b      	uxth	r3, r3
 80046da:	b21b      	sxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f6ff ac48 	blt.w	8003f72 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3758      	adds	r7, #88	; 0x58
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d07c      	beq.n	80047fe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800470c:	b29b      	uxth	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4413      	add	r3, r2
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	4413      	add	r3, r2
 800471e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004728:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	8b7b      	ldrh	r3, [r7, #26]
 8004730:	429a      	cmp	r2, r3
 8004732:	d306      	bcc.n	8004742 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	699a      	ldr	r2, [r3, #24]
 8004738:	8b7b      	ldrh	r3, [r7, #26]
 800473a:	1ad2      	subs	r2, r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	619a      	str	r2, [r3, #24]
 8004740:	e002      	b.n	8004748 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d123      	bne.n	8004798 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	833b      	strh	r3, [r7, #24]
 800476c:	8b3b      	ldrh	r3, [r7, #24]
 800476e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004772:	833b      	strh	r3, [r7, #24]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	441a      	add	r2, r3
 8004782:	8b3b      	ldrh	r3, [r7, #24]
 8004784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004794:	b29b      	uxth	r3, r3
 8004796:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01f      	beq.n	80047e2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	82fb      	strh	r3, [r7, #22]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	441a      	add	r2, r3
 80047cc:	8afb      	ldrh	r3, [r7, #22]
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047e2:	8b7b      	ldrh	r3, [r7, #26]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8085 	beq.w	80048f4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6959      	ldr	r1, [r3, #20]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	891a      	ldrh	r2, [r3, #8]
 80047f6:	8b7b      	ldrh	r3, [r7, #26]
 80047f8:	f005 fdec 	bl	800a3d4 <USB_ReadPMA>
 80047fc:	e07a      	b.n	80048f4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	4413      	add	r3, r2
 8004818:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004822:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	8b7b      	ldrh	r3, [r7, #26]
 800482a:	429a      	cmp	r2, r3
 800482c:	d306      	bcc.n	800483c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	8b7b      	ldrh	r3, [r7, #26]
 8004834:	1ad2      	subs	r2, r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	619a      	str	r2, [r3, #24]
 800483a:	e002      	b.n	8004842 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d123      	bne.n	8004892 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	83fb      	strh	r3, [r7, #30]
 8004866:	8bfb      	ldrh	r3, [r7, #30]
 8004868:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800486c:	83fb      	strh	r3, [r7, #30]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	8bfb      	ldrh	r3, [r7, #30]
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11f      	bne.n	80048dc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	83bb      	strh	r3, [r7, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	8bbb      	ldrh	r3, [r7, #28]
 80048c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d8:	b29b      	uxth	r3, r3
 80048da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048dc:	8b7b      	ldrh	r3, [r7, #26]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6959      	ldr	r1, [r3, #20]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	895a      	ldrh	r2, [r3, #10]
 80048ee:	8b7b      	ldrh	r3, [r7, #26]
 80048f0:	f005 fd70 	bl	800a3d4 <USB_ReadPMA>
    }
  }

  return count;
 80048f4:	8b7b      	ldrh	r3, [r7, #26]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b0a4      	sub	sp, #144	; 0x90
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	4613      	mov	r3, r2
 800490a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 81db 	beq.w	8004cce <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	4413      	add	r3, r2
 8004932:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800493c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	699a      	ldr	r2, [r3, #24]
 8004944:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004948:	429a      	cmp	r2, r3
 800494a:	d907      	bls.n	800495c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004954:	1ad2      	subs	r2, r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	619a      	str	r2, [r3, #24]
 800495a:	e002      	b.n	8004962 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f040 80b9 	bne.w	8004ade <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d126      	bne.n	80049c2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	4413      	add	r3, r2
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	00da      	lsls	r2, r3, #3
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	4413      	add	r3, r2
 8004996:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	801a      	strh	r2, [r3, #0]
 80049c0:	e01a      	b.n	80049f8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d116      	bne.n	80049f8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d8:	b29b      	uxth	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	4413      	add	r3, r2
 80049e0:	637b      	str	r3, [r7, #52]	; 0x34
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	00da      	lsls	r2, r3, #3
 80049e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ea:	4413      	add	r3, r2
 80049ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049f0:	633b      	str	r3, [r7, #48]	; 0x30
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	2200      	movs	r2, #0
 80049f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d126      	bne.n	8004a54 <HAL_PCD_EP_DB_Transmit+0x156>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	00da      	lsls	r2, r3, #3
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	801a      	strh	r2, [r3, #0]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	e017      	b.n	8004a84 <HAL_PCD_EP_DB_Transmit+0x186>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d113      	bne.n	8004a84 <HAL_PCD_EP_DB_Transmit+0x186>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	4413      	add	r3, r2
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	00da      	lsls	r2, r3, #3
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	4413      	add	r3, r2
 8004a78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	2200      	movs	r2, #0
 8004a82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f007 f965 	bl	800bd5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 82fa 	beq.w	8005090 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	82fb      	strh	r3, [r7, #22]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	8afb      	ldrh	r3, [r7, #22]
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
 8004adc:	e2d8      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d021      	beq.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	f040 82ac 	bne.w	8005090 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	695a      	ldr	r2, [r3, #20]
 8004b3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b40:	441a      	add	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b4e:	441a      	add	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d30b      	bcc.n	8004b78 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b70:	1ad2      	subs	r2, r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	621a      	str	r2, [r3, #32]
 8004b76:	e017      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d108      	bne.n	8004b92 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004b80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b90:	e00a      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d165      	bne.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x37e>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc4:	4413      	add	r3, r2
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	00da      	lsls	r2, r3, #3
 8004bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	801a      	strh	r2, [r3, #0]
 8004be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bec:	2b3e      	cmp	r3, #62	; 0x3e
 8004bee:	d91d      	bls.n	8004c2c <HAL_PCD_EP_DB_Transmit+0x32e>
 8004bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d102      	bne.n	8004c0a <HAL_PCD_EP_DB_Transmit+0x30c>
 8004c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c06:	3b01      	subs	r3, #1
 8004c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	029b      	lsls	r3, r3, #10
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	e044      	b.n	8004cb6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x34c>
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e035      	b.n	8004cb6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_PCD_EP_DB_Transmit+0x366>
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c60:	3301      	adds	r3, #1
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	4313      	orrs	r3, r2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	801a      	strh	r2, [r3, #0]
 8004c7a:	e01c      	b.n	8004cb6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d118      	bne.n	8004cb6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c98:	4413      	add	r3, r2
 8004c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	00da      	lsls	r2, r3, #3
 8004ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40
 8004cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6959      	ldr	r1, [r3, #20]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	891a      	ldrh	r2, [r3, #8]
 8004cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f005 fb42 	bl	800a350 <USB_WritePMA>
 8004ccc:	e1e0      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cf2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d307      	bcc.n	8004d12 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	619a      	str	r2, [r3, #24]
 8004d10:	e002      	b.n	8004d18 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2200      	movs	r2, #0
 8004d16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f040 80c0 	bne.w	8004ea2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d126      	bne.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d3e:	4413      	add	r3, r2
 8004d40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	00da      	lsls	r2, r3, #3
 8004d48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e01a      	b.n	8004dae <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	785b      	ldrb	r3, [r3, #1]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d116      	bne.n	8004dae <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	667b      	str	r3, [r7, #100]	; 0x64
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d94:	4413      	add	r3, r2
 8004d96:	667b      	str	r3, [r7, #100]	; 0x64
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	00da      	lsls	r2, r3, #3
 8004d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da0:	4413      	add	r3, r2
 8004da2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004da6:	663b      	str	r3, [r7, #96]	; 0x60
 8004da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004daa:	2200      	movs	r2, #0
 8004dac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	677b      	str	r3, [r7, #116]	; 0x74
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d12b      	bne.n	8004e14 <HAL_PCD_EP_DB_Transmit+0x516>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	4413      	add	r3, r2
 8004dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	00da      	lsls	r2, r3, #3
 8004dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ddc:	4413      	add	r3, r2
 8004dde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e10:	801a      	strh	r2, [r3, #0]
 8004e12:	e017      	b.n	8004e44 <HAL_PCD_EP_DB_Transmit+0x546>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d113      	bne.n	8004e44 <HAL_PCD_EP_DB_Transmit+0x546>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2a:	4413      	add	r3, r2
 8004e2c:	677b      	str	r3, [r7, #116]	; 0x74
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	00da      	lsls	r2, r3, #3
 8004e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e36:	4413      	add	r3, r2
 8004e38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e3c:	673b      	str	r3, [r7, #112]	; 0x70
 8004e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e40:	2200      	movs	r2, #0
 8004e42:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f006 ff85 	bl	800bd5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 811a 	bne.w	8005090 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	441a      	add	r2, r3
 8004e88:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	8013      	strh	r3, [r2, #0]
 8004ea0:	e0f6      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d121      	bne.n	8004ef0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	441a      	add	r2, r3
 8004ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	f040 80ca 	bne.w	8005090 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f04:	441a      	add	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f12:	441a      	add	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d30b      	bcc.n	8004f3c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6a1a      	ldr	r2, [r3, #32]
 8004f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	621a      	str	r2, [r3, #32]
 8004f3a:	e017      	b.n	8004f6c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d108      	bne.n	8004f56 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004f44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f54:	e00a      	b.n	8004f6c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	657b      	str	r3, [r7, #84]	; 0x54
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d165      	bne.n	8005046 <HAL_PCD_EP_DB_Transmit+0x748>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8e:	4413      	add	r3, r2
 8004f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	00da      	lsls	r2, r3, #3
 8004f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb0:	801a      	strh	r2, [r3, #0]
 8004fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fb8:	d91d      	bls.n	8004ff6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	029b      	lsls	r3, r3, #10
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff2:	801a      	strh	r2, [r3, #0]
 8004ff4:	e041      	b.n	800507a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <HAL_PCD_EP_DB_Transmit+0x716>
 8004ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800500c:	b29a      	uxth	r2, r3
 800500e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	e032      	b.n	800507a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	66bb      	str	r3, [r7, #104]	; 0x68
 800501c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_PCD_EP_DB_Transmit+0x730>
 8005028:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800502a:	3301      	adds	r3, #1
 800502c:	66bb      	str	r3, [r7, #104]	; 0x68
 800502e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29a      	uxth	r2, r3
 8005034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005036:	b29b      	uxth	r3, r3
 8005038:	029b      	lsls	r3, r3, #10
 800503a:	b29b      	uxth	r3, r3
 800503c:	4313      	orrs	r3, r2
 800503e:	b29a      	uxth	r2, r3
 8005040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	e019      	b.n	800507a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d115      	bne.n	800507a <HAL_PCD_EP_DB_Transmit+0x77c>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005056:	b29b      	uxth	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800505c:	4413      	add	r3, r2
 800505e:	657b      	str	r3, [r7, #84]	; 0x54
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	00da      	lsls	r2, r3, #3
 8005066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005068:	4413      	add	r3, r2
 800506a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800506e:	653b      	str	r3, [r7, #80]	; 0x50
 8005070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005074:	b29a      	uxth	r2, r3
 8005076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005078:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6959      	ldr	r1, [r3, #20]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	895a      	ldrh	r2, [r3, #10]
 8005086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800508a:	b29b      	uxth	r3, r3
 800508c:	f005 f960 	bl	800a350 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050aa:	82bb      	strh	r3, [r7, #20]
 80050ac:	8abb      	ldrh	r3, [r7, #20]
 80050ae:	f083 0310 	eor.w	r3, r3, #16
 80050b2:	82bb      	strh	r3, [r7, #20]
 80050b4:	8abb      	ldrh	r3, [r7, #20]
 80050b6:	f083 0320 	eor.w	r3, r3, #32
 80050ba:	82bb      	strh	r3, [r7, #20]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	8abb      	ldrh	r3, [r7, #20]
 80050cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050dc:	b29b      	uxth	r3, r3
 80050de:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3790      	adds	r7, #144	; 0x90
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b087      	sub	sp, #28
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	817b      	strh	r3, [r7, #10]
 80050f8:	4613      	mov	r3, r2
 80050fa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80050fc:	897b      	ldrh	r3, [r7, #10]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005108:	897b      	ldrh	r3, [r7, #10]
 800510a:	f003 0207 	and.w	r2, r3, #7
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	3310      	adds	r3, #16
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e009      	b.n	8005134 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005120:	897a      	ldrh	r2, [r7, #10]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005134:	893b      	ldrh	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	b29a      	uxth	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	80da      	strh	r2, [r3, #6]
 8005148:	e00b      	b.n	8005162 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2201      	movs	r2, #1
 800514e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	b29a      	uxth	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	0c1b      	lsrs	r3, r3, #16
 800515c:	b29a      	uxth	r2, r3
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005194:	b29b      	uxth	r3, r3
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f043 0302 	orr.w	r3, r3, #2
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d141      	bne.n	8005256 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051d2:	4b4b      	ldr	r3, [pc, #300]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051de:	d131      	bne.n	8005244 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051e0:	4b47      	ldr	r3, [pc, #284]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e6:	4a46      	ldr	r2, [pc, #280]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051f0:	4b43      	ldr	r3, [pc, #268]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051f8:	4a41      	ldr	r2, [pc, #260]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005200:	4b40      	ldr	r3, [pc, #256]	; (8005304 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2232      	movs	r2, #50	; 0x32
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	4a3f      	ldr	r2, [pc, #252]	; (8005308 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	0c9b      	lsrs	r3, r3, #18
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005216:	e002      	b.n	800521e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3b01      	subs	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800521e:	4b38      	ldr	r3, [pc, #224]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522a:	d102      	bne.n	8005232 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f2      	bne.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005232:	4b33      	ldr	r3, [pc, #204]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523e:	d158      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e057      	b.n	80052f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005244:	4b2e      	ldr	r3, [pc, #184]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800524a:	4a2d      	ldr	r2, [pc, #180]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005250:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005254:	e04d      	b.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800525c:	d141      	bne.n	80052e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800525e:	4b28      	ldr	r3, [pc, #160]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d131      	bne.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800526c:	4b24      	ldr	r3, [pc, #144]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005272:	4a23      	ldr	r2, [pc, #140]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800528a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2232      	movs	r2, #50	; 0x32
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005298:	fba2 2303 	umull	r2, r3, r2, r3
 800529c:	0c9b      	lsrs	r3, r3, #18
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052a2:	e002      	b.n	80052aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b6:	d102      	bne.n	80052be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f2      	bne.n	80052a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ca:	d112      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e011      	b.n	80052f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052e0:	e007      	b.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052ea:	4a05      	ldr	r2, [pc, #20]	; (8005300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40007000 	.word	0x40007000
 8005304:	20000000 	.word	0x20000000
 8005308:	431bde83 	.word	0x431bde83

0800530c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a04      	ldr	r2, [pc, #16]	; (8005328 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800531a:	6093      	str	r3, [r2, #8]
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40007000 	.word	0x40007000

0800532c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e2fe      	b.n	800593c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d075      	beq.n	8005436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800534a:	4b97      	ldr	r3, [pc, #604]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
 8005352:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005354:	4b94      	ldr	r3, [pc, #592]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b0c      	cmp	r3, #12
 8005362:	d102      	bne.n	800536a <HAL_RCC_OscConfig+0x3e>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d002      	beq.n	8005370 <HAL_RCC_OscConfig+0x44>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d10b      	bne.n	8005388 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	4b8d      	ldr	r3, [pc, #564]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d05b      	beq.n	8005434 <HAL_RCC_OscConfig+0x108>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d157      	bne.n	8005434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e2d9      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d106      	bne.n	80053a0 <HAL_RCC_OscConfig+0x74>
 8005392:	4b85      	ldr	r3, [pc, #532]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a84      	ldr	r2, [pc, #528]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e01d      	b.n	80053dc <HAL_RCC_OscConfig+0xb0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x98>
 80053aa:	4b7f      	ldr	r3, [pc, #508]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7e      	ldr	r2, [pc, #504]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80053b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b7c      	ldr	r3, [pc, #496]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a7b      	ldr	r2, [pc, #492]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80053bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0xb0>
 80053c4:	4b78      	ldr	r3, [pc, #480]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a77      	ldr	r2, [pc, #476]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80053ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	4b75      	ldr	r3, [pc, #468]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a74      	ldr	r2, [pc, #464]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80053d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d013      	beq.n	800540c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fc f9ca 	bl	800177c <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ec:	f7fc f9c6 	bl	800177c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b64      	cmp	r3, #100	; 0x64
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e29e      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053fe:	4b6a      	ldr	r3, [pc, #424]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0xc0>
 800540a:	e014      	b.n	8005436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fc f9b6 	bl	800177c <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005414:	f7fc f9b2 	bl	800177c <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e28a      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005426:	4b60      	ldr	r3, [pc, #384]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0xe8>
 8005432:	e000      	b.n	8005436 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d075      	beq.n	800552e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005442:	4b59      	ldr	r3, [pc, #356]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800544c:	4b56      	ldr	r3, [pc, #344]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d102      	bne.n	8005462 <HAL_RCC_OscConfig+0x136>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d002      	beq.n	8005468 <HAL_RCC_OscConfig+0x13c>
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	2b04      	cmp	r3, #4
 8005466:	d11f      	bne.n	80054a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005468:	4b4f      	ldr	r3, [pc, #316]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_RCC_OscConfig+0x154>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e25d      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005480:	4b49      	ldr	r3, [pc, #292]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	4946      	ldr	r1, [pc, #280]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005494:	4b45      	ldr	r3, [pc, #276]	; (80055ac <HAL_RCC_OscConfig+0x280>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f7fc f923 	bl	80016e4 <HAL_InitTick>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d043      	beq.n	800552c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e249      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d023      	beq.n	80054f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b0:	4b3d      	ldr	r3, [pc, #244]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3c      	ldr	r2, [pc, #240]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80054b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fc f95e 	bl	800177c <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c4:	f7fc f95a 	bl	800177c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e232      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054d6:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e2:	4b31      	ldr	r3, [pc, #196]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	061b      	lsls	r3, r3, #24
 80054f0:	492d      	ldr	r1, [pc, #180]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	604b      	str	r3, [r1, #4]
 80054f6:	e01a      	b.n	800552e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054f8:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2a      	ldr	r2, [pc, #168]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 80054fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fc f93a 	bl	800177c <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550c:	f7fc f936 	bl	800177c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e20e      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800551e:	4b22      	ldr	r3, [pc, #136]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x1e0>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800552c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d041      	beq.n	80055be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01c      	beq.n	800557c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005548:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fc f913 	bl	800177c <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555a:	f7fc f90f 	bl	800177c <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e1e7      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 800556e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0ef      	beq.n	800555a <HAL_RCC_OscConfig+0x22e>
 800557a:	e020      	b.n	80055be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557c:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 800557e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005582:	4a09      	ldr	r2, [pc, #36]	; (80055a8 <HAL_RCC_OscConfig+0x27c>)
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fc f8f6 	bl	800177c <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005592:	e00d      	b.n	80055b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005594:	f7fc f8f2 	bl	800177c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d906      	bls.n	80055b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e1ca      	b.n	800593c <HAL_RCC_OscConfig+0x610>
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
 80055ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055b0:	4b8c      	ldr	r3, [pc, #560]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ea      	bne.n	8005594 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80a6 	beq.w	8005718 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055cc:	2300      	movs	r3, #0
 80055ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055d0:	4b84      	ldr	r3, [pc, #528]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_OscConfig+0x2b4>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x2b6>
 80055e0:	2300      	movs	r3, #0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00d      	beq.n	8005602 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	4b7f      	ldr	r3, [pc, #508]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	4a7e      	ldr	r2, [pc, #504]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80055ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f0:	6593      	str	r3, [r2, #88]	; 0x58
 80055f2:	4b7c      	ldr	r3, [pc, #496]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055fe:	2301      	movs	r3, #1
 8005600:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005602:	4b79      	ldr	r3, [pc, #484]	; (80057e8 <HAL_RCC_OscConfig+0x4bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	d118      	bne.n	8005640 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800560e:	4b76      	ldr	r3, [pc, #472]	; (80057e8 <HAL_RCC_OscConfig+0x4bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a75      	ldr	r2, [pc, #468]	; (80057e8 <HAL_RCC_OscConfig+0x4bc>)
 8005614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561a:	f7fc f8af 	bl	800177c <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005622:	f7fc f8ab 	bl	800177c <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e183      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005634:	4b6c      	ldr	r3, [pc, #432]	; (80057e8 <HAL_RCC_OscConfig+0x4bc>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d108      	bne.n	800565a <HAL_RCC_OscConfig+0x32e>
 8005648:	4b66      	ldr	r3, [pc, #408]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	4a65      	ldr	r2, [pc, #404]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005658:	e024      	b.n	80056a4 <HAL_RCC_OscConfig+0x378>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b05      	cmp	r3, #5
 8005660:	d110      	bne.n	8005684 <HAL_RCC_OscConfig+0x358>
 8005662:	4b60      	ldr	r3, [pc, #384]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005668:	4a5e      	ldr	r2, [pc, #376]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 800566a:	f043 0304 	orr.w	r3, r3, #4
 800566e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005672:	4b5c      	ldr	r3, [pc, #368]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005678:	4a5a      	ldr	r2, [pc, #360]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005682:	e00f      	b.n	80056a4 <HAL_RCC_OscConfig+0x378>
 8005684:	4b57      	ldr	r3, [pc, #348]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	4a56      	ldr	r2, [pc, #344]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005694:	4b53      	ldr	r3, [pc, #332]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	4a52      	ldr	r2, [pc, #328]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 800569c:	f023 0304 	bic.w	r3, r3, #4
 80056a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d016      	beq.n	80056da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fc f866 	bl	800177c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fc f862 	bl	800177c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e138      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ca:	4b46      	ldr	r3, [pc, #280]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ed      	beq.n	80056b4 <HAL_RCC_OscConfig+0x388>
 80056d8:	e015      	b.n	8005706 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056da:	f7fc f84f 	bl	800177c <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fc f84b 	bl	800177c <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e121      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056f8:	4b3a      	ldr	r3, [pc, #232]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1ed      	bne.n	80056e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005706:	7ffb      	ldrb	r3, [r7, #31]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d105      	bne.n	8005718 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800570c:	4b35      	ldr	r3, [pc, #212]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	4a34      	ldr	r2, [pc, #208]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005716:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d03c      	beq.n	800579e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01c      	beq.n	8005766 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800572c:	4b2d      	ldr	r3, [pc, #180]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 800572e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005732:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573c:	f7fc f81e 	bl	800177c <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005744:	f7fc f81a 	bl	800177c <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e0f2      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005756:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0ef      	beq.n	8005744 <HAL_RCC_OscConfig+0x418>
 8005764:	e01b      	b.n	800579e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005766:	4b1f      	ldr	r3, [pc, #124]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005776:	f7fc f801 	bl	800177c <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800577e:	f7fb fffd 	bl	800177c <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e0d5      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005790:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 8005792:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ef      	bne.n	800577e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80c9 	beq.w	800593a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057a8:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 030c 	and.w	r3, r3, #12
 80057b0:	2b0c      	cmp	r3, #12
 80057b2:	f000 8083 	beq.w	80058bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d15e      	bne.n	800587c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a08      	ldr	r2, [pc, #32]	; (80057e4 <HAL_RCC_OscConfig+0x4b8>)
 80057c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ca:	f7fb ffd7 	bl	800177c <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d0:	e00c      	b.n	80057ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d2:	f7fb ffd3 	bl	800177c <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d905      	bls.n	80057ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e0ab      	b.n	800593c <HAL_RCC_OscConfig+0x610>
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ec:	4b55      	ldr	r3, [pc, #340]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1ec      	bne.n	80057d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057f8:	4b52      	ldr	r3, [pc, #328]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	4b52      	ldr	r3, [pc, #328]	; (8005948 <HAL_RCC_OscConfig+0x61c>)
 80057fe:	4013      	ands	r3, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6a11      	ldr	r1, [r2, #32]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005808:	3a01      	subs	r2, #1
 800580a:	0112      	lsls	r2, r2, #4
 800580c:	4311      	orrs	r1, r2
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005812:	0212      	lsls	r2, r2, #8
 8005814:	4311      	orrs	r1, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800581a:	0852      	lsrs	r2, r2, #1
 800581c:	3a01      	subs	r2, #1
 800581e:	0552      	lsls	r2, r2, #21
 8005820:	4311      	orrs	r1, r2
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005826:	0852      	lsrs	r2, r2, #1
 8005828:	3a01      	subs	r2, #1
 800582a:	0652      	lsls	r2, r2, #25
 800582c:	4311      	orrs	r1, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005832:	06d2      	lsls	r2, r2, #27
 8005834:	430a      	orrs	r2, r1
 8005836:	4943      	ldr	r1, [pc, #268]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 8005838:	4313      	orrs	r3, r2
 800583a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800583c:	4b41      	ldr	r3, [pc, #260]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a40      	ldr	r2, [pc, #256]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 8005842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005846:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005848:	4b3e      	ldr	r3, [pc, #248]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4a3d      	ldr	r2, [pc, #244]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 800584e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005852:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fb ff92 	bl	800177c <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585c:	f7fb ff8e 	bl	800177c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e066      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800586e:	4b35      	ldr	r3, [pc, #212]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <HAL_RCC_OscConfig+0x530>
 800587a:	e05e      	b.n	800593a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587c:	4b31      	ldr	r3, [pc, #196]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a30      	ldr	r2, [pc, #192]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 8005882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fb ff78 	bl	800177c <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fb ff74 	bl	800177c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e04c      	b.n	800593c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a2:	4b28      	ldr	r3, [pc, #160]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058ae:	4b25      	ldr	r3, [pc, #148]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	4924      	ldr	r1, [pc, #144]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 80058b4:	4b25      	ldr	r3, [pc, #148]	; (800594c <HAL_RCC_OscConfig+0x620>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	60cb      	str	r3, [r1, #12]
 80058ba:	e03e      	b.n	800593a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e039      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <HAL_RCC_OscConfig+0x618>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 0203 	and.w	r2, r3, #3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d12c      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	3b01      	subs	r3, #1
 80058e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d123      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d11b      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800590a:	429a      	cmp	r2, r3
 800590c:	d113      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	3b01      	subs	r3, #1
 800591c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d109      	bne.n	8005936 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	3b01      	subs	r3, #1
 8005930:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d001      	beq.n	800593a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40021000 	.word	0x40021000
 8005948:	019f800c 	.word	0x019f800c
 800594c:	feeefffc 	.word	0xfeeefffc

08005950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e11e      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005968:	4b91      	ldr	r3, [pc, #580]	; (8005bb0 <HAL_RCC_ClockConfig+0x260>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d910      	bls.n	8005998 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b8e      	ldr	r3, [pc, #568]	; (8005bb0 <HAL_RCC_ClockConfig+0x260>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 020f 	bic.w	r2, r3, #15
 800597e:	498c      	ldr	r1, [pc, #560]	; (8005bb0 <HAL_RCC_ClockConfig+0x260>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b8a      	ldr	r3, [pc, #552]	; (8005bb0 <HAL_RCC_ClockConfig+0x260>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e106      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d073      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d129      	bne.n	8005a00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ac:	4b81      	ldr	r3, [pc, #516]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0f4      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80059bc:	f000 f966 	bl	8005c8c <RCC_GetSysClockFreqFromPLLSource>
 80059c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4a7c      	ldr	r2, [pc, #496]	; (8005bb8 <HAL_RCC_ClockConfig+0x268>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d93f      	bls.n	8005a4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059ca:	4b7a      	ldr	r3, [pc, #488]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d033      	beq.n	8005a4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d12f      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059ea:	4b72      	ldr	r3, [pc, #456]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059f2:	4a70      	ldr	r2, [pc, #448]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 80059f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059fa:	2380      	movs	r3, #128	; 0x80
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e024      	b.n	8005a4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a08:	4b6a      	ldr	r3, [pc, #424]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0c6      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a18:	4b66      	ldr	r3, [pc, #408]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0be      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a28:	f000 f8ce 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4a61      	ldr	r2, [pc, #388]	; (8005bb8 <HAL_RCC_ClockConfig+0x268>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d909      	bls.n	8005a4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a36:	4b5f      	ldr	r3, [pc, #380]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3e:	4a5d      	ldr	r2, [pc, #372]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a46:	2380      	movs	r3, #128	; 0x80
 8005a48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a4a:	4b5a      	ldr	r3, [pc, #360]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f023 0203 	bic.w	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4957      	ldr	r1, [pc, #348]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a5c:	f7fb fe8e 	bl	800177c <HAL_GetTick>
 8005a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a64:	f7fb fe8a 	bl	800177c <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e095      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a7a:	4b4e      	ldr	r3, [pc, #312]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 020c 	and.w	r2, r3, #12
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d1eb      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d023      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	4a42      	ldr	r2, [pc, #264]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005aaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005aae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005abc:	4b3d      	ldr	r3, [pc, #244]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ac4:	4a3b      	ldr	r2, [pc, #236]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005aca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005acc:	4b39      	ldr	r3, [pc, #228]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	4936      	ldr	r1, [pc, #216]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	608b      	str	r3, [r1, #8]
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b80      	cmp	r3, #128	; 0x80
 8005ae4:	d105      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ae6:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	4a32      	ldr	r2, [pc, #200]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005af0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005af2:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <HAL_RCC_ClockConfig+0x260>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d21d      	bcs.n	8005b3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b00:	4b2b      	ldr	r3, [pc, #172]	; (8005bb0 <HAL_RCC_ClockConfig+0x260>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f023 020f 	bic.w	r2, r3, #15
 8005b08:	4929      	ldr	r1, [pc, #164]	; (8005bb0 <HAL_RCC_ClockConfig+0x260>)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b10:	f7fb fe34 	bl	800177c <HAL_GetTick>
 8005b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b18:	f7fb fe30 	bl	800177c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e03b      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2e:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_RCC_ClockConfig+0x260>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d1ed      	bne.n	8005b18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4917      	ldr	r1, [pc, #92]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b66:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	490f      	ldr	r1, [pc, #60]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b7a:	f000 f825 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCC_ClockConfig+0x264>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	490c      	ldr	r1, [pc, #48]	; (8005bbc <HAL_RCC_ClockConfig+0x26c>)
 8005b8c:	5ccb      	ldrb	r3, [r1, r3]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	fa22 f303 	lsr.w	r3, r2, r3
 8005b96:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <HAL_RCC_ClockConfig+0x270>)
 8005b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <HAL_RCC_ClockConfig+0x274>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fb fda0 	bl	80016e4 <HAL_InitTick>
 8005ba4:	4603      	mov	r3, r0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40022000 	.word	0x40022000
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	04c4b400 	.word	0x04c4b400
 8005bbc:	0800c2f4 	.word	0x0800c2f4
 8005bc0:	20000000 	.word	0x20000000
 8005bc4:	20000004 	.word	0x20000004

08005bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005bce:	4b2c      	ldr	r3, [pc, #176]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d102      	bne.n	8005be0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bda:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	e047      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 030c 	and.w	r3, r3, #12
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d102      	bne.n	8005bf2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bec:	4b26      	ldr	r3, [pc, #152]	; (8005c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	e03e      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005bf2:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d136      	bne.n	8005c6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bfe:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c08:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	3301      	adds	r3, #1
 8005c14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d10c      	bne.n	8005c36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c26:	68d2      	ldr	r2, [r2, #12]
 8005c28:	0a12      	lsrs	r2, r2, #8
 8005c2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	617b      	str	r3, [r7, #20]
      break;
 8005c34:	e00c      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c40:	68d2      	ldr	r2, [r2, #12]
 8005c42:	0a12      	lsrs	r2, r2, #8
 8005c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c48:	fb02 f303 	mul.w	r3, r2, r3
 8005c4c:	617b      	str	r3, [r7, #20]
      break;
 8005c4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0e5b      	lsrs	r3, r3, #25
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	e001      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c70:	693b      	ldr	r3, [r7, #16]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40021000 	.word	0x40021000
 8005c84:	00f42400 	.word	0x00f42400
 8005c88:	02dc6c00 	.word	0x02dc6c00

08005c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c9c:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	091b      	lsrs	r3, r3, #4
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d10c      	bne.n	8005cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cb0:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cba:	68d2      	ldr	r2, [r2, #12]
 8005cbc:	0a12      	lsrs	r2, r2, #8
 8005cbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	617b      	str	r3, [r7, #20]
    break;
 8005cc8:	e00c      	b.n	8005ce4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cca:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd2:	4a0e      	ldr	r2, [pc, #56]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cd4:	68d2      	ldr	r2, [r2, #12]
 8005cd6:	0a12      	lsrs	r2, r2, #8
 8005cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cdc:	fb02 f303 	mul.w	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]
    break;
 8005ce2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	0e5b      	lsrs	r3, r3, #25
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005cfe:	687b      	ldr	r3, [r7, #4]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	02dc6c00 	.word	0x02dc6c00
 8005d14:	00f42400 	.word	0x00f42400

08005d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d20:	2300      	movs	r3, #0
 8005d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d24:	2300      	movs	r3, #0
 8005d26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8098 	beq.w	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d36:	2300      	movs	r3, #0
 8005d38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d3a:	4b43      	ldr	r3, [pc, #268]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10d      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d46:	4b40      	ldr	r3, [pc, #256]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	4a3f      	ldr	r2, [pc, #252]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d50:	6593      	str	r3, [r2, #88]	; 0x58
 8005d52:	4b3d      	ldr	r3, [pc, #244]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d62:	4b3a      	ldr	r3, [pc, #232]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a39      	ldr	r2, [pc, #228]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d6e:	f7fb fd05 	bl	800177c <HAL_GetTick>
 8005d72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d74:	e009      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d76:	f7fb fd01 	bl	800177c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d902      	bls.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	74fb      	strb	r3, [r7, #19]
        break;
 8005d88:	e005      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d8a:	4b30      	ldr	r3, [pc, #192]	; (8005e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0ef      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d159      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d9c:	4b2a      	ldr	r3, [pc, #168]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01e      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d019      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005db8:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dc4:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	4a1f      	ldr	r2, [pc, #124]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dd4:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005de4:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df6:	f7fb fcc1 	bl	800177c <HAL_GetTick>
 8005dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dfc:	e00b      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfe:	f7fb fcbd 	bl	800177c <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d902      	bls.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	74fb      	strb	r3, [r7, #19]
            break;
 8005e14:	e006      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ec      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e24:	7cfb      	ldrb	r3, [r7, #19]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e2a:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	4903      	ldr	r1, [pc, #12]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e40:	e008      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e42:	7cfb      	ldrb	r3, [r7, #19]
 8005e44:	74bb      	strb	r3, [r7, #18]
 8005e46:	e005      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e50:	7cfb      	ldrb	r3, [r7, #19]
 8005e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e54:	7c7b      	ldrb	r3, [r7, #17]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d105      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5a:	4ba6      	ldr	r3, [pc, #664]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	4aa5      	ldr	r2, [pc, #660]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e72:	4ba0      	ldr	r3, [pc, #640]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e78:	f023 0203 	bic.w	r2, r3, #3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	499c      	ldr	r1, [pc, #624]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e94:	4b97      	ldr	r3, [pc, #604]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f023 020c 	bic.w	r2, r3, #12
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	4994      	ldr	r1, [pc, #592]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005eb6:	4b8f      	ldr	r3, [pc, #572]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	498b      	ldr	r1, [pc, #556]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ed8:	4b86      	ldr	r3, [pc, #536]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	4983      	ldr	r1, [pc, #524]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005efa:	4b7e      	ldr	r3, [pc, #504]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	497a      	ldr	r1, [pc, #488]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f1c:	4b75      	ldr	r3, [pc, #468]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	4972      	ldr	r1, [pc, #456]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f3e:	4b6d      	ldr	r3, [pc, #436]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	4969      	ldr	r1, [pc, #420]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f60:	4b64      	ldr	r3, [pc, #400]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	4961      	ldr	r1, [pc, #388]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f82:	4b5c      	ldr	r3, [pc, #368]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	4958      	ldr	r1, [pc, #352]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fa4:	4b53      	ldr	r3, [pc, #332]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	4950      	ldr	r1, [pc, #320]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc2:	d105      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc4:	4b4b      	ldr	r3, [pc, #300]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	4a4a      	ldr	r2, [pc, #296]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d015      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fdc:	4b45      	ldr	r3, [pc, #276]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	4942      	ldr	r1, [pc, #264]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ffa:	d105      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ffc:	4b3d      	ldr	r3, [pc, #244]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	4a3c      	ldr	r2, [pc, #240]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006006:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d015      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006014:	4b37      	ldr	r3, [pc, #220]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	4934      	ldr	r1, [pc, #208]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006032:	d105      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006034:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800603a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800603e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d015      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800604c:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	4926      	ldr	r1, [pc, #152]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800606a:	d105      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800606c:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4a20      	ldr	r2, [pc, #128]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006076:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d015      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	4918      	ldr	r1, [pc, #96]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a2:	d105      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a4:	4b13      	ldr	r3, [pc, #76]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a12      	ldr	r2, [pc, #72]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d015      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	490a      	ldr	r1, [pc, #40]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060da:	d105      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80060e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40021000 	.word	0x40021000

080060f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e049      	b.n	800619e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fb f8d8 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f001 f876 	bl	8007228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d001      	beq.n	80061c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e042      	b.n	8006246 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a21      	ldr	r2, [pc, #132]	; (8006254 <HAL_TIM_Base_Start+0xac>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <HAL_TIM_Base_Start+0x5c>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061da:	d013      	beq.n	8006204 <HAL_TIM_Base_Start+0x5c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1d      	ldr	r2, [pc, #116]	; (8006258 <HAL_TIM_Base_Start+0xb0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <HAL_TIM_Base_Start+0x5c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1c      	ldr	r2, [pc, #112]	; (800625c <HAL_TIM_Base_Start+0xb4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_TIM_Base_Start+0x5c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <HAL_TIM_Base_Start+0xb8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_TIM_Base_Start+0x5c>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a19      	ldr	r2, [pc, #100]	; (8006264 <HAL_TIM_Base_Start+0xbc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d115      	bne.n	8006230 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	4b17      	ldr	r3, [pc, #92]	; (8006268 <HAL_TIM_Base_Start+0xc0>)
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b06      	cmp	r3, #6
 8006214:	d015      	beq.n	8006242 <HAL_TIM_Base_Start+0x9a>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621c:	d011      	beq.n	8006242 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622e:	e008      	b.n	8006242 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	e000      	b.n	8006244 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40013400 	.word	0x40013400
 8006264:	40014000 	.word	0x40014000
 8006268:	00010007 	.word	0x00010007

0800626c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e049      	b.n	8006312 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fb f89c 	bl	80013d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f000 ffbc 	bl	8007228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d109      	bne.n	8006348 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	bf0c      	ite	eq
 8006340:	2301      	moveq	r3, #1
 8006342:	2300      	movne	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	e03c      	b.n	80063c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b04      	cmp	r3, #4
 800634c:	d109      	bne.n	8006362 <HAL_TIM_PWM_Start_DMA+0x46>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	bf0c      	ite	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	2300      	movne	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	e02f      	b.n	80063c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d109      	bne.n	800637c <HAL_TIM_PWM_Start_DMA+0x60>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	bf0c      	ite	eq
 8006374:	2301      	moveq	r3, #1
 8006376:	2300      	movne	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e022      	b.n	80063c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b0c      	cmp	r3, #12
 8006380:	d109      	bne.n	8006396 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e015      	b.n	80063c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b10      	cmp	r3, #16
 800639a:	d109      	bne.n	80063b0 <HAL_TIM_PWM_Start_DMA+0x94>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e008      	b.n	80063c2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
 80063c8:	e1a6      	b.n	8006718 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	e03c      	b.n	800645e <HAL_TIM_PWM_Start_DMA+0x142>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d109      	bne.n	80063fe <HAL_TIM_PWM_Start_DMA+0xe2>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	e02f      	b.n	800645e <HAL_TIM_PWM_Start_DMA+0x142>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d109      	bne.n	8006418 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	e022      	b.n	800645e <HAL_TIM_PWM_Start_DMA+0x142>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b0c      	cmp	r3, #12
 800641c:	d109      	bne.n	8006432 <HAL_TIM_PWM_Start_DMA+0x116>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e015      	b.n	800645e <HAL_TIM_PWM_Start_DMA+0x142>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b10      	cmp	r3, #16
 8006436:	d109      	bne.n	800644c <HAL_TIM_PWM_Start_DMA+0x130>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	e008      	b.n	800645e <HAL_TIM_PWM_Start_DMA+0x142>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d034      	beq.n	80064cc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_TIM_PWM_Start_DMA+0x152>
 8006468:	887b      	ldrh	r3, [r7, #2]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e152      	b.n	8006718 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <HAL_TIM_PWM_Start_DMA+0x166>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006480:	e026      	b.n	80064d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b04      	cmp	r3, #4
 8006486:	d104      	bne.n	8006492 <HAL_TIM_PWM_Start_DMA+0x176>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006490:	e01e      	b.n	80064d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b08      	cmp	r3, #8
 8006496:	d104      	bne.n	80064a2 <HAL_TIM_PWM_Start_DMA+0x186>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a0:	e016      	b.n	80064d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_PWM_Start_DMA+0x196>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064b0:	e00e      	b.n	80064d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c0:	e006      	b.n	80064d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064ca:	e001      	b.n	80064d0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e123      	b.n	8006718 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b0c      	cmp	r3, #12
 80064d4:	f200 80ae 	bhi.w	8006634 <HAL_TIM_PWM_Start_DMA+0x318>
 80064d8:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	08006515 	.word	0x08006515
 80064e4:	08006635 	.word	0x08006635
 80064e8:	08006635 	.word	0x08006635
 80064ec:	08006635 	.word	0x08006635
 80064f0:	0800655d 	.word	0x0800655d
 80064f4:	08006635 	.word	0x08006635
 80064f8:	08006635 	.word	0x08006635
 80064fc:	08006635 	.word	0x08006635
 8006500:	080065a5 	.word	0x080065a5
 8006504:	08006635 	.word	0x08006635
 8006508:	08006635 	.word	0x08006635
 800650c:	08006635 	.word	0x08006635
 8006510:	080065ed 	.word	0x080065ed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	4a81      	ldr	r2, [pc, #516]	; (8006720 <HAL_TIM_PWM_Start_DMA+0x404>)
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	4a80      	ldr	r2, [pc, #512]	; (8006724 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006522:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	4a7f      	ldr	r2, [pc, #508]	; (8006728 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800652a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3334      	adds	r3, #52	; 0x34
 8006538:	461a      	mov	r2, r3
 800653a:	887b      	ldrh	r3, [r7, #2]
 800653c:	f7fc fd42 	bl	8002fc4 <HAL_DMA_Start_IT>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0e6      	b.n	8006718 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006558:	60da      	str	r2, [r3, #12]
      break;
 800655a:	e06e      	b.n	800663a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	4a6f      	ldr	r2, [pc, #444]	; (8006720 <HAL_TIM_PWM_Start_DMA+0x404>)
 8006562:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	4a6e      	ldr	r2, [pc, #440]	; (8006724 <HAL_TIM_PWM_Start_DMA+0x408>)
 800656a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	4a6d      	ldr	r2, [pc, #436]	; (8006728 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006572:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3338      	adds	r3, #56	; 0x38
 8006580:	461a      	mov	r2, r3
 8006582:	887b      	ldrh	r3, [r7, #2]
 8006584:	f7fc fd1e 	bl	8002fc4 <HAL_DMA_Start_IT>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e0c2      	b.n	8006718 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065a0:	60da      	str	r2, [r3, #12]
      break;
 80065a2:	e04a      	b.n	800663a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	4a5d      	ldr	r2, [pc, #372]	; (8006720 <HAL_TIM_PWM_Start_DMA+0x404>)
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	4a5c      	ldr	r2, [pc, #368]	; (8006724 <HAL_TIM_PWM_Start_DMA+0x408>)
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4a5b      	ldr	r2, [pc, #364]	; (8006728 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80065ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	333c      	adds	r3, #60	; 0x3c
 80065c8:	461a      	mov	r2, r3
 80065ca:	887b      	ldrh	r3, [r7, #2]
 80065cc:	f7fc fcfa 	bl	8002fc4 <HAL_DMA_Start_IT>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e09e      	b.n	8006718 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e8:	60da      	str	r2, [r3, #12]
      break;
 80065ea:	e026      	b.n	800663a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	4a4b      	ldr	r2, [pc, #300]	; (8006720 <HAL_TIM_PWM_Start_DMA+0x404>)
 80065f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	4a4a      	ldr	r2, [pc, #296]	; (8006724 <HAL_TIM_PWM_Start_DMA+0x408>)
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	4a49      	ldr	r2, [pc, #292]	; (8006728 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006602:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3340      	adds	r3, #64	; 0x40
 8006610:	461a      	mov	r2, r3
 8006612:	887b      	ldrh	r3, [r7, #2]
 8006614:	f7fc fcd6 	bl	8002fc4 <HAL_DMA_Start_IT>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e07a      	b.n	8006718 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006630:	60da      	str	r2, [r3, #12]
      break;
 8006632:	e002      	b.n	800663a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	75fb      	strb	r3, [r7, #23]
      break;
 8006638:	bf00      	nop
  }

  if (status == HAL_OK)
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d16a      	bne.n	8006716 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2201      	movs	r2, #1
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f001 fa1b 	bl	8007a84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a36      	ldr	r2, [pc, #216]	; (800672c <HAL_TIM_PWM_Start_DMA+0x410>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <HAL_TIM_PWM_Start_DMA+0x364>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a34      	ldr	r2, [pc, #208]	; (8006730 <HAL_TIM_PWM_Start_DMA+0x414>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_TIM_PWM_Start_DMA+0x364>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a33      	ldr	r2, [pc, #204]	; (8006734 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_TIM_PWM_Start_DMA+0x364>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a31      	ldr	r2, [pc, #196]	; (8006738 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_TIM_PWM_Start_DMA+0x364>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a30      	ldr	r2, [pc, #192]	; (800673c <HAL_TIM_PWM_Start_DMA+0x420>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d101      	bne.n	8006684 <HAL_TIM_PWM_Start_DMA+0x368>
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <HAL_TIM_PWM_Start_DMA+0x36a>
 8006684:	2300      	movs	r3, #0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d007      	beq.n	800669a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a23      	ldr	r2, [pc, #140]	; (800672c <HAL_TIM_PWM_Start_DMA+0x410>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d018      	beq.n	80066d6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ac:	d013      	beq.n	80066d6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a23      	ldr	r2, [pc, #140]	; (8006740 <HAL_TIM_PWM_Start_DMA+0x424>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00e      	beq.n	80066d6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a21      	ldr	r2, [pc, #132]	; (8006744 <HAL_TIM_PWM_Start_DMA+0x428>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d009      	beq.n	80066d6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <HAL_TIM_PWM_Start_DMA+0x414>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a18      	ldr	r2, [pc, #96]	; (8006734 <HAL_TIM_PWM_Start_DMA+0x418>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d115      	bne.n	8006702 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	4b1a      	ldr	r3, [pc, #104]	; (8006748 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80066de:	4013      	ands	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b06      	cmp	r3, #6
 80066e6:	d015      	beq.n	8006714 <HAL_TIM_PWM_Start_DMA+0x3f8>
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ee:	d011      	beq.n	8006714 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006700:	e008      	b.n	8006714 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0201 	orr.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	e000      	b.n	8006716 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006714:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	08007117 	.word	0x08007117
 8006724:	080071bf 	.word	0x080071bf
 8006728:	08007085 	.word	0x08007085
 800672c:	40012c00 	.word	0x40012c00
 8006730:	40013400 	.word	0x40013400
 8006734:	40014000 	.word	0x40014000
 8006738:	40014400 	.word	0x40014400
 800673c:	40014800 	.word	0x40014800
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	00010007 	.word	0x00010007

0800674c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b0c      	cmp	r3, #12
 800675e:	d855      	bhi.n	800680c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006760:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	0800679d 	.word	0x0800679d
 800676c:	0800680d 	.word	0x0800680d
 8006770:	0800680d 	.word	0x0800680d
 8006774:	0800680d 	.word	0x0800680d
 8006778:	080067b9 	.word	0x080067b9
 800677c:	0800680d 	.word	0x0800680d
 8006780:	0800680d 	.word	0x0800680d
 8006784:	0800680d 	.word	0x0800680d
 8006788:	080067d5 	.word	0x080067d5
 800678c:	0800680d 	.word	0x0800680d
 8006790:	0800680d 	.word	0x0800680d
 8006794:	0800680d 	.word	0x0800680d
 8006798:	080067f1 	.word	0x080067f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fc fc82 	bl	80030ba <HAL_DMA_Abort_IT>
      break;
 80067b6:	e02c      	b.n	8006812 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fc fc74 	bl	80030ba <HAL_DMA_Abort_IT>
      break;
 80067d2:	e01e      	b.n	8006812 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fc fc66 	bl	80030ba <HAL_DMA_Abort_IT>
      break;
 80067ee:	e010      	b.n	8006812 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	4618      	mov	r0, r3
 8006806:	f7fc fc58 	bl	80030ba <HAL_DMA_Abort_IT>
      break;
 800680a:	e002      	b.n	8006812 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
      break;
 8006810:	bf00      	nop
  }

  if (status == HAL_OK)
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f040 8081 	bne.w	800691c <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f001 f92e 	bl	8007a84 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a3e      	ldr	r2, [pc, #248]	; (8006928 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3d      	ldr	r2, [pc, #244]	; (800692c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00e      	beq.n	800685a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a3b      	ldr	r2, [pc, #236]	; (8006930 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d009      	beq.n	800685a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3a      	ldr	r2, [pc, #232]	; (8006934 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a38      	ldr	r2, [pc, #224]	; (8006938 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d101      	bne.n	800685e <HAL_TIM_PWM_Stop_DMA+0x112>
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <HAL_TIM_PWM_Stop_DMA+0x114>
 800685e:	2300      	movs	r3, #0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d017      	beq.n	8006894 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6a1a      	ldr	r2, [r3, #32]
 800686a:	f241 1311 	movw	r3, #4369	; 0x1111
 800686e:	4013      	ands	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10f      	bne.n	8006894 <HAL_TIM_PWM_Stop_DMA+0x148>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6a1a      	ldr	r2, [r3, #32]
 800687a:	f244 4344 	movw	r3, #17476	; 0x4444
 800687e:	4013      	ands	r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d107      	bne.n	8006894 <HAL_TIM_PWM_Stop_DMA+0x148>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a1a      	ldr	r2, [r3, #32]
 800689a:	f241 1311 	movw	r3, #4369	; 0x1111
 800689e:	4013      	ands	r3, r2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10f      	bne.n	80068c4 <HAL_TIM_PWM_Stop_DMA+0x178>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	f244 4344 	movw	r3, #17476	; 0x4444
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d107      	bne.n	80068c4 <HAL_TIM_PWM_Stop_DMA+0x178>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <HAL_TIM_PWM_Stop_DMA+0x188>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d2:	e023      	b.n	800691c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d104      	bne.n	80068e4 <HAL_TIM_PWM_Stop_DMA+0x198>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e2:	e01b      	b.n	800691c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d104      	bne.n	80068f4 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f2:	e013      	b.n	800691c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b0c      	cmp	r3, #12
 80068f8:	d104      	bne.n	8006904 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006902:	e00b      	b.n	800691c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b10      	cmp	r3, #16
 8006908:	d104      	bne.n	8006914 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006912:	e003      	b.n	800691c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40013400 	.word	0x40013400
 8006930:	40014000 	.word	0x40014000
 8006934:	40014400 	.word	0x40014400
 8006938:	40014800 	.word	0x40014800

0800693c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d020      	beq.n	80069a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01b      	beq.n	80069a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0202 	mvn.w	r2, #2
 8006970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fb4a 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 800698c:	e005      	b.n	800699a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fb3c 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fb4d 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d020      	beq.n	80069ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01b      	beq.n	80069ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f06f 0204 	mvn.w	r2, #4
 80069bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fb24 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 80069d8:	e005      	b.n	80069e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fb16 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fb27 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d020      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01b      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0208 	mvn.w	r2, #8
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fafe 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 faf0 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fb01 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d020      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01b      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0210 	mvn.w	r2, #16
 8006a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2208      	movs	r2, #8
 8006a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fad8 	bl	8007020 <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 faca 	bl	800700c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fadb 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0201 	mvn.w	r2, #1
 8006aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 faa8 	bl	8006ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00c      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f915 	bl	8007d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00c      	beq.n	8006afa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 f90d 	bl	8007d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00c      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fa9f 	bl	800705c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00c      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f06f 0220 	mvn.w	r2, #32
 8006b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 f8d5 	bl	8007cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f8e1 	bl	8007d28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f8d9 	bl	8007d3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00c      	beq.n	8006bae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 f8d1 	bl	8007d50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00c      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f8c9 	bl	8007d64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	e0ff      	b.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b14      	cmp	r3, #20
 8006c06:	f200 80f0 	bhi.w	8006dea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c65 	.word	0x08006c65
 8006c14:	08006deb 	.word	0x08006deb
 8006c18:	08006deb 	.word	0x08006deb
 8006c1c:	08006deb 	.word	0x08006deb
 8006c20:	08006ca5 	.word	0x08006ca5
 8006c24:	08006deb 	.word	0x08006deb
 8006c28:	08006deb 	.word	0x08006deb
 8006c2c:	08006deb 	.word	0x08006deb
 8006c30:	08006ce7 	.word	0x08006ce7
 8006c34:	08006deb 	.word	0x08006deb
 8006c38:	08006deb 	.word	0x08006deb
 8006c3c:	08006deb 	.word	0x08006deb
 8006c40:	08006d27 	.word	0x08006d27
 8006c44:	08006deb 	.word	0x08006deb
 8006c48:	08006deb 	.word	0x08006deb
 8006c4c:	08006deb 	.word	0x08006deb
 8006c50:	08006d69 	.word	0x08006d69
 8006c54:	08006deb 	.word	0x08006deb
 8006c58:	08006deb 	.word	0x08006deb
 8006c5c:	08006deb 	.word	0x08006deb
 8006c60:	08006da9 	.word	0x08006da9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fb78 	bl	8007360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0208 	orr.w	r2, r2, #8
 8006c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0204 	bic.w	r2, r2, #4
 8006c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6999      	ldr	r1, [r3, #24]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	619a      	str	r2, [r3, #24]
      break;
 8006ca2:	e0a5      	b.n	8006df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fbe8 	bl	8007480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6999      	ldr	r1, [r3, #24]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	021a      	lsls	r2, r3, #8
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	619a      	str	r2, [r3, #24]
      break;
 8006ce4:	e084      	b.n	8006df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fc51 	bl	8007594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69da      	ldr	r2, [r3, #28]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0208 	orr.w	r2, r2, #8
 8006d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0204 	bic.w	r2, r2, #4
 8006d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69d9      	ldr	r1, [r3, #28]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	61da      	str	r2, [r3, #28]
      break;
 8006d24:	e064      	b.n	8006df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fcb9 	bl	80076a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69da      	ldr	r2, [r3, #28]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69d9      	ldr	r1, [r3, #28]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	021a      	lsls	r2, r3, #8
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	61da      	str	r2, [r3, #28]
      break;
 8006d66:	e043      	b.n	8006df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fd22 	bl	80077b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0208 	orr.w	r2, r2, #8
 8006d82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0204 	bic.w	r2, r2, #4
 8006d92:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006da6:	e023      	b.n	8006df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fd66 	bl	8007880 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	021a      	lsls	r2, r3, #8
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006de8:	e002      	b.n	8006df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
      break;
 8006dee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop

08006e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIM_ConfigClockSource+0x1c>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e0de      	b.n	8006fde <HAL_TIM_ConfigClockSource+0x1da>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a63      	ldr	r2, [pc, #396]	; (8006fe8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	f000 80a9 	beq.w	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006e60:	4a61      	ldr	r2, [pc, #388]	; (8006fe8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	f200 80ae 	bhi.w	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e68:	4a60      	ldr	r2, [pc, #384]	; (8006fec <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	f000 80a1 	beq.w	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006e70:	4a5e      	ldr	r2, [pc, #376]	; (8006fec <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	f200 80a6 	bhi.w	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e78:	4a5d      	ldr	r2, [pc, #372]	; (8006ff0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	f000 8099 	beq.w	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006e80:	4a5b      	ldr	r2, [pc, #364]	; (8006ff0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f200 809e 	bhi.w	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e88:	4a5a      	ldr	r2, [pc, #360]	; (8006ff4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	f000 8091 	beq.w	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006e90:	4a58      	ldr	r2, [pc, #352]	; (8006ff4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	f200 8096 	bhi.w	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e9c:	f000 8089 	beq.w	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ea0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ea4:	f200 808e 	bhi.w	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eac:	d03e      	beq.n	8006f2c <HAL_TIM_ConfigClockSource+0x128>
 8006eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb2:	f200 8087 	bhi.w	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eba:	f000 8086 	beq.w	8006fca <HAL_TIM_ConfigClockSource+0x1c6>
 8006ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec2:	d87f      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ec4:	2b70      	cmp	r3, #112	; 0x70
 8006ec6:	d01a      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0xfa>
 8006ec8:	2b70      	cmp	r3, #112	; 0x70
 8006eca:	d87b      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ecc:	2b60      	cmp	r3, #96	; 0x60
 8006ece:	d050      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x16e>
 8006ed0:	2b60      	cmp	r3, #96	; 0x60
 8006ed2:	d877      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ed4:	2b50      	cmp	r3, #80	; 0x50
 8006ed6:	d03c      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x14e>
 8006ed8:	2b50      	cmp	r3, #80	; 0x50
 8006eda:	d873      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d058      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0x18e>
 8006ee0:	2b40      	cmp	r3, #64	; 0x40
 8006ee2:	d86f      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ee4:	2b30      	cmp	r3, #48	; 0x30
 8006ee6:	d064      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ee8:	2b30      	cmp	r3, #48	; 0x30
 8006eea:	d86b      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d060      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ef0:	2b20      	cmp	r3, #32
 8006ef2:	d867      	bhi.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d05c      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d05a      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006efc:	e062      	b.n	8006fc4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f0e:	f000 fd99 	bl	8007a44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	609a      	str	r2, [r3, #8]
      break;
 8006f2a:	e04f      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f3c:	f000 fd82 	bl	8007a44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f4e:	609a      	str	r2, [r3, #8]
      break;
 8006f50:	e03c      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f000 fcf4 	bl	800794c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2150      	movs	r1, #80	; 0x50
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fd4d 	bl	8007a0a <TIM_ITRx_SetConfig>
      break;
 8006f70:	e02c      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f000 fd13 	bl	80079aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2160      	movs	r1, #96	; 0x60
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fd3d 	bl	8007a0a <TIM_ITRx_SetConfig>
      break;
 8006f90:	e01c      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f000 fcd4 	bl	800794c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2140      	movs	r1, #64	; 0x40
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fd2d 	bl	8007a0a <TIM_ITRx_SetConfig>
      break;
 8006fb0:	e00c      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	f000 fd24 	bl	8007a0a <TIM_ITRx_SetConfig>
      break;
 8006fc2:	e003      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc8:	e000      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	00100070 	.word	0x00100070
 8006fec:	00100040 	.word	0x00100040
 8006ff0:	00100030 	.word	0x00100030
 8006ff4:	00100020 	.word	0x00100020

08006ff8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d107      	bne.n	80070ac <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2201      	movs	r2, #1
 80070a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070aa:	e02a      	b.n	8007102 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d107      	bne.n	80070c6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2202      	movs	r2, #2
 80070ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c4:	e01d      	b.n	8007102 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d107      	bne.n	80070e0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2204      	movs	r2, #4
 80070d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070de:	e010      	b.n	8007102 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d107      	bne.n	80070fa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2208      	movs	r2, #8
 80070ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070f8:	e003      	b.n	8007102 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff ffb4 	bl	8007070 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	771a      	strb	r2, [r3, #28]
}
 800710e:	bf00      	nop
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	429a      	cmp	r2, r3
 800712c:	d10b      	bne.n	8007146 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d136      	bne.n	80071aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007144:	e031      	b.n	80071aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	429a      	cmp	r2, r3
 800714e:	d10b      	bne.n	8007168 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2202      	movs	r2, #2
 8007154:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d125      	bne.n	80071aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007166:	e020      	b.n	80071aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	429a      	cmp	r2, r3
 8007170:	d10b      	bne.n	800718a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2204      	movs	r2, #4
 8007176:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d114      	bne.n	80071aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007188:	e00f      	b.n	80071aa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d10a      	bne.n	80071aa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2208      	movs	r2, #8
 8007198:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff ff42 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	771a      	strb	r2, [r3, #28]
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d103      	bne.n	80071de <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	771a      	strb	r2, [r3, #28]
 80071dc:	e019      	b.n	8007212 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d103      	bne.n	80071f0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2202      	movs	r2, #2
 80071ec:	771a      	strb	r2, [r3, #28]
 80071ee:	e010      	b.n	8007212 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d103      	bne.n	8007202 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2204      	movs	r2, #4
 80071fe:	771a      	strb	r2, [r3, #28]
 8007200:	e007      	b.n	8007212 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	d102      	bne.n	8007212 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2208      	movs	r2, #8
 8007210:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7ff ff18 	bl	8007048 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]
}
 800721e:	bf00      	nop
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a42      	ldr	r2, [pc, #264]	; (8007344 <TIM_Base_SetConfig+0x11c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00f      	beq.n	8007260 <TIM_Base_SetConfig+0x38>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007246:	d00b      	beq.n	8007260 <TIM_Base_SetConfig+0x38>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a3f      	ldr	r2, [pc, #252]	; (8007348 <TIM_Base_SetConfig+0x120>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d007      	beq.n	8007260 <TIM_Base_SetConfig+0x38>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a3e      	ldr	r2, [pc, #248]	; (800734c <TIM_Base_SetConfig+0x124>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_Base_SetConfig+0x38>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a3d      	ldr	r2, [pc, #244]	; (8007350 <TIM_Base_SetConfig+0x128>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d108      	bne.n	8007272 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a33      	ldr	r2, [pc, #204]	; (8007344 <TIM_Base_SetConfig+0x11c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01b      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007280:	d017      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a30      	ldr	r2, [pc, #192]	; (8007348 <TIM_Base_SetConfig+0x120>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2f      	ldr	r2, [pc, #188]	; (800734c <TIM_Base_SetConfig+0x124>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00f      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a2e      	ldr	r2, [pc, #184]	; (8007350 <TIM_Base_SetConfig+0x128>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00b      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2d      	ldr	r2, [pc, #180]	; (8007354 <TIM_Base_SetConfig+0x12c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a2c      	ldr	r2, [pc, #176]	; (8007358 <TIM_Base_SetConfig+0x130>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_Base_SetConfig+0x8a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a2b      	ldr	r2, [pc, #172]	; (800735c <TIM_Base_SetConfig+0x134>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d108      	bne.n	80072c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a16      	ldr	r2, [pc, #88]	; (8007344 <TIM_Base_SetConfig+0x11c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00f      	beq.n	8007310 <TIM_Base_SetConfig+0xe8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a17      	ldr	r2, [pc, #92]	; (8007350 <TIM_Base_SetConfig+0x128>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00b      	beq.n	8007310 <TIM_Base_SetConfig+0xe8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a16      	ldr	r2, [pc, #88]	; (8007354 <TIM_Base_SetConfig+0x12c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d007      	beq.n	8007310 <TIM_Base_SetConfig+0xe8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a15      	ldr	r2, [pc, #84]	; (8007358 <TIM_Base_SetConfig+0x130>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d003      	beq.n	8007310 <TIM_Base_SetConfig+0xe8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a14      	ldr	r2, [pc, #80]	; (800735c <TIM_Base_SetConfig+0x134>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d103      	bne.n	8007318 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d105      	bne.n	8007336 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f023 0201 	bic.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	611a      	str	r2, [r3, #16]
  }
}
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	40012c00 	.word	0x40012c00
 8007348:	40000400 	.word	0x40000400
 800734c:	40000800 	.word	0x40000800
 8007350:	40013400 	.word	0x40013400
 8007354:	40014000 	.word	0x40014000
 8007358:	40014400 	.word	0x40014400
 800735c:	40014800 	.word	0x40014800

08007360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f023 0201 	bic.w	r2, r3, #1
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0303 	bic.w	r3, r3, #3
 800739a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f023 0302 	bic.w	r3, r3, #2
 80073ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a2c      	ldr	r2, [pc, #176]	; (800746c <TIM_OC1_SetConfig+0x10c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00f      	beq.n	80073e0 <TIM_OC1_SetConfig+0x80>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a2b      	ldr	r2, [pc, #172]	; (8007470 <TIM_OC1_SetConfig+0x110>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00b      	beq.n	80073e0 <TIM_OC1_SetConfig+0x80>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a2a      	ldr	r2, [pc, #168]	; (8007474 <TIM_OC1_SetConfig+0x114>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d007      	beq.n	80073e0 <TIM_OC1_SetConfig+0x80>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a29      	ldr	r2, [pc, #164]	; (8007478 <TIM_OC1_SetConfig+0x118>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC1_SetConfig+0x80>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a28      	ldr	r2, [pc, #160]	; (800747c <TIM_OC1_SetConfig+0x11c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10c      	bne.n	80073fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0308 	bic.w	r3, r3, #8
 80073e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f023 0304 	bic.w	r3, r3, #4
 80073f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1b      	ldr	r2, [pc, #108]	; (800746c <TIM_OC1_SetConfig+0x10c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00f      	beq.n	8007422 <TIM_OC1_SetConfig+0xc2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a1a      	ldr	r2, [pc, #104]	; (8007470 <TIM_OC1_SetConfig+0x110>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00b      	beq.n	8007422 <TIM_OC1_SetConfig+0xc2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a19      	ldr	r2, [pc, #100]	; (8007474 <TIM_OC1_SetConfig+0x114>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d007      	beq.n	8007422 <TIM_OC1_SetConfig+0xc2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a18      	ldr	r2, [pc, #96]	; (8007478 <TIM_OC1_SetConfig+0x118>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_OC1_SetConfig+0xc2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a17      	ldr	r2, [pc, #92]	; (800747c <TIM_OC1_SetConfig+0x11c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d111      	bne.n	8007446 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	621a      	str	r2, [r3, #32]
}
 8007460:	bf00      	nop
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	40012c00 	.word	0x40012c00
 8007470:	40013400 	.word	0x40013400
 8007474:	40014000 	.word	0x40014000
 8007478:	40014400 	.word	0x40014400
 800747c:	40014800 	.word	0x40014800

08007480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f023 0210 	bic.w	r2, r3, #16
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f023 0320 	bic.w	r3, r3, #32
 80074ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a28      	ldr	r2, [pc, #160]	; (8007580 <TIM_OC2_SetConfig+0x100>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC2_SetConfig+0x6c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a27      	ldr	r2, [pc, #156]	; (8007584 <TIM_OC2_SetConfig+0x104>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d10d      	bne.n	8007508 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	011b      	lsls	r3, r3, #4
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007506:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <TIM_OC2_SetConfig+0x100>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00f      	beq.n	8007530 <TIM_OC2_SetConfig+0xb0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <TIM_OC2_SetConfig+0x104>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00b      	beq.n	8007530 <TIM_OC2_SetConfig+0xb0>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a1b      	ldr	r2, [pc, #108]	; (8007588 <TIM_OC2_SetConfig+0x108>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d007      	beq.n	8007530 <TIM_OC2_SetConfig+0xb0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a1a      	ldr	r2, [pc, #104]	; (800758c <TIM_OC2_SetConfig+0x10c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d003      	beq.n	8007530 <TIM_OC2_SetConfig+0xb0>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a19      	ldr	r2, [pc, #100]	; (8007590 <TIM_OC2_SetConfig+0x110>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d113      	bne.n	8007558 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800753e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00
 8007584:	40013400 	.word	0x40013400
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800

08007594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0303 	bic.w	r3, r3, #3
 80075ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a27      	ldr	r2, [pc, #156]	; (8007690 <TIM_OC3_SetConfig+0xfc>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d003      	beq.n	80075fe <TIM_OC3_SetConfig+0x6a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a26      	ldr	r2, [pc, #152]	; (8007694 <TIM_OC3_SetConfig+0x100>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d10d      	bne.n	800761a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1c      	ldr	r2, [pc, #112]	; (8007690 <TIM_OC3_SetConfig+0xfc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00f      	beq.n	8007642 <TIM_OC3_SetConfig+0xae>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <TIM_OC3_SetConfig+0x100>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00b      	beq.n	8007642 <TIM_OC3_SetConfig+0xae>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a1a      	ldr	r2, [pc, #104]	; (8007698 <TIM_OC3_SetConfig+0x104>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d007      	beq.n	8007642 <TIM_OC3_SetConfig+0xae>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a19      	ldr	r2, [pc, #100]	; (800769c <TIM_OC3_SetConfig+0x108>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d003      	beq.n	8007642 <TIM_OC3_SetConfig+0xae>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a18      	ldr	r2, [pc, #96]	; (80076a0 <TIM_OC3_SetConfig+0x10c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d113      	bne.n	800766a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	621a      	str	r2, [r3, #32]
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	40012c00 	.word	0x40012c00
 8007694:	40013400 	.word	0x40013400
 8007698:	40014000 	.word	0x40014000
 800769c:	40014400 	.word	0x40014400
 80076a0:	40014800 	.word	0x40014800

080076a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	031b      	lsls	r3, r3, #12
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a28      	ldr	r2, [pc, #160]	; (80077a4 <TIM_OC4_SetConfig+0x100>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_OC4_SetConfig+0x6c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a27      	ldr	r2, [pc, #156]	; (80077a8 <TIM_OC4_SetConfig+0x104>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10d      	bne.n	800772c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	031b      	lsls	r3, r3, #12
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800772a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <TIM_OC4_SetConfig+0x100>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00f      	beq.n	8007754 <TIM_OC4_SetConfig+0xb0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a1c      	ldr	r2, [pc, #112]	; (80077a8 <TIM_OC4_SetConfig+0x104>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00b      	beq.n	8007754 <TIM_OC4_SetConfig+0xb0>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a1b      	ldr	r2, [pc, #108]	; (80077ac <TIM_OC4_SetConfig+0x108>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d007      	beq.n	8007754 <TIM_OC4_SetConfig+0xb0>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a1a      	ldr	r2, [pc, #104]	; (80077b0 <TIM_OC4_SetConfig+0x10c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d003      	beq.n	8007754 <TIM_OC4_SetConfig+0xb0>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a19      	ldr	r2, [pc, #100]	; (80077b4 <TIM_OC4_SetConfig+0x110>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d113      	bne.n	800777c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800775a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007762:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	019b      	lsls	r3, r3, #6
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	019b      	lsls	r3, r3, #6
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	621a      	str	r2, [r3, #32]
}
 8007796:	bf00      	nop
 8007798:	371c      	adds	r7, #28
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	40012c00 	.word	0x40012c00
 80077a8:	40013400 	.word	0x40013400
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40014400 	.word	0x40014400
 80077b4:	40014800 	.word	0x40014800

080077b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a17      	ldr	r2, [pc, #92]	; (800786c <TIM_OC5_SetConfig+0xb4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00f      	beq.n	8007832 <TIM_OC5_SetConfig+0x7a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a16      	ldr	r2, [pc, #88]	; (8007870 <TIM_OC5_SetConfig+0xb8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00b      	beq.n	8007832 <TIM_OC5_SetConfig+0x7a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a15      	ldr	r2, [pc, #84]	; (8007874 <TIM_OC5_SetConfig+0xbc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d007      	beq.n	8007832 <TIM_OC5_SetConfig+0x7a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a14      	ldr	r2, [pc, #80]	; (8007878 <TIM_OC5_SetConfig+0xc0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_OC5_SetConfig+0x7a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a13      	ldr	r2, [pc, #76]	; (800787c <TIM_OC5_SetConfig+0xc4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d109      	bne.n	8007846 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007838:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	621a      	str	r2, [r3, #32]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	40012c00 	.word	0x40012c00
 8007870:	40013400 	.word	0x40013400
 8007874:	40014000 	.word	0x40014000
 8007878:	40014400 	.word	0x40014400
 800787c:	40014800 	.word	0x40014800

08007880 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	021b      	lsls	r3, r3, #8
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	051b      	lsls	r3, r3, #20
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a18      	ldr	r2, [pc, #96]	; (8007938 <TIM_OC6_SetConfig+0xb8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00f      	beq.n	80078fc <TIM_OC6_SetConfig+0x7c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a17      	ldr	r2, [pc, #92]	; (800793c <TIM_OC6_SetConfig+0xbc>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00b      	beq.n	80078fc <TIM_OC6_SetConfig+0x7c>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a16      	ldr	r2, [pc, #88]	; (8007940 <TIM_OC6_SetConfig+0xc0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d007      	beq.n	80078fc <TIM_OC6_SetConfig+0x7c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a15      	ldr	r2, [pc, #84]	; (8007944 <TIM_OC6_SetConfig+0xc4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d003      	beq.n	80078fc <TIM_OC6_SetConfig+0x7c>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a14      	ldr	r2, [pc, #80]	; (8007948 <TIM_OC6_SetConfig+0xc8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d109      	bne.n	8007910 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007902:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	029b      	lsls	r3, r3, #10
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40012c00 	.word	0x40012c00
 800793c:	40013400 	.word	0x40013400
 8007940:	40014000 	.word	0x40014000
 8007944:	40014400 	.word	0x40014400
 8007948:	40014800 	.word	0x40014800

0800794c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	f023 0201 	bic.w	r2, r3, #1
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f023 030a 	bic.w	r3, r3, #10
 8007988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	621a      	str	r2, [r3, #32]
}
 800799e:	bf00      	nop
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b087      	sub	sp, #28
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f023 0210 	bic.w	r2, r3, #16
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	031b      	lsls	r3, r3, #12
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f043 0307 	orr.w	r3, r3, #7
 8007a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	609a      	str	r2, [r3, #8]
}
 8007a38:	bf00      	nop
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	021a      	lsls	r2, r3, #8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	609a      	str	r2, [r3, #8]
}
 8007a78:	bf00      	nop
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b087      	sub	sp, #28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	2201      	movs	r2, #1
 8007a98:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a1a      	ldr	r2, [r3, #32]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	401a      	ands	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a1a      	ldr	r2, [r3, #32]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8007abc:	431a      	orrs	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	621a      	str	r2, [r3, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
	...

08007ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e065      	b.n	8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a2c      	ldr	r2, [pc, #176]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a2b      	ldr	r2, [pc, #172]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d108      	bne.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a1b      	ldr	r2, [pc, #108]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d018      	beq.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5e:	d013      	beq.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a18      	ldr	r2, [pc, #96]	; (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00e      	beq.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a17      	ldr	r2, [pc, #92]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d009      	beq.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a12      	ldr	r2, [pc, #72]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a13      	ldr	r2, [pc, #76]	; (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d10c      	bne.n	8007ba2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	40012c00 	.word	0x40012c00
 8007bc4:	40013400 	.word	0x40013400
 8007bc8:	40000400 	.word	0x40000400
 8007bcc:	40000800 	.word	0x40000800
 8007bd0:	40014000 	.word	0x40014000

08007bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e073      	b.n	8007cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a19      	ldr	r2, [pc, #100]	; (8007ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d004      	beq.n	8007c8c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d11c      	bne.n	8007cc6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c96:	051b      	lsls	r3, r3, #20
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40013400 	.word	0x40013400

08007cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d88:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007d8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007dae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007db2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b09d      	sub	sp, #116	; 0x74
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	78db      	ldrb	r3, [r3, #3]
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d81f      	bhi.n	8007e8a <USB_ActivateEndpoint+0x72>
 8007e4a:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <USB_ActivateEndpoint+0x38>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e7d 	.word	0x08007e7d
 8007e58:	08007e93 	.word	0x08007e93
 8007e5c:	08007e6f 	.word	0x08007e6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007e6c:	e012      	b.n	8007e94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007e72:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007e76:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007e7a:	e00b      	b.n	8007e94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007e80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007e88:	e004      	b.n	8007e94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007e90:	e000      	b.n	8007e94 <USB_ActivateEndpoint+0x7c>
      break;
 8007e92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	b21b      	sxth	r3, r3
 8007ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	b21a      	sxth	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b21b      	sxth	r3, r3
 8007eda:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	441a      	add	r2, r3
 8007ee8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	7b1b      	ldrb	r3, [r3, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f040 8178 	bne.w	80081fa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	785b      	ldrb	r3, [r3, #1]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8084 	beq.w	800801c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	4413      	add	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	00da      	lsls	r2, r3, #3
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	88db      	ldrh	r3, [r3, #6]
 8007f3c:	085b      	lsrs	r3, r3, #1
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	827b      	strh	r3, [r7, #18]
 8007f56:	8a7b      	ldrh	r3, [r7, #18]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01b      	beq.n	8007f98 <USB_ActivateEndpoint+0x180>
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f76:	823b      	strh	r3, [r7, #16]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	441a      	add	r2, r3
 8007f82:	8a3b      	ldrh	r3, [r7, #16]
 8007f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	78db      	ldrb	r3, [r3, #3]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d020      	beq.n	8007fe2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fb6:	81bb      	strh	r3, [r7, #12]
 8007fb8:	89bb      	ldrh	r3, [r7, #12]
 8007fba:	f083 0320 	eor.w	r3, r3, #32
 8007fbe:	81bb      	strh	r3, [r7, #12]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	441a      	add	r2, r3
 8007fca:	89bb      	ldrh	r3, [r7, #12]
 8007fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	8013      	strh	r3, [r2, #0]
 8007fe0:	e2d5      	b.n	800858e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ff8:	81fb      	strh	r3, [r7, #14]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	b29b      	uxth	r3, r3
 8008018:	8013      	strh	r3, [r2, #0]
 800801a:	e2b8      	b.n	800858e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	633b      	str	r3, [r7, #48]	; 0x30
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008026:	b29b      	uxth	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	4413      	add	r3, r2
 800802e:	633b      	str	r3, [r7, #48]	; 0x30
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	00da      	lsls	r2, r3, #3
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	4413      	add	r3, r2
 800803a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	88db      	ldrh	r3, [r3, #6]
 8008044:	085b      	lsrs	r3, r3, #1
 8008046:	b29b      	uxth	r3, r3
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800805a:	b29b      	uxth	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	4413      	add	r3, r2
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	00da      	lsls	r2, r3, #3
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806c:	4413      	add	r3, r2
 800806e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008072:	627b      	str	r3, [r7, #36]	; 0x24
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800807e:	b29a      	uxth	r2, r3
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b3e      	cmp	r3, #62	; 0x3e
 800808a:	d91d      	bls.n	80080c8 <USB_ActivateEndpoint+0x2b0>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	095b      	lsrs	r3, r3, #5
 8008092:	66bb      	str	r3, [r7, #104]	; 0x68
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f003 031f 	and.w	r3, r3, #31
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <USB_ActivateEndpoint+0x28e>
 80080a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080a2:	3b01      	subs	r3, #1
 80080a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	029b      	lsls	r3, r3, #10
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4313      	orrs	r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	801a      	strh	r2, [r3, #0]
 80080c6:	e026      	b.n	8008116 <USB_ActivateEndpoint+0x2fe>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <USB_ActivateEndpoint+0x2ce>
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080de:	b29a      	uxth	r2, r3
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	801a      	strh	r2, [r3, #0]
 80080e4:	e017      	b.n	8008116 <USB_ActivateEndpoint+0x2fe>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <USB_ActivateEndpoint+0x2e8>
 80080fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080fc:	3301      	adds	r3, #1
 80080fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29a      	uxth	r2, r3
 8008106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008108:	b29b      	uxth	r3, r3
 800810a:	029b      	lsls	r3, r3, #10
 800810c:	b29b      	uxth	r3, r3
 800810e:	4313      	orrs	r3, r2
 8008110:	b29a      	uxth	r2, r3
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	847b      	strh	r3, [r7, #34]	; 0x22
 8008124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01b      	beq.n	8008166 <USB_ActivateEndpoint+0x34e>
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4413      	add	r3, r2
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b29b      	uxth	r3, r3
 800813c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008144:	843b      	strh	r3, [r7, #32]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	441a      	add	r2, r3
 8008150:	8c3b      	ldrh	r3, [r7, #32]
 8008152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800815a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800815e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008162:	b29b      	uxth	r3, r3
 8008164:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d124      	bne.n	80081b8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008184:	83bb      	strh	r3, [r7, #28]
 8008186:	8bbb      	ldrh	r3, [r7, #28]
 8008188:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800818c:	83bb      	strh	r3, [r7, #28]
 800818e:	8bbb      	ldrh	r3, [r7, #28]
 8008190:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008194:	83bb      	strh	r3, [r7, #28]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	441a      	add	r2, r3
 80081a0:	8bbb      	ldrh	r3, [r7, #28]
 80081a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	8013      	strh	r3, [r2, #0]
 80081b6:	e1ea      	b.n	800858e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	83fb      	strh	r3, [r7, #30]
 80081d0:	8bfb      	ldrh	r3, [r7, #30]
 80081d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081d6:	83fb      	strh	r3, [r7, #30]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	441a      	add	r2, r3
 80081e2:	8bfb      	ldrh	r3, [r7, #30]
 80081e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	8013      	strh	r3, [r2, #0]
 80081f8:	e1c9      	b.n	800858e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	78db      	ldrb	r3, [r3, #3]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d11e      	bne.n	8008240 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008218:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	441a      	add	r2, r3
 8008226:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800822a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008232:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823a:	b29b      	uxth	r3, r3
 800823c:	8013      	strh	r3, [r2, #0]
 800823e:	e01d      	b.n	800827c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008256:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	441a      	add	r2, r3
 8008264:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800826c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008278:	b29b      	uxth	r3, r3
 800827a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800828c:	4413      	add	r3, r2
 800828e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	00da      	lsls	r2, r3, #3
 8008296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008298:	4413      	add	r3, r2
 800829a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800829e:	65bb      	str	r3, [r7, #88]	; 0x58
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	891b      	ldrh	r3, [r3, #8]
 80082a4:	085b      	lsrs	r3, r3, #1
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	657b      	str	r3, [r7, #84]	; 0x54
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	461a      	mov	r2, r3
 80082be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c0:	4413      	add	r3, r2
 80082c2:	657b      	str	r3, [r7, #84]	; 0x54
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	00da      	lsls	r2, r3, #3
 80082ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082cc:	4413      	add	r3, r2
 80082ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082d2:	653b      	str	r3, [r7, #80]	; 0x50
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	895b      	ldrh	r3, [r3, #10]
 80082d8:	085b      	lsrs	r3, r3, #1
 80082da:	b29b      	uxth	r3, r3
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	b29a      	uxth	r2, r3
 80082e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f040 8093 	bne.w	8008414 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80082fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01b      	beq.n	8008342 <USB_ActivateEndpoint+0x52a>
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008320:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	441a      	add	r2, r3
 800832c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800833a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008350:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01b      	beq.n	8008392 <USB_ActivateEndpoint+0x57a>
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800836c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008370:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	441a      	add	r2, r3
 800837c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800837e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80083aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80083ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80083b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80083b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	441a      	add	r2, r3
 80083c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	441a      	add	r2, r3
 80083fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840e:	b29b      	uxth	r3, r3
 8008410:	8013      	strh	r3, [r2, #0]
 8008412:	e0bc      	b.n	800858e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01d      	beq.n	800846c <USB_ActivateEndpoint+0x654>
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	b29b      	uxth	r3, r3
 800843e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	441a      	add	r2, r3
 8008454:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800845c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008468:	b29b      	uxth	r3, r3
 800846a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800847c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01d      	beq.n	80084c4 <USB_ActivateEndpoint+0x6ac>
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	441a      	add	r2, r3
 80084ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80084b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	78db      	ldrb	r3, [r3, #3]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d024      	beq.n	8008516 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80084e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80084ea:	f083 0320 	eor.w	r3, r3, #32
 80084ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	441a      	add	r2, r3
 80084fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800850c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008510:	b29b      	uxth	r3, r3
 8008512:	8013      	strh	r3, [r2, #0]
 8008514:	e01d      	b.n	8008552 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800852c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	441a      	add	r2, r3
 800853a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800853e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854e:	b29b      	uxth	r3, r3
 8008550:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008568:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	441a      	add	r2, r3
 8008576:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800857a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800857e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858a:	b29b      	uxth	r3, r3
 800858c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800858e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008592:	4618      	mov	r0, r3
 8008594:	3774      	adds	r7, #116	; 0x74
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop

080085a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b08d      	sub	sp, #52	; 0x34
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	7b1b      	ldrb	r3, [r3, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 808e 	bne.w	80086d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d044      	beq.n	8008646 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	81bb      	strh	r3, [r7, #12]
 80085ca:	89bb      	ldrh	r3, [r7, #12]
 80085cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01b      	beq.n	800860c <USB_DeactivateEndpoint+0x6c>
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	817b      	strh	r3, [r7, #10]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	897b      	ldrh	r3, [r7, #10]
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	b29b      	uxth	r3, r3
 800861a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008622:	813b      	strh	r3, [r7, #8]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	441a      	add	r2, r3
 800862e:	893b      	ldrh	r3, [r7, #8]
 8008630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008640:	b29b      	uxth	r3, r3
 8008642:	8013      	strh	r3, [r2, #0]
 8008644:	e192      	b.n	800896c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	827b      	strh	r3, [r7, #18]
 8008654:	8a7b      	ldrh	r3, [r7, #18]
 8008656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01b      	beq.n	8008696 <USB_DeactivateEndpoint+0xf6>
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	881b      	ldrh	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008674:	823b      	strh	r3, [r7, #16]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	441a      	add	r2, r3
 8008680:	8a3b      	ldrh	r3, [r7, #16]
 8008682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800868a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800868e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008692:	b29b      	uxth	r3, r3
 8008694:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ac:	81fb      	strh	r3, [r7, #14]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	441a      	add	r2, r3
 80086b8:	89fb      	ldrh	r3, [r7, #14]
 80086ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	8013      	strh	r3, [r2, #0]
 80086ce:	e14d      	b.n	800896c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 80a5 	bne.w	8008824 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	843b      	strh	r3, [r7, #32]
 80086e8:	8c3b      	ldrh	r3, [r7, #32]
 80086ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d01b      	beq.n	800872a <USB_DeactivateEndpoint+0x18a>
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008708:	83fb      	strh	r3, [r7, #30]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	441a      	add	r2, r3
 8008714:	8bfb      	ldrh	r3, [r7, #30]
 8008716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800871a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800871e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008726:	b29b      	uxth	r3, r3
 8008728:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	83bb      	strh	r3, [r7, #28]
 8008738:	8bbb      	ldrh	r3, [r7, #28]
 800873a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d01b      	beq.n	800877a <USB_DeactivateEndpoint+0x1da>
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008758:	837b      	strh	r3, [r7, #26]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	441a      	add	r2, r3
 8008764:	8b7b      	ldrh	r3, [r7, #26]
 8008766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800876a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800876e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008776:	b29b      	uxth	r3, r3
 8008778:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008790:	833b      	strh	r3, [r7, #24]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	441a      	add	r2, r3
 800879c:	8b3b      	ldrh	r3, [r7, #24]
 800879e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c8:	82fb      	strh	r3, [r7, #22]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	441a      	add	r2, r3
 80087d4:	8afb      	ldrh	r3, [r7, #22]
 80087d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008800:	82bb      	strh	r3, [r7, #20]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	441a      	add	r2, r3
 800880c:	8abb      	ldrh	r3, [r7, #20]
 800880e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800881a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881e:	b29b      	uxth	r3, r3
 8008820:	8013      	strh	r3, [r2, #0]
 8008822:	e0a3      	b.n	800896c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008832:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01b      	beq.n	8008874 <USB_DeactivateEndpoint+0x2d4>
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29b      	uxth	r3, r3
 800884a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008852:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	441a      	add	r2, r3
 800885e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800886c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008870:	b29b      	uxth	r3, r3
 8008872:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008882:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01b      	beq.n	80088c4 <USB_DeactivateEndpoint+0x324>
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	441a      	add	r2, r3
 80088ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088da:	84fb      	strh	r3, [r7, #38]	; 0x26
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008912:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	441a      	add	r2, r3
 800891e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800892c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008930:	b29b      	uxth	r3, r3
 8008932:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894a:	847b      	strh	r3, [r7, #34]	; 0x22
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	441a      	add	r2, r3
 8008956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008968:	b29b      	uxth	r3, r3
 800896a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3734      	adds	r7, #52	; 0x34
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b0c2      	sub	sp, #264	; 0x108
 800897e:	af00      	add	r7, sp, #0
 8008980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008988:	6018      	str	r0, [r3, #0]
 800898a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008992:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	f040 86b7 	bne.w	8009714 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80089a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699a      	ldr	r2, [r3, #24]
 80089b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d908      	bls.n	80089d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80089c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80089d2:	e007      	b.n	80089e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80089d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80089e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	7b1b      	ldrb	r3, [r3, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d13a      	bne.n	8008a6a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80089f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6959      	ldr	r1, [r3, #20]
 8008a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	88da      	ldrh	r2, [r3, #6]
 8008a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	f001 fc98 	bl	800a350 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	613b      	str	r3, [r7, #16]
 8008a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	4413      	add	r3, r2
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	00da      	lsls	r2, r3, #3
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	4413      	add	r3, r2
 8008a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	f000 be1f 	b.w	80096a8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	78db      	ldrb	r3, [r3, #3]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	f040 8462 	bne.w	8009340 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6a1a      	ldr	r2, [r3, #32]
 8008a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	f240 83df 	bls.w	8009258 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	441a      	add	r2, r3
 8008ade:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6a1a      	ldr	r2, [r3, #32]
 8008b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 81c7 	beq.w	8008eca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	633b      	str	r3, [r7, #48]	; 0x30
 8008b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d177      	bne.n	8008c48 <USB_EPStartXfer+0x2ce>
 8008b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	461a      	mov	r2, r3
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	4413      	add	r3, r2
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	00da      	lsls	r2, r3, #3
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8008baa:	d921      	bls.n	8008bf0 <USB_EPStartXfer+0x276>
 8008bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb0:	095b      	lsrs	r3, r3, #5
 8008bb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bba:	f003 031f 	and.w	r3, r3, #31
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d104      	bne.n	8008bcc <USB_EPStartXfer+0x252>
 8008bc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	029b      	lsls	r3, r3, #10
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	801a      	strh	r2, [r3, #0]
 8008bee:	e050      	b.n	8008c92 <USB_EPStartXfer+0x318>
 8008bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <USB_EPStartXfer+0x294>
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	801a      	strh	r2, [r3, #0]
 8008c0c:	e041      	b.n	8008c92 <USB_EPStartXfer+0x318>
 8008c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c12:	085b      	lsrs	r3, r3, #1
 8008c14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <USB_EPStartXfer+0x2b4>
 8008c24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	029b      	lsls	r3, r3, #10
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	801a      	strh	r2, [r3, #0]
 8008c46:	e024      	b.n	8008c92 <USB_EPStartXfer+0x318>
 8008c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	785b      	ldrb	r3, [r3, #1]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d11c      	bne.n	8008c92 <USB_EPStartXfer+0x318>
 8008c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	4413      	add	r3, r2
 8008c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8008c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	00da      	lsls	r2, r3, #3
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	4413      	add	r3, r2
 8008c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	895b      	ldrh	r3, [r3, #10]
 8008c9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6959      	ldr	r1, [r3, #20]
 8008cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cbc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008cc0:	6800      	ldr	r0, [r0, #0]
 8008cc2:	f001 fb45 	bl	800a350 <USB_WritePMA>
            ep->xfer_buff += len;
 8008cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695a      	ldr	r2, [r3, #20]
 8008cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd6:	441a      	add	r2, r3
 8008cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	6a1a      	ldr	r2, [r3, #32]
 8008cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d90f      	bls.n	8008d20 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6a1a      	ldr	r2, [r3, #32]
 8008d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d10:	1ad2      	subs	r2, r2, r3
 8008d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	621a      	str	r2, [r3, #32]
 8008d1e:	e00e      	b.n	8008d3e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	785b      	ldrb	r3, [r3, #1]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d177      	bne.n	8008e3e <USB_EPStartXfer+0x4c4>
 8008d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	4413      	add	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	00da      	lsls	r2, r3, #3
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	4413      	add	r3, r2
 8008d84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	801a      	strh	r2, [r3, #0]
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008da0:	d921      	bls.n	8008de6 <USB_EPStartXfer+0x46c>
 8008da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db0:	f003 031f 	and.w	r3, r3, #31
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d104      	bne.n	8008dc2 <USB_EPStartXfer+0x448>
 8008db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	029b      	lsls	r3, r3, #10
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	801a      	strh	r2, [r3, #0]
 8008de4:	e056      	b.n	8008e94 <USB_EPStartXfer+0x51a>
 8008de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <USB_EPStartXfer+0x48a>
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	801a      	strh	r2, [r3, #0]
 8008e02:	e047      	b.n	8008e94 <USB_EPStartXfer+0x51a>
 8008e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e08:	085b      	lsrs	r3, r3, #1
 8008e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d004      	beq.n	8008e24 <USB_EPStartXfer+0x4aa>
 8008e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e1e:	3301      	adds	r3, #1
 8008e20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	e02a      	b.n	8008e94 <USB_EPStartXfer+0x51a>
 8008e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d122      	bne.n	8008e94 <USB_EPStartXfer+0x51a>
 8008e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	4413      	add	r3, r2
 8008e70:	623b      	str	r3, [r7, #32]
 8008e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	00da      	lsls	r2, r3, #3
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	4413      	add	r3, r2
 8008e84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	891b      	ldrh	r3, [r3, #8]
 8008ea0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6959      	ldr	r1, [r3, #20]
 8008eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008eba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ebe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ec2:	6800      	ldr	r0, [r0, #0]
 8008ec4:	f001 fa44 	bl	800a350 <USB_WritePMA>
 8008ec8:	e3ee      	b.n	80096a8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d177      	bne.n	8008fca <USB_EPStartXfer+0x650>
 8008eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efa:	4413      	add	r3, r2
 8008efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	00da      	lsls	r2, r3, #3
 8008f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f0e:	4413      	add	r3, r2
 8008f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f14:	647b      	str	r3, [r7, #68]	; 0x44
 8008f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f2c:	d921      	bls.n	8008f72 <USB_EPStartXfer+0x5f8>
 8008f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3c:	f003 031f 	and.w	r3, r3, #31
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <USB_EPStartXfer+0x5d4>
 8008f44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	029b      	lsls	r3, r3, #10
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e056      	b.n	8009020 <USB_EPStartXfer+0x6a6>
 8008f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10a      	bne.n	8008f90 <USB_EPStartXfer+0x616>
 8008f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f8c:	801a      	strh	r2, [r3, #0]
 8008f8e:	e047      	b.n	8009020 <USB_EPStartXfer+0x6a6>
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f94:	085b      	lsrs	r3, r3, #1
 8008f96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d004      	beq.n	8008fb0 <USB_EPStartXfer+0x636>
 8008fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008faa:	3301      	adds	r3, #1
 8008fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	029b      	lsls	r3, r3, #10
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	e02a      	b.n	8009020 <USB_EPStartXfer+0x6a6>
 8008fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d122      	bne.n	8009020 <USB_EPStartXfer+0x6a6>
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8008fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ffa:	4413      	add	r3, r2
 8008ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8008ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	00da      	lsls	r2, r3, #3
 800900c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800900e:	4413      	add	r3, r2
 8009010:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800901a:	b29a      	uxth	r2, r3
 800901c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	891b      	ldrh	r3, [r3, #8]
 800902c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6959      	ldr	r1, [r3, #20]
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009040:	b29b      	uxth	r3, r3
 8009042:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009046:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800904a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800904e:	6800      	ldr	r0, [r0, #0]
 8009050:	f001 f97e 	bl	800a350 <USB_WritePMA>
            ep->xfer_buff += len;
 8009054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	695a      	ldr	r2, [r3, #20]
 8009060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009064:	441a      	add	r2, r3
 8009066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6a1a      	ldr	r2, [r3, #32]
 800907e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	429a      	cmp	r2, r3
 800908c:	d90f      	bls.n	80090ae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800908e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	6a1a      	ldr	r2, [r3, #32]
 800909a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	621a      	str	r2, [r3, #32]
 80090ac:	e00e      	b.n	80090cc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80090ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80090be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2200      	movs	r2, #0
 80090ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	643b      	str	r3, [r7, #64]	; 0x40
 80090d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	785b      	ldrb	r3, [r3, #1]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d177      	bne.n	80091d8 <USB_EPStartXfer+0x85e>
 80090e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80090f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009102:	b29b      	uxth	r3, r3
 8009104:	461a      	mov	r2, r3
 8009106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009108:	4413      	add	r3, r2
 800910a:	63bb      	str	r3, [r7, #56]	; 0x38
 800910c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	00da      	lsls	r2, r3, #3
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	4413      	add	r3, r2
 800911e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009122:	637b      	str	r3, [r7, #52]	; 0x34
 8009124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b29b      	uxth	r3, r3
 800912a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800912e:	b29a      	uxth	r2, r3
 8009130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009132:	801a      	strh	r2, [r3, #0]
 8009134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009138:	2b3e      	cmp	r3, #62	; 0x3e
 800913a:	d921      	bls.n	8009180 <USB_EPStartXfer+0x806>
 800913c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009140:	095b      	lsrs	r3, r3, #5
 8009142:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	2b00      	cmp	r3, #0
 8009150:	d104      	bne.n	800915c <USB_EPStartXfer+0x7e2>
 8009152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009156:	3b01      	subs	r3, #1
 8009158:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800915c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	b29a      	uxth	r2, r3
 8009162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009166:	b29b      	uxth	r3, r3
 8009168:	029b      	lsls	r3, r3, #10
 800916a:	b29b      	uxth	r3, r3
 800916c:	4313      	orrs	r3, r2
 800916e:	b29b      	uxth	r3, r3
 8009170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009178:	b29a      	uxth	r2, r3
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	801a      	strh	r2, [r3, #0]
 800917e:	e050      	b.n	8009222 <USB_EPStartXfer+0x8a8>
 8009180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <USB_EPStartXfer+0x824>
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009196:	b29a      	uxth	r2, r3
 8009198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919a:	801a      	strh	r2, [r3, #0]
 800919c:	e041      	b.n	8009222 <USB_EPStartXfer+0x8a8>
 800919e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <USB_EPStartXfer+0x844>
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	3301      	adds	r3, #1
 80091ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	029b      	lsls	r3, r3, #10
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	4313      	orrs	r3, r2
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	801a      	strh	r2, [r3, #0]
 80091d6:	e024      	b.n	8009222 <USB_EPStartXfer+0x8a8>
 80091d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	785b      	ldrb	r3, [r3, #1]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d11c      	bne.n	8009222 <USB_EPStartXfer+0x8a8>
 80091e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091fc:	4413      	add	r3, r2
 80091fe:	643b      	str	r3, [r7, #64]	; 0x40
 8009200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	00da      	lsls	r2, r3, #3
 800920e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009210:	4413      	add	r3, r2
 8009212:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921c:	b29a      	uxth	r2, r3
 800921e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009220:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	895b      	ldrh	r3, [r3, #10]
 800922e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6959      	ldr	r1, [r3, #20]
 800923e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009242:	b29b      	uxth	r3, r3
 8009244:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009248:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800924c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009250:	6800      	ldr	r0, [r0, #0]
 8009252:	f001 f87d 	bl	800a350 <USB_WritePMA>
 8009256:	e227      	b.n	80096a8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	b29b      	uxth	r3, r3
 8009286:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800928a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	441a      	add	r2, r3
 80092ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80092b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80092c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092de:	b29b      	uxth	r3, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092e4:	4413      	add	r3, r2
 80092e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	00da      	lsls	r2, r3, #3
 80092f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092f8:	4413      	add	r3, r2
 80092fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009304:	b29a      	uxth	r2, r3
 8009306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009308:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800930a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	891b      	ldrh	r3, [r3, #8]
 8009316:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800931a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6959      	ldr	r1, [r3, #20]
 8009326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800932a:	b29b      	uxth	r3, r3
 800932c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009330:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009334:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009338:	6800      	ldr	r0, [r0, #0]
 800933a:	f001 f809 	bl	800a350 <USB_WritePMA>
 800933e:	e1b3      	b.n	80096a8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6a1a      	ldr	r2, [r3, #32]
 800934c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009350:	1ad2      	subs	r2, r2, r3
 8009352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800935e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800936c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80c6 	beq.w	8009512 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	673b      	str	r3, [r7, #112]	; 0x70
 8009392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	785b      	ldrb	r3, [r3, #1]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d177      	bne.n	8009492 <USB_EPStartXfer+0xb18>
 80093a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80093ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093bc:	b29b      	uxth	r3, r3
 80093be:	461a      	mov	r2, r3
 80093c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093c2:	4413      	add	r3, r2
 80093c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80093c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	00da      	lsls	r2, r3, #3
 80093d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093d6:	4413      	add	r3, r2
 80093d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093dc:	667b      	str	r3, [r7, #100]	; 0x64
 80093de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ec:	801a      	strh	r2, [r3, #0]
 80093ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f2:	2b3e      	cmp	r3, #62	; 0x3e
 80093f4:	d921      	bls.n	800943a <USB_EPStartXfer+0xac0>
 80093f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fa:	095b      	lsrs	r3, r3, #5
 80093fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009404:	f003 031f 	and.w	r3, r3, #31
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <USB_EPStartXfer+0xa9c>
 800940c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009410:	3b01      	subs	r3, #1
 8009412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	b29a      	uxth	r2, r3
 800941c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009420:	b29b      	uxth	r3, r3
 8009422:	029b      	lsls	r3, r3, #10
 8009424:	b29b      	uxth	r3, r3
 8009426:	4313      	orrs	r3, r2
 8009428:	b29b      	uxth	r3, r3
 800942a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800942e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009432:	b29a      	uxth	r2, r3
 8009434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009436:	801a      	strh	r2, [r3, #0]
 8009438:	e050      	b.n	80094dc <USB_EPStartXfer+0xb62>
 800943a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <USB_EPStartXfer+0xade>
 8009442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29b      	uxth	r3, r3
 8009448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800944c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009450:	b29a      	uxth	r2, r3
 8009452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009454:	801a      	strh	r2, [r3, #0]
 8009456:	e041      	b.n	80094dc <USB_EPStartXfer+0xb62>
 8009458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800945c:	085b      	lsrs	r3, r3, #1
 800945e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d004      	beq.n	8009478 <USB_EPStartXfer+0xafe>
 800946e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009472:	3301      	adds	r3, #1
 8009474:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	b29a      	uxth	r2, r3
 800947e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009482:	b29b      	uxth	r3, r3
 8009484:	029b      	lsls	r3, r3, #10
 8009486:	b29b      	uxth	r3, r3
 8009488:	4313      	orrs	r3, r2
 800948a:	b29a      	uxth	r2, r3
 800948c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800948e:	801a      	strh	r2, [r3, #0]
 8009490:	e024      	b.n	80094dc <USB_EPStartXfer+0xb62>
 8009492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d11c      	bne.n	80094dc <USB_EPStartXfer+0xb62>
 80094a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	461a      	mov	r2, r3
 80094b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094b6:	4413      	add	r3, r2
 80094b8:	673b      	str	r3, [r7, #112]	; 0x70
 80094ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	00da      	lsls	r2, r3, #3
 80094c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094ca:	4413      	add	r3, r2
 80094cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	895b      	ldrh	r3, [r3, #10]
 80094e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6959      	ldr	r1, [r3, #20]
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009502:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009506:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800950a:	6800      	ldr	r0, [r0, #0]
 800950c:	f000 ff20 	bl	800a350 <USB_WritePMA>
 8009510:	e0ca      	b.n	80096a8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d177      	bne.n	8009612 <USB_EPStartXfer+0xc98>
 8009522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800952e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800953c:	b29b      	uxth	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009542:	4413      	add	r3, r2
 8009544:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	00da      	lsls	r2, r3, #3
 8009554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009556:	4413      	add	r3, r2
 8009558:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800955c:	67bb      	str	r3, [r7, #120]	; 0x78
 800955e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009568:	b29a      	uxth	r2, r3
 800956a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800956c:	801a      	strh	r2, [r3, #0]
 800956e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009572:	2b3e      	cmp	r3, #62	; 0x3e
 8009574:	d921      	bls.n	80095ba <USB_EPStartXfer+0xc40>
 8009576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009584:	f003 031f 	and.w	r3, r3, #31
 8009588:	2b00      	cmp	r3, #0
 800958a:	d104      	bne.n	8009596 <USB_EPStartXfer+0xc1c>
 800958c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009590:	3b01      	subs	r3, #1
 8009592:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	b29a      	uxth	r2, r3
 800959c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	029b      	lsls	r3, r3, #10
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	4313      	orrs	r3, r2
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095b6:	801a      	strh	r2, [r3, #0]
 80095b8:	e05c      	b.n	8009674 <USB_EPStartXfer+0xcfa>
 80095ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <USB_EPStartXfer+0xc5e>
 80095c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095d4:	801a      	strh	r2, [r3, #0]
 80095d6:	e04d      	b.n	8009674 <USB_EPStartXfer+0xcfa>
 80095d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095dc:	085b      	lsrs	r3, r3, #1
 80095de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <USB_EPStartXfer+0xc7e>
 80095ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80095f2:	3301      	adds	r3, #1
 80095f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80095f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009602:	b29b      	uxth	r3, r3
 8009604:	029b      	lsls	r3, r3, #10
 8009606:	b29b      	uxth	r3, r3
 8009608:	4313      	orrs	r3, r2
 800960a:	b29a      	uxth	r2, r3
 800960c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	e030      	b.n	8009674 <USB_EPStartXfer+0xcfa>
 8009612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	785b      	ldrb	r3, [r3, #1]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d128      	bne.n	8009674 <USB_EPStartXfer+0xcfa>
 8009622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800963e:	b29b      	uxth	r3, r3
 8009640:	461a      	mov	r2, r3
 8009642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009646:	4413      	add	r3, r2
 8009648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	00da      	lsls	r2, r3, #3
 800965a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800965e:	4413      	add	r3, r2
 8009660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966c:	b29a      	uxth	r2, r3
 800966e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009672:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	891b      	ldrh	r3, [r3, #8]
 8009680:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6959      	ldr	r1, [r3, #20]
 8009690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009694:	b29b      	uxth	r3, r3
 8009696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800969a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800969e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096a2:	6800      	ldr	r0, [r0, #0]
 80096a4:	f000 fe54 	bl	800a350 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80096a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ce:	817b      	strh	r3, [r7, #10]
 80096d0:	897b      	ldrh	r3, [r7, #10]
 80096d2:	f083 0310 	eor.w	r3, r3, #16
 80096d6:	817b      	strh	r3, [r7, #10]
 80096d8:	897b      	ldrh	r3, [r7, #10]
 80096da:	f083 0320 	eor.w	r3, r3, #32
 80096de:	817b      	strh	r3, [r7, #10]
 80096e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	441a      	add	r2, r3
 80096fa:	897b      	ldrh	r3, [r7, #10]
 80096fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970c:	b29b      	uxth	r3, r3
 800970e:	8013      	strh	r3, [r2, #0]
 8009710:	f000 bcde 	b.w	800a0d0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	7b1b      	ldrb	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	f040 80bb 	bne.w	800989c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	699a      	ldr	r2, [r3, #24]
 8009732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	429a      	cmp	r2, r3
 8009740:	d917      	bls.n	8009772 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009762:	1ad2      	subs	r2, r2, r3
 8009764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	619a      	str	r2, [r3, #24]
 8009770:	e00e      	b.n	8009790 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2200      	movs	r2, #0
 800978e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800979e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	461a      	mov	r2, r3
 80097b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097b4:	4413      	add	r3, r2
 80097b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	00da      	lsls	r2, r3, #3
 80097c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097cc:	4413      	add	r3, r2
 80097ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097e8:	801a      	strh	r2, [r3, #0]
 80097ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ee:	2b3e      	cmp	r3, #62	; 0x3e
 80097f0:	d924      	bls.n	800983c <USB_EPStartXfer+0xec2>
 80097f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f6:	095b      	lsrs	r3, r3, #5
 80097f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009800:	f003 031f 	and.w	r3, r3, #31
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <USB_EPStartXfer+0xe98>
 8009808:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800980c:	3b01      	subs	r3, #1
 800980e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29a      	uxth	r2, r3
 800981a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800981e:	b29b      	uxth	r3, r3
 8009820:	029b      	lsls	r3, r3, #10
 8009822:	b29b      	uxth	r3, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	b29b      	uxth	r3, r3
 8009828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009830:	b29a      	uxth	r2, r3
 8009832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	f000 bc10 	b.w	800a05c <USB_EPStartXfer+0x16e2>
 800983c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10c      	bne.n	800985e <USB_EPStartXfer+0xee4>
 8009844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29b      	uxth	r3, r3
 800984c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009854:	b29a      	uxth	r2, r3
 8009856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800985a:	801a      	strh	r2, [r3, #0]
 800985c:	e3fe      	b.n	800a05c <USB_EPStartXfer+0x16e2>
 800985e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009862:	085b      	lsrs	r3, r3, #1
 8009864:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d004      	beq.n	800987e <USB_EPStartXfer+0xf04>
 8009874:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009878:	3301      	adds	r3, #1
 800987a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800987e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29a      	uxth	r2, r3
 8009886:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800988a:	b29b      	uxth	r3, r3
 800988c:	029b      	lsls	r3, r3, #10
 800988e:	b29b      	uxth	r3, r3
 8009890:	4313      	orrs	r3, r2
 8009892:	b29a      	uxth	r2, r3
 8009894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009898:	801a      	strh	r2, [r3, #0]
 800989a:	e3df      	b.n	800a05c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800989c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	78db      	ldrb	r3, [r3, #3]
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	f040 8218 	bne.w	8009cde <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80098ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	785b      	ldrb	r3, [r3, #1]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 809d 	bne.w	80099fa <USB_EPStartXfer+0x1080>
 80098c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098dc:	b29b      	uxth	r3, r3
 80098de:	461a      	mov	r2, r3
 80098e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098e4:	4413      	add	r3, r2
 80098e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	00da      	lsls	r2, r3, #3
 80098f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098fc:	4413      	add	r3, r2
 80098fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009902:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	b29b      	uxth	r3, r3
 800990e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009912:	b29a      	uxth	r2, r3
 8009914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	2b3e      	cmp	r3, #62	; 0x3e
 8009928:	d92b      	bls.n	8009982 <USB_EPStartXfer+0x1008>
 800992a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800993c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f003 031f 	and.w	r3, r3, #31
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <USB_EPStartXfer+0xfe0>
 8009950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009954:	3b01      	subs	r3, #1
 8009956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800995a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	b29a      	uxth	r2, r3
 8009962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009966:	b29b      	uxth	r3, r3
 8009968:	029b      	lsls	r3, r3, #10
 800996a:	b29b      	uxth	r3, r3
 800996c:	4313      	orrs	r3, r2
 800996e:	b29b      	uxth	r3, r3
 8009970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009978:	b29a      	uxth	r2, r3
 800997a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800997e:	801a      	strh	r2, [r3, #0]
 8009980:	e070      	b.n	8009a64 <USB_EPStartXfer+0x10ea>
 8009982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10c      	bne.n	80099ac <USB_EPStartXfer+0x1032>
 8009992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	b29b      	uxth	r3, r3
 800999a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800999e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099a8:	801a      	strh	r2, [r3, #0]
 80099aa:	e05b      	b.n	8009a64 <USB_EPStartXfer+0x10ea>
 80099ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	085b      	lsrs	r3, r3, #1
 80099ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d004      	beq.n	80099dc <USB_EPStartXfer+0x1062>
 80099d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d6:	3301      	adds	r3, #1
 80099d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	029b      	lsls	r3, r3, #10
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	4313      	orrs	r3, r2
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099f6:	801a      	strh	r2, [r3, #0]
 80099f8:	e034      	b.n	8009a64 <USB_EPStartXfer+0x10ea>
 80099fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d12c      	bne.n	8009a64 <USB_EPStartXfer+0x10ea>
 8009a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a2e:	4413      	add	r3, r2
 8009a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	00da      	lsls	r2, r3, #3
 8009a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a46:	4413      	add	r3, r2
 8009a48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a62:	801a      	strh	r2, [r3, #0]
 8009a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	785b      	ldrb	r3, [r3, #1]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f040 809d 	bne.w	8009bbe <USB_EPStartXfer+0x1244>
 8009a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	00da      	lsls	r2, r3, #3
 8009abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ac6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009adc:	801a      	strh	r2, [r3, #0]
 8009ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b3e      	cmp	r3, #62	; 0x3e
 8009aec:	d92b      	bls.n	8009b46 <USB_EPStartXfer+0x11cc>
 8009aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	095b      	lsrs	r3, r3, #5
 8009afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f003 031f 	and.w	r3, r3, #31
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <USB_EPStartXfer+0x11a4>
 8009b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	029b      	lsls	r3, r3, #10
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4313      	orrs	r3, r2
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b42:	801a      	strh	r2, [r3, #0]
 8009b44:	e069      	b.n	8009c1a <USB_EPStartXfer+0x12a0>
 8009b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10c      	bne.n	8009b70 <USB_EPStartXfer+0x11f6>
 8009b56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009b6c:	801a      	strh	r2, [r3, #0]
 8009b6e:	e054      	b.n	8009c1a <USB_EPStartXfer+0x12a0>
 8009b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	085b      	lsrs	r3, r3, #1
 8009b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <USB_EPStartXfer+0x1226>
 8009b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	029b      	lsls	r3, r3, #10
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bba:	801a      	strh	r2, [r3, #0]
 8009bbc:	e02d      	b.n	8009c1a <USB_EPStartXfer+0x12a0>
 8009bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	785b      	ldrb	r3, [r3, #1]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d125      	bne.n	8009c1a <USB_EPStartXfer+0x12a0>
 8009bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	461a      	mov	r2, r3
 8009be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009be4:	4413      	add	r3, r2
 8009be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	00da      	lsls	r2, r3, #3
 8009bf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c18:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 8218 	beq.w	800a05c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <USB_EPStartXfer+0x12ea>
 8009c58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10d      	bne.n	8009c80 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 81f5 	bne.w	800a05c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f040 81ee 	bne.w	800a05c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	441a      	add	r2, r3
 8009cc4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	8013      	strh	r3, [r2, #0]
 8009cdc:	e1be      	b.n	800a05c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	78db      	ldrb	r3, [r3, #3]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	f040 81b4 	bne.w	800a058 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	699a      	ldr	r2, [r3, #24]
 8009cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d917      	bls.n	8009d3c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	699a      	ldr	r2, [r3, #24]
 8009d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2c:	1ad2      	subs	r2, r2, r3
 8009d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	619a      	str	r2, [r3, #24]
 8009d3a:	e00e      	b.n	8009d5a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2200      	movs	r2, #0
 8009d58:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	785b      	ldrb	r3, [r3, #1]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f040 8085 	bne.w	8009e76 <USB_EPStartXfer+0x14fc>
 8009d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d90:	4413      	add	r3, r2
 8009d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	00da      	lsls	r2, r3, #3
 8009da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009da8:	4413      	add	r3, r2
 8009daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dc4:	801a      	strh	r2, [r3, #0]
 8009dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dca:	2b3e      	cmp	r3, #62	; 0x3e
 8009dcc:	d923      	bls.n	8009e16 <USB_EPStartXfer+0x149c>
 8009dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd2:	095b      	lsrs	r3, r3, #5
 8009dd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ddc:	f003 031f 	and.w	r3, r3, #31
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <USB_EPStartXfer+0x1474>
 8009de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009de8:	3b01      	subs	r3, #1
 8009dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e12:	801a      	strh	r2, [r3, #0]
 8009e14:	e060      	b.n	8009ed8 <USB_EPStartXfer+0x155e>
 8009e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10c      	bne.n	8009e38 <USB_EPStartXfer+0x14be>
 8009e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e34:	801a      	strh	r2, [r3, #0]
 8009e36:	e04f      	b.n	8009ed8 <USB_EPStartXfer+0x155e>
 8009e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e3c:	085b      	lsrs	r3, r3, #1
 8009e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d004      	beq.n	8009e58 <USB_EPStartXfer+0x14de>
 8009e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e52:	3301      	adds	r3, #1
 8009e54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	029b      	lsls	r3, r3, #10
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e72:	801a      	strh	r2, [r3, #0]
 8009e74:	e030      	b.n	8009ed8 <USB_EPStartXfer+0x155e>
 8009e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d128      	bne.n	8009ed8 <USB_EPStartXfer+0x155e>
 8009e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eaa:	4413      	add	r3, r2
 8009eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	00da      	lsls	r2, r3, #3
 8009ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009edc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	785b      	ldrb	r3, [r3, #1]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f040 8085 	bne.w	800a002 <USB_EPStartXfer+0x1688>
 8009ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	461a      	mov	r2, r3
 8009f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	00da      	lsls	r2, r3, #3
 8009f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f34:	4413      	add	r3, r2
 8009f36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f50:	801a      	strh	r2, [r3, #0]
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f56:	2b3e      	cmp	r3, #62	; 0x3e
 8009f58:	d923      	bls.n	8009fa2 <USB_EPStartXfer+0x1628>
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f68:	f003 031f 	and.w	r3, r3, #31
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <USB_EPStartXfer+0x1600>
 8009f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f74:	3b01      	subs	r3, #1
 8009f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	029b      	lsls	r3, r3, #10
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f9e:	801a      	strh	r2, [r3, #0]
 8009fa0:	e05c      	b.n	800a05c <USB_EPStartXfer+0x16e2>
 8009fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10c      	bne.n	8009fc4 <USB_EPStartXfer+0x164a>
 8009faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	e04b      	b.n	800a05c <USB_EPStartXfer+0x16e2>
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc8:	085b      	lsrs	r3, r3, #1
 8009fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d004      	beq.n	8009fe4 <USB_EPStartXfer+0x166a>
 8009fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fde:	3301      	adds	r3, #1
 8009fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	029b      	lsls	r3, r3, #10
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	e02c      	b.n	800a05c <USB_EPStartXfer+0x16e2>
 800a002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d124      	bne.n	800a05c <USB_EPStartXfer+0x16e2>
 800a012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a020:	b29b      	uxth	r3, r3
 800a022:	461a      	mov	r2, r3
 800a024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a028:	4413      	add	r3, r2
 800a02a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	00da      	lsls	r2, r3, #3
 800a03c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a040:	4413      	add	r3, r2
 800a042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04e:	b29a      	uxth	r2, r3
 800a050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	e001      	b.n	800a05c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e03a      	b.n	800a0d2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a05c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a082:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a086:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a08a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a08e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a092:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a096:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a09a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	441a      	add	r2, r3
 800a0b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a0bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d020      	beq.n	800a130 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a104:	81bb      	strh	r3, [r7, #12]
 800a106:	89bb      	ldrh	r3, [r7, #12]
 800a108:	f083 0310 	eor.w	r3, r3, #16
 800a10c:	81bb      	strh	r3, [r7, #12]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	441a      	add	r2, r3
 800a118:	89bb      	ldrh	r3, [r7, #12]
 800a11a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a11e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	8013      	strh	r3, [r2, #0]
 800a12e:	e01f      	b.n	800a170 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a146:	81fb      	strh	r3, [r7, #14]
 800a148:	89fb      	ldrh	r3, [r7, #14]
 800a14a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a14e:	81fb      	strh	r3, [r7, #14]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	441a      	add	r2, r3
 800a15a:	89fb      	ldrh	r3, [r7, #14]
 800a15c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a17e:	b480      	push	{r7}
 800a180:	b087      	sub	sp, #28
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	7b1b      	ldrb	r3, [r3, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f040 809d 	bne.w	800a2cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d04c      	beq.n	800a234 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	823b      	strh	r3, [r7, #16]
 800a1a8:	8a3b      	ldrh	r3, [r7, #16]
 800a1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d01b      	beq.n	800a1ea <USB_EPClearStall+0x6c>
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c8:	81fb      	strh	r3, [r7, #14]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	441a      	add	r2, r3
 800a1d4:	89fb      	ldrh	r3, [r7, #14]
 800a1d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	78db      	ldrb	r3, [r3, #3]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d06c      	beq.n	800a2cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a208:	81bb      	strh	r3, [r7, #12]
 800a20a:	89bb      	ldrh	r3, [r7, #12]
 800a20c:	f083 0320 	eor.w	r3, r3, #32
 800a210:	81bb      	strh	r3, [r7, #12]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	441a      	add	r2, r3
 800a21c:	89bb      	ldrh	r3, [r7, #12]
 800a21e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22e:	b29b      	uxth	r3, r3
 800a230:	8013      	strh	r3, [r2, #0]
 800a232:	e04b      	b.n	800a2cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	82fb      	strh	r3, [r7, #22]
 800a242:	8afb      	ldrh	r3, [r7, #22]
 800a244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01b      	beq.n	800a284 <USB_EPClearStall+0x106>
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a262:	82bb      	strh	r3, [r7, #20]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	441a      	add	r2, r3
 800a26e:	8abb      	ldrh	r3, [r7, #20]
 800a270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a280:	b29b      	uxth	r3, r3
 800a282:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	881b      	ldrh	r3, [r3, #0]
 800a290:	b29b      	uxth	r3, r3
 800a292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29a:	827b      	strh	r3, [r7, #18]
 800a29c:	8a7b      	ldrh	r3, [r7, #18]
 800a29e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a2a2:	827b      	strh	r3, [r7, #18]
 800a2a4:	8a7b      	ldrh	r3, [r7, #18]
 800a2a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a2aa:	827b      	strh	r3, [r7, #18]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	441a      	add	r2, r3
 800a2b6:	8a7b      	ldrh	r3, [r7, #18]
 800a2b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	371c      	adds	r7, #28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d103      	bne.n	800a2f4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2280      	movs	r2, #128	; 0x80
 800a2f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a310:	b29b      	uxth	r3, r3
 800a312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a33e:	b29b      	uxth	r3, r3
 800a340:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a350:	b480      	push	{r7}
 800a352:	b08b      	sub	sp, #44	; 0x2c
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4611      	mov	r1, r2
 800a35c:	461a      	mov	r2, r3
 800a35e:	460b      	mov	r3, r1
 800a360:	80fb      	strh	r3, [r7, #6]
 800a362:	4613      	mov	r3, r2
 800a364:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a366:	88bb      	ldrh	r3, [r7, #4]
 800a368:	3301      	adds	r3, #1
 800a36a:	085b      	lsrs	r3, r3, #1
 800a36c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a376:	88fa      	ldrh	r2, [r7, #6]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a380:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
 800a386:	e01b      	b.n	800a3c0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	3301      	adds	r3, #1
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	021b      	lsls	r3, r3, #8
 800a396:	b21a      	sxth	r2, r3
 800a398:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	b21b      	sxth	r3, r3
 800a3a0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	8a7a      	ldrh	r2, [r7, #18]
 800a3a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e0      	bne.n	800a388 <USB_WritePMA+0x38>
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	bf00      	nop
 800a3ca:	372c      	adds	r7, #44	; 0x2c
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b08b      	sub	sp, #44	; 0x2c
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	4611      	mov	r1, r2
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	80fb      	strh	r3, [r7, #6]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a3ea:	88bb      	ldrh	r3, [r7, #4]
 800a3ec:	085b      	lsrs	r3, r3, #1
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a3fa:	88fa      	ldrh	r2, [r7, #6]
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a404:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
 800a40a:	e018      	b.n	800a43e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	3302      	adds	r3, #2
 800a418:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	3301      	adds	r3, #1
 800a426:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	0a1b      	lsrs	r3, r3, #8
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	3301      	adds	r3, #1
 800a436:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	3b01      	subs	r3, #1
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e3      	bne.n	800a40c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a444:	88bb      	ldrh	r3, [r7, #4]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d007      	beq.n	800a460 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	b29b      	uxth	r3, r3
 800a456:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	701a      	strb	r2, [r3, #0]
  }
}
 800a460:	bf00      	nop
 800a462:	372c      	adds	r7, #44	; 0x2c
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a478:	2010      	movs	r0, #16
 800a47a:	f001 fe9b 	bl	800c1b4 <USBD_static_malloc>
 800a47e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d105      	bne.n	800a492 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a48e:	2302      	movs	r3, #2
 800a490:	e01b      	b.n	800a4ca <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	7c1b      	ldrb	r3, [r3, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d103      	bne.n	800a4aa <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2207      	movs	r2, #7
 800a4a6:	875a      	strh	r2, [r3, #58]	; 0x3a
 800a4a8:	e002      	b.n	800a4b0 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a4b0:	2304      	movs	r3, #4
 800a4b2:	2203      	movs	r2, #3
 800a4b4:	2181      	movs	r1, #129	; 0x81
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f001 fd35 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800a4de:	2181      	movs	r1, #129	; 0x81
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f001 fd46 	bl	800bf72 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d009      	beq.n	800a510 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a502:	4618      	mov	r0, r3
 800a504:	f001 fe64 	bl	800c1d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a52c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e0e8      	b.n	800a712 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d046      	beq.n	800a5da <USBD_HID_Setup+0xbe>
 800a54c:	2b20      	cmp	r3, #32
 800a54e:	f040 80d8 	bne.w	800a702 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	3b02      	subs	r3, #2
 800a558:	2b09      	cmp	r3, #9
 800a55a:	d836      	bhi.n	800a5ca <USBD_HID_Setup+0xae>
 800a55c:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <USBD_HID_Setup+0x48>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a5bb 	.word	0x0800a5bb
 800a568:	0800a59b 	.word	0x0800a59b
 800a56c:	0800a5cb 	.word	0x0800a5cb
 800a570:	0800a5cb 	.word	0x0800a5cb
 800a574:	0800a5cb 	.word	0x0800a5cb
 800a578:	0800a5cb 	.word	0x0800a5cb
 800a57c:	0800a5cb 	.word	0x0800a5cb
 800a580:	0800a5cb 	.word	0x0800a5cb
 800a584:	0800a5a9 	.word	0x0800a5a9
 800a588:	0800a58d 	.word	0x0800a58d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	885b      	ldrh	r3, [r3, #2]
 800a590:	b2db      	uxtb	r3, r3
 800a592:	461a      	mov	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	601a      	str	r2, [r3, #0]
          break;
 800a598:	e01e      	b.n	800a5d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 f9d8 	bl	800b956 <USBD_CtlSendData>
          break;
 800a5a6:	e017      	b.n	800a5d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	885b      	ldrh	r3, [r3, #2]
 800a5ac:	0a1b      	lsrs	r3, r3, #8
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	605a      	str	r2, [r3, #4]
          break;
 800a5b8:	e00e      	b.n	800a5d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	2201      	movs	r2, #1
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 f9c7 	bl	800b956 <USBD_CtlSendData>
          break;
 800a5c8:	e006      	b.n	800a5d8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f001 f951 	bl	800b874 <USBD_CtlError>
          ret = USBD_FAIL;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a5d6:	bf00      	nop
      }
      break;
 800a5d8:	e09a      	b.n	800a710 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	785b      	ldrb	r3, [r3, #1]
 800a5de:	2b0b      	cmp	r3, #11
 800a5e0:	f200 8086 	bhi.w	800a6f0 <USBD_HID_Setup+0x1d4>
 800a5e4:	a201      	add	r2, pc, #4	; (adr r2, 800a5ec <USBD_HID_Setup+0xd0>)
 800a5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ea:	bf00      	nop
 800a5ec:	0800a61d 	.word	0x0800a61d
 800a5f0:	0800a6ff 	.word	0x0800a6ff
 800a5f4:	0800a6f1 	.word	0x0800a6f1
 800a5f8:	0800a6f1 	.word	0x0800a6f1
 800a5fc:	0800a6f1 	.word	0x0800a6f1
 800a600:	0800a6f1 	.word	0x0800a6f1
 800a604:	0800a647 	.word	0x0800a647
 800a608:	0800a6f1 	.word	0x0800a6f1
 800a60c:	0800a6f1 	.word	0x0800a6f1
 800a610:	0800a6f1 	.word	0x0800a6f1
 800a614:	0800a69f 	.word	0x0800a69f
 800a618:	0800a6c9 	.word	0x0800a6c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b03      	cmp	r3, #3
 800a626:	d107      	bne.n	800a638 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a628:	f107 030a 	add.w	r3, r7, #10
 800a62c:	2202      	movs	r2, #2
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 f990 	bl	800b956 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a636:	e063      	b.n	800a700 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 f91a 	bl	800b874 <USBD_CtlError>
            ret = USBD_FAIL;
 800a640:	2303      	movs	r3, #3
 800a642:	75fb      	strb	r3, [r7, #23]
          break;
 800a644:	e05c      	b.n	800a700 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	885b      	ldrh	r3, [r3, #2]
 800a64a:	0a1b      	lsrs	r3, r3, #8
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	2b22      	cmp	r3, #34	; 0x22
 800a650:	d108      	bne.n	800a664 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	88db      	ldrh	r3, [r3, #6]
 800a656:	2b4a      	cmp	r3, #74	; 0x4a
 800a658:	bf28      	it	cs
 800a65a:	234a      	movcs	r3, #74	; 0x4a
 800a65c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a65e:	4b2f      	ldr	r3, [pc, #188]	; (800a71c <USBD_HID_Setup+0x200>)
 800a660:	613b      	str	r3, [r7, #16]
 800a662:	e015      	b.n	800a690 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	885b      	ldrh	r3, [r3, #2]
 800a668:	0a1b      	lsrs	r3, r3, #8
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	2b21      	cmp	r3, #33	; 0x21
 800a66e:	d108      	bne.n	800a682 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800a670:	4b2b      	ldr	r3, [pc, #172]	; (800a720 <USBD_HID_Setup+0x204>)
 800a672:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	88db      	ldrh	r3, [r3, #6]
 800a678:	2b09      	cmp	r3, #9
 800a67a:	bf28      	it	cs
 800a67c:	2309      	movcs	r3, #9
 800a67e:	82bb      	strh	r3, [r7, #20]
 800a680:	e006      	b.n	800a690 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 f8f5 	bl	800b874 <USBD_CtlError>
            ret = USBD_FAIL;
 800a68a:	2303      	movs	r3, #3
 800a68c:	75fb      	strb	r3, [r7, #23]
            break;
 800a68e:	e037      	b.n	800a700 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a690:	8abb      	ldrh	r3, [r7, #20]
 800a692:	461a      	mov	r2, r3
 800a694:	6939      	ldr	r1, [r7, #16]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 f95d 	bl	800b956 <USBD_CtlSendData>
          break;
 800a69c:	e030      	b.n	800a700 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d107      	bne.n	800a6ba <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f001 f94f 	bl	800b956 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6b8:	e022      	b.n	800a700 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f001 f8d9 	bl	800b874 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	75fb      	strb	r3, [r7, #23]
          break;
 800a6c6:	e01b      	b.n	800a700 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2b03      	cmp	r3, #3
 800a6d2:	d106      	bne.n	800a6e2 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	885b      	ldrh	r3, [r3, #2]
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	461a      	mov	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6e0:	e00e      	b.n	800a700 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f001 f8c5 	bl	800b874 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a6ee:	e007      	b.n	800a700 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 f8be 	bl	800b874 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	75fb      	strb	r3, [r7, #23]
          break;
 800a6fc:	e000      	b.n	800a700 <USBD_HID_Setup+0x1e4>
          break;
 800a6fe:	bf00      	nop
      }
      break;
 800a700:	e006      	b.n	800a710 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f001 f8b5 	bl	800b874 <USBD_CtlError>
      ret = USBD_FAIL;
 800a70a:	2303      	movs	r3, #3
 800a70c:	75fb      	strb	r3, [r7, #23]
      break;
 800a70e:	bf00      	nop
  }

  return (uint8_t)ret;
 800a710:	7dfb      	ldrb	r3, [r7, #23]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	200000c8 	.word	0x200000c8
 800a720:	200000b0 	.word	0x200000b0

0800a724 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	4613      	mov	r3, r2
 800a730:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a738:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800a740:	2303      	movs	r3, #3
 800a742:	e013      	b.n	800a76c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d10c      	bne.n	800a76a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	7b1b      	ldrb	r3, [r3, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d108      	bne.n	800a76a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2201      	movs	r2, #1
 800a75c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	2181      	movs	r1, #129	; 0x81
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f001 fcac 	bl	800c0c2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2222      	movs	r2, #34	; 0x22
 800a780:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800a782:	4b03      	ldr	r3, [pc, #12]	; (800a790 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	20000044 	.word	0x20000044

0800a794 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2222      	movs	r2, #34	; 0x22
 800a7a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800a7a2:	4b03      	ldr	r3, [pc, #12]	; (800a7b0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	20000068 	.word	0x20000068

0800a7b4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2222      	movs	r2, #34	; 0x22
 800a7c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800a7c2:	4b03      	ldr	r3, [pc, #12]	; (800a7d0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	2000008c 	.word	0x2000008c

0800a7d4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	220a      	movs	r2, #10
 800a804:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a806:	4b03      	ldr	r3, [pc, #12]	; (800a814 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	200000bc 	.word	0x200000bc

0800a818 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	4613      	mov	r3, r2
 800a824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e01f      	b.n	800a870 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	79fa      	ldrb	r2, [r7, #7]
 800a862:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f001 faf5 	bl	800be54 <USBD_LL_Init>
 800a86a:	4603      	mov	r3, r0
 800a86c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a882:	2300      	movs	r3, #0
 800a884:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e016      	b.n	800a8be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00b      	beq.n	800a8bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ac:	f107 020e 	add.w	r2, r7, #14
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	4798      	blx	r3
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 fb0e 	bl	800bef0 <USBD_LL_Start>
 800a8d4:	4603      	mov	r3, r0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a900:	2303      	movs	r3, #3
 800a902:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d009      	beq.n	800a922 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	78fa      	ldrb	r2, [r7, #3]
 800a918:	4611      	mov	r1, r2
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	4798      	blx	r3
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a922:	7bfb      	ldrb	r3, [r7, #15]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d007      	beq.n	800a952 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	78fa      	ldrb	r2, [r7, #3]
 800a94c:	4611      	mov	r1, r2
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	4798      	blx	r3
  }

  return USBD_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 ff46 	bl	800b800 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a982:	461a      	mov	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a990:	f003 031f 	and.w	r3, r3, #31
 800a994:	2b02      	cmp	r3, #2
 800a996:	d01a      	beq.n	800a9ce <USBD_LL_SetupStage+0x72>
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d822      	bhi.n	800a9e2 <USBD_LL_SetupStage+0x86>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <USBD_LL_SetupStage+0x4a>
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d00a      	beq.n	800a9ba <USBD_LL_SetupStage+0x5e>
 800a9a4:	e01d      	b.n	800a9e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f9ee 	bl	800ad90 <USBD_StdDevReq>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b8:	e020      	b.n	800a9fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fa52 	bl	800ae6c <USBD_StdItfReq>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a9cc:	e016      	b.n	800a9fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa91 	bl	800aefe <USBD_StdEPReq>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e0:	e00c      	b.n	800a9fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f001 fadd 	bl	800bfb0 <USBD_LL_StallEP>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9fa:	bf00      	nop
  }

  return ret;
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	607a      	str	r2, [r7, #4]
 800aa12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d138      	bne.n	800aa8c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d14a      	bne.n	800aac2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	689a      	ldr	r2, [r3, #8]
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d913      	bls.n	800aa60 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	689a      	ldr	r2, [r3, #8]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	1ad2      	subs	r2, r2, r3
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	68da      	ldr	r2, [r3, #12]
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	bf28      	it	cs
 800aa52:	4613      	movcs	r3, r2
 800aa54:	461a      	mov	r2, r3
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 ffa8 	bl	800b9ae <USBD_CtlContinueRx>
 800aa5e:	e030      	b.n	800aac2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d10b      	bne.n	800aa84 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d005      	beq.n	800aa84 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 ffa3 	bl	800b9d0 <USBD_CtlSendStatus>
 800aa8a:	e01a      	b.n	800aac2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d114      	bne.n	800aac2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00e      	beq.n	800aac2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	7afa      	ldrb	r2, [r7, #11]
 800aaae:	4611      	mov	r1, r2
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	4798      	blx	r3
 800aab4:	4603      	mov	r3, r0
 800aab6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	e000      	b.n	800aac4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	460b      	mov	r3, r1
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d16b      	bne.n	800abb8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3314      	adds	r3, #20
 800aae4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d156      	bne.n	800ab9e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d914      	bls.n	800ab26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	1ad2      	subs	r2, r2, r3
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f000 ff3a 	bl	800b98c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab18:	2300      	movs	r3, #0
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f001 faf0 	bl	800c104 <USBD_LL_PrepareReceive>
 800ab24:	e03b      	b.n	800ab9e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	68da      	ldr	r2, [r3, #12]
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d11c      	bne.n	800ab6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d316      	bcc.n	800ab6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d20f      	bcs.n	800ab6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 ff1b 	bl	800b98c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab5e:	2300      	movs	r3, #0
 800ab60:	2200      	movs	r2, #0
 800ab62:	2100      	movs	r1, #0
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f001 facd 	bl	800c104 <USBD_LL_PrepareReceive>
 800ab6a:	e018      	b.n	800ab9e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b03      	cmp	r3, #3
 800ab76:	d10b      	bne.n	800ab90 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d005      	beq.n	800ab90 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab90:	2180      	movs	r1, #128	; 0x80
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f001 fa0c 	bl	800bfb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f000 ff2c 	bl	800b9f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d122      	bne.n	800abee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f7ff fe98 	bl	800a8de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800abb6:	e01a      	b.n	800abee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d114      	bne.n	800abee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00e      	beq.n	800abee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	7afa      	ldrb	r2, [r7, #11]
 800abda:	4611      	mov	r1, r2
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	4798      	blx	r3
 800abe0:	4603      	mov	r3, r0
 800abe2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800abea:	7dfb      	ldrb	r3, [r7, #23]
 800abec:	e000      	b.n	800abf0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3718      	adds	r7, #24
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e02f      	b.n	800ac8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00f      	beq.n	800ac56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d009      	beq.n	800ac56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	6852      	ldr	r2, [r2, #4]
 800ac4e:	b2d2      	uxtb	r2, r2
 800ac50:	4611      	mov	r1, r2
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac56:	2340      	movs	r3, #64	; 0x40
 800ac58:	2200      	movs	r2, #0
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f001 f962 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2240      	movs	r2, #64	; 0x40
 800ac6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac72:	2340      	movs	r3, #64	; 0x40
 800ac74:	2200      	movs	r2, #0
 800ac76:	2180      	movs	r1, #128	; 0x80
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 f954 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2240      	movs	r2, #64	; 0x40
 800ac88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	78fa      	ldrb	r2, [r7, #3]
 800aca4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2204      	movs	r2, #4
 800acce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b04      	cmp	r3, #4
 800acf2:	d106      	bne.n	800ad02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e012      	b.n	800ad4c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b03      	cmp	r3, #3
 800ad30:	d10b      	bne.n	800ad4a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d005      	beq.n	800ad4a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b087      	sub	sp, #28
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad72:	8a3b      	ldrh	r3, [r7, #16]
 800ad74:	021b      	lsls	r3, r3, #8
 800ad76:	b21a      	sxth	r2, r3
 800ad78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	b21b      	sxth	r3, r3
 800ad80:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad82:	89fb      	ldrh	r3, [r7, #14]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	371c      	adds	r7, #28
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ada6:	2b40      	cmp	r3, #64	; 0x40
 800ada8:	d005      	beq.n	800adb6 <USBD_StdDevReq+0x26>
 800adaa:	2b40      	cmp	r3, #64	; 0x40
 800adac:	d853      	bhi.n	800ae56 <USBD_StdDevReq+0xc6>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00b      	beq.n	800adca <USBD_StdDevReq+0x3a>
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d14f      	bne.n	800ae56 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	4798      	blx	r3
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
      break;
 800adc8:	e04a      	b.n	800ae60 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	2b09      	cmp	r3, #9
 800add0:	d83b      	bhi.n	800ae4a <USBD_StdDevReq+0xba>
 800add2:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <USBD_StdDevReq+0x48>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800ae2d 	.word	0x0800ae2d
 800addc:	0800ae41 	.word	0x0800ae41
 800ade0:	0800ae4b 	.word	0x0800ae4b
 800ade4:	0800ae37 	.word	0x0800ae37
 800ade8:	0800ae4b 	.word	0x0800ae4b
 800adec:	0800ae0b 	.word	0x0800ae0b
 800adf0:	0800ae01 	.word	0x0800ae01
 800adf4:	0800ae4b 	.word	0x0800ae4b
 800adf8:	0800ae23 	.word	0x0800ae23
 800adfc:	0800ae15 	.word	0x0800ae15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f9de 	bl	800b1c4 <USBD_GetDescriptor>
          break;
 800ae08:	e024      	b.n	800ae54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fb6d 	bl	800b4ec <USBD_SetAddress>
          break;
 800ae12:	e01f      	b.n	800ae54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fbac 	bl	800b574 <USBD_SetConfig>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]
          break;
 800ae20:	e018      	b.n	800ae54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc4b 	bl	800b6c0 <USBD_GetConfig>
          break;
 800ae2a:	e013      	b.n	800ae54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fc7c 	bl	800b72c <USBD_GetStatus>
          break;
 800ae34:	e00e      	b.n	800ae54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fcab 	bl	800b794 <USBD_SetFeature>
          break;
 800ae3e:	e009      	b.n	800ae54 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fcba 	bl	800b7bc <USBD_ClrFeature>
          break;
 800ae48:	e004      	b.n	800ae54 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fd11 	bl	800b874 <USBD_CtlError>
          break;
 800ae52:	bf00      	nop
      }
      break;
 800ae54:	e004      	b.n	800ae60 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fd0b 	bl	800b874 <USBD_CtlError>
      break;
 800ae5e:	bf00      	nop
  }

  return ret;
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop

0800ae6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae82:	2b40      	cmp	r3, #64	; 0x40
 800ae84:	d005      	beq.n	800ae92 <USBD_StdItfReq+0x26>
 800ae86:	2b40      	cmp	r3, #64	; 0x40
 800ae88:	d82f      	bhi.n	800aeea <USBD_StdItfReq+0x7e>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <USBD_StdItfReq+0x26>
 800ae8e:	2b20      	cmp	r3, #32
 800ae90:	d12b      	bne.n	800aeea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d81d      	bhi.n	800aedc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	889b      	ldrh	r3, [r3, #4]
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d813      	bhi.n	800aed2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	4798      	blx	r3
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	88db      	ldrh	r3, [r3, #6]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d110      	bne.n	800aee6 <USBD_StdItfReq+0x7a>
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10d      	bne.n	800aee6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fd80 	bl	800b9d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aed0:	e009      	b.n	800aee6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fccd 	bl	800b874 <USBD_CtlError>
          break;
 800aeda:	e004      	b.n	800aee6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fcc8 	bl	800b874 <USBD_CtlError>
          break;
 800aee4:	e000      	b.n	800aee8 <USBD_StdItfReq+0x7c>
          break;
 800aee6:	bf00      	nop
      }
      break;
 800aee8:	e004      	b.n	800aef4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fcc1 	bl	800b874 <USBD_CtlError>
      break;
 800aef2:	bf00      	nop
  }

  return ret;
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	889b      	ldrh	r3, [r3, #4]
 800af10:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af1a:	2b40      	cmp	r3, #64	; 0x40
 800af1c:	d007      	beq.n	800af2e <USBD_StdEPReq+0x30>
 800af1e:	2b40      	cmp	r3, #64	; 0x40
 800af20:	f200 8145 	bhi.w	800b1ae <USBD_StdEPReq+0x2b0>
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00c      	beq.n	800af42 <USBD_StdEPReq+0x44>
 800af28:	2b20      	cmp	r3, #32
 800af2a:	f040 8140 	bne.w	800b1ae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	4798      	blx	r3
 800af3c:	4603      	mov	r3, r0
 800af3e:	73fb      	strb	r3, [r7, #15]
      break;
 800af40:	e13a      	b.n	800b1b8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	785b      	ldrb	r3, [r3, #1]
 800af46:	2b03      	cmp	r3, #3
 800af48:	d007      	beq.n	800af5a <USBD_StdEPReq+0x5c>
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	f300 8129 	bgt.w	800b1a2 <USBD_StdEPReq+0x2a4>
 800af50:	2b00      	cmp	r3, #0
 800af52:	d07f      	beq.n	800b054 <USBD_StdEPReq+0x156>
 800af54:	2b01      	cmp	r3, #1
 800af56:	d03c      	beq.n	800afd2 <USBD_StdEPReq+0xd4>
 800af58:	e123      	b.n	800b1a2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b02      	cmp	r3, #2
 800af64:	d002      	beq.n	800af6c <USBD_StdEPReq+0x6e>
 800af66:	2b03      	cmp	r3, #3
 800af68:	d016      	beq.n	800af98 <USBD_StdEPReq+0x9a>
 800af6a:	e02c      	b.n	800afc6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00d      	beq.n	800af8e <USBD_StdEPReq+0x90>
 800af72:	7bbb      	ldrb	r3, [r7, #14]
 800af74:	2b80      	cmp	r3, #128	; 0x80
 800af76:	d00a      	beq.n	800af8e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f001 f817 	bl	800bfb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af82:	2180      	movs	r1, #128	; 0x80
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f001 f813 	bl	800bfb0 <USBD_LL_StallEP>
 800af8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af8c:	e020      	b.n	800afd0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fc6f 	bl	800b874 <USBD_CtlError>
              break;
 800af96:	e01b      	b.n	800afd0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	885b      	ldrh	r3, [r3, #2]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10e      	bne.n	800afbe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <USBD_StdEPReq+0xc0>
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b80      	cmp	r3, #128	; 0x80
 800afaa:	d008      	beq.n	800afbe <USBD_StdEPReq+0xc0>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	88db      	ldrh	r3, [r3, #6]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d104      	bne.n	800afbe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fff9 	bl	800bfb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fd06 	bl	800b9d0 <USBD_CtlSendStatus>

              break;
 800afc4:	e004      	b.n	800afd0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fc53 	bl	800b874 <USBD_CtlError>
              break;
 800afce:	bf00      	nop
          }
          break;
 800afd0:	e0ec      	b.n	800b1ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d002      	beq.n	800afe4 <USBD_StdEPReq+0xe6>
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d016      	beq.n	800b010 <USBD_StdEPReq+0x112>
 800afe2:	e030      	b.n	800b046 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00d      	beq.n	800b006 <USBD_StdEPReq+0x108>
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b80      	cmp	r3, #128	; 0x80
 800afee:	d00a      	beq.n	800b006 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 ffdb 	bl	800bfb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800affa:	2180      	movs	r1, #128	; 0x80
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 ffd7 	bl	800bfb0 <USBD_LL_StallEP>
 800b002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b004:	e025      	b.n	800b052 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fc33 	bl	800b874 <USBD_CtlError>
              break;
 800b00e:	e020      	b.n	800b052 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d11b      	bne.n	800b050 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d004      	beq.n	800b02c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 ffe1 	bl	800bfee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fccf 	bl	800b9d0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	4798      	blx	r3
 800b040:	4603      	mov	r3, r0
 800b042:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b044:	e004      	b.n	800b050 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fc13 	bl	800b874 <USBD_CtlError>
              break;
 800b04e:	e000      	b.n	800b052 <USBD_StdEPReq+0x154>
              break;
 800b050:	bf00      	nop
          }
          break;
 800b052:	e0ab      	b.n	800b1ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d002      	beq.n	800b066 <USBD_StdEPReq+0x168>
 800b060:	2b03      	cmp	r3, #3
 800b062:	d032      	beq.n	800b0ca <USBD_StdEPReq+0x1cc>
 800b064:	e097      	b.n	800b196 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b066:	7bbb      	ldrb	r3, [r7, #14]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d007      	beq.n	800b07c <USBD_StdEPReq+0x17e>
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	2b80      	cmp	r3, #128	; 0x80
 800b070:	d004      	beq.n	800b07c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fbfd 	bl	800b874 <USBD_CtlError>
                break;
 800b07a:	e091      	b.n	800b1a0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b07c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b080:	2b00      	cmp	r3, #0
 800b082:	da0b      	bge.n	800b09c <USBD_StdEPReq+0x19e>
 800b084:	7bbb      	ldrb	r3, [r7, #14]
 800b086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	3310      	adds	r3, #16
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	4413      	add	r3, r2
 800b098:	3304      	adds	r3, #4
 800b09a:	e00b      	b.n	800b0b4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fc47 	bl	800b956 <USBD_CtlSendData>
              break;
 800b0c8:	e06a      	b.n	800b1a0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	da11      	bge.n	800b0f6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	f003 020f 	and.w	r2, r3, #15
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	440b      	add	r3, r1
 800b0e4:	3324      	adds	r3, #36	; 0x24
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d117      	bne.n	800b11c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fbc0 	bl	800b874 <USBD_CtlError>
                  break;
 800b0f4:	e054      	b.n	800b1a0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	f003 020f 	and.w	r2, r3, #15
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	4613      	mov	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	440b      	add	r3, r1
 800b108:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d104      	bne.n	800b11c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fbad 	bl	800b874 <USBD_CtlError>
                  break;
 800b11a:	e041      	b.n	800b1a0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b11c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b120:	2b00      	cmp	r3, #0
 800b122:	da0b      	bge.n	800b13c <USBD_StdEPReq+0x23e>
 800b124:	7bbb      	ldrb	r3, [r7, #14]
 800b126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b12a:	4613      	mov	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4413      	add	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	3310      	adds	r3, #16
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	4413      	add	r3, r2
 800b138:	3304      	adds	r3, #4
 800b13a:	e00b      	b.n	800b154 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
 800b13e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	4413      	add	r3, r2
 800b152:	3304      	adds	r3, #4
 800b154:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b156:	7bbb      	ldrb	r3, [r7, #14]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <USBD_StdEPReq+0x264>
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	2b80      	cmp	r3, #128	; 0x80
 800b160:	d103      	bne.n	800b16a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2200      	movs	r2, #0
 800b166:	601a      	str	r2, [r3, #0]
 800b168:	e00e      	b.n	800b188 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 ff5c 	bl	800c02c <USBD_LL_IsStallEP>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2201      	movs	r2, #1
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	e002      	b.n	800b188 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2202      	movs	r2, #2
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fbe1 	bl	800b956 <USBD_CtlSendData>
              break;
 800b194:	e004      	b.n	800b1a0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fb6b 	bl	800b874 <USBD_CtlError>
              break;
 800b19e:	bf00      	nop
          }
          break;
 800b1a0:	e004      	b.n	800b1ac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fb65 	bl	800b874 <USBD_CtlError>
          break;
 800b1aa:	bf00      	nop
      }
      break;
 800b1ac:	e004      	b.n	800b1b8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fb5f 	bl	800b874 <USBD_CtlError>
      break;
 800b1b6:	bf00      	nop
  }

  return ret;
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
	...

0800b1c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	885b      	ldrh	r3, [r3, #2]
 800b1de:	0a1b      	lsrs	r3, r3, #8
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	2b0e      	cmp	r3, #14
 800b1e6:	f200 8152 	bhi.w	800b48e <USBD_GetDescriptor+0x2ca>
 800b1ea:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <USBD_GetDescriptor+0x2c>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b261 	.word	0x0800b261
 800b1f4:	0800b279 	.word	0x0800b279
 800b1f8:	0800b2b9 	.word	0x0800b2b9
 800b1fc:	0800b48f 	.word	0x0800b48f
 800b200:	0800b48f 	.word	0x0800b48f
 800b204:	0800b42f 	.word	0x0800b42f
 800b208:	0800b45b 	.word	0x0800b45b
 800b20c:	0800b48f 	.word	0x0800b48f
 800b210:	0800b48f 	.word	0x0800b48f
 800b214:	0800b48f 	.word	0x0800b48f
 800b218:	0800b48f 	.word	0x0800b48f
 800b21c:	0800b48f 	.word	0x0800b48f
 800b220:	0800b48f 	.word	0x0800b48f
 800b224:	0800b48f 	.word	0x0800b48f
 800b228:	0800b22d 	.word	0x0800b22d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00b      	beq.n	800b250 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	7c12      	ldrb	r2, [r2, #16]
 800b244:	f107 0108 	add.w	r1, r7, #8
 800b248:	4610      	mov	r0, r2
 800b24a:	4798      	blx	r3
 800b24c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b24e:	e126      	b.n	800b49e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fb0e 	bl	800b874 <USBD_CtlError>
        err++;
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	3301      	adds	r3, #1
 800b25c:	72fb      	strb	r3, [r7, #11]
      break;
 800b25e:	e11e      	b.n	800b49e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	7c12      	ldrb	r2, [r2, #16]
 800b26c:	f107 0108 	add.w	r1, r7, #8
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
 800b274:	60f8      	str	r0, [r7, #12]
      break;
 800b276:	e112      	b.n	800b49e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	7c1b      	ldrb	r3, [r3, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10d      	bne.n	800b29c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b288:	f107 0208 	add.w	r2, r7, #8
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
 800b290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3301      	adds	r3, #1
 800b296:	2202      	movs	r2, #2
 800b298:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b29a:	e100      	b.n	800b49e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a4:	f107 0208 	add.w	r2, r7, #8
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
 800b2ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	701a      	strb	r2, [r3, #0]
      break;
 800b2b6:	e0f2      	b.n	800b49e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	885b      	ldrh	r3, [r3, #2]
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b05      	cmp	r3, #5
 800b2c0:	f200 80ac 	bhi.w	800b41c <USBD_GetDescriptor+0x258>
 800b2c4:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <USBD_GetDescriptor+0x108>)
 800b2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ca:	bf00      	nop
 800b2cc:	0800b2e5 	.word	0x0800b2e5
 800b2d0:	0800b319 	.word	0x0800b319
 800b2d4:	0800b34d 	.word	0x0800b34d
 800b2d8:	0800b381 	.word	0x0800b381
 800b2dc:	0800b3b5 	.word	0x0800b3b5
 800b2e0:	0800b3e9 	.word	0x0800b3e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00b      	beq.n	800b308 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	7c12      	ldrb	r2, [r2, #16]
 800b2fc:	f107 0108 	add.w	r1, r7, #8
 800b300:	4610      	mov	r0, r2
 800b302:	4798      	blx	r3
 800b304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b306:	e091      	b.n	800b42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fab2 	bl	800b874 <USBD_CtlError>
            err++;
 800b310:	7afb      	ldrb	r3, [r7, #11]
 800b312:	3301      	adds	r3, #1
 800b314:	72fb      	strb	r3, [r7, #11]
          break;
 800b316:	e089      	b.n	800b42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	7c12      	ldrb	r2, [r2, #16]
 800b330:	f107 0108 	add.w	r1, r7, #8
 800b334:	4610      	mov	r0, r2
 800b336:	4798      	blx	r3
 800b338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b33a:	e077      	b.n	800b42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fa98 	bl	800b874 <USBD_CtlError>
            err++;
 800b344:	7afb      	ldrb	r3, [r7, #11]
 800b346:	3301      	adds	r3, #1
 800b348:	72fb      	strb	r3, [r7, #11]
          break;
 800b34a:	e06f      	b.n	800b42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	7c12      	ldrb	r2, [r2, #16]
 800b364:	f107 0108 	add.w	r1, r7, #8
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b36e:	e05d      	b.n	800b42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fa7e 	bl	800b874 <USBD_CtlError>
            err++;
 800b378:	7afb      	ldrb	r3, [r7, #11]
 800b37a:	3301      	adds	r3, #1
 800b37c:	72fb      	strb	r3, [r7, #11]
          break;
 800b37e:	e055      	b.n	800b42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00b      	beq.n	800b3a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	7c12      	ldrb	r2, [r2, #16]
 800b398:	f107 0108 	add.w	r1, r7, #8
 800b39c:	4610      	mov	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a2:	e043      	b.n	800b42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa64 	bl	800b874 <USBD_CtlError>
            err++;
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3b2:	e03b      	b.n	800b42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	7c12      	ldrb	r2, [r2, #16]
 800b3cc:	f107 0108 	add.w	r1, r7, #8
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3d6:	e029      	b.n	800b42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fa4a 	bl	800b874 <USBD_CtlError>
            err++;
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3e6:	e021      	b.n	800b42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	699b      	ldr	r3, [r3, #24]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00b      	beq.n	800b40c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	7c12      	ldrb	r2, [r2, #16]
 800b400:	f107 0108 	add.w	r1, r7, #8
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
 800b408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b40a:	e00f      	b.n	800b42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa30 	bl	800b874 <USBD_CtlError>
            err++;
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	3301      	adds	r3, #1
 800b418:	72fb      	strb	r3, [r7, #11]
          break;
 800b41a:	e007      	b.n	800b42c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fa28 	bl	800b874 <USBD_CtlError>
          err++;
 800b424:	7afb      	ldrb	r3, [r7, #11]
 800b426:	3301      	adds	r3, #1
 800b428:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b42a:	bf00      	nop
      }
      break;
 800b42c:	e037      	b.n	800b49e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7c1b      	ldrb	r3, [r3, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d109      	bne.n	800b44a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43e:	f107 0208 	add.w	r2, r7, #8
 800b442:	4610      	mov	r0, r2
 800b444:	4798      	blx	r3
 800b446:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b448:	e029      	b.n	800b49e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fa11 	bl	800b874 <USBD_CtlError>
        err++;
 800b452:	7afb      	ldrb	r3, [r7, #11]
 800b454:	3301      	adds	r3, #1
 800b456:	72fb      	strb	r3, [r7, #11]
      break;
 800b458:	e021      	b.n	800b49e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	7c1b      	ldrb	r3, [r3, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10d      	bne.n	800b47e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46a:	f107 0208 	add.w	r2, r7, #8
 800b46e:	4610      	mov	r0, r2
 800b470:	4798      	blx	r3
 800b472:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	2207      	movs	r2, #7
 800b47a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b47c:	e00f      	b.n	800b49e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f9f7 	bl	800b874 <USBD_CtlError>
        err++;
 800b486:	7afb      	ldrb	r3, [r7, #11]
 800b488:	3301      	adds	r3, #1
 800b48a:	72fb      	strb	r3, [r7, #11]
      break;
 800b48c:	e007      	b.n	800b49e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f9ef 	bl	800b874 <USBD_CtlError>
      err++;
 800b496:	7afb      	ldrb	r3, [r7, #11]
 800b498:	3301      	adds	r3, #1
 800b49a:	72fb      	strb	r3, [r7, #11]
      break;
 800b49c:	bf00      	nop
  }

  if (err != 0U)
 800b49e:	7afb      	ldrb	r3, [r7, #11]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d11e      	bne.n	800b4e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	88db      	ldrh	r3, [r3, #6]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d016      	beq.n	800b4da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b4ac:	893b      	ldrh	r3, [r7, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00e      	beq.n	800b4d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	88da      	ldrh	r2, [r3, #6]
 800b4b6:	893b      	ldrh	r3, [r7, #8]
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	bf28      	it	cs
 800b4bc:	4613      	movcs	r3, r2
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4c2:	893b      	ldrh	r3, [r7, #8]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	68f9      	ldr	r1, [r7, #12]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fa44 	bl	800b956 <USBD_CtlSendData>
 800b4ce:	e009      	b.n	800b4e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f9ce 	bl	800b874 <USBD_CtlError>
 800b4d8:	e004      	b.n	800b4e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fa78 	bl	800b9d0 <USBD_CtlSendStatus>
 800b4e0:	e000      	b.n	800b4e4 <USBD_GetDescriptor+0x320>
    return;
 800b4e2:	bf00      	nop
  }
}
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop

0800b4ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	889b      	ldrh	r3, [r3, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d131      	bne.n	800b562 <USBD_SetAddress+0x76>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	88db      	ldrh	r3, [r3, #6]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d12d      	bne.n	800b562 <USBD_SetAddress+0x76>
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	885b      	ldrh	r3, [r3, #2]
 800b50a:	2b7f      	cmp	r3, #127	; 0x7f
 800b50c:	d829      	bhi.n	800b562 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	885b      	ldrh	r3, [r3, #2]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b518:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b03      	cmp	r3, #3
 800b524:	d104      	bne.n	800b530 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f9a3 	bl	800b874 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52e:	e01d      	b.n	800b56c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7bfa      	ldrb	r2, [r7, #15]
 800b534:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fda1 	bl	800c084 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa44 	bl	800b9d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d004      	beq.n	800b558 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2202      	movs	r2, #2
 800b552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b556:	e009      	b.n	800b56c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b560:	e004      	b.n	800b56c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f985 	bl	800b874 <USBD_CtlError>
  }
}
 800b56a:	bf00      	nop
 800b56c:	bf00      	nop
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	885b      	ldrh	r3, [r3, #2]
 800b586:	b2da      	uxtb	r2, r3
 800b588:	4b4c      	ldr	r3, [pc, #304]	; (800b6bc <USBD_SetConfig+0x148>)
 800b58a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b58c:	4b4b      	ldr	r3, [pc, #300]	; (800b6bc <USBD_SetConfig+0x148>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d905      	bls.n	800b5a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f96c 	bl	800b874 <USBD_CtlError>
    return USBD_FAIL;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e088      	b.n	800b6b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d002      	beq.n	800b5b2 <USBD_SetConfig+0x3e>
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d025      	beq.n	800b5fc <USBD_SetConfig+0x88>
 800b5b0:	e071      	b.n	800b696 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5b2:	4b42      	ldr	r3, [pc, #264]	; (800b6bc <USBD_SetConfig+0x148>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d01c      	beq.n	800b5f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b5ba:	4b40      	ldr	r3, [pc, #256]	; (800b6bc <USBD_SetConfig+0x148>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5c4:	4b3d      	ldr	r3, [pc, #244]	; (800b6bc <USBD_SetConfig+0x148>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7ff f992 	bl	800a8f4 <USBD_SetClassConfig>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d004      	beq.n	800b5e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f949 	bl	800b874 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5e2:	e065      	b.n	800b6b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f9f3 	bl	800b9d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2203      	movs	r2, #3
 800b5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5f2:	e05d      	b.n	800b6b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f9eb 	bl	800b9d0 <USBD_CtlSendStatus>
      break;
 800b5fa:	e059      	b.n	800b6b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5fc:	4b2f      	ldr	r3, [pc, #188]	; (800b6bc <USBD_SetConfig+0x148>)
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d112      	bne.n	800b62a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2202      	movs	r2, #2
 800b608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b60c:	4b2b      	ldr	r3, [pc, #172]	; (800b6bc <USBD_SetConfig+0x148>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	461a      	mov	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b616:	4b29      	ldr	r3, [pc, #164]	; (800b6bc <USBD_SetConfig+0x148>)
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff f985 	bl	800a92c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f9d4 	bl	800b9d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b628:	e042      	b.n	800b6b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b62a:	4b24      	ldr	r3, [pc, #144]	; (800b6bc <USBD_SetConfig+0x148>)
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	429a      	cmp	r2, r3
 800b636:	d02a      	beq.n	800b68e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7ff f973 	bl	800a92c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b646:	4b1d      	ldr	r3, [pc, #116]	; (800b6bc <USBD_SetConfig+0x148>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b650:	4b1a      	ldr	r3, [pc, #104]	; (800b6bc <USBD_SetConfig+0x148>)
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7ff f94c 	bl	800a8f4 <USBD_SetClassConfig>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00f      	beq.n	800b686 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f903 	bl	800b874 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	b2db      	uxtb	r3, r3
 800b674:	4619      	mov	r1, r3
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7ff f958 	bl	800a92c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b684:	e014      	b.n	800b6b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f9a2 	bl	800b9d0 <USBD_CtlSendStatus>
      break;
 800b68c:	e010      	b.n	800b6b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f99e 	bl	800b9d0 <USBD_CtlSendStatus>
      break;
 800b694:	e00c      	b.n	800b6b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f8eb 	bl	800b874 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b69e:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <USBD_SetConfig+0x148>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7ff f941 	bl	800a92c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ae:	bf00      	nop
  }

  return ret;
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	200007e4 	.word	0x200007e4

0800b6c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	88db      	ldrh	r3, [r3, #6]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d004      	beq.n	800b6dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f8cd 	bl	800b874 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6da:	e023      	b.n	800b724 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	dc02      	bgt.n	800b6ee <USBD_GetConfig+0x2e>
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	dc03      	bgt.n	800b6f4 <USBD_GetConfig+0x34>
 800b6ec:	e015      	b.n	800b71a <USBD_GetConfig+0x5a>
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d00b      	beq.n	800b70a <USBD_GetConfig+0x4a>
 800b6f2:	e012      	b.n	800b71a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	2201      	movs	r2, #1
 800b700:	4619      	mov	r1, r3
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f927 	bl	800b956 <USBD_CtlSendData>
        break;
 800b708:	e00c      	b.n	800b724 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3304      	adds	r3, #4
 800b70e:	2201      	movs	r2, #1
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f91f 	bl	800b956 <USBD_CtlSendData>
        break;
 800b718:	e004      	b.n	800b724 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f8a9 	bl	800b874 <USBD_CtlError>
        break;
 800b722:	bf00      	nop
}
 800b724:	bf00      	nop
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	3b01      	subs	r3, #1
 800b740:	2b02      	cmp	r3, #2
 800b742:	d81e      	bhi.n	800b782 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	88db      	ldrh	r3, [r3, #6]
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d004      	beq.n	800b756 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f890 	bl	800b874 <USBD_CtlError>
        break;
 800b754:	e01a      	b.n	800b78c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b762:	2b00      	cmp	r3, #0
 800b764:	d005      	beq.n	800b772 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f043 0202 	orr.w	r2, r3, #2
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	330c      	adds	r3, #12
 800b776:	2202      	movs	r2, #2
 800b778:	4619      	mov	r1, r3
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f8eb 	bl	800b956 <USBD_CtlSendData>
      break;
 800b780:	e004      	b.n	800b78c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f875 	bl	800b874 <USBD_CtlError>
      break;
 800b78a:	bf00      	nop
  }
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d106      	bne.n	800b7b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f90e 	bl	800b9d0 <USBD_CtlSendStatus>
  }
}
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d80b      	bhi.n	800b7ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	885b      	ldrh	r3, [r3, #2]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d10c      	bne.n	800b7f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f8f3 	bl	800b9d0 <USBD_CtlSendStatus>
      }
      break;
 800b7ea:	e004      	b.n	800b7f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f840 	bl	800b874 <USBD_CtlError>
      break;
 800b7f4:	e000      	b.n	800b7f8 <USBD_ClrFeature+0x3c>
      break;
 800b7f6:	bf00      	nop
  }
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	781a      	ldrb	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3301      	adds	r3, #1
 800b81a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	781a      	ldrb	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3301      	adds	r3, #1
 800b828:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f7ff fa92 	bl	800ad54 <SWAPBYTE>
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3301      	adds	r3, #1
 800b83c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	3301      	adds	r3, #1
 800b842:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff fa85 	bl	800ad54 <SWAPBYTE>
 800b84a:	4603      	mov	r3, r0
 800b84c:	461a      	mov	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3301      	adds	r3, #1
 800b856:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3301      	adds	r3, #1
 800b85c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f7ff fa78 	bl	800ad54 <SWAPBYTE>
 800b864:	4603      	mov	r3, r0
 800b866:	461a      	mov	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	80da      	strh	r2, [r3, #6]
}
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b87e:	2180      	movs	r1, #128	; 0x80
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fb95 	bl	800bfb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b886:	2100      	movs	r1, #0
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fb91 	bl	800bfb0 <USBD_LL_StallEP>
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b086      	sub	sp, #24
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d036      	beq.n	800b91a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b8b0:	6938      	ldr	r0, [r7, #16]
 800b8b2:	f000 f836 	bl	800b922 <USBD_GetLen>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	7812      	ldrb	r2, [r2, #0]
 800b8ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	4413      	add	r3, r2
 800b8dc:	2203      	movs	r2, #3
 800b8de:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8e6:	e013      	b.n	800b910 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b8e8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	7812      	ldrb	r2, [r2, #0]
 800b8f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	613b      	str	r3, [r7, #16]
    idx++;
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	4413      	add	r3, r2
 800b906:	2200      	movs	r2, #0
 800b908:	701a      	strb	r2, [r3, #0]
    idx++;
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	3301      	adds	r3, #1
 800b90e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e7      	bne.n	800b8e8 <USBD_GetString+0x52>
 800b918:	e000      	b.n	800b91c <USBD_GetString+0x86>
    return;
 800b91a:	bf00      	nop
  }
}
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b932:	e005      	b.n	800b940 <USBD_GetLen+0x1e>
  {
    len++;
 800b934:	7bfb      	ldrb	r3, [r7, #15]
 800b936:	3301      	adds	r3, #1
 800b938:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	3301      	adds	r3, #1
 800b93e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1f5      	bne.n	800b934 <USBD_GetLen+0x12>
  }

  return len;
 800b948:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	60f8      	str	r0, [r7, #12]
 800b95e:	60b9      	str	r1, [r7, #8]
 800b960:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2202      	movs	r2, #2
 800b966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	2100      	movs	r1, #0
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 fba0 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	2100      	movs	r1, #0
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 fb8f 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	60f8      	str	r0, [r7, #12]
 800b9b6:	60b9      	str	r1, [r7, #8]
 800b9b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	2100      	movs	r1, #0
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 fb9f 	bl	800c104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2204      	movs	r2, #4
 800b9dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fb6b 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2205      	movs	r2, #5
 800ba02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba06:	2300      	movs	r3, #0
 800ba08:	2200      	movs	r2, #0
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fb79 	bl	800c104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800ba20:	2200      	movs	r2, #0
 800ba22:	490e      	ldr	r1, [pc, #56]	; (800ba5c <MX_USB_Device_Init+0x40>)
 800ba24:	480e      	ldr	r0, [pc, #56]	; (800ba60 <MX_USB_Device_Init+0x44>)
 800ba26:	f7fe fef7 	bl	800a818 <USBD_Init>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ba30:	f7f5 fb22 	bl	8001078 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800ba34:	490b      	ldr	r1, [pc, #44]	; (800ba64 <MX_USB_Device_Init+0x48>)
 800ba36:	480a      	ldr	r0, [pc, #40]	; (800ba60 <MX_USB_Device_Init+0x44>)
 800ba38:	f7fe ff1e 	bl	800a878 <USBD_RegisterClass>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d001      	beq.n	800ba46 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ba42:	f7f5 fb19 	bl	8001078 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ba46:	4806      	ldr	r0, [pc, #24]	; (800ba60 <MX_USB_Device_Init+0x44>)
 800ba48:	f7fe ff3d 	bl	800a8c6 <USBD_Start>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800ba52:	f7f5 fb11 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ba56:	bf00      	nop
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20000114 	.word	0x20000114
 800ba60:	200007e8 	.word	0x200007e8
 800ba64:	2000000c 	.word	0x2000000c

0800ba68 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	6039      	str	r1, [r7, #0]
 800ba72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	2212      	movs	r2, #18
 800ba78:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800ba7a:	4b03      	ldr	r3, [pc, #12]	; (800ba88 <USBD_HID_DeviceDescriptor+0x20>)
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	20000134 	.word	0x20000134

0800ba8c <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	4603      	mov	r3, r0
 800ba94:	6039      	str	r1, [r7, #0]
 800ba96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2204      	movs	r2, #4
 800ba9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba9e:	4b03      	ldr	r3, [pc, #12]	; (800baac <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	20000148 	.word	0x20000148

0800bab0 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	6039      	str	r1, [r7, #0]
 800baba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800babc:	79fb      	ldrb	r3, [r7, #7]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d105      	bne.n	800bace <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	4907      	ldr	r1, [pc, #28]	; (800bae4 <USBD_HID_ProductStrDescriptor+0x34>)
 800bac6:	4808      	ldr	r0, [pc, #32]	; (800bae8 <USBD_HID_ProductStrDescriptor+0x38>)
 800bac8:	f7ff fee5 	bl	800b896 <USBD_GetString>
 800bacc:	e004      	b.n	800bad8 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4904      	ldr	r1, [pc, #16]	; (800bae4 <USBD_HID_ProductStrDescriptor+0x34>)
 800bad2:	4805      	ldr	r0, [pc, #20]	; (800bae8 <USBD_HID_ProductStrDescriptor+0x38>)
 800bad4:	f7ff fedf 	bl	800b896 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bad8:	4b02      	ldr	r3, [pc, #8]	; (800bae4 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000ab8 	.word	0x20000ab8
 800bae8:	0800c2b8 	.word	0x0800c2b8

0800baec <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	4603      	mov	r3, r0
 800baf4:	6039      	str	r1, [r7, #0]
 800baf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	4904      	ldr	r1, [pc, #16]	; (800bb0c <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800bafc:	4804      	ldr	r0, [pc, #16]	; (800bb10 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800bafe:	f7ff feca 	bl	800b896 <USBD_GetString>
  return USBD_StrDesc;
 800bb02:	4b02      	ldr	r3, [pc, #8]	; (800bb0c <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	20000ab8 	.word	0x20000ab8
 800bb10:	0800c2c4 	.word	0x0800c2c4

0800bb14 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	6039      	str	r1, [r7, #0]
 800bb1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	221a      	movs	r2, #26
 800bb24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb26:	f000 f843 	bl	800bbb0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bb2a:	4b02      	ldr	r3, [pc, #8]	; (800bb34 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	2000014c 	.word	0x2000014c

0800bb38 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	6039      	str	r1, [r7, #0]
 800bb42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb44:	79fb      	ldrb	r3, [r7, #7]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d105      	bne.n	800bb56 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	4907      	ldr	r1, [pc, #28]	; (800bb6c <USBD_HID_ConfigStrDescriptor+0x34>)
 800bb4e:	4808      	ldr	r0, [pc, #32]	; (800bb70 <USBD_HID_ConfigStrDescriptor+0x38>)
 800bb50:	f7ff fea1 	bl	800b896 <USBD_GetString>
 800bb54:	e004      	b.n	800bb60 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	4904      	ldr	r1, [pc, #16]	; (800bb6c <USBD_HID_ConfigStrDescriptor+0x34>)
 800bb5a:	4805      	ldr	r0, [pc, #20]	; (800bb70 <USBD_HID_ConfigStrDescriptor+0x38>)
 800bb5c:	f7ff fe9b 	bl	800b896 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb60:	4b02      	ldr	r3, [pc, #8]	; (800bb6c <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000ab8 	.word	0x20000ab8
 800bb70:	0800c2d8 	.word	0x0800c2d8

0800bb74 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	6039      	str	r1, [r7, #0]
 800bb7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb80:	79fb      	ldrb	r3, [r7, #7]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d105      	bne.n	800bb92 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	4907      	ldr	r1, [pc, #28]	; (800bba8 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800bb8a:	4808      	ldr	r0, [pc, #32]	; (800bbac <USBD_HID_InterfaceStrDescriptor+0x38>)
 800bb8c:	f7ff fe83 	bl	800b896 <USBD_GetString>
 800bb90:	e004      	b.n	800bb9c <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	4904      	ldr	r1, [pc, #16]	; (800bba8 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800bb96:	4805      	ldr	r0, [pc, #20]	; (800bbac <USBD_HID_InterfaceStrDescriptor+0x38>)
 800bb98:	f7ff fe7d 	bl	800b896 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb9c:	4b02      	ldr	r3, [pc, #8]	; (800bba8 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20000ab8 	.word	0x20000ab8
 800bbac:	0800c2e4 	.word	0x0800c2e4

0800bbb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bbb6:	4b0f      	ldr	r3, [pc, #60]	; (800bbf4 <Get_SerialNum+0x44>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bbbc:	4b0e      	ldr	r3, [pc, #56]	; (800bbf8 <Get_SerialNum+0x48>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bbc2:	4b0e      	ldr	r3, [pc, #56]	; (800bbfc <Get_SerialNum+0x4c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4413      	add	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d009      	beq.n	800bbea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bbd6:	2208      	movs	r2, #8
 800bbd8:	4909      	ldr	r1, [pc, #36]	; (800bc00 <Get_SerialNum+0x50>)
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f000 f814 	bl	800bc08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bbe0:	2204      	movs	r2, #4
 800bbe2:	4908      	ldr	r1, [pc, #32]	; (800bc04 <Get_SerialNum+0x54>)
 800bbe4:	68b8      	ldr	r0, [r7, #8]
 800bbe6:	f000 f80f 	bl	800bc08 <IntToUnicode>
  }
}
 800bbea:	bf00      	nop
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	1fff7590 	.word	0x1fff7590
 800bbf8:	1fff7594 	.word	0x1fff7594
 800bbfc:	1fff7598 	.word	0x1fff7598
 800bc00:	2000014e 	.word	0x2000014e
 800bc04:	2000015e 	.word	0x2000015e

0800bc08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4613      	mov	r3, r2
 800bc14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	75fb      	strb	r3, [r7, #23]
 800bc1e:	e027      	b.n	800bc70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	0f1b      	lsrs	r3, r3, #28
 800bc24:	2b09      	cmp	r3, #9
 800bc26:	d80b      	bhi.n	800bc40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	0f1b      	lsrs	r3, r3, #28
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	4619      	mov	r1, r3
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	440b      	add	r3, r1
 800bc38:	3230      	adds	r2, #48	; 0x30
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]
 800bc3e:	e00a      	b.n	800bc56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	0f1b      	lsrs	r3, r3, #28
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	440b      	add	r3, r1
 800bc50:	3237      	adds	r2, #55	; 0x37
 800bc52:	b2d2      	uxtb	r2, r2
 800bc54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	011b      	lsls	r3, r3, #4
 800bc5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	3301      	adds	r3, #1
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	4413      	add	r3, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	75fb      	strb	r3, [r7, #23]
 800bc70:	7dfa      	ldrb	r2, [r7, #23]
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d3d3      	bcc.n	800bc20 <IntToUnicode+0x18>
  }
}
 800bc78:	bf00      	nop
 800bc7a:	bf00      	nop
 800bc7c:	371c      	adds	r7, #28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
	...

0800bc88 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b094      	sub	sp, #80	; 0x50
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bc90:	f107 030c 	add.w	r3, r7, #12
 800bc94:	2244      	movs	r2, #68	; 0x44
 800bc96:	2100      	movs	r1, #0
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fad5 	bl	800c248 <memset>
  if(pcdHandle->Instance==USB)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a15      	ldr	r2, [pc, #84]	; (800bcf8 <HAL_PCD_MspInit+0x70>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d123      	bne.n	800bcf0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcac:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bcae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcb2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bcb4:	f107 030c 	add.w	r3, r7, #12
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fa f82d 	bl	8005d18 <HAL_RCCEx_PeriphCLKConfig>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d001      	beq.n	800bcc8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800bcc4:	f7f5 f9d8 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bcc8:	4b0c      	ldr	r3, [pc, #48]	; (800bcfc <HAL_PCD_MspInit+0x74>)
 800bcca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bccc:	4a0b      	ldr	r2, [pc, #44]	; (800bcfc <HAL_PCD_MspInit+0x74>)
 800bcce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bcd2:	6593      	str	r3, [r2, #88]	; 0x58
 800bcd4:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <HAL_PCD_MspInit+0x74>)
 800bcd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcdc:	60bb      	str	r3, [r7, #8]
 800bcde:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bce0:	2200      	movs	r2, #0
 800bce2:	2100      	movs	r1, #0
 800bce4:	2014      	movs	r0, #20
 800bce6:	f7f7 f890 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bcea:	2014      	movs	r0, #20
 800bcec:	f7f7 f8a7 	bl	8002e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bcf0:	bf00      	nop
 800bcf2:	3750      	adds	r7, #80	; 0x50
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	40005c00 	.word	0x40005c00
 800bcfc:	40021000 	.word	0x40021000

0800bd00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bd14:	4619      	mov	r1, r3
 800bd16:	4610      	mov	r0, r2
 800bd18:	f7fe fe20 	bl	800a95c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bd1c:	bf00      	nop
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bd36:	78fa      	ldrb	r2, [r7, #3]
 800bd38:	6879      	ldr	r1, [r7, #4]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	00db      	lsls	r3, r3, #3
 800bd42:	440b      	add	r3, r1
 800bd44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	f7fe fe5a 	bl	800aa06 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bd52:	bf00      	nop
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bd6c:	78fa      	ldrb	r2, [r7, #3]
 800bd6e:	6879      	ldr	r1, [r7, #4]
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	440b      	add	r3, r1
 800bd7a:	3324      	adds	r3, #36	; 0x24
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	4619      	mov	r1, r3
 800bd82:	f7fe fea3 	bl	800aacc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bd86:	bf00      	nop
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b082      	sub	sp, #8
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fe ffb7 	bl	800ad10 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bda2:	bf00      	nop
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b084      	sub	sp, #16
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	795b      	ldrb	r3, [r3, #5]
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	d001      	beq.n	800bdc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bdbe:	f7f5 f95b 	bl	8001078 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bdc8:	7bfa      	ldrb	r2, [r7, #15]
 800bdca:	4611      	mov	r1, r2
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7fe ff61 	bl	800ac94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fe ff0d 	bl	800abf8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bdde:	bf00      	nop
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
	...

0800bde8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe ff5c 	bl	800acb4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7a5b      	ldrb	r3, [r3, #9]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be04:	4b04      	ldr	r3, [pc, #16]	; (800be18 <HAL_PCD_SuspendCallback+0x30>)
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	4a03      	ldr	r2, [pc, #12]	; (800be18 <HAL_PCD_SuspendCallback+0x30>)
 800be0a:	f043 0306 	orr.w	r3, r3, #6
 800be0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	e000ed00 	.word	0xe000ed00

0800be1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7a5b      	ldrb	r3, [r3, #9]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d007      	beq.n	800be3c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be2c:	4b08      	ldr	r3, [pc, #32]	; (800be50 <HAL_PCD_ResumeCallback+0x34>)
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	4a07      	ldr	r2, [pc, #28]	; (800be50 <HAL_PCD_ResumeCallback+0x34>)
 800be32:	f023 0306 	bic.w	r3, r3, #6
 800be36:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800be38:	f000 f9d4 	bl	800c1e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800be42:	4618      	mov	r0, r3
 800be44:	f7fe ff4c 	bl	800ace0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800be48:	bf00      	nop
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	e000ed00 	.word	0xe000ed00

0800be54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800be5c:	4a22      	ldr	r2, [pc, #136]	; (800bee8 <USBD_LL_Init+0x94>)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a20      	ldr	r2, [pc, #128]	; (800bee8 <USBD_LL_Init+0x94>)
 800be68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800be6c:	4b1e      	ldr	r3, [pc, #120]	; (800bee8 <USBD_LL_Init+0x94>)
 800be6e:	4a1f      	ldr	r2, [pc, #124]	; (800beec <USBD_LL_Init+0x98>)
 800be70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800be72:	4b1d      	ldr	r3, [pc, #116]	; (800bee8 <USBD_LL_Init+0x94>)
 800be74:	2208      	movs	r2, #8
 800be76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800be78:	4b1b      	ldr	r3, [pc, #108]	; (800bee8 <USBD_LL_Init+0x94>)
 800be7a:	2202      	movs	r2, #2
 800be7c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be7e:	4b1a      	ldr	r3, [pc, #104]	; (800bee8 <USBD_LL_Init+0x94>)
 800be80:	2202      	movs	r2, #2
 800be82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800be84:	4b18      	ldr	r3, [pc, #96]	; (800bee8 <USBD_LL_Init+0x94>)
 800be86:	2200      	movs	r2, #0
 800be88:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800be8a:	4b17      	ldr	r3, [pc, #92]	; (800bee8 <USBD_LL_Init+0x94>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800be90:	4b15      	ldr	r3, [pc, #84]	; (800bee8 <USBD_LL_Init+0x94>)
 800be92:	2200      	movs	r2, #0
 800be94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800be96:	4b14      	ldr	r3, [pc, #80]	; (800bee8 <USBD_LL_Init+0x94>)
 800be98:	2200      	movs	r2, #0
 800be9a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800be9c:	4812      	ldr	r0, [pc, #72]	; (800bee8 <USBD_LL_Init+0x94>)
 800be9e:	f7f7 fc75 	bl	800378c <HAL_PCD_Init>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bea8:	f7f5 f8e6 	bl	8001078 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800beb2:	2318      	movs	r3, #24
 800beb4:	2200      	movs	r2, #0
 800beb6:	2100      	movs	r1, #0
 800beb8:	f7f9 f917 	bl	80050ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bec2:	2358      	movs	r3, #88	; 0x58
 800bec4:	2200      	movs	r2, #0
 800bec6:	2180      	movs	r1, #128	; 0x80
 800bec8:	f7f9 f90f 	bl	80050ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bed6:	2200      	movs	r2, #0
 800bed8:	2181      	movs	r1, #129	; 0x81
 800beda:	f7f9 f906 	bl	80050ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	20000cb8 	.word	0x20000cb8
 800beec:	40005c00 	.word	0x40005c00

0800bef0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7f7 fd0e 	bl	8003928 <HAL_PCD_Start>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 f96c 	bl	800c1f0 <USBD_Get_USB_Status>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	4608      	mov	r0, r1
 800bf30:	4611      	mov	r1, r2
 800bf32:	461a      	mov	r2, r3
 800bf34:	4603      	mov	r3, r0
 800bf36:	70fb      	strb	r3, [r7, #3]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70bb      	strb	r3, [r7, #2]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf4e:	78bb      	ldrb	r3, [r7, #2]
 800bf50:	883a      	ldrh	r2, [r7, #0]
 800bf52:	78f9      	ldrb	r1, [r7, #3]
 800bf54:	f7f7 fe55 	bl	8003c02 <HAL_PCD_EP_Open>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 f946 	bl	800c1f0 <USBD_Get_USB_Status>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf8c:	78fa      	ldrb	r2, [r7, #3]
 800bf8e:	4611      	mov	r1, r2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f7 fe93 	bl	8003cbc <HAL_PCD_EP_Close>
 800bf96:	4603      	mov	r3, r0
 800bf98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 f927 	bl	800c1f0 <USBD_Get_USB_Status>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfca:	78fa      	ldrb	r2, [r7, #3]
 800bfcc:	4611      	mov	r1, r2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7f7 ff24 	bl	8003e1c <HAL_PCD_EP_SetStall>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f908 	bl	800c1f0 <USBD_Get_USB_Status>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	460b      	mov	r3, r1
 800bff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c008:	78fa      	ldrb	r2, [r7, #3]
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7f7 ff57 	bl	8003ec0 <HAL_PCD_EP_ClrStall>
 800c012:	4603      	mov	r3, r0
 800c014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 f8e9 	bl	800c1f0 <USBD_Get_USB_Status>
 800c01e:	4603      	mov	r3, r0
 800c020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c022:	7bbb      	ldrb	r3, [r7, #14]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c03e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c044:	2b00      	cmp	r3, #0
 800c046:	da0b      	bge.n	800c060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c04e:	68f9      	ldr	r1, [r7, #12]
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	00db      	lsls	r3, r3, #3
 800c058:	440b      	add	r3, r1
 800c05a:	3312      	adds	r3, #18
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	e00b      	b.n	800c078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c066:	68f9      	ldr	r1, [r7, #12]
 800c068:	4613      	mov	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4413      	add	r3, r2
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	440b      	add	r3, r1
 800c072:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c076:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c09e:	78fa      	ldrb	r2, [r7, #3]
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7f7 fd89 	bl	8003bba <HAL_PCD_SetAddress>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 f89e 	bl	800c1f0 <USBD_Get_USB_Status>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b086      	sub	sp, #24
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	607a      	str	r2, [r7, #4]
 800c0cc:	603b      	str	r3, [r7, #0]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0e0:	7af9      	ldrb	r1, [r7, #11]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	f7f7 fe62 	bl	8003dae <HAL_PCD_EP_Transmit>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 f87d 	bl	800c1f0 <USBD_Get_USB_Status>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	607a      	str	r2, [r7, #4]
 800c10e:	603b      	str	r3, [r7, #0]
 800c110:	460b      	mov	r3, r1
 800c112:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c122:	7af9      	ldrb	r1, [r7, #11]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	f7f7 fe10 	bl	8003d4c <HAL_PCD_EP_Receive>
 800c12c:	4603      	mov	r3, r0
 800c12e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	4618      	mov	r0, r3
 800c134:	f000 f85c 	bl	800c1f0 <USBD_Get_USB_Status>
 800c138:	4603      	mov	r3, r0
 800c13a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c13c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d002      	beq.n	800c160 <HAL_PCDEx_LPM_Callback+0x18>
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d013      	beq.n	800c186 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c15e:	e023      	b.n	800c1a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7a5b      	ldrb	r3, [r3, #9]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d007      	beq.n	800c178 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c168:	f000 f83c 	bl	800c1e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c16c:	4b10      	ldr	r3, [pc, #64]	; (800c1b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	4a0f      	ldr	r2, [pc, #60]	; (800c1b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c172:	f023 0306 	bic.w	r3, r3, #6
 800c176:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe fdae 	bl	800ace0 <USBD_LL_Resume>
    break;
 800c184:	e010      	b.n	800c1a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fe fd91 	bl	800acb4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	7a5b      	ldrb	r3, [r3, #9]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d005      	beq.n	800c1a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c19a:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	4a04      	ldr	r2, [pc, #16]	; (800c1b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800c1a0:	f043 0306 	orr.w	r3, r3, #6
 800c1a4:	6113      	str	r3, [r2, #16]
    break;
 800c1a6:	bf00      	nop
}
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	e000ed00 	.word	0xe000ed00

0800c1b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c1bc:	4b03      	ldr	r3, [pc, #12]	; (800c1cc <USBD_static_malloc+0x18>)
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	20000f94 	.word	0x20000f94

0800c1d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]

}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c1e8:	f7f4 fb82 	bl	80008f0 <SystemClock_Config>
}
 800c1ec:	bf00      	nop
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	2b03      	cmp	r3, #3
 800c202:	d817      	bhi.n	800c234 <USBD_Get_USB_Status+0x44>
 800c204:	a201      	add	r2, pc, #4	; (adr r2, 800c20c <USBD_Get_USB_Status+0x1c>)
 800c206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20a:	bf00      	nop
 800c20c:	0800c21d 	.word	0x0800c21d
 800c210:	0800c223 	.word	0x0800c223
 800c214:	0800c229 	.word	0x0800c229
 800c218:	0800c22f 	.word	0x0800c22f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]
    break;
 800c220:	e00b      	b.n	800c23a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c222:	2303      	movs	r3, #3
 800c224:	73fb      	strb	r3, [r7, #15]
    break;
 800c226:	e008      	b.n	800c23a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c228:	2301      	movs	r3, #1
 800c22a:	73fb      	strb	r3, [r7, #15]
    break;
 800c22c:	e005      	b.n	800c23a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c22e:	2303      	movs	r3, #3
 800c230:	73fb      	strb	r3, [r7, #15]
    break;
 800c232:	e002      	b.n	800c23a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	73fb      	strb	r3, [r7, #15]
    break;
 800c238:	bf00      	nop
  }
  return usb_status;
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <memset>:
 800c248:	4402      	add	r2, r0
 800c24a:	4603      	mov	r3, r0
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d100      	bne.n	800c252 <memset+0xa>
 800c250:	4770      	bx	lr
 800c252:	f803 1b01 	strb.w	r1, [r3], #1
 800c256:	e7f9      	b.n	800c24c <memset+0x4>

0800c258 <__libc_init_array>:
 800c258:	b570      	push	{r4, r5, r6, lr}
 800c25a:	4d0d      	ldr	r5, [pc, #52]	; (800c290 <__libc_init_array+0x38>)
 800c25c:	4c0d      	ldr	r4, [pc, #52]	; (800c294 <__libc_init_array+0x3c>)
 800c25e:	1b64      	subs	r4, r4, r5
 800c260:	10a4      	asrs	r4, r4, #2
 800c262:	2600      	movs	r6, #0
 800c264:	42a6      	cmp	r6, r4
 800c266:	d109      	bne.n	800c27c <__libc_init_array+0x24>
 800c268:	4d0b      	ldr	r5, [pc, #44]	; (800c298 <__libc_init_array+0x40>)
 800c26a:	4c0c      	ldr	r4, [pc, #48]	; (800c29c <__libc_init_array+0x44>)
 800c26c:	f000 f818 	bl	800c2a0 <_init>
 800c270:	1b64      	subs	r4, r4, r5
 800c272:	10a4      	asrs	r4, r4, #2
 800c274:	2600      	movs	r6, #0
 800c276:	42a6      	cmp	r6, r4
 800c278:	d105      	bne.n	800c286 <__libc_init_array+0x2e>
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c280:	4798      	blx	r3
 800c282:	3601      	adds	r6, #1
 800c284:	e7ee      	b.n	800c264 <__libc_init_array+0xc>
 800c286:	f855 3b04 	ldr.w	r3, [r5], #4
 800c28a:	4798      	blx	r3
 800c28c:	3601      	adds	r6, #1
 800c28e:	e7f2      	b.n	800c276 <__libc_init_array+0x1e>
 800c290:	0800c304 	.word	0x0800c304
 800c294:	0800c304 	.word	0x0800c304
 800c298:	0800c304 	.word	0x0800c304
 800c29c:	0800c308 	.word	0x0800c308

0800c2a0 <_init>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	bf00      	nop
 800c2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a6:	bc08      	pop	{r3}
 800c2a8:	469e      	mov	lr, r3
 800c2aa:	4770      	bx	lr

0800c2ac <_fini>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	bf00      	nop
 800c2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b2:	bc08      	pop	{r3}
 800c2b4:	469e      	mov	lr, r3
 800c2b6:	4770      	bx	lr
