
Gamepad_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800bac4  0800bac4  0001bac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb10  0800bb10  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb10  0800bb10  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb10  0800bb10  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb10  0800bb10  0001bb10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb14  0800bb14  0001bb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800bb18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  20000168  0800bc80  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ca8  0800bc80  00020ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b821  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f8b  00000000  00000000  0003b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  0003f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001266  00000000  00000000  000411b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022118  00000000  00000000  00042416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d1b3  00000000  00000000  0006452e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9d45  00000000  00000000  000816e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006568  00000000  00000000  0015b428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00161990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800baac 	.word	0x0800baac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800baac 	.word	0x0800baac

08000218 <ADC_DMA_Init>:

int8_t adc_x1, adc_x2;
int8_t adc_y1, adc_y2;

void ADC_DMA_Init (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA (&hadc1, (uint32_t *)adc_buffer1, BUFFER_SIZE);
 800021c:	2202      	movs	r2, #2
 800021e:	4907      	ldr	r1, [pc, #28]	; (800023c <ADC_DMA_Init+0x24>)
 8000220:	4807      	ldr	r0, [pc, #28]	; (8000240 <ADC_DMA_Init+0x28>)
 8000222:	f001 fcc9 	bl	8001bb8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA (&hadc2, (uint32_t *)adc_buffer2, BUFFER_SIZE);
 8000226:	2202      	movs	r2, #2
 8000228:	4906      	ldr	r1, [pc, #24]	; (8000244 <ADC_DMA_Init+0x2c>)
 800022a:	4807      	ldr	r0, [pc, #28]	; (8000248 <ADC_DMA_Init+0x30>)
 800022c:	f001 fcc4 	bl	8001bb8 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start (&htim6);
 8000230:	4806      	ldr	r0, [pc, #24]	; (800024c <ADC_DMA_Init+0x34>)
 8000232:	f005 ffdd 	bl	80061f0 <HAL_TIM_Base_Start>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000184 	.word	0x20000184
 8000240:	200001a0 	.word	0x200001a0
 8000244:	2000018c 	.word	0x2000018c
 8000248:	2000020c 	.word	0x2000020c
 800024c:	200003d0 	.word	0x200003d0

08000250 <ScaleData>:

void ScaleData (void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	adc_x1 = (int8_t)((adc_buffer1 [0] / 4095) * 510) - 255;
 8000254:	4b2a      	ldr	r3, [pc, #168]	; (8000300 <ScaleData+0xb0>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <ScaleData+0xb4>)
 800025a:	fba3 1302 	umull	r1, r3, r3, r2
 800025e:	1ad2      	subs	r2, r2, r3
 8000260:	0852      	lsrs	r2, r2, #1
 8000262:	4413      	add	r3, r2
 8000264:	0adb      	lsrs	r3, r3, #11
 8000266:	b2db      	uxtb	r3, r3
 8000268:	461a      	mov	r2, r3
 800026a:	01d2      	lsls	r2, r2, #7
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	b2db      	uxtb	r3, r3
 8000272:	3301      	adds	r3, #1
 8000274:	b2db      	uxtb	r3, r3
 8000276:	b25a      	sxtb	r2, r3
 8000278:	4b23      	ldr	r3, [pc, #140]	; (8000308 <ScaleData+0xb8>)
 800027a:	701a      	strb	r2, [r3, #0]
	adc_y1 = (int8_t)((adc_buffer1 [1] / 4095) * 510) - 255;
 800027c:	4b20      	ldr	r3, [pc, #128]	; (8000300 <ScaleData+0xb0>)
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	4b20      	ldr	r3, [pc, #128]	; (8000304 <ScaleData+0xb4>)
 8000282:	fba3 1302 	umull	r1, r3, r3, r2
 8000286:	1ad2      	subs	r2, r2, r3
 8000288:	0852      	lsrs	r2, r2, #1
 800028a:	4413      	add	r3, r2
 800028c:	0adb      	lsrs	r3, r3, #11
 800028e:	b2db      	uxtb	r3, r3
 8000290:	461a      	mov	r2, r3
 8000292:	01d2      	lsls	r2, r2, #7
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	b2db      	uxtb	r3, r3
 800029a:	3301      	adds	r3, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	b25a      	sxtb	r2, r3
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <ScaleData+0xbc>)
 80002a2:	701a      	strb	r2, [r3, #0]
	adc_x2 = (int8_t)((adc_buffer2 [0] / 4095) * 510) - 255;
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <ScaleData+0xc0>)
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <ScaleData+0xb4>)
 80002aa:	fba3 1302 	umull	r1, r3, r3, r2
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	0852      	lsrs	r2, r2, #1
 80002b2:	4413      	add	r3, r2
 80002b4:	0adb      	lsrs	r3, r3, #11
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	461a      	mov	r2, r3
 80002ba:	01d2      	lsls	r2, r2, #7
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	3301      	adds	r3, #1
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25a      	sxtb	r2, r3
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <ScaleData+0xc4>)
 80002ca:	701a      	strb	r2, [r3, #0]
	adc_y2 = (int8_t)((adc_buffer2 [1] / 4095) * 510) - 255;
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <ScaleData+0xc0>)
 80002ce:	685a      	ldr	r2, [r3, #4]
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <ScaleData+0xb4>)
 80002d2:	fba3 1302 	umull	r1, r3, r3, r2
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	0852      	lsrs	r2, r2, #1
 80002da:	4413      	add	r3, r2
 80002dc:	0adb      	lsrs	r3, r3, #11
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	01d2      	lsls	r2, r2, #7
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	3301      	adds	r3, #1
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	b25a      	sxtb	r2, r3
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <ScaleData+0xc8>)
 80002f2:	701a      	strb	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000184 	.word	0x20000184
 8000304:	00100101 	.word	0x00100101
 8000308:	20000194 	.word	0x20000194
 800030c:	20000196 	.word	0x20000196
 8000310:	2000018c 	.word	0x2000018c
 8000314:	20000195 	.word	0x20000195
 8000318:	20000197 	.word	0x20000197

0800031c <UpdateButton>:
};

GamepadReport_TypeDef gamepad_report = {0};

void UpdateButton (void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    gamepad_report.buttons = 0;
 8000320:	4b2f      	ldr	r3, [pc, #188]	; (80003e0 <UpdateButton+0xc4>)
 8000322:	2200      	movs	r2, #0
 8000324:	801a      	strh	r2, [r3, #0]

    if (Left)      gamepad_report.buttons |= (1 << 0);
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <UpdateButton+0xc8>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d006      	beq.n	800033c <UpdateButton+0x20>
 800032e:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <UpdateButton+0xc4>)
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	b29a      	uxth	r2, r3
 8000338:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <UpdateButton+0xc4>)
 800033a:	801a      	strh	r2, [r3, #0]
    if (Up)        gamepad_report.buttons |= (1 << 1);
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <UpdateButton+0xcc>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d006      	beq.n	8000352 <UpdateButton+0x36>
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <UpdateButton+0xc4>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <UpdateButton+0xc4>)
 8000350:	801a      	strh	r2, [r3, #0]
    if (Right)     gamepad_report.buttons |= (1 << 2);
 8000352:	4b26      	ldr	r3, [pc, #152]	; (80003ec <UpdateButton+0xd0>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d006      	beq.n	8000368 <UpdateButton+0x4c>
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <UpdateButton+0xc4>)
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	b29a      	uxth	r2, r3
 8000364:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <UpdateButton+0xc4>)
 8000366:	801a      	strh	r2, [r3, #0]
    if (Down)      gamepad_report.buttons |= (1 << 3);
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <UpdateButton+0xd4>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d006      	beq.n	800037e <UpdateButton+0x62>
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <UpdateButton+0xc4>)
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	f043 0308 	orr.w	r3, r3, #8
 8000378:	b29a      	uxth	r2, r3
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <UpdateButton+0xc4>)
 800037c:	801a      	strh	r2, [r3, #0]
    if (Circle)    gamepad_report.buttons |= (1 << 4);
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <UpdateButton+0xd8>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <UpdateButton+0x78>
 8000386:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <UpdateButton+0xc4>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	b29a      	uxth	r2, r3
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <UpdateButton+0xc4>)
 8000392:	801a      	strh	r2, [r3, #0]
    if (Triangle)  gamepad_report.buttons |= (1 << 5);
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <UpdateButton+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d006      	beq.n	80003aa <UpdateButton+0x8e>
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <UpdateButton+0xc4>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	f043 0320 	orr.w	r3, r3, #32
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <UpdateButton+0xc4>)
 80003a8:	801a      	strh	r2, [r3, #0]
    if (Chrest)    gamepad_report.buttons |= (1 << 6);
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <UpdateButton+0xe0>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d006      	beq.n	80003c0 <UpdateButton+0xa4>
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <UpdateButton+0xc4>)
 80003b4:	881b      	ldrh	r3, [r3, #0]
 80003b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <UpdateButton+0xc4>)
 80003be:	801a      	strh	r2, [r3, #0]
    if (Square)    gamepad_report.buttons |= (1 << 7);
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <UpdateButton+0xe4>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d006      	beq.n	80003d6 <UpdateButton+0xba>
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <UpdateButton+0xc4>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <UpdateButton+0xc4>)
 80003d4:	801a      	strh	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	20000198 	.word	0x20000198
 80003e4:	200004c8 	.word	0x200004c8
 80003e8:	200004c9 	.word	0x200004c9
 80003ec:	200004ca 	.word	0x200004ca
 80003f0:	200004cb 	.word	0x200004cb
 80003f4:	200004cc 	.word	0x200004cc
 80003f8:	200004cd 	.word	0x200004cd
 80003fc:	200004ce 	.word	0x200004ce
 8000400:	200004cf 	.word	0x200004cf

08000404 <UpdateJoystick>:

void UpdateJoystick (void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	ScaleData();
 8000408:	f7ff ff22 	bl	8000250 <ScaleData>
    gamepad_report.x1 = adc_x1;
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <UpdateJoystick+0x34>)
 800040e:	f993 2000 	ldrsb.w	r2, [r3]
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <UpdateJoystick+0x38>)
 8000414:	709a      	strb	r2, [r3, #2]
    gamepad_report.y1 = adc_y1;
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <UpdateJoystick+0x3c>)
 8000418:	f993 2000 	ldrsb.w	r2, [r3]
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <UpdateJoystick+0x38>)
 800041e:	70da      	strb	r2, [r3, #3]
    gamepad_report.x2 = adc_x2;
 8000420:	4b08      	ldr	r3, [pc, #32]	; (8000444 <UpdateJoystick+0x40>)
 8000422:	f993 2000 	ldrsb.w	r2, [r3]
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <UpdateJoystick+0x38>)
 8000428:	711a      	strb	r2, [r3, #4]
    gamepad_report.y2 = adc_y2;
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <UpdateJoystick+0x44>)
 800042c:	f993 2000 	ldrsb.w	r2, [r3]
 8000430:	4b02      	ldr	r3, [pc, #8]	; (800043c <UpdateJoystick+0x38>)
 8000432:	715a      	strb	r2, [r3, #5]
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000194 	.word	0x20000194
 800043c:	20000198 	.word	0x20000198
 8000440:	20000196 	.word	0x20000196
 8000444:	20000195 	.word	0x20000195
 8000448:	20000197 	.word	0x20000197

0800044c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 || hadc == &hadc2)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a06      	ldr	r2, [pc, #24]	; (8000470 <HAL_ADC_ConvCpltCallback+0x24>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d003      	beq.n	8000464 <HAL_ADC_ConvCpltCallback+0x18>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <HAL_ADC_ConvCpltCallback+0x28>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d101      	bne.n	8000468 <HAL_ADC_ConvCpltCallback+0x1c>
	{
		SendReport ();
 8000464:	f000 f808 	bl	8000478 <SendReport>
	}
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200001a0 	.word	0x200001a0
 8000474:	2000020c 	.word	0x2000020c

08000478 <SendReport>:

void SendReport (void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
    UpdateButton();
 800047c:	f7ff ff4e 	bl	800031c <UpdateButton>
    UpdateJoystick();
 8000480:	f7ff ffc0 	bl	8000404 <UpdateJoystick>
    USBD_HID_SendReport (&hUsbDeviceFS, (uint8_t *) &gamepad_report, sizeof (gamepad_report));
 8000484:	2206      	movs	r2, #6
 8000486:	4903      	ldr	r1, [pc, #12]	; (8000494 <SendReport+0x1c>)
 8000488:	4803      	ldr	r0, [pc, #12]	; (8000498 <SendReport+0x20>)
 800048a:	f009 fd51 	bl	8009f30 <USBD_HID_SendReport>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000198 	.word	0x20000198
 8000498:	200004e8 	.word	0x200004e8

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 ff55 	bl	800134e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f81c 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 fb04 	bl	8000ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ac:	f000 fac8 	bl	8000a40 <MX_DMA_Init>
  MX_ADC1_Init();
 80004b0:	f000 f860 	bl	8000574 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004b4:	f000 f8d8 	bl	8000668 <MX_ADC2_Init>
  MX_USB_Device_Init();
 80004b8:	f00a feb6 	bl	800b228 <MX_USB_Device_Init>
  MX_TIM6_Init();
 80004bc:	f000 fa10 	bl	80008e0 <MX_TIM6_Init>
  MX_TIM3_Init();
 80004c0:	f000 f93a 	bl	8000738 <MX_TIM3_Init>
  MX_TIM17_Init();
 80004c4:	f000 fa44 	bl	8000950 <MX_TIM17_Init>
  MX_TIM4_Init();
 80004c8:	f000 f9ae 	bl	8000828 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ADC_DMA_Init();
 80004cc:	f7ff fea4 	bl	8000218 <ADC_DMA_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_ConvCpltCallback (hadc);
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <main+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ffb9 	bl	800044c <HAL_ADC_ConvCpltCallback>
 80004da:	e7f9      	b.n	80004d0 <main+0x34>
 80004dc:	200004d0 	.word	0x200004d0

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b094      	sub	sp, #80	; 0x50
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0318 	add.w	r3, r7, #24
 80004ea:	2238      	movs	r2, #56	; 0x38
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f00b fab0 	bl	800ba54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000502:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000506:	f004 fe81 	bl	800520c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050a:	2301      	movs	r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800050e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000512:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000514:	2302      	movs	r3, #2
 8000516:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000518:	2303      	movs	r3, #3
 800051a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 800051c:	2303      	movs	r3, #3
 800051e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000520:	230c      	movs	r3, #12
 8000522:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000524:	2302      	movs	r3, #2
 8000526:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000528:	2304      	movs	r3, #4
 800052a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800052c:	2302      	movs	r3, #2
 800052e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	4618      	mov	r0, r3
 8000536:	f004 ff1d 	bl	8005374 <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000540:	f000 fbca 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000548:	2302      	movs	r3, #2
 800054a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2101      	movs	r1, #1
 800055c:	4618      	mov	r0, r3
 800055e:	f005 fa1b 	bl	8005998 <HAL_RCC_ClockConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000568:	f000 fbb6 	bl	8000cd8 <Error_Handler>
  }
}
 800056c:	bf00      	nop
 800056e:	3750      	adds	r7, #80	; 0x50
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08c      	sub	sp, #48	; 0x30
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2220      	movs	r2, #32
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f00b fa61 	bl	800ba54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000592:	4b33      	ldr	r3, [pc, #204]	; (8000660 <MX_ADC1_Init+0xec>)
 8000594:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000598:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <MX_ADC1_Init+0xec>)
 800059c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a2:	4b2f      	ldr	r3, [pc, #188]	; (8000660 <MX_ADC1_Init+0xec>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a8:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <MX_ADC1_Init+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_ADC1_Init+0xec>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <MX_ADC1_Init+0xec>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_ADC1_Init+0xec>)
 80005bc:	2204      	movs	r2, #4
 80005be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005c0:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_ADC1_Init+0xec>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <MX_ADC1_Init+0xec>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80005cc:	4b24      	ldr	r3, [pc, #144]	; (8000660 <MX_ADC1_Init+0xec>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <MX_ADC1_Init+0xec>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_ADC1_Init+0xec>)
 80005dc:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80005e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_ADC1_Init+0xec>)
 80005e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0xec>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_ADC1_Init+0xec>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_ADC1_Init+0xec>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	4817      	ldr	r0, [pc, #92]	; (8000660 <MX_ADC1_Init+0xec>)
 8000602:	f001 f955 	bl	80018b0 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800060c:	f000 fb64 	bl	8000cd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000618:	4619      	mov	r1, r3
 800061a:	4811      	ldr	r0, [pc, #68]	; (8000660 <MX_ADC1_Init+0xec>)
 800061c:	f002 fb1a 	bl	8002c54 <HAL_ADCEx_MultiModeConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000626:	f000 fb57 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_ADC1_Init+0xf0>)
 800062c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062e:	2306      	movs	r3, #6
 8000630:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000636:	237f      	movs	r3, #127	; 0x7f
 8000638:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063a:	2304      	movs	r3, #4
 800063c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <MX_ADC1_Init+0xec>)
 8000648:	f001 fda2 	bl	8002190 <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000652:	f000 fb41 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	3730      	adds	r7, #48	; 0x30
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200001a0 	.word	0x200001a0
 8000664:	0c900008 	.word	0x0c900008

08000668 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2220      	movs	r2, #32
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f00b f9ed 	bl	800ba54 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_ADC2_Init+0xc4>)
 800067c:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <MX_ADC2_Init+0xc8>)
 800067e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_ADC2_Init+0xc4>)
 8000682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000686:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <MX_ADC2_Init+0xc4>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC2_Init+0xc4>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_ADC2_Init+0xc4>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800069a:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_ADC2_Init+0xc4>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_ADC2_Init+0xc4>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_ADC2_Init+0xc4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ADC2_Init+0xc4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_ADC2_Init+0xc4>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_ADC2_Init+0xc4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_ADC2_Init+0xc4>)
 80006c2:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_ADC2_Init+0xc4>)
 80006ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_ADC2_Init+0xc4>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_ADC2_Init+0xc4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ADC2_Init+0xc4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006e6:	4811      	ldr	r0, [pc, #68]	; (800072c <MX_ADC2_Init+0xc4>)
 80006e8:	f001 f8e2 	bl	80018b0 <HAL_ADC_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80006f2:	f000 faf1 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_ADC2_Init+0xcc>)
 80006f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fa:	2306      	movs	r3, #6
 80006fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000702:	237f      	movs	r3, #127	; 0x7f
 8000704:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000706:	2304      	movs	r3, #4
 8000708:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_ADC2_Init+0xc4>)
 8000714:	f001 fd3c 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800071e:	f000 fadb 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000020c 	.word	0x2000020c
 8000730:	50000100 	.word	0x50000100
 8000734:	08600004 	.word	0x08600004

08000738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08e      	sub	sp, #56	; 0x38
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <MX_TIM3_Init+0xe8>)
 800076c:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <MX_TIM3_Init+0xec>)
 800076e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 8000770:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000772:	f240 128f 	movw	r2, #399	; 0x18f
 8000776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <MX_TIM3_Init+0xe8>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 599;
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000780:	f240 2257 	movw	r2, #599	; 0x257
 8000784:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_TIM3_Init+0xe8>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000792:	4823      	ldr	r0, [pc, #140]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000794:	f005 fcd4 	bl	8006140 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800079e:	f000 fa9b 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ac:	4619      	mov	r1, r3
 80007ae:	481c      	ldr	r0, [pc, #112]	; (8000820 <MX_TIM3_Init+0xe8>)
 80007b0:	f006 f83a 	bl	8006828 <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80007ba:	f000 fa8d 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007be:	4818      	ldr	r0, [pc, #96]	; (8000820 <MX_TIM3_Init+0xe8>)
 80007c0:	f005 fd78 	bl	80062b4 <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80007ca:	f000 fa85 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <MX_TIM3_Init+0xe8>)
 80007de:	f006 fd7d 	bl	80072dc <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80007e8:	f000 fa76 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007fc:	463b      	mov	r3, r7
 80007fe:	2204      	movs	r2, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4807      	ldr	r0, [pc, #28]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000804:	f005 fefc 	bl	8006600 <HAL_TIM_PWM_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800080e:	f000 fa63 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000812:	4803      	ldr	r0, [pc, #12]	; (8000820 <MX_TIM3_Init+0xe8>)
 8000814:	f000 fc3c 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000818:	bf00      	nop
 800081a:	3738      	adds	r7, #56	; 0x38
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000338 	.word	0x20000338
 8000824:	40000400 	.word	0x40000400

08000828 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
 8000848:	615a      	str	r2, [r3, #20]
 800084a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_TIM4_Init+0xb0>)
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_TIM4_Init+0xb4>)
 8000850:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 399;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_TIM4_Init+0xb0>)
 8000854:	f240 128f 	movw	r2, #399	; 0x18f
 8000858:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_TIM4_Init+0xb0>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 599;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_TIM4_Init+0xb0>)
 8000862:	f240 2257 	movw	r2, #599	; 0x257
 8000866:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_TIM4_Init+0xb0>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_TIM4_Init+0xb0>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000874:	4818      	ldr	r0, [pc, #96]	; (80008d8 <MX_TIM4_Init+0xb0>)
 8000876:	f005 fd1d 	bl	80062b4 <HAL_TIM_PWM_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 fa2a 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_TIM4_Init+0xb0>)
 8000894:	f006 fd22 	bl	80072dc <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800089e:	f000 fa1b 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a2:	2360      	movs	r3, #96	; 0x60
 80008a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	2208      	movs	r2, #8
 80008b6:	4619      	mov	r1, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <MX_TIM4_Init+0xb0>)
 80008ba:	f005 fea1 	bl	8006600 <HAL_TIM_PWM_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80008c4:	f000 fa08 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <MX_TIM4_Init+0xb0>)
 80008ca:	f000 fbe1 	bl	8001090 <HAL_TIM_MspPostInit>

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000384 	.word	0x20000384
 80008dc:	40000800 	.word	0x40000800

080008e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_TIM6_Init+0x68>)
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <MX_TIM6_Init+0x6c>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_TIM6_Init+0x68>)
 80008f8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80008fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_TIM6_Init+0x68>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_TIM6_Init+0x68>)
 8000906:	f240 32e7 	movw	r2, #999	; 0x3e7
 800090a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_TIM6_Init+0x68>)
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_TIM6_Init+0x68>)
 8000914:	f005 fc14 	bl	8006140 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800091e:	f000 f9db 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000922:	2320      	movs	r3, #32
 8000924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_TIM6_Init+0x68>)
 8000930:	f006 fcd4 	bl	80072dc <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800093a:	f000 f9cd 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200003d0 	.word	0x200003d0
 800094c:	40001000 	.word	0x40001000

08000950 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2234      	movs	r2, #52	; 0x34
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f00b f86f 	bl	800ba54 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <MX_TIM17_Init+0xe8>)
 8000978:	4a30      	ldr	r2, [pc, #192]	; (8000a3c <MX_TIM17_Init+0xec>)
 800097a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <MX_TIM17_Init+0xe8>)
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <MX_TIM17_Init+0xe8>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 59;
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <MX_TIM17_Init+0xe8>)
 800098a:	223b      	movs	r2, #59	; 0x3b
 800098c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_TIM17_Init+0xe8>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_TIM17_Init+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_TIM17_Init+0xe8>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009a0:	4825      	ldr	r0, [pc, #148]	; (8000a38 <MX_TIM17_Init+0xe8>)
 80009a2:	f005 fbcd 	bl	8006140 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 f994 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80009b0:	4821      	ldr	r0, [pc, #132]	; (8000a38 <MX_TIM17_Init+0xe8>)
 80009b2:	f005 fc7f 	bl	80062b4 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80009bc:	f000 f98c 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	2360      	movs	r3, #96	; 0x60
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	4814      	ldr	r0, [pc, #80]	; (8000a38 <MX_TIM17_Init+0xe8>)
 80009e6:	f005 fe0b 	bl	8006600 <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80009f0:	f000 f972 	bl	8000cd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <MX_TIM17_Init+0xe8>)
 8000a1c:	f006 fce0 	bl	80073e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000a26:	f000 f957 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MX_TIM17_Init+0xe8>)
 8000a2c:	f000 fb30 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000a30:	bf00      	nop
 8000a32:	3750      	adds	r7, #80	; 0x50
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2000041c 	.word	0x2000041c
 8000a3c:	40014800 	.word	0x40014800

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_DMA_Init+0x70>)
 8000a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <MX_DMA_Init+0x70>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6493      	str	r3, [r2, #72]	; 0x48
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_DMA_Init+0x70>)
 8000a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_DMA_Init+0x70>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_DMA_Init+0x70>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6493      	str	r3, [r2, #72]	; 0x48
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_DMA_Init+0x70>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	200b      	movs	r0, #11
 8000a7c:	f002 fa69 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a80:	200b      	movs	r0, #11
 8000a82:	f002 fa80 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	200c      	movs	r0, #12
 8000a8c:	f002 fa61 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a90:	200c      	movs	r0, #12
 8000a92:	f002 fa78 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	200d      	movs	r0, #13
 8000a9c:	f002 fa59 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000aa0:	200d      	movs	r0, #13
 8000aa2:	f002 fa70 	bl	8002f86 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aca:	4b64      	ldr	r3, [pc, #400]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a63      	ldr	r2, [pc, #396]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b61      	ldr	r3, [pc, #388]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b5e      	ldr	r3, [pc, #376]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a5d      	ldr	r2, [pc, #372]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b5b      	ldr	r3, [pc, #364]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b58      	ldr	r3, [pc, #352]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b55      	ldr	r3, [pc, #340]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b52      	ldr	r3, [pc, #328]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b4f      	ldr	r3, [pc, #316]	; (8000c5c <MX_GPIO_Init+0x1a8>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b30:	2303      	movs	r3, #3
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4848      	ldr	r0, [pc, #288]	; (8000c60 <MX_GPIO_Init+0x1ac>)
 8000b40:	f002 fcae 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b44:	2308      	movs	r3, #8
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f002 fca1 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b62:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f002 fc93 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000b7a:	23d1      	movs	r3, #209	; 0xd1
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4835      	ldr	r0, [pc, #212]	; (8000c64 <MX_GPIO_Init+0x1b0>)
 8000b90:	f002 fc86 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f002 fc77 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f002 fc68 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	481f      	ldr	r0, [pc, #124]	; (8000c64 <MX_GPIO_Init+0x1b0>)
 8000be6:	f002 fc5b 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bea:	2320      	movs	r3, #32
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4819      	ldr	r0, [pc, #100]	; (8000c64 <MX_GPIO_Init+0x1b0>)
 8000bfe:	f002 fc4f 	bl	80034a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2006      	movs	r0, #6
 8000c08:	f002 f9a3 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f002 f9ba 	bl	8002f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2009      	movs	r0, #9
 8000c18:	f002 f99b 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c1c:	2009      	movs	r0, #9
 8000c1e:	f002 f9b2 	bl	8002f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	200a      	movs	r0, #10
 8000c28:	f002 f993 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c2c:	200a      	movs	r0, #10
 8000c2e:	f002 f9aa 	bl	8002f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2017      	movs	r0, #23
 8000c38:	f002 f98b 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c3c:	2017      	movs	r0, #23
 8000c3e:	f002 f9a2 	bl	8002f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2028      	movs	r0, #40	; 0x28
 8000c48:	f002 f983 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4c:	2028      	movs	r0, #40	; 0x28
 8000c4e:	f002 f99a 	bl	8002f86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48001800 	.word	0x48001800
 8000c64:	48000400 	.word	0x48000400

08000c68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
	/*if (GPIO_Pin == GPIO_PIN_5)
	{
		  CounterSwitch();
	}*/
	if (GPIO_Pin == GPIO_PIN_5)
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b20      	cmp	r3, #32
 8000c76:	d124      	bne.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x5a>
	{
		if (Push == 0)
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d106      	bne.n	8000c8e <HAL_GPIO_EXTI_Callback+0x26>
		{
			Push = HAL_GetTick();
 8000c80:	f000 fbca 	bl	8001418 <HAL_GetTick>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x64>)
 8000c8a:	601a      	str	r2, [r3, #0]
				Chrest = 0;
			}
		}

	}
}
 8000c8c:	e019      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x5a>
			DelayPush = HAL_GetTick();
 8000c8e:	f000 fbc3 	bl	8001418 <HAL_GetTick>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
			if (DelayPush - Push <= 200)
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x64>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	2bc8      	cmp	r3, #200	; 0xc8
 8000ca6:	dc03      	bgt.n	8000cb0 <HAL_GPIO_EXTI_Callback+0x48>
				Chrest = 1;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
}
 8000cae:	e008      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x5a>
				Push = 0;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
				DelayPush = 0;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
				Chrest = 0;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200004d4 	.word	0x200004d4
 8000cd0:	200004d8 	.word	0x200004d8
 8000cd4:	200004ce 	.word	0x200004ce

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x44>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x44>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x44>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x44>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d1a:	f004 fb1b 	bl	8005354 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09c      	sub	sp, #112	; 0x70
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	2244      	movs	r2, #68	; 0x44
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00a fe81 	bl	800ba54 <memset>
  if(hadc->Instance==ADC1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d5a:	d172      	bne.n	8000e42 <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d66:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fff7 	bl	8005d60 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d78:	f7ff ffae 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d7c:	4b6e      	ldr	r3, [pc, #440]	; (8000f38 <HAL_ADC_MspInit+0x20c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	4a6d      	ldr	r2, [pc, #436]	; (8000f38 <HAL_ADC_MspInit+0x20c>)
 8000d84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d86:	4b6c      	ldr	r3, [pc, #432]	; (8000f38 <HAL_ADC_MspInit+0x20c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d10b      	bne.n	8000da6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d8e:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a6a      	ldr	r2, [pc, #424]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b65      	ldr	r3, [pc, #404]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a64      	ldr	r2, [pc, #400]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b62      	ldr	r3, [pc, #392]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f002 fb64 	bl	80034a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dd8:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000dda:	4a5a      	ldr	r2, [pc, #360]	; (8000f44 <HAL_ADC_MspInit+0x218>)
 8000ddc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000dde:	4b58      	ldr	r3, [pc, #352]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000de0:	2205      	movs	r2, #5
 8000de2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000de4:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dea:	4b55      	ldr	r3, [pc, #340]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000df0:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000df6:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dfe:	4b50      	ldr	r3, [pc, #320]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e06:	4b4e      	ldr	r3, [pc, #312]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000e08:	2220      	movs	r2, #32
 8000e0a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e0c:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e14:	484a      	ldr	r0, [pc, #296]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000e16:	f002 f8d1 	bl	8002fbc <HAL_DMA_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000e20:	f7ff ff5a 	bl	8000cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a46      	ldr	r2, [pc, #280]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000e28:	655a      	str	r2, [r3, #84]	; 0x54
 8000e2a:	4a45      	ldr	r2, [pc, #276]	; (8000f40 <HAL_ADC_MspInit+0x214>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2012      	movs	r0, #18
 8000e36:	f002 f88c 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e3a:	2012      	movs	r0, #18
 8000e3c:	f002 f8a3 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e40:	e076      	b.n	8000f30 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a40      	ldr	r2, [pc, #256]	; (8000f48 <HAL_ADC_MspInit+0x21c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d171      	bne.n	8000f30 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e56:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	f107 0318 	add.w	r3, r7, #24
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f004 ff7f 	bl	8005d60 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8000e68:	f7ff ff36 	bl	8000cd8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e6c:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <HAL_ADC_MspInit+0x20c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <HAL_ADC_MspInit+0x20c>)
 8000e74:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <HAL_ADC_MspInit+0x20c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d10b      	bne.n	8000e96 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000e84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a28      	ldr	r2, [pc, #160]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <HAL_ADC_MspInit+0x210>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000eae:	2342      	movs	r3, #66	; 0x42
 8000eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f002 faec 	bl	80034a0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <HAL_ADC_MspInit+0x224>)
 8000ecc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000ed0:	2224      	movs	r2, #36	; 0x24
 8000ed2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000ef8:	2220      	movs	r2, #32
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f04:	4811      	ldr	r0, [pc, #68]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000f06:	f002 f859 	bl	8002fbc <HAL_DMA_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_ADC_MspInit+0x1e8>
      Error_Handler();
 8000f10:	f7ff fee2 	bl	8000cd8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000f18:	655a      	str	r2, [r3, #84]	; 0x54
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <HAL_ADC_MspInit+0x220>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2012      	movs	r0, #18
 8000f26:	f002 f814 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f2a:	2012      	movs	r0, #18
 8000f2c:	f002 f82b 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	3770      	adds	r7, #112	; 0x70
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200004dc 	.word	0x200004dc
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	20000278 	.word	0x20000278
 8000f44:	40020008 	.word	0x40020008
 8000f48:	50000100 	.word	0x50000100
 8000f4c:	200002d8 	.word	0x200002d8
 8000f50:	4002001c 	.word	0x4002001c

08000f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a35      	ldr	r2, [pc, #212]	; (8001038 <HAL_TIM_Base_MspInit+0xe4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10c      	bne.n	8000f80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f66:	4b35      	ldr	r3, [pc, #212]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a34      	ldr	r2, [pc, #208]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f7e:	e056      	b.n	800102e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_TIM_Base_MspInit+0xec>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10c      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
}
 8000fa2:	e044      	b.n	800102e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM17)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_TIM_Base_MspInit+0xf0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d13f      	bne.n	800102e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	4a22      	ldr	r2, [pc, #136]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_TIM_Base_MspInit+0xe8>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000fc8:	4a20      	ldr	r2, [pc, #128]	; (800104c <HAL_TIM_Base_MspInit+0xf8>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000fce:	2254      	movs	r2, #84	; 0x54
 8000fd0:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fea:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8000ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001000:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8001004:	f001 ffda 	bl	8002fbc <HAL_DMA_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 800100e:	f7ff fe63 	bl	8000cd8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_Base_MspInit+0xf4>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	201a      	movs	r0, #26
 8001024:	f001 ff95 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001028:	201a      	movs	r0, #26
 800102a:	f001 ffac 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40000400 	.word	0x40000400
 800103c:	40021000 	.word	0x40021000
 8001040:	40001000 	.word	0x40001000
 8001044:	40014800 	.word	0x40014800
 8001048:	20000468 	.word	0x20000468
 800104c:	40020030 	.word	0x40020030

08001050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_TIM_PWM_MspInit+0x38>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d10b      	bne.n	800107a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_PWM_MspInit+0x3c>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_TIM_PWM_MspInit+0x3c>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6593      	str	r3, [r2, #88]	; 0x58
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_TIM_PWM_MspInit+0x3c>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40000800 	.word	0x40000800
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a34      	ldr	r2, [pc, #208]	; (8001180 <HAL_TIM_MspPostInit+0xf0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d11d      	bne.n	80010ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b34      	ldr	r3, [pc, #208]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a33      	ldr	r2, [pc, #204]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b31      	ldr	r3, [pc, #196]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ca:	2310      	movs	r3, #16
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ce:	2312      	movs	r3, #18
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010da:	2302      	movs	r3, #2
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f002 f9da 	bl	80034a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80010ec:	e044      	b.n	8001178 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a25      	ldr	r2, [pc, #148]	; (8001188 <HAL_TIM_MspPostInit+0xf8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d11d      	bne.n	8001134 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001122:	2302      	movs	r3, #2
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4817      	ldr	r0, [pc, #92]	; (800118c <HAL_TIM_MspPostInit+0xfc>)
 800112e:	f002 f9b7 	bl	80034a0 <HAL_GPIO_Init>
}
 8001132:	e021      	b.n	8001178 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM17)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a15      	ldr	r2, [pc, #84]	; (8001190 <HAL_TIM_MspPostInit+0x100>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d11c      	bne.n	8001178 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_TIM_MspPostInit+0xf4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001166:	2301      	movs	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f002 f994 	bl	80034a0 <HAL_GPIO_Init>
}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40000400 	.word	0x40000400
 8001184:	40021000 	.word	0x40021000
 8001188:	40000800 	.word	0x40000800
 800118c:	48000400 	.word	0x48000400
 8001190:	40014800 	.word	0x40014800

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f908 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f002 fad9 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80011fa:	2008      	movs	r0, #8
 80011fc:	f002 fad2 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001208:	2010      	movs	r0, #16
 800120a:	f002 facb 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <DMA1_Channel1_IRQHandler+0x10>)
 800121a:	f001 fff2 	bl	8003202 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000278 	.word	0x20000278

08001228 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <DMA1_Channel2_IRQHandler+0x10>)
 800122e:	f001 ffe8 	bl	8003202 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002d8 	.word	0x200002d8

0800123c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <DMA1_Channel3_IRQHandler+0x10>)
 8001242:	f001 ffde 	bl	8003202 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000468 	.word	0x20000468

08001250 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <ADC1_2_IRQHandler+0x14>)
 8001256:	f000 fd63 	bl	8001d20 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <ADC1_2_IRQHandler+0x18>)
 800125c:	f000 fd60 	bl	8001d20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200001a0 	.word	0x200001a0
 8001268:	2000020c 	.word	0x2000020c

0800126c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <USB_LP_IRQHandler+0x10>)
 8001272:	f002 fb9f 	bl	80039b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200009b8 	.word	0x200009b8

08001280 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001284:	2020      	movs	r0, #32
 8001286:	f002 fa8d 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800128a:	2040      	movs	r0, #64	; 0x40
 800128c:	f002 fa8a 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001290:	2080      	movs	r0, #128	; 0x80
 8001292:	f002 fa87 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001296:	f44f 7080 	mov.w	r0, #256	; 0x100
 800129a:	f002 fa83 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800129e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012a2:	f002 fa7f 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012b2:	f005 f856 	bl	8006362 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000041c 	.word	0x2000041c

080012c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012c8:	f002 fa6c 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012d0:	f002 fa68 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001300:	f7ff ffea 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopForever+0x6>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopForever+0xe>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopForever+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800132a:	f00a fb9b 	bl	800ba64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132e:	f7ff f8b5 	bl	800049c <main>

08001332 <LoopForever>:

LoopForever:
    b LoopForever
 8001332:	e7fe      	b.n	8001332 <LoopForever>
  ldr   r0, =_estack
 8001334:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001340:	0800bb18 	.word	0x0800bb18
  ldr r2, =_sbss
 8001344:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001348:	20000ca8 	.word	0x20000ca8

0800134c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800134c:	e7fe      	b.n	800134c <COMP1_2_3_IRQHandler>

0800134e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f001 fdef 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135e:	200f      	movs	r0, #15
 8001360:	f000 f80e 	bl	8001380 <HAL_InitTick>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	71fb      	strb	r3, [r7, #7]
 800136e:	e001      	b.n	8001374 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001370:	f7ff fcb8 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001374:	79fb      	ldrb	r3, [r7, #7]

}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_InitTick+0x68>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d022      	beq.n	80013da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_InitTick+0x6c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_InitTick+0x68>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 fdfa 	bl	8002fa2 <HAL_SYSTICK_Config>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10f      	bne.n	80013d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	d809      	bhi.n	80013ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ba:	2200      	movs	r2, #0
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	f04f 30ff 	mov.w	r0, #4294967295
 80013c2:	f001 fdc6 	bl	8002f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_InitTick+0x70>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e007      	b.n	80013de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e004      	b.n	80013de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e001      	b.n	80013de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x1c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x20>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4413      	add	r3, r2
 8001402:	4a03      	ldr	r2, [pc, #12]	; (8001410 <HAL_IncTick+0x1c>)
 8001404:	6013      	str	r3, [r2, #0]
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	200004e0 	.word	0x200004e0
 8001414:	20000008 	.word	0x20000008

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200004e0 	.word	0x200004e0

08001430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3360      	adds	r3, #96	; 0x60
 80014aa:	461a      	mov	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <LL_ADC_SetOffset+0x44>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	4313      	orrs	r3, r2
 80014c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	03fff000 	.word	0x03fff000

080014e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3360      	adds	r3, #96	; 0x60
 80014ee:	461a      	mov	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3360      	adds	r3, #96	; 0x60
 800151c:	461a      	mov	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	431a      	orrs	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001542:	b480      	push	{r7}
 8001544:	b087      	sub	sp, #28
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3360      	adds	r3, #96	; 0x60
 8001552:	461a      	mov	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	431a      	orrs	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3360      	adds	r3, #96	; 0x60
 8001588:	461a      	mov	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	431a      	orrs	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	615a      	str	r2, [r3, #20]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b087      	sub	sp, #28
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3330      	adds	r3, #48	; 0x30
 800160a:	461a      	mov	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	4413      	add	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	211f      	movs	r1, #31
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	0e9b      	lsrs	r3, r3, #26
 8001632:	f003 011f 	and.w	r1, r3, #31
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001646:	bf00      	nop
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3314      	adds	r3, #20
 8001688:	461a      	mov	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	0e5b      	lsrs	r3, r3, #25
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	4413      	add	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	0d1b      	lsrs	r3, r3, #20
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2107      	movs	r1, #7
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	401a      	ands	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	0d1b      	lsrs	r3, r3, #20
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e8:	43db      	mvns	r3, r3
 80016ea:	401a      	ands	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0318 	and.w	r3, r3, #24
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016f4:	40d9      	lsrs	r1, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	400b      	ands	r3, r1
 80016fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fe:	431a      	orrs	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	0007ffff 	.word	0x0007ffff

08001718 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 031f 	and.w	r3, r3, #31
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6093      	str	r3, [r2, #8]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001788:	d101      	bne.n	800178e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017d8:	d101      	bne.n	80017de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <LL_ADC_IsEnabled+0x18>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <LL_ADC_IsEnabled+0x1a>
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800184a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800184e:	f043 0204 	orr.w	r2, r3, #4
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b04      	cmp	r3, #4
 8001874:	d101      	bne.n	800187a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b08      	cmp	r3, #8
 800189a:	d101      	bne.n	80018a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e167      	b.n	8001b9a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fa27 	bl	8000d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff3f 	bl	8001774 <LL_ADC_IsDeepPowerDownEnabled>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff25 	bl	8001750 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff5a 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff3e 	bl	800179c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001920:	4ba0      	ldr	r3, [pc, #640]	; (8001ba4 <HAL_ADC_Init+0x2f4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	4aa0      	ldr	r2, [pc, #640]	; (8001ba8 <HAL_ADC_Init+0x2f8>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001934:	e002      	b.n	800193c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3b01      	subs	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff3c 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff75 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001978:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 8100 	bne.w	8001b88 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 80fc 	bne.w	8001b88 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001994:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001998:	f043 0202 	orr.w	r2, r3, #2
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff35 	bl	8001814 <LL_ADC_IsEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d111      	bne.n	80019d4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80019b4:	f7ff ff2e 	bl	8001814 <LL_ADC_IsEnabled>
 80019b8:	4604      	mov	r4, r0
 80019ba:	487c      	ldr	r0, [pc, #496]	; (8001bac <HAL_ADC_Init+0x2fc>)
 80019bc:	f7ff ff2a 	bl	8001814 <LL_ADC_IsEnabled>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4323      	orrs	r3, r4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4878      	ldr	r0, [pc, #480]	; (8001bb0 <HAL_ADC_Init+0x300>)
 80019d0:	f7ff fd2e 	bl	8001430 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7f5b      	ldrb	r3, [r3, #29]
 80019d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d106      	bne.n	8001a10 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	3b01      	subs	r3, #1
 8001a08:	045b      	lsls	r3, r3, #17
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d009      	beq.n	8001a2c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <HAL_ADC_Init+0x304>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	69b9      	ldr	r1, [r7, #24]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff14 	bl	8001888 <LL_ADC_INJ_IsConversionOngoing>
 8001a60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d16d      	bne.n	8001b44 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d16a      	bne.n	8001b44 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a8a:	f023 0302 	bic.w	r3, r3, #2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d017      	beq.n	8001ad0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001aae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ab8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6911      	ldr	r1, [r2, #16]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ace:	e013      	b.n	8001af8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ade:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d118      	bne.n	8001b34 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b24:	430a      	orrs	r2, r1
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	e007      	b.n	8001b44 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d10c      	bne.n	8001b66 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f023 010f 	bic.w	r1, r3, #15
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
 8001b64:	e007      	b.n	8001b76 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 020f 	bic.w	r2, r2, #15
 8001b74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	f023 0303 	bic.w	r3, r3, #3
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b86:	e007      	b.n	8001b98 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	f043 0210 	orr.w	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	053e2d63 	.word	0x053e2d63
 8001bac:	50000100 	.word	0x50000100
 8001bb0:	50000300 	.word	0x50000300
 8001bb4:	fff04007 	.word	0xfff04007

08001bb8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bc4:	4851      	ldr	r0, [pc, #324]	; (8001d0c <HAL_ADC_Start_DMA+0x154>)
 8001bc6:	f7ff fda7 	bl	8001718 <LL_ADC_GetMultimode>
 8001bca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe46 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f040 808f 	bne.w	8001cfc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_Start_DMA+0x34>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e08a      	b.n	8001d02 <HAL_ADC_Start_DMA+0x14a>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d002      	beq.n	8001c06 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2b09      	cmp	r3, #9
 8001c04:	d173      	bne.n	8001cee <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 feb2 	bl	8002970 <ADC_Enable>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d166      	bne.n	8001ce4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a38      	ldr	r2, [pc, #224]	; (8001d10 <HAL_ADC_Start_DMA+0x158>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d002      	beq.n	8001c3a <HAL_ADC_Start_DMA+0x82>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	e001      	b.n	8001c3e <HAL_ADC_Start_DMA+0x86>
 8001c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d002      	beq.n	8001c4c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c68:	f023 0206 	bic.w	r2, r3, #6
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	661a      	str	r2, [r3, #96]	; 0x60
 8001c70:	e002      	b.n	8001c78 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	4a25      	ldr	r2, [pc, #148]	; (8001d14 <HAL_ADC_Start_DMA+0x15c>)
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <HAL_ADC_Start_DMA+0x160>)
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_ADC_Start_DMA+0x164>)
 8001c8e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	221c      	movs	r2, #28
 8001c96:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0210 	orr.w	r2, r2, #16
 8001cae:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3340      	adds	r3, #64	; 0x40
 8001cca:	4619      	mov	r1, r3
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f001 fa1c 	bl	800310c <HAL_DMA_Start_IT>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fdac 	bl	800183a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ce2:	e00d      	b.n	8001d00 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001cec:	e008      	b.n	8001d00 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001cfa:	e001      	b.n	8001d00 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	50000300 	.word	0x50000300
 8001d10:	50000100 	.word	0x50000100
 8001d14:	08002a7d 	.word	0x08002a7d
 8001d18:	08002b55 	.word	0x08002b55
 8001d1c:	08002b71 	.word	0x08002b71

08001d20 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d3c:	4883      	ldr	r0, [pc, #524]	; (8001f4c <HAL_ADC_IRQHandler+0x22c>)
 8001d3e:	f7ff fceb 	bl	8001718 <LL_ADC_GetMultimode>
 8001d42:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d017      	beq.n	8001d7e <HAL_ADC_IRQHandler+0x5e>
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d012      	beq.n	8001d7e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 ff65 	bl	8002c40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_ADC_IRQHandler+0x72>
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8085 	beq.w	8001ea8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d07f      	beq.n	8001ea8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fc05 	bl	80015d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d064      	beq.n	8001e9a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a5e      	ldr	r2, [pc, #376]	; (8001f50 <HAL_ADC_IRQHandler+0x230>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d002      	beq.n	8001de0 <HAL_ADC_IRQHandler+0xc0>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	e001      	b.n	8001de4 <HAL_ADC_IRQHandler+0xc4>
 8001de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d008      	beq.n	8001dfe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d002      	beq.n	8001dfe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b09      	cmp	r3, #9
 8001dfc:	d104      	bne.n	8001e08 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	e00d      	b.n	8001e24 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a50      	ldr	r2, [pc, #320]	; (8001f50 <HAL_ADC_IRQHandler+0x230>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d002      	beq.n	8001e18 <HAL_ADC_IRQHandler+0xf8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	e001      	b.n	8001e1c <HAL_ADC_IRQHandler+0xfc>
 8001e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e1c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d135      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d12e      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fd0e 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d11a      	bne.n	8001e82 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 020c 	bic.w	r2, r2, #12
 8001e5a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d112      	bne.n	8001e9a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e80:	e00b      	b.n	8001e9a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fad6 	bl	800044c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_ADC_IRQHandler+0x19c>
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10b      	bne.n	8001ed4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 809e 	beq.w	8002004 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8098 	beq.w	8002004 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fbae 	bl	8001652 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ef6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fb69 	bl	80015d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f02:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_ADC_IRQHandler+0x230>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d002      	beq.n	8001f14 <HAL_ADC_IRQHandler+0x1f4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e001      	b.n	8001f18 <HAL_ADC_IRQHandler+0x1f8>
 8001f14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d008      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d002      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b07      	cmp	r3, #7
 8001f30:	d104      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	e011      	b.n	8001f60 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <HAL_ADC_IRQHandler+0x230>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d006      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x234>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e005      	b.n	8001f58 <HAL_ADC_IRQHandler+0x238>
 8001f4c:	50000300 	.word	0x50000300
 8001f50:	50000100 	.word	0x50000100
 8001f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f58:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d047      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x260>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d03f      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13a      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b40      	cmp	r3, #64	; 0x40
 8001f8c:	d133      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d12e      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fc73 	bl	8001888 <LL_ADC_INJ_IsConversionOngoing>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d11a      	bne.n	8001fde <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fb6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d112      	bne.n	8001ff6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fdc:	e00b      	b.n	8001ff6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	f043 0210 	orr.w	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fdfa 	bl	8002bf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2260      	movs	r2, #96	; 0x60
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b00      	cmp	r3, #0
 800200c:	d011      	beq.n	8002032 <HAL_ADC_IRQHandler+0x312>
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00c      	beq.n	8002032 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f89f 	bl	8002168 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d012      	beq.n	8002062 <HAL_ADC_IRQHandler+0x342>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fde0 	bl	8002c18 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002068:	2b00      	cmp	r3, #0
 800206a:	d012      	beq.n	8002092 <HAL_ADC_IRQHandler+0x372>
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00d      	beq.n	8002092 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fdd2 	bl	8002c2c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d036      	beq.n	800210a <HAL_ADC_IRQHandler+0x3ea>
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d031      	beq.n	800210a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80020ae:	2301      	movs	r3, #1
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	e014      	b.n	80020de <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020ba:	4825      	ldr	r0, [pc, #148]	; (8002150 <HAL_ADC_IRQHandler+0x430>)
 80020bc:	f7ff fb3a 	bl	8001734 <LL_ADC_GetMultiDMATransfer>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80020c6:	2301      	movs	r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	e008      	b.n	80020de <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80020da:	2301      	movs	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10e      	bne.n	8002102 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f4:	f043 0202 	orr.w	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f83d 	bl	800217c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2210      	movs	r2, #16
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d018      	beq.n	8002146 <HAL_ADC_IRQHandler+0x426>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211a:	2b00      	cmp	r3, #0
 800211c:	d013      	beq.n	8002146 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	f043 0208 	orr.w	r2, r3, #8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fd5f 	bl	8002c04 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002146:	bf00      	nop
 8002148:	3728      	adds	r7, #40	; 0x28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	50000300 	.word	0x50000300

08002154 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b6      	sub	sp, #216	; 0xd8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x22>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e3c8      	b.n	8002944 <HAL_ADC_ConfigChannel+0x7b4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fb4f 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 83ad 	bne.w	8002926 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	f7ff fa0e 	bl	80015fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fb3d 	bl	8001862 <LL_ADC_REG_IsConversionOngoing>
 80021e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb49 	bl	8001888 <LL_ADC_INJ_IsConversionOngoing>
 80021f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 81d9 	bne.w	80025b6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 81d4 	bne.w	80025b6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002216:	d10f      	bne.n	8002238 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	f7ff fa28 	bl	8001678 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff f9bc 	bl	80015ae <LL_ADC_SetSamplingTimeCommonConfig>
 8002236:	e00e      	b.n	8002256 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	461a      	mov	r2, r3
 8002246:	f7ff fa17 	bl	8001678 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f9ac 	bl	80015ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d022      	beq.n	80022be <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6919      	ldr	r1, [r3, #16]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002288:	f7ff f906 	bl	8001498 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6919      	ldr	r1, [r3, #16]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	461a      	mov	r2, r3
 800229a:	f7ff f952 	bl	8001542 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x124>
 80022ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x126>
 80022b4:	2300      	movs	r3, #0
 80022b6:	461a      	mov	r2, r3
 80022b8:	f7ff f95e 	bl	8001578 <LL_ADC_SetOffsetSaturation>
 80022bc:	e17b      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f90b 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x15a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff f900 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	e01e      	b.n	8002328 <HAL_ADC_ConfigChannel+0x198>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f8f5 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800230c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e004      	b.n	8002326 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800231c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1b0>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	e018      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1e2>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800235c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e004      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002372:	429a      	cmp	r2, r3
 8002374:	d106      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f8c4 	bl	800150c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff f8a8 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x220>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff f89d 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 021f 	and.w	r2, r3, #31
 80023ae:	e01e      	b.n	80023ee <HAL_ADC_ConfigChannel+0x25e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f892 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80023e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x276>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	e018      	b.n	8002438 <HAL_ADC_ConfigChannel+0x2a8>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800241a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800241e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e004      	b.n	8002438 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800242e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff f861 	bl	800150c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2102      	movs	r1, #2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff f845 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x2e6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2102      	movs	r1, #2
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f83a 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	e01e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x324>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2102      	movs	r1, #2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff f82f 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800249c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e004      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80024a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x33c>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	e016      	b.n	80024fa <HAL_ADC_ConfigChannel+0x36a>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e004      	b.n	80024fa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80024f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	2102      	movs	r1, #2
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f800 	bl	800150c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2103      	movs	r1, #3
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe ffe4 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x3a8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2103      	movs	r1, #3
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe ffd9 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e017      	b.n	8002568 <HAL_ADC_ConfigChannel+0x3d8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2103      	movs	r1, #3
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe ffce 	bl	80014e0 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002552:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800255a:	2320      	movs	r3, #32
 800255c:	e003      	b.n	8002566 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800255e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d105      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x3f0>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	e011      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x414>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800258e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d106      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2103      	movs	r1, #3
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe ffab 	bl	800150c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f92a 	bl	8001814 <LL_ADC_IsEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 8140 	bne.w	8002848 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6819      	ldr	r1, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f7ff f87b 	bl	80016d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	4a8f      	ldr	r2, [pc, #572]	; (800281c <HAL_ADC_ConfigChannel+0x68c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	f040 8131 	bne.w	8002848 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_ADC_ConfigChannel+0x47e>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0e9b      	lsrs	r3, r3, #26
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2b09      	cmp	r3, #9
 8002604:	bf94      	ite	ls
 8002606:	2301      	movls	r3, #1
 8002608:	2300      	movhi	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	e019      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4b2>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800261c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002626:	2320      	movs	r3, #32
 8002628:	e003      	b.n	8002632 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800262a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	2b09      	cmp	r3, #9
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002642:	2b00      	cmp	r3, #0
 8002644:	d079      	beq.n	800273a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x4d2>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	069b      	lsls	r3, r3, #26
 800265c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002660:	e015      	b.n	800268e <HAL_ADC_ConfigChannel+0x4fe>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e003      	b.n	8002686 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800267e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	3301      	adds	r3, #1
 8002688:	069b      	lsls	r3, r3, #26
 800268a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x51e>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	e017      	b.n	80026de <HAL_ADC_ConfigChannel+0x54e>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e003      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	ea42 0103 	orr.w	r1, r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x574>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0e9b      	lsrs	r3, r3, #26
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 021f 	and.w	r2, r3, #31
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	051b      	lsls	r3, r3, #20
 8002702:	e018      	b.n	8002736 <HAL_ADC_ConfigChannel+0x5a6>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f003 021f 	and.w	r2, r3, #31
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002736:	430b      	orrs	r3, r1
 8002738:	e081      	b.n	800283e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x5c6>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	3301      	adds	r3, #1
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002754:	e015      	b.n	8002782 <HAL_ADC_ConfigChannel+0x5f2>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	069b      	lsls	r3, r3, #26
 800277e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x612>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	e017      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x642>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	61fb      	str	r3, [r7, #28]
  return result;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e003      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	ea42 0103 	orr.w	r1, r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x66e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 021f 	and.w	r2, r3, #31
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	051b      	lsls	r3, r3, #20
 80027f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fc:	e01e      	b.n	800283c <HAL_ADC_ConfigChannel+0x6ac>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	613b      	str	r3, [r7, #16]
  return result;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e006      	b.n	8002828 <HAL_ADC_ConfigChannel+0x698>
 800281a:	bf00      	nop
 800281c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	3301      	adds	r3, #1
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	3b1e      	subs	r3, #30
 8002836:	051b      	lsls	r3, r3, #20
 8002838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800283c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002842:	4619      	mov	r1, r3
 8002844:	f7fe ff18 	bl	8001678 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b3f      	ldr	r3, [pc, #252]	; (800294c <HAL_ADC_ConfigChannel+0x7bc>)
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d071      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002854:	483e      	ldr	r0, [pc, #248]	; (8002950 <HAL_ADC_ConfigChannel+0x7c0>)
 8002856:	f7fe fe11 	bl	800147c <LL_ADC_GetCommonPathInternalCh>
 800285a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3c      	ldr	r2, [pc, #240]	; (8002954 <HAL_ADC_ConfigChannel+0x7c4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_ADC_ConfigChannel+0x6e2>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a3a      	ldr	r2, [pc, #232]	; (8002958 <HAL_ADC_ConfigChannel+0x7c8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d127      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d121      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002886:	d157      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800288c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002890:	4619      	mov	r1, r3
 8002892:	482f      	ldr	r0, [pc, #188]	; (8002950 <HAL_ADC_ConfigChannel+0x7c0>)
 8002894:	f7fe fddf 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <HAL_ADC_ConfigChannel+0x7cc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	4a30      	ldr	r2, [pc, #192]	; (8002960 <HAL_ADC_ConfigChannel+0x7d0>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028b2:	e002      	b.n	80028ba <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c0:	e03a      	b.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a27      	ldr	r2, [pc, #156]	; (8002964 <HAL_ADC_ConfigChannel+0x7d4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d113      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10d      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <HAL_ADC_ConfigChannel+0x7d8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d02a      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	4619      	mov	r1, r3
 80028ec:	4818      	ldr	r0, [pc, #96]	; (8002950 <HAL_ADC_ConfigChannel+0x7c0>)
 80028ee:	f7fe fdb2 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f2:	e021      	b.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <HAL_ADC_ConfigChannel+0x7dc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d11c      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_ADC_ConfigChannel+0x7d8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d011      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800291c:	4619      	mov	r1, r3
 800291e:	480c      	ldr	r0, [pc, #48]	; (8002950 <HAL_ADC_ConfigChannel+0x7c0>)
 8002920:	f7fe fd99 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
 8002924:	e008      	b.n	8002938 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002940:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002944:	4618      	mov	r0, r3
 8002946:	37d8      	adds	r7, #216	; 0xd8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	80080000 	.word	0x80080000
 8002950:	50000300 	.word	0x50000300
 8002954:	c3210000 	.word	0xc3210000
 8002958:	90c00010 	.word	0x90c00010
 800295c:	20000000 	.word	0x20000000
 8002960:	053e2d63 	.word	0x053e2d63
 8002964:	c7520000 	.word	0xc7520000
 8002968:	50000100 	.word	0x50000100
 800296c:	cb840000 	.word	0xcb840000

08002970 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe ff47 	bl	8001814 <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d169      	bne.n	8002a60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <ADC_Enable+0xfc>)
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	f043 0210 	orr.w	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e055      	b.n	8002a62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe ff16 	bl	80017ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029c0:	482b      	ldr	r0, [pc, #172]	; (8002a70 <ADC_Enable+0x100>)
 80029c2:	f7fe fd5b 	bl	800147c <LL_ADC_GetCommonPathInternalCh>
 80029c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d0:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <ADC_Enable+0x104>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <ADC_Enable+0x108>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029ea:	e002      	b.n	80029f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029f8:	f7fe fd0e 	bl	8001418 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029fe:	e028      	b.n	8002a52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe ff05 	bl	8001814 <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe fee9 	bl	80017ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a1a:	f7fe fcfd 	bl	8001418 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d914      	bls.n	8002a52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d00d      	beq.n	8002a52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e007      	b.n	8002a62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d1cf      	bne.n	8002a00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	8000003f 	.word	0x8000003f
 8002a70:	50000300 	.word	0x50000300
 8002a74:	20000000 	.word	0x20000000
 8002a78:	053e2d63 	.word	0x053e2d63

08002a7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d14b      	bne.n	8002b2e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d021      	beq.n	8002af4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fd8d 	bl	80015d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d032      	beq.n	8002b26 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d12b      	bne.n	8002b26 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11f      	bne.n	8002b26 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af2:	e018      	b.n	8002b26 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d111      	bne.n	8002b26 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f7fd fc90 	bl	800044c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b2c:	e00e      	b.n	8002b4c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff fb1e 	bl	800217c <HAL_ADC_ErrorCallback>
}
 8002b40:	e004      	b.n	8002b4c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7ff faf6 	bl	8002154 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8e:	f043 0204 	orr.w	r2, r3, #4
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7ff faf0 	bl	800217c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <LL_ADC_IsEnabled>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <LL_ADC_IsEnabled+0x18>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_ADC_IsEnabled+0x1a>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_REG_IsConversionOngoing>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b0a1      	sub	sp, #132	; 0x84
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e08b      	b.n	8002d8a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c8a:	d102      	bne.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c8c:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	e001      	b.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e06a      	b.n	8002d8a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff87 	bl	8002bca <LL_ADC_REG_IsConversionOngoing>
 8002cbc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ff81 	bl	8002bca <LL_ADC_REG_IsConversionOngoing>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d14c      	bne.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d149      	bne.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cd4:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002cd6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d028      	beq.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cf2:	035b      	lsls	r3, r3, #13
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cfc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d00:	f7ff ff50 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d04:	4604      	mov	r4, r0
 8002d06:	4823      	ldr	r0, [pc, #140]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d08:	f7ff ff4c 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4323      	orrs	r3, r4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d133      	bne.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d1c:	f023 030f 	bic.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	6811      	ldr	r1, [r2, #0]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	6892      	ldr	r2, [r2, #8]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d30:	e024      	b.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d3e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d42:	f7ff ff2f 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d46:	4604      	mov	r4, r0
 8002d48:	4812      	ldr	r0, [pc, #72]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d4a:	f7ff ff2b 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4323      	orrs	r3, r4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d112      	bne.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d5e:	f023 030f 	bic.w	r3, r3, #15
 8002d62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d66:	e009      	b.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d7a:	e000      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3784      	adds	r7, #132	; 0x84
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}
 8002d92:	bf00      	nop
 8002d94:	50000100 	.word	0x50000100
 8002d98:	50000300 	.word	0x50000300

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	; (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	; (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff29 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f60:	f7ff ff40 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f7ff ff90 	bl	8002e90 <NVIC_EncodePriority>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff5f 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff33 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ffa4 	bl	8002ef8 <SysTick_Config>
 8002fb0:	4603      	mov	r3, r0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e08d      	b.n	80030ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_DMA_Init+0x138>)
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d80f      	bhi.n	8002ffa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b45      	ldr	r3, [pc, #276]	; (80030f8 <HAL_DMA_Init+0x13c>)
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a45      	ldr	r2, [pc, #276]	; (80030fc <HAL_DMA_Init+0x140>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	009a      	lsls	r2, r3, #2
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a42      	ldr	r2, [pc, #264]	; (8003100 <HAL_DMA_Init+0x144>)
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff8:	e00e      	b.n	8003018 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_DMA_Init+0x148>)
 8003002:	4413      	add	r3, r2
 8003004:	4a3d      	ldr	r2, [pc, #244]	; (80030fc <HAL_DMA_Init+0x140>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	009a      	lsls	r2, r3, #2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a3c      	ldr	r2, [pc, #240]	; (8003108 <HAL_DMA_Init+0x14c>)
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f9b6 	bl	80033dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003078:	d102      	bne.n	8003080 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003094:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d010      	beq.n	80030c0 <HAL_DMA_Init+0x104>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d80c      	bhi.n	80030c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9d6 	bl	8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	e008      	b.n	80030d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40020407 	.word	0x40020407
 80030f8:	bffdfff8 	.word	0xbffdfff8
 80030fc:	cccccccd 	.word	0xcccccccd
 8003100:	40020000 	.word	0x40020000
 8003104:	bffdfbf8 	.word	0xbffdfbf8
 8003108:	40020400 	.word	0x40020400

0800310c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_DMA_Start_IT+0x20>
 8003128:	2302      	movs	r3, #2
 800312a:	e066      	b.n	80031fa <HAL_DMA_Start_IT+0xee>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d155      	bne.n	80031ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f8fb 	bl	8003360 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 020e 	orr.w	r2, r2, #14
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e00f      	b.n	80031a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0204 	bic.w	r2, r2, #4
 8003192:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 020a 	orr.w	r2, r2, #10
 80031a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e005      	b.n	80031f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
 80031f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2204      	movs	r2, #4
 8003224:	409a      	lsls	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d026      	beq.n	800327c <HAL_DMA_IRQHandler+0x7a>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d021      	beq.n	800327c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0204 	bic.w	r2, r2, #4
 8003254:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f003 021f 	and.w	r2, r3, #31
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2104      	movs	r1, #4
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	2b00      	cmp	r3, #0
 8003270:	d071      	beq.n	8003356 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800327a:	e06c      	b.n	8003356 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2202      	movs	r2, #2
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d02e      	beq.n	80032ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d029      	beq.n	80032ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 020a 	bic.w	r2, r2, #10
 80032b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	2102      	movs	r1, #2
 80032ce:	fa01 f202 	lsl.w	r2, r1, r2
 80032d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d038      	beq.n	8003356 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032ec:	e033      	b.n	8003356 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2208      	movs	r2, #8
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02a      	beq.n	8003358 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d025      	beq.n	8003358 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 020e 	bic.w	r2, r2, #14
 800331a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003356:	bf00      	nop
 8003358:	bf00      	nop
}
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003376:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003388:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f003 021f 	and.w	r2, r3, #31
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d108      	bne.n	80033c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033be:	e007      	b.n	80033d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d802      	bhi.n	80033f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e001      	b.n	80033fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033f8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	3b08      	subs	r3, #8
 8003406:	4a12      	ldr	r2, [pc, #72]	; (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	009a      	lsls	r2, r3, #2
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	461a      	mov	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a0b      	ldr	r2, [pc, #44]	; (8003454 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003426:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2201      	movs	r2, #1
 8003430:	409a      	lsls	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40020407 	.word	0x40020407
 8003448:	40020800 	.word	0x40020800
 800344c:	40020820 	.word	0x40020820
 8003450:	cccccccd 	.word	0xcccccccd
 8003454:	40020880 	.word	0x40020880

08003458 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	461a      	mov	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a08      	ldr	r2, [pc, #32]	; (800349c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800347a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3b01      	subs	r3, #1
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	1000823f 	.word	0x1000823f
 800349c:	40020940 	.word	0x40020940

080034a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034ae:	e15a      	b.n	8003766 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	2101      	movs	r1, #1
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 814c 	beq.w	8003760 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d005      	beq.n	80034e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d130      	bne.n	8003542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003516:	2201      	movs	r2, #1
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 0201 	and.w	r2, r3, #1
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b03      	cmp	r3, #3
 800354c:	d017      	beq.n	800357e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d123      	bne.n	80035d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	08da      	lsrs	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3208      	adds	r2, #8
 8003592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	220f      	movs	r2, #15
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	08da      	lsrs	r2, r3, #3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3208      	adds	r2, #8
 80035cc:	6939      	ldr	r1, [r7, #16]
 80035ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	2203      	movs	r2, #3
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0203 	and.w	r2, r3, #3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80a6 	beq.w	8003760 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003614:	4b5b      	ldr	r3, [pc, #364]	; (8003784 <HAL_GPIO_Init+0x2e4>)
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	4a5a      	ldr	r2, [pc, #360]	; (8003784 <HAL_GPIO_Init+0x2e4>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6613      	str	r3, [r2, #96]	; 0x60
 8003620:	4b58      	ldr	r3, [pc, #352]	; (8003784 <HAL_GPIO_Init+0x2e4>)
 8003622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800362c:	4a56      	ldr	r2, [pc, #344]	; (8003788 <HAL_GPIO_Init+0x2e8>)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3302      	adds	r3, #2
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	220f      	movs	r2, #15
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003656:	d01f      	beq.n	8003698 <HAL_GPIO_Init+0x1f8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a4c      	ldr	r2, [pc, #304]	; (800378c <HAL_GPIO_Init+0x2ec>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d019      	beq.n	8003694 <HAL_GPIO_Init+0x1f4>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <HAL_GPIO_Init+0x2f0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <HAL_GPIO_Init+0x1f0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a4a      	ldr	r2, [pc, #296]	; (8003794 <HAL_GPIO_Init+0x2f4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00d      	beq.n	800368c <HAL_GPIO_Init+0x1ec>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a49      	ldr	r2, [pc, #292]	; (8003798 <HAL_GPIO_Init+0x2f8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <HAL_GPIO_Init+0x1e8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a48      	ldr	r2, [pc, #288]	; (800379c <HAL_GPIO_Init+0x2fc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_GPIO_Init+0x1e4>
 8003680:	2305      	movs	r3, #5
 8003682:	e00a      	b.n	800369a <HAL_GPIO_Init+0x1fa>
 8003684:	2306      	movs	r3, #6
 8003686:	e008      	b.n	800369a <HAL_GPIO_Init+0x1fa>
 8003688:	2304      	movs	r3, #4
 800368a:	e006      	b.n	800369a <HAL_GPIO_Init+0x1fa>
 800368c:	2303      	movs	r3, #3
 800368e:	e004      	b.n	800369a <HAL_GPIO_Init+0x1fa>
 8003690:	2302      	movs	r3, #2
 8003692:	e002      	b.n	800369a <HAL_GPIO_Init+0x1fa>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_GPIO_Init+0x1fa>
 8003698:	2300      	movs	r3, #0
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	f002 0203 	and.w	r2, r2, #3
 80036a0:	0092      	lsls	r2, r2, #2
 80036a2:	4093      	lsls	r3, r2
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036aa:	4937      	ldr	r1, [pc, #220]	; (8003788 <HAL_GPIO_Init+0x2e8>)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	3302      	adds	r3, #2
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <HAL_GPIO_Init+0x300>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4013      	ands	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036dc:	4a30      	ldr	r2, [pc, #192]	; (80037a0 <HAL_GPIO_Init+0x300>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_GPIO_Init+0x300>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003706:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <HAL_GPIO_Init+0x300>)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_GPIO_Init+0x300>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	43db      	mvns	r3, r3
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_GPIO_Init+0x300>)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_GPIO_Init+0x300>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800375a:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <HAL_GPIO_Init+0x300>)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3301      	adds	r3, #1
 8003764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	f47f ae9d 	bne.w	80034b0 <HAL_GPIO_Init+0x10>
  }
}
 8003776:	bf00      	nop
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40021000 	.word	0x40021000
 8003788:	40010000 	.word	0x40010000
 800378c:	48000400 	.word	0x48000400
 8003790:	48000800 	.word	0x48000800
 8003794:	48000c00 	.word	0x48000c00
 8003798:	48001000 	.word	0x48001000
 800379c:	48001400 	.word	0x48001400
 80037a0:	40010400 	.word	0x40010400

080037a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ba:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fa50 	bl	8000c68 <HAL_GPIO_EXTI_Callback>
  }
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40010400 	.word	0x40010400

080037d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0c0      	b.n	8003968 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f007 fe4a 	bl	800b494 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2203      	movs	r2, #3
 8003804:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f003 fed0 	bl	80075b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	e03e      	b.n	8003896 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	440b      	add	r3, r1
 8003826:	3311      	adds	r3, #17
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	440b      	add	r3, r1
 800383a:	3310      	adds	r3, #16
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	440b      	add	r3, r1
 800384e:	3313      	adds	r3, #19
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	3320      	adds	r3, #32
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	3301      	adds	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	791b      	ldrb	r3, [r3, #4]
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	429a      	cmp	r2, r3
 800389e:	d3bb      	bcc.n	8003818 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e044      	b.n	8003930 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038a6:	7bfa      	ldrb	r2, [r7, #15]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	440b      	add	r3, r1
 80038b4:	f203 1351 	addw	r3, r3, #337	; 0x151
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80038ce:	7bfa      	ldrb	r2, [r7, #15]
 80038d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038d2:	7bfa      	ldrb	r2, [r7, #15]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	440b      	add	r3, r1
 80038e0:	f203 1353 	addw	r3, r3, #339	; 0x153
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	440b      	add	r3, r1
 80038f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	440b      	add	r3, r1
 800390c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	440b      	add	r3, r1
 8003922:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	3301      	adds	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	791b      	ldrb	r3, [r3, #4]
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	429a      	cmp	r2, r3
 8003938:	d3b5      	bcc.n	80038a6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003946:	f003 fe4f 	bl	80075e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7a9b      	ldrb	r3, [r3, #10]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d102      	bne.n	8003966 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 fc29 	bl	80051b8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_PCD_Start+0x16>
 8003982:	2302      	movs	r3, #2
 8003984:	e012      	b.n	80039ac <HAL_PCD_Start+0x3c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fdf6 	bl	8007584 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f006 f8b6 	bl	8009b0e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f006 f8bb 	bl	8009b3c <USB_ReadInterrupts>
 80039c6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 faec 	bl	8003fb0 <PCD_EP_ISR_Handler>

    return;
 80039d8:	e110      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f6:	b292      	uxth	r2, r2
 80039f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f007 fdda 	bl	800b5b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003a02:	2100      	movs	r1, #0
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f8fc 	bl	8003c02 <HAL_PCD_SetAddress>

    return;
 8003a0a:	e0f7      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a2e:	e0e5      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00c      	beq.n	8003a54 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a52:	e0d3      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d034      	beq.n	8003ac8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0204 	bic.w	r2, r2, #4
 8003a70:	b292      	uxth	r2, r2
 8003a72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0208 	bic.w	r2, r2, #8
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d107      	bne.n	8003aa8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f007 ff56 	bl	800b954 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f007 fdbd 	bl	800b628 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ac0:	b292      	uxth	r2, r2
 8003ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003ac6:	e099      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d027      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0208 	orr.w	r2, r2, #8
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afc:	b292      	uxth	r2, r2
 8003afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0204 	orr.w	r2, r2, #4
 8003b14:	b292      	uxth	r2, r2
 8003b16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f007 fd6a 	bl	800b5f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b20:	e06c      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d040      	beq.n	8003bae <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d12b      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0204 	orr.w	r2, r2, #4
 8003b60:	b292      	uxth	r2, r2
 8003b62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0208 	orr.w	r2, r2, #8
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f007 fed8 	bl	800b954 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003ba4:	e02a      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f007 fd24 	bl	800b5f4 <HAL_PCD_SuspendCallback>
    return;
 8003bac:	e026      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00f      	beq.n	8003bd8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f007 fce2 	bl	800b59a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003bd6:	e011      	b.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf4:	b292      	uxth	r2, r2
 8003bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bfa:	bf00      	nop
  }
}
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_PCD_SetAddress+0x1a>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e012      	b.n	8003c42 <HAL_PCD_SetAddress+0x40>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f005 ff57 	bl	8009ae6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	4608      	mov	r0, r1
 8003c54:	4611      	mov	r1, r2
 8003c56:	461a      	mov	r2, r3
 8003c58:	4603      	mov	r3, r0
 8003c5a:	70fb      	strb	r3, [r7, #3]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	803b      	strh	r3, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da0e      	bge.n	8003c8e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	3310      	adds	r3, #16
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	705a      	strb	r2, [r3, #1]
 8003c8c:	e00e      	b.n	8003cac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 0207 	and.w	r2, r3, #7
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cb8:	883a      	ldrh	r2, [r7, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	78ba      	ldrb	r2, [r7, #2]
 8003cc2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cc4:	78bb      	ldrb	r3, [r7, #2]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d102      	bne.n	8003cd0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_PCD_EP_Open+0x94>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e00e      	b.n	8003cfc <HAL_PCD_EP_Open+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 fc99 	bl	8007624 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	da0e      	bge.n	8003d36 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	f003 0207 	and.w	r2, r3, #7
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	3310      	adds	r3, #16
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	705a      	strb	r2, [r3, #1]
 8003d34:	e00e      	b.n	8003d54 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 0207 	and.w	r2, r3, #7
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_PCD_EP_Close+0x6a>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e00e      	b.n	8003d8c <HAL_PCD_EP_Close+0x88>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f004 f815 	bl	8007dac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	460b      	mov	r3, r1
 8003da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da4:	7afb      	ldrb	r3, [r7, #11]
 8003da6:	f003 0207 	and.w	r2, r3, #7
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 f9cd 	bl	8008186 <USB_EPStartXfer>

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	460b      	mov	r3, r1
 8003e04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	f003 0207 	and.w	r2, r3, #7
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	3310      	adds	r3, #16
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6979      	ldr	r1, [r7, #20]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f004 f996 	bl	8008186 <USB_EPStartXfer>

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	7912      	ldrb	r2, [r2, #4]
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e03e      	b.n	8003f00 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da0e      	bge.n	8003ea8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 0207 	and.w	r2, r3, #7
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3310      	adds	r3, #16
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	705a      	strb	r2, [r3, #1]
 8003ea6:	e00c      	b.n	8003ec2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_PCD_EP_SetStall+0x7e>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e00e      	b.n	8003f00 <HAL_PCD_EP_SetStall+0x9c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68f9      	ldr	r1, [r7, #12]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f005 fcf9 	bl	80098e8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	7912      	ldrb	r2, [r2, #4]
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e040      	b.n	8003fa8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da0e      	bge.n	8003f4c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	f003 0207 	and.w	r2, r3, #7
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	3310      	adds	r3, #16
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	705a      	strb	r2, [r3, #1]
 8003f4a:	e00e      	b.n	8003f6a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 0207 	and.w	r2, r3, #7
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_PCD_EP_ClrStall+0x82>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e00e      	b.n	8003fa8 <HAL_PCD_EP_ClrStall+0xa0>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f005 fcf6 	bl	800998a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b096      	sub	sp, #88	; 0x58
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fb8:	e3ae      	b.n	8004718 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003fd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 8170 	bne.w	80042be <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003fde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d14d      	bne.n	8004086 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	81fb      	strh	r3, [r7, #14]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	89fb      	ldrh	r3, [r7, #14]
 8004002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400a:	b29b      	uxth	r3, r3
 800400c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3310      	adds	r3, #16
 8004012:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	4413      	add	r3, r2
 800402e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800403c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	441a      	add	r2, r3
 8004046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004048:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800404a:	2100      	movs	r1, #0
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f007 fa8a 	bl	800b566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	7b1b      	ldrb	r3, [r3, #12]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 835d 	beq.w	8004718 <PCD_EP_ISR_Handler+0x768>
 800405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 8358 	bne.w	8004718 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7b1b      	ldrb	r3, [r3, #12]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004072:	b2da      	uxtb	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	b292      	uxth	r2, r2
 800407a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	731a      	strb	r2, [r3, #12]
 8004084:	e348      	b.n	8004718 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800408c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004098:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800409c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d032      	beq.n	800410a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	4413      	add	r3, r2
 80040be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ca:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80040d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80040da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040dc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f005 fd7e 	bl	8009be0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040f0:	4013      	ands	r3, r2
 80040f2:	823b      	strh	r3, [r7, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	8a3a      	ldrh	r2, [r7, #16]
 80040fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040fe:	b292      	uxth	r2, r2
 8004100:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f007 fa02 	bl	800b50c <HAL_PCD_SetupStageCallback>
 8004108:	e306      	b.n	8004718 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800410a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800410e:	2b00      	cmp	r3, #0
 8004110:	f280 8302 	bge.w	8004718 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29a      	uxth	r2, r3
 800411c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004120:	4013      	ands	r3, r2
 8004122:	83fb      	strh	r3, [r7, #30]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	8bfa      	ldrh	r2, [r7, #30]
 800412a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412e:	b292      	uxth	r2, r2
 8004130:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	4413      	add	r3, r2
 800414c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004158:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800415a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <PCD_EP_ISR_Handler+0x1e6>
 8004162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d015      	beq.n	8004196 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004170:	6959      	ldr	r1, [r3, #20]
 8004172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004174:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004178:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800417a:	b29b      	uxth	r3, r3
 800417c:	f005 fd30 	bl	8009be0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	441a      	add	r2, r3
 800418a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800418e:	2100      	movs	r1, #0
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f007 f9cd 	bl	800b530 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80041a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f040 82b5 	bne.w	8004718 <PCD_EP_ISR_Handler+0x768>
 80041ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ba:	f000 82ad 	beq.w	8004718 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	4413      	add	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b3e      	cmp	r3, #62	; 0x3e
 80041f4:	d91d      	bls.n	8004232 <PCD_EP_ISR_Handler+0x282>
 80041f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
 80041fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <PCD_EP_ISR_Handler+0x260>
 800420a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420c:	3b01      	subs	r3, #1
 800420e:	647b      	str	r3, [r7, #68]	; 0x44
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29a      	uxth	r2, r3
 8004216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004218:	b29b      	uxth	r3, r3
 800421a:	029b      	lsls	r3, r3, #10
 800421c:	b29b      	uxth	r3, r3
 800421e:	4313      	orrs	r3, r2
 8004220:	b29b      	uxth	r3, r3
 8004222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800422a:	b29a      	uxth	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	801a      	strh	r2, [r3, #0]
 8004230:	e026      	b.n	8004280 <PCD_EP_ISR_Handler+0x2d0>
 8004232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <PCD_EP_ISR_Handler+0x2a0>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004248:	b29a      	uxth	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	e017      	b.n	8004280 <PCD_EP_ISR_Handler+0x2d0>
 8004250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <PCD_EP_ISR_Handler+0x2ba>
 8004264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004266:	3301      	adds	r3, #1
 8004268:	647b      	str	r3, [r7, #68]	; 0x44
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29a      	uxth	r2, r3
 8004270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004272:	b29b      	uxth	r3, r3
 8004274:	029b      	lsls	r3, r3, #10
 8004276:	b29b      	uxth	r3, r3
 8004278:	4313      	orrs	r3, r2
 800427a:	b29a      	uxth	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	827b      	strh	r3, [r7, #18]
 8004292:	8a7b      	ldrh	r3, [r7, #18]
 8004294:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004298:	827b      	strh	r3, [r7, #18]
 800429a:	8a7b      	ldrh	r3, [r7, #18]
 800429c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042a0:	827b      	strh	r3, [r7, #18]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	8a7b      	ldrh	r3, [r7, #18]
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]
 80042bc:	e22c      	b.n	8004718 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042d2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f280 80f6 	bge.w	80044c8 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042f2:	4013      	ands	r3, r2
 80042f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800430a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430e:	b292      	uxth	r2, r2
 8004310:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004312:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800432a:	7b1b      	ldrb	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d123      	bne.n	8004378 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004338:	b29b      	uxth	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	4413      	add	r3, r2
 800434a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004354:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004358:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 808e 	beq.w	800447e <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004368:	6959      	ldr	r1, [r3, #20]
 800436a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436c:	88da      	ldrh	r2, [r3, #6]
 800436e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004372:	f005 fc35 	bl	8009be0 <USB_ReadPMA>
 8004376:	e082      	b.n	800447e <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437a:	78db      	ldrb	r3, [r3, #3]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d10a      	bne.n	8004396 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004380:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004384:	461a      	mov	r2, r3
 8004386:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f9d3 	bl	8004734 <HAL_PCD_EP_DB_Receive>
 800438e:	4603      	mov	r3, r0
 8004390:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004394:	e073      	b.n	800447e <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80043c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d022      	beq.n	800443a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	4413      	add	r3, r2
 800440e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004418:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800441c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02c      	beq.n	800447e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442a:	6959      	ldr	r1, [r3, #20]
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	891a      	ldrh	r2, [r3, #8]
 8004430:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004434:	f005 fbd4 	bl	8009be0 <USB_ReadPMA>
 8004438:	e021      	b.n	800447e <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004442:	b29b      	uxth	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	4413      	add	r3, r2
 8004454:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004462:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004470:	6959      	ldr	r1, [r3, #20]
 8004472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004474:	895a      	ldrh	r2, [r3, #10]
 8004476:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800447a:	f005 fbb1 	bl	8009be0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800447e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004486:	441a      	add	r2, r3
 8004488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800448c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004494:	441a      	add	r2, r3
 8004496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004498:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800449a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <PCD_EP_ISR_Handler+0x4fe>
 80044a2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80044a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d206      	bcs.n	80044bc <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80044ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f007 f83b 	bl	800b530 <HAL_PCD_DataOutStageCallback>
 80044ba:	e005      	b.n	80044c8 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044c2:	4618      	mov	r0, r3
 80044c4:	f003 fe5f 	bl	8008186 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80044c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8121 	beq.w	8004718 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80044d6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	3310      	adds	r3, #16
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4413      	add	r3, r2
 80044e8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004504:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800451a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004528:	78db      	ldrb	r3, [r3, #3]
 800452a:	2b01      	cmp	r3, #1
 800452c:	f040 80a2 	bne.w	8004674 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004532:	2200      	movs	r2, #0
 8004534:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	7b1b      	ldrb	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8093 	beq.w	8004666 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004540:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d046      	beq.n	80045da <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800454c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d126      	bne.n	80045a2 <PCD_EP_ISR_Handler+0x5f2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	4413      	add	r3, r2
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	00da      	lsls	r2, r3, #3
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	4413      	add	r3, r2
 8004576:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800457a:	623b      	str	r3, [r7, #32]
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004586:	b29a      	uxth	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459a:	b29a      	uxth	r2, r3
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	e061      	b.n	8004666 <PCD_EP_ISR_Handler+0x6b6>
 80045a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d15d      	bne.n	8004666 <PCD_EP_ISR_Handler+0x6b6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	4413      	add	r3, r2
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	00da      	lsls	r2, r3, #3
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	4413      	add	r3, r2
 80045cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	2200      	movs	r2, #0
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e045      	b.n	8004666 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d126      	bne.n	8004636 <PCD_EP_ISR_Handler+0x686>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	4413      	add	r3, r2
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	00da      	lsls	r2, r3, #3
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	4413      	add	r3, r2
 800460a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461a:	b29a      	uxth	r2, r3
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462e:	b29a      	uxth	r2, r3
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	801a      	strh	r2, [r3, #0]
 8004634:	e017      	b.n	8004666 <PCD_EP_ISR_Handler+0x6b6>
 8004636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d113      	bne.n	8004666 <PCD_EP_ISR_Handler+0x6b6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	4413      	add	r3, r2
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	00da      	lsls	r2, r3, #3
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	4413      	add	r3, r2
 800465a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	2200      	movs	r2, #0
 8004664:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f006 ff7a 	bl	800b566 <HAL_PCD_DataInStageCallback>
 8004672:	e051      	b.n	8004718 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004674:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d144      	bne.n	800470a <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004688:	b29b      	uxth	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	4413      	add	r3, r2
 800469a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80046a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d907      	bls.n	80046c4 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80046b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046bc:	1ad2      	subs	r2, r2, r3
 80046be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c0:	619a      	str	r2, [r3, #24]
 80046c2:	e002      	b.n	80046ca <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80046c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c6:	2200      	movs	r2, #0
 80046c8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80046ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f006 ff44 	bl	800b566 <HAL_PCD_DataInStageCallback>
 80046de:	e01b      	b.n	8004718 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80046e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046e8:	441a      	add	r2, r3
 80046ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ec:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80046ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f0:	69da      	ldr	r2, [r3, #28]
 80046f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046f6:	441a      	add	r2, r3
 80046f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004702:	4618      	mov	r0, r3
 8004704:	f003 fd3f 	bl	8008186 <USB_EPStartXfer>
 8004708:	e006      	b.n	8004718 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800470a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800470e:	461a      	mov	r2, r3
 8004710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f917 	bl	8004946 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004720:	b29b      	uxth	r3, r3
 8004722:	b21b      	sxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	f6ff ac48 	blt.w	8003fba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3758      	adds	r7, #88	; 0x58
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d07c      	beq.n	8004846 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004754:	b29b      	uxth	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	4413      	add	r3, r2
 8004766:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004770:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	8b7b      	ldrh	r3, [r7, #26]
 8004778:	429a      	cmp	r2, r3
 800477a:	d306      	bcc.n	800478a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	699a      	ldr	r2, [r3, #24]
 8004780:	8b7b      	ldrh	r3, [r7, #26]
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	619a      	str	r2, [r3, #24]
 8004788:	e002      	b.n	8004790 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2200      	movs	r2, #0
 800478e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d123      	bne.n	80047e0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	833b      	strh	r3, [r7, #24]
 80047b4:	8b3b      	ldrh	r3, [r7, #24]
 80047b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047ba:	833b      	strh	r3, [r7, #24]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	8b3b      	ldrh	r3, [r7, #24]
 80047cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01f      	beq.n	800482a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	82fb      	strh	r3, [r7, #22]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	441a      	add	r2, r3
 8004814:	8afb      	ldrh	r3, [r7, #22]
 8004816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800482a:	8b7b      	ldrh	r3, [r7, #26]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8085 	beq.w	800493c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6959      	ldr	r1, [r3, #20]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	891a      	ldrh	r2, [r3, #8]
 800483e:	8b7b      	ldrh	r3, [r7, #26]
 8004840:	f005 f9ce 	bl	8009be0 <USB_ReadPMA>
 8004844:	e07a      	b.n	800493c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	4413      	add	r3, r2
 8004860:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800486a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	8b7b      	ldrh	r3, [r7, #26]
 8004872:	429a      	cmp	r2, r3
 8004874:	d306      	bcc.n	8004884 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	8b7b      	ldrh	r3, [r7, #26]
 800487c:	1ad2      	subs	r2, r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	619a      	str	r2, [r3, #24]
 8004882:	e002      	b.n	800488a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2200      	movs	r2, #0
 8004888:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d123      	bne.n	80048da <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ac:	83fb      	strh	r3, [r7, #30]
 80048ae:	8bfb      	ldrh	r3, [r7, #30]
 80048b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048b4:	83fb      	strh	r3, [r7, #30]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	8bfb      	ldrh	r3, [r7, #30]
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d11f      	bne.n	8004924 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	83bb      	strh	r3, [r7, #28]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	8bbb      	ldrh	r3, [r7, #28]
 8004910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800491c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004920:	b29b      	uxth	r3, r3
 8004922:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004924:	8b7b      	ldrh	r3, [r7, #26]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6959      	ldr	r1, [r3, #20]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	895a      	ldrh	r2, [r3, #10]
 8004936:	8b7b      	ldrh	r3, [r7, #26]
 8004938:	f005 f952 	bl	8009be0 <USB_ReadPMA>
    }
  }

  return count;
 800493c:	8b7b      	ldrh	r3, [r7, #26]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b0a4      	sub	sp, #144	; 0x90
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 81db 	beq.w	8004d16 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004968:	b29b      	uxth	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4413      	add	r3, r2
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	4413      	add	r3, r2
 800497a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004984:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004990:	429a      	cmp	r2, r3
 8004992:	d907      	bls.n	80049a4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800499c:	1ad2      	subs	r2, r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	619a      	str	r2, [r3, #24]
 80049a2:	e002      	b.n	80049aa <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2200      	movs	r2, #0
 80049a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 80b9 	bne.w	8004b26 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d126      	bne.n	8004a0a <HAL_PCD_EP_DB_Transmit+0xc4>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	4413      	add	r3, r2
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	00da      	lsls	r2, r3, #3
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	4413      	add	r3, r2
 80049de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	e01a      	b.n	8004a40 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d116      	bne.n	8004a40 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a26:	4413      	add	r3, r2
 8004a28:	637b      	str	r3, [r7, #52]	; 0x34
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	00da      	lsls	r2, r3, #3
 8004a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a32:	4413      	add	r3, r2
 8004a34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a38:	633b      	str	r3, [r7, #48]	; 0x30
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d126      	bne.n	8004a9c <HAL_PCD_EP_DB_Transmit+0x156>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	00da      	lsls	r2, r3, #3
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	e017      	b.n	8004acc <HAL_PCD_EP_DB_Transmit+0x186>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d113      	bne.n	8004acc <HAL_PCD_EP_DB_Transmit+0x186>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	4413      	add	r3, r2
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	00da      	lsls	r2, r3, #3
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	4413      	add	r3, r2
 8004ac0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f006 fd47 	bl	800b566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 82fa 	beq.w	80050d8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	82fb      	strh	r3, [r7, #22]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	8afb      	ldrh	r3, [r7, #22]
 8004b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	8013      	strh	r3, [r2, #0]
 8004b24:	e2d8      	b.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d021      	beq.n	8004b74 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	f040 82ac 	bne.w	80050d8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b88:	441a      	add	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b96:	441a      	add	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6a1a      	ldr	r2, [r3, #32]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d30b      	bcc.n	8004bc0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb8:	1ad2      	subs	r2, r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	621a      	str	r2, [r3, #32]
 8004bbe:	e017      	b.n	8004bf0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d108      	bne.n	8004bda <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004bc8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004bd8:	e00a      	b.n	8004bf0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2200      	movs	r2, #0
 8004bee:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d165      	bne.n	8004cc4 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	4413      	add	r3, r2
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	00da      	lsls	r2, r3, #3
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c18:	4413      	add	r3, r2
 8004c1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c34:	2b3e      	cmp	r3, #62	; 0x3e
 8004c36:	d91d      	bls.n	8004c74 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4313      	orrs	r3, r2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	e044      	b.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	e035      	b.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_PCD_EP_DB_Transmit+0x366>
 8004ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca8:	3301      	adds	r3, #1
 8004caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	e01c      	b.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	785b      	ldrb	r3, [r3, #1]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d118      	bne.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce0:	4413      	add	r3, r2
 8004ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	00da      	lsls	r2, r3, #3
 8004cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cec:	4413      	add	r3, r2
 8004cee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6959      	ldr	r1, [r3, #20]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	891a      	ldrh	r2, [r3, #8]
 8004d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f004 ff24 	bl	8009b5c <USB_WritePMA>
 8004d14:	e1e0      	b.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d3a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d307      	bcc.n	8004d5a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	619a      	str	r2, [r3, #24]
 8004d58:	e002      	b.n	8004d60 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 80c0 	bne.w	8004eea <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	785b      	ldrb	r3, [r3, #1]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d126      	bne.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d86:	4413      	add	r3, r2
 8004d88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	00da      	lsls	r2, r3, #3
 8004d90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d92:	4413      	add	r3, r2
 8004d94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	e01a      	b.n	8004df6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d116      	bne.n	8004df6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	667b      	str	r3, [r7, #100]	; 0x64
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ddc:	4413      	add	r3, r2
 8004dde:	667b      	str	r3, [r7, #100]	; 0x64
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	00da      	lsls	r2, r3, #3
 8004de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dee:	663b      	str	r3, [r7, #96]	; 0x60
 8004df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df2:	2200      	movs	r2, #0
 8004df4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	677b      	str	r3, [r7, #116]	; 0x74
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d12b      	bne.n	8004e5c <HAL_PCD_EP_DB_Transmit+0x516>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e18:	4413      	add	r3, r2
 8004e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	00da      	lsls	r2, r3, #3
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	4413      	add	r3, r2
 8004e26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	e017      	b.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x546>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d113      	bne.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x546>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e72:	4413      	add	r3, r2
 8004e74:	677b      	str	r3, [r7, #116]	; 0x74
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	00da      	lsls	r2, r3, #3
 8004e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7e:	4413      	add	r3, r2
 8004e80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e84:	673b      	str	r3, [r7, #112]	; 0x70
 8004e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e88:	2200      	movs	r2, #0
 8004e8a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	4619      	mov	r1, r3
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f006 fb67 	bl	800b566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 811a 	bne.w	80050d8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	8013      	strh	r3, [r2, #0]
 8004ee8:	e0f6      	b.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d121      	bne.n	8004f38 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	f040 80ca 	bne.w	80050d8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f4c:	441a      	add	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f5a:	441a      	add	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6a1a      	ldr	r2, [r3, #32]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d30b      	bcc.n	8004f84 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	6a1a      	ldr	r2, [r3, #32]
 8004f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f7c:	1ad2      	subs	r2, r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	621a      	str	r2, [r3, #32]
 8004f82:	e017      	b.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d108      	bne.n	8004f9e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004f8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f9c:	e00a      	b.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	657b      	str	r3, [r7, #84]	; 0x54
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d165      	bne.n	800508e <HAL_PCD_EP_DB_Transmit+0x748>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	4413      	add	r3, r2
 8004fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	00da      	lsls	r2, r3, #3
 8004fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8005000:	d91d      	bls.n	800503e <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	66bb      	str	r3, [r7, #104]	; 0x68
 800500a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005018:	3b01      	subs	r3, #1
 800501a:	66bb      	str	r3, [r7, #104]	; 0x68
 800501c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29a      	uxth	r2, r3
 8005022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005024:	b29b      	uxth	r3, r3
 8005026:	029b      	lsls	r3, r3, #10
 8005028:	b29b      	uxth	r3, r3
 800502a:	4313      	orrs	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005036:	b29a      	uxth	r2, r3
 8005038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e041      	b.n	80050c2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800503e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <HAL_PCD_EP_DB_Transmit+0x716>
 8005046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005054:	b29a      	uxth	r2, r3
 8005056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	e032      	b.n	80050c2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800505c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	66bb      	str	r3, [r7, #104]	; 0x68
 8005064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_PCD_EP_DB_Transmit+0x730>
 8005070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005072:	3301      	adds	r3, #1
 8005074:	66bb      	str	r3, [r7, #104]	; 0x68
 8005076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29a      	uxth	r2, r3
 800507c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	b29a      	uxth	r2, r3
 8005088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	e019      	b.n	80050c2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d115      	bne.n	80050c2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a4:	4413      	add	r3, r2
 80050a6:	657b      	str	r3, [r7, #84]	; 0x54
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	00da      	lsls	r2, r3, #3
 80050ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b0:	4413      	add	r3, r2
 80050b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050b6:	653b      	str	r3, [r7, #80]	; 0x50
 80050b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6959      	ldr	r1, [r3, #20]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	895a      	ldrh	r2, [r3, #10]
 80050ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f004 fd42 	bl	8009b5c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f2:	82bb      	strh	r3, [r7, #20]
 80050f4:	8abb      	ldrh	r3, [r7, #20]
 80050f6:	f083 0310 	eor.w	r3, r3, #16
 80050fa:	82bb      	strh	r3, [r7, #20]
 80050fc:	8abb      	ldrh	r3, [r7, #20]
 80050fe:	f083 0320 	eor.w	r3, r3, #32
 8005102:	82bb      	strh	r3, [r7, #20]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	8abb      	ldrh	r3, [r7, #20]
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3790      	adds	r7, #144	; 0x90
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005132:	b480      	push	{r7}
 8005134:	b087      	sub	sp, #28
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	817b      	strh	r3, [r7, #10]
 8005140:	4613      	mov	r3, r2
 8005142:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005144:	897b      	ldrh	r3, [r7, #10]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005150:	897b      	ldrh	r3, [r7, #10]
 8005152:	f003 0207 	and.w	r2, r3, #7
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	3310      	adds	r3, #16
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e009      	b.n	800517c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005168:	897a      	ldrh	r2, [r7, #10]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800517c:	893b      	ldrh	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	b29a      	uxth	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	80da      	strh	r2, [r3, #6]
 8005190:	e00b      	b.n	80051aa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2201      	movs	r2, #1
 8005196:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	b29a      	uxth	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0c1b      	lsrs	r3, r3, #16
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f043 0302 	orr.w	r3, r3, #2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d141      	bne.n	800529e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800521a:	4b4b      	ldr	r3, [pc, #300]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005226:	d131      	bne.n	800528c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005228:	4b47      	ldr	r3, [pc, #284]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522e:	4a46      	ldr	r2, [pc, #280]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005238:	4b43      	ldr	r3, [pc, #268]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005240:	4a41      	ldr	r2, [pc, #260]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005246:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005248:	4b40      	ldr	r3, [pc, #256]	; (800534c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2232      	movs	r2, #50	; 0x32
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	4a3f      	ldr	r2, [pc, #252]	; (8005350 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005254:	fba2 2303 	umull	r2, r3, r2, r3
 8005258:	0c9b      	lsrs	r3, r3, #18
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800525e:	e002      	b.n	8005266 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3b01      	subs	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005266:	4b38      	ldr	r3, [pc, #224]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005272:	d102      	bne.n	800527a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f2      	bne.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800527a:	4b33      	ldr	r3, [pc, #204]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005286:	d158      	bne.n	800533a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e057      	b.n	800533c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800528c:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005292:	4a2d      	ldr	r2, [pc, #180]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800529c:	e04d      	b.n	800533a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a4:	d141      	bne.n	800532a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052a6:	4b28      	ldr	r3, [pc, #160]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b2:	d131      	bne.n	8005318 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052b4:	4b24      	ldr	r3, [pc, #144]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ba:	4a23      	ldr	r2, [pc, #140]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052c4:	4b20      	ldr	r3, [pc, #128]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052cc:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052d4:	4b1d      	ldr	r3, [pc, #116]	; (800534c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2232      	movs	r2, #50	; 0x32
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	0c9b      	lsrs	r3, r3, #18
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ea:	e002      	b.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fe:	d102      	bne.n	8005306 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f2      	bne.n	80052ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005306:	4b10      	ldr	r3, [pc, #64]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005312:	d112      	bne.n	800533a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e011      	b.n	800533c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531e:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005324:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005328:	e007      	b.n	800533a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800532a:	4b07      	ldr	r3, [pc, #28]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005332:	4a05      	ldr	r2, [pc, #20]	; (8005348 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005334:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005338:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40007000 	.word	0x40007000
 800534c:	20000000 	.word	0x20000000
 8005350:	431bde83 	.word	0x431bde83

08005354 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4a04      	ldr	r2, [pc, #16]	; (8005370 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800535e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005362:	6093      	str	r3, [r2, #8]
}
 8005364:	bf00      	nop
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40007000 	.word	0x40007000

08005374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e2fe      	b.n	8005984 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d075      	beq.n	800547e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005392:	4b97      	ldr	r3, [pc, #604]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800539c:	4b94      	ldr	r3, [pc, #592]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b0c      	cmp	r3, #12
 80053aa:	d102      	bne.n	80053b2 <HAL_RCC_OscConfig+0x3e>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d002      	beq.n	80053b8 <HAL_RCC_OscConfig+0x44>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d10b      	bne.n	80053d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b8:	4b8d      	ldr	r3, [pc, #564]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05b      	beq.n	800547c <HAL_RCC_OscConfig+0x108>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d157      	bne.n	800547c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e2d9      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d8:	d106      	bne.n	80053e8 <HAL_RCC_OscConfig+0x74>
 80053da:	4b85      	ldr	r3, [pc, #532]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a84      	ldr	r2, [pc, #528]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e01d      	b.n	8005424 <HAL_RCC_OscConfig+0xb0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f0:	d10c      	bne.n	800540c <HAL_RCC_OscConfig+0x98>
 80053f2:	4b7f      	ldr	r3, [pc, #508]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a7e      	ldr	r2, [pc, #504]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80053f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4b7c      	ldr	r3, [pc, #496]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a7b      	ldr	r2, [pc, #492]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e00b      	b.n	8005424 <HAL_RCC_OscConfig+0xb0>
 800540c:	4b78      	ldr	r3, [pc, #480]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a77      	ldr	r2, [pc, #476]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	4b75      	ldr	r3, [pc, #468]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a74      	ldr	r2, [pc, #464]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 800541e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d013      	beq.n	8005454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fb fff4 	bl	8001418 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005434:	f7fb fff0 	bl	8001418 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	; 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e29e      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005446:	4b6a      	ldr	r3, [pc, #424]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0xc0>
 8005452:	e014      	b.n	800547e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fb ffe0 	bl	8001418 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545c:	f7fb ffdc 	bl	8001418 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e28a      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800546e:	4b60      	ldr	r3, [pc, #384]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0xe8>
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d075      	beq.n	8005576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800548a:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005494:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d102      	bne.n	80054aa <HAL_RCC_OscConfig+0x136>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d002      	beq.n	80054b0 <HAL_RCC_OscConfig+0x13c>
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d11f      	bne.n	80054f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b0:	4b4f      	ldr	r3, [pc, #316]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_OscConfig+0x154>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e25d      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c8:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	4946      	ldr	r1, [pc, #280]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054dc:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <HAL_RCC_OscConfig+0x280>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fb ff4d 	bl	8001380 <HAL_InitTick>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d043      	beq.n	8005574 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e249      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d023      	beq.n	8005540 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f8:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a3c      	ldr	r2, [pc, #240]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80054fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fb ff88 	bl	8001418 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550c:	f7fb ff84 	bl	8001418 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e232      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552a:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	492d      	ldr	r1, [pc, #180]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 800553a:	4313      	orrs	r3, r2
 800553c:	604b      	str	r3, [r1, #4]
 800553e:	e01a      	b.n	8005576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005540:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fb ff64 	bl	8001418 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005554:	f7fb ff60 	bl	8001418 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e20e      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x1e0>
 8005572:	e000      	b.n	8005576 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005574:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d041      	beq.n	8005606 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01c      	beq.n	80055c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800558a:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 800558c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005590:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559a:	f7fb ff3d 	bl	8001418 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a2:	f7fb ff39 	bl	8001418 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e1e7      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80055b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0ef      	beq.n	80055a2 <HAL_RCC_OscConfig+0x22e>
 80055c2:	e020      	b.n	8005606 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80055c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <HAL_RCC_OscConfig+0x27c>)
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d4:	f7fb ff20 	bl	8001418 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055da:	e00d      	b.n	80055f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055dc:	f7fb ff1c 	bl	8001418 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d906      	bls.n	80055f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e1ca      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f8:	4b8c      	ldr	r3, [pc, #560]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80055fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ea      	bne.n	80055dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 80a6 	beq.w	8005760 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005614:	2300      	movs	r3, #0
 8005616:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005618:	4b84      	ldr	r3, [pc, #528]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_RCC_OscConfig+0x2b4>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x2b6>
 8005628:	2300      	movs	r3, #0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562e:	4b7f      	ldr	r3, [pc, #508]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	4a7e      	ldr	r2, [pc, #504]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005638:	6593      	str	r3, [r2, #88]	; 0x58
 800563a:	4b7c      	ldr	r3, [pc, #496]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 800563c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005646:	2301      	movs	r3, #1
 8005648:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800564a:	4b79      	ldr	r3, [pc, #484]	; (8005830 <HAL_RCC_OscConfig+0x4bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d118      	bne.n	8005688 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005656:	4b76      	ldr	r3, [pc, #472]	; (8005830 <HAL_RCC_OscConfig+0x4bc>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a75      	ldr	r2, [pc, #468]	; (8005830 <HAL_RCC_OscConfig+0x4bc>)
 800565c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005662:	f7fb fed9 	bl	8001418 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566a:	f7fb fed5 	bl	8001418 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e183      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567c:	4b6c      	ldr	r3, [pc, #432]	; (8005830 <HAL_RCC_OscConfig+0x4bc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d108      	bne.n	80056a2 <HAL_RCC_OscConfig+0x32e>
 8005690:	4b66      	ldr	r3, [pc, #408]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056a0:	e024      	b.n	80056ec <HAL_RCC_OscConfig+0x378>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d110      	bne.n	80056cc <HAL_RCC_OscConfig+0x358>
 80056aa:	4b60      	ldr	r3, [pc, #384]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80056ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b0:	4a5e      	ldr	r2, [pc, #376]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80056b2:	f043 0304 	orr.w	r3, r3, #4
 80056b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ba:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	4a5a      	ldr	r2, [pc, #360]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ca:	e00f      	b.n	80056ec <HAL_RCC_OscConfig+0x378>
 80056cc:	4b57      	ldr	r3, [pc, #348]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	4a56      	ldr	r2, [pc, #344]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056dc:	4b53      	ldr	r3, [pc, #332]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e2:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80056e4:	f023 0304 	bic.w	r3, r3, #4
 80056e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d016      	beq.n	8005722 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f4:	f7fb fe90 	bl	8001418 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056fa:	e00a      	b.n	8005712 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fc:	f7fb fe8c 	bl	8001418 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f241 3288 	movw	r2, #5000	; 0x1388
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e138      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005712:	4b46      	ldr	r3, [pc, #280]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0ed      	beq.n	80056fc <HAL_RCC_OscConfig+0x388>
 8005720:	e015      	b.n	800574e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005722:	f7fb fe79 	bl	8001418 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005728:	e00a      	b.n	8005740 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800572a:	f7fb fe75 	bl	8001418 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	f241 3288 	movw	r2, #5000	; 0x1388
 8005738:	4293      	cmp	r3, r2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e121      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005740:	4b3a      	ldr	r3, [pc, #232]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1ed      	bne.n	800572a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800574e:	7ffb      	ldrb	r3, [r7, #31]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d105      	bne.n	8005760 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005754:	4b35      	ldr	r3, [pc, #212]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	4a34      	ldr	r2, [pc, #208]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d03c      	beq.n	80057e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01c      	beq.n	80057ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005774:	4b2d      	ldr	r3, [pc, #180]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800577a:	4a2c      	ldr	r2, [pc, #176]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 800577c:	f043 0301 	orr.w	r3, r3, #1
 8005780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fb fe48 	bl	8001418 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800578c:	f7fb fe44 	bl	8001418 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e0f2      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800579e:	4b23      	ldr	r3, [pc, #140]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80057a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ef      	beq.n	800578c <HAL_RCC_OscConfig+0x418>
 80057ac:	e01b      	b.n	80057e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057ae:	4b1f      	ldr	r3, [pc, #124]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80057b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b4:	4a1d      	ldr	r2, [pc, #116]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057be:	f7fb fe2b 	bl	8001418 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057c6:	f7fb fe27 	bl	8001418 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e0d5      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057d8:	4b14      	ldr	r3, [pc, #80]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80057da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1ef      	bne.n	80057c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80c9 	beq.w	8005982 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057f0:	4b0e      	ldr	r3, [pc, #56]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	f000 8083 	beq.w	8005904 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d15e      	bne.n	80058c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005806:	4b09      	ldr	r3, [pc, #36]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a08      	ldr	r2, [pc, #32]	; (800582c <HAL_RCC_OscConfig+0x4b8>)
 800580c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fb fe01 	bl	8001418 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005818:	e00c      	b.n	8005834 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800581a:	f7fb fdfd 	bl	8001418 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d905      	bls.n	8005834 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0ab      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
 800582c:	40021000 	.word	0x40021000
 8005830:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005834:	4b55      	ldr	r3, [pc, #340]	; (800598c <HAL_RCC_OscConfig+0x618>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ec      	bne.n	800581a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005840:	4b52      	ldr	r3, [pc, #328]	; (800598c <HAL_RCC_OscConfig+0x618>)
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	4b52      	ldr	r3, [pc, #328]	; (8005990 <HAL_RCC_OscConfig+0x61c>)
 8005846:	4013      	ands	r3, r2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6a11      	ldr	r1, [r2, #32]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005850:	3a01      	subs	r2, #1
 8005852:	0112      	lsls	r2, r2, #4
 8005854:	4311      	orrs	r1, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800585a:	0212      	lsls	r2, r2, #8
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005862:	0852      	lsrs	r2, r2, #1
 8005864:	3a01      	subs	r2, #1
 8005866:	0552      	lsls	r2, r2, #21
 8005868:	4311      	orrs	r1, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800586e:	0852      	lsrs	r2, r2, #1
 8005870:	3a01      	subs	r2, #1
 8005872:	0652      	lsls	r2, r2, #25
 8005874:	4311      	orrs	r1, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800587a:	06d2      	lsls	r2, r2, #27
 800587c:	430a      	orrs	r2, r1
 800587e:	4943      	ldr	r1, [pc, #268]	; (800598c <HAL_RCC_OscConfig+0x618>)
 8005880:	4313      	orrs	r3, r2
 8005882:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005884:	4b41      	ldr	r3, [pc, #260]	; (800598c <HAL_RCC_OscConfig+0x618>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a40      	ldr	r2, [pc, #256]	; (800598c <HAL_RCC_OscConfig+0x618>)
 800588a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800588e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005890:	4b3e      	ldr	r3, [pc, #248]	; (800598c <HAL_RCC_OscConfig+0x618>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4a3d      	ldr	r2, [pc, #244]	; (800598c <HAL_RCC_OscConfig+0x618>)
 8005896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800589a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fb fdbc 	bl	8001418 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a4:	f7fb fdb8 	bl	8001418 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e066      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b6:	4b35      	ldr	r3, [pc, #212]	; (800598c <HAL_RCC_OscConfig+0x618>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0x530>
 80058c2:	e05e      	b.n	8005982 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c4:	4b31      	ldr	r3, [pc, #196]	; (800598c <HAL_RCC_OscConfig+0x618>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a30      	ldr	r2, [pc, #192]	; (800598c <HAL_RCC_OscConfig+0x618>)
 80058ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fb fda2 	bl	8001418 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fb fd9e 	bl	8001418 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e04c      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ea:	4b28      	ldr	r3, [pc, #160]	; (800598c <HAL_RCC_OscConfig+0x618>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058f6:	4b25      	ldr	r3, [pc, #148]	; (800598c <HAL_RCC_OscConfig+0x618>)
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	4924      	ldr	r1, [pc, #144]	; (800598c <HAL_RCC_OscConfig+0x618>)
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <HAL_RCC_OscConfig+0x620>)
 80058fe:	4013      	ands	r3, r2
 8005900:	60cb      	str	r3, [r1, #12]
 8005902:	e03e      	b.n	8005982 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e039      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005910:	4b1e      	ldr	r3, [pc, #120]	; (800598c <HAL_RCC_OscConfig+0x618>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f003 0203 	and.w	r2, r3, #3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	429a      	cmp	r2, r3
 8005922:	d12c      	bne.n	800597e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	3b01      	subs	r3, #1
 8005930:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d123      	bne.n	800597e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005940:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005942:	429a      	cmp	r2, r3
 8005944:	d11b      	bne.n	800597e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005952:	429a      	cmp	r2, r3
 8005954:	d113      	bne.n	800597e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	3b01      	subs	r3, #1
 8005964:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d109      	bne.n	800597e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	3b01      	subs	r3, #1
 8005978:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d001      	beq.n	8005982 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	40021000 	.word	0x40021000
 8005990:	019f800c 	.word	0x019f800c
 8005994:	feeefffc 	.word	0xfeeefffc

08005998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e11e      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b0:	4b91      	ldr	r3, [pc, #580]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d910      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b8e      	ldr	r3, [pc, #568]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 020f 	bic.w	r2, r3, #15
 80059c6:	498c      	ldr	r1, [pc, #560]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b8a      	ldr	r3, [pc, #552]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e106      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d073      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d129      	bne.n	8005a48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f4:	4b81      	ldr	r3, [pc, #516]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0f4      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a04:	f000 f966 	bl	8005cd4 <RCC_GetSysClockFreqFromPLLSource>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4a7c      	ldr	r2, [pc, #496]	; (8005c00 <HAL_RCC_ClockConfig+0x268>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d93f      	bls.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a12:	4b7a      	ldr	r3, [pc, #488]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d033      	beq.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d12f      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a32:	4b72      	ldr	r3, [pc, #456]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3a:	4a70      	ldr	r2, [pc, #448]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	e024      	b.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a50:	4b6a      	ldr	r3, [pc, #424]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0c6      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a60:	4b66      	ldr	r3, [pc, #408]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0be      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a70:	f000 f8ce 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8005a74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4a61      	ldr	r2, [pc, #388]	; (8005c00 <HAL_RCC_ClockConfig+0x268>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d909      	bls.n	8005a92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a7e:	4b5f      	ldr	r3, [pc, #380]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a86:	4a5d      	ldr	r2, [pc, #372]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a8e:	2380      	movs	r3, #128	; 0x80
 8005a90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a92:	4b5a      	ldr	r3, [pc, #360]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f023 0203 	bic.w	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4957      	ldr	r1, [pc, #348]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa4:	f7fb fcb8 	bl	8001418 <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aac:	f7fb fcb4 	bl	8001418 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e095      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	4b4e      	ldr	r3, [pc, #312]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 020c 	and.w	r2, r3, #12
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d1eb      	bne.n	8005aac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d023      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aec:	4b43      	ldr	r3, [pc, #268]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a42      	ldr	r2, [pc, #264]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005af6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b04:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b0c:	4a3b      	ldr	r2, [pc, #236]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b14:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	4936      	ldr	r1, [pc, #216]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b80      	cmp	r3, #128	; 0x80
 8005b2c:	d105      	bne.n	8005b3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b2e:	4b33      	ldr	r3, [pc, #204]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	4a32      	ldr	r2, [pc, #200]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b3a:	4b2f      	ldr	r3, [pc, #188]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d21d      	bcs.n	8005b84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b48:	4b2b      	ldr	r3, [pc, #172]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f023 020f 	bic.w	r2, r3, #15
 8005b50:	4929      	ldr	r1, [pc, #164]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b58:	f7fb fc5e 	bl	8001418 <HAL_GetTick>
 8005b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b60:	f7fb fc5a 	bl	8001418 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e03b      	b.n	8005bee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <HAL_RCC_ClockConfig+0x260>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d1ed      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4917      	ldr	r1, [pc, #92]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	490f      	ldr	r1, [pc, #60]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bc2:	f000 f825 	bl	8005c10 <HAL_RCC_GetSysClockFreq>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <HAL_RCC_ClockConfig+0x264>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	490c      	ldr	r1, [pc, #48]	; (8005c04 <HAL_RCC_ClockConfig+0x26c>)
 8005bd4:	5ccb      	ldrb	r3, [r1, r3]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	fa22 f303 	lsr.w	r3, r2, r3
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <HAL_RCC_ClockConfig+0x270>)
 8005be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <HAL_RCC_ClockConfig+0x274>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fb fbca 	bl	8001380 <HAL_InitTick>
 8005bec:	4603      	mov	r3, r0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40022000 	.word	0x40022000
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	04c4b400 	.word	0x04c4b400
 8005c04:	0800bb00 	.word	0x0800bb00
 8005c08:	20000000 	.word	0x20000000
 8005c0c:	20000004 	.word	0x20000004

08005c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c16:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d102      	bne.n	8005c28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e047      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c28:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 030c 	and.w	r3, r3, #12
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d102      	bne.n	8005c3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c34:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	e03e      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c3a:	4b23      	ldr	r3, [pc, #140]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 030c 	and.w	r3, r3, #12
 8005c42:	2b0c      	cmp	r3, #12
 8005c44:	d136      	bne.n	8005cb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c46:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c50:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	091b      	lsrs	r3, r3, #4
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d10c      	bne.n	8005c7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c64:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c6e:	68d2      	ldr	r2, [r2, #12]
 8005c70:	0a12      	lsrs	r2, r2, #8
 8005c72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	617b      	str	r3, [r7, #20]
      break;
 8005c7c:	e00c      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c88:	68d2      	ldr	r2, [r2, #12]
 8005c8a:	0a12      	lsrs	r2, r2, #8
 8005c8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	617b      	str	r3, [r7, #20]
      break;
 8005c96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	0e5b      	lsrs	r3, r3, #25
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e001      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cb8:	693b      	ldr	r3, [r7, #16]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	00f42400 	.word	0x00f42400
 8005cd0:	02dc6c00 	.word	0x02dc6c00

08005cd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cda:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d10c      	bne.n	8005d12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cf8:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d02:	68d2      	ldr	r2, [r2, #12]
 8005d04:	0a12      	lsrs	r2, r2, #8
 8005d06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	617b      	str	r3, [r7, #20]
    break;
 8005d10:	e00c      	b.n	8005d2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d12:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	4a0e      	ldr	r2, [pc, #56]	; (8005d54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d1c:	68d2      	ldr	r2, [r2, #12]
 8005d1e:	0a12      	lsrs	r2, r2, #8
 8005d20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d24:	fb02 f303 	mul.w	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]
    break;
 8005d2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	0e5b      	lsrs	r3, r3, #25
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	3301      	adds	r3, #1
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d46:	687b      	ldr	r3, [r7, #4]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	40021000 	.word	0x40021000
 8005d58:	02dc6c00 	.word	0x02dc6c00
 8005d5c:	00f42400 	.word	0x00f42400

08005d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d68:	2300      	movs	r3, #0
 8005d6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 8098 	beq.w	8005eae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d82:	4b43      	ldr	r3, [pc, #268]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10d      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8e:	4b40      	ldr	r3, [pc, #256]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	4a3f      	ldr	r2, [pc, #252]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d98:	6593      	str	r3, [r2, #88]	; 0x58
 8005d9a:	4b3d      	ldr	r3, [pc, #244]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da2:	60bb      	str	r3, [r7, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da6:	2301      	movs	r3, #1
 8005da8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005daa:	4b3a      	ldr	r3, [pc, #232]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a39      	ldr	r2, [pc, #228]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005db6:	f7fb fb2f 	bl	8001418 <HAL_GetTick>
 8005dba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dbc:	e009      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dbe:	f7fb fb2b 	bl	8001418 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d902      	bls.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	74fb      	strb	r3, [r7, #19]
        break;
 8005dd0:	e005      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dd2:	4b30      	ldr	r3, [pc, #192]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0ef      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005dde:	7cfb      	ldrb	r3, [r7, #19]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d159      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005de4:	4b2a      	ldr	r3, [pc, #168]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01e      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d019      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e00:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e0c:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e1c:	4b1c      	ldr	r3, [pc, #112]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	4a1b      	ldr	r2, [pc, #108]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e2c:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d016      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3e:	f7fb faeb 	bl	8001418 <HAL_GetTick>
 8005e42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e44:	e00b      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e46:	f7fb fae7 	bl	8001418 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d902      	bls.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	74fb      	strb	r3, [r7, #19]
            break;
 8005e5c:	e006      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0ec      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e6c:	7cfb      	ldrb	r3, [r7, #19]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e72:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	4903      	ldr	r1, [pc, #12]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e88:	e008      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e8a:	7cfb      	ldrb	r3, [r7, #19]
 8005e8c:	74bb      	strb	r3, [r7, #18]
 8005e8e:	e005      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	7cfb      	ldrb	r3, [r7, #19]
 8005e9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e9c:	7c7b      	ldrb	r3, [r7, #17]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d105      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ea2:	4ba6      	ldr	r3, [pc, #664]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea6:	4aa5      	ldr	r2, [pc, #660]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eba:	4ba0      	ldr	r3, [pc, #640]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec0:	f023 0203 	bic.w	r2, r3, #3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	499c      	ldr	r1, [pc, #624]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005edc:	4b97      	ldr	r3, [pc, #604]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f023 020c 	bic.w	r2, r3, #12
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	4994      	ldr	r1, [pc, #592]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005efe:	4b8f      	ldr	r3, [pc, #572]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	498b      	ldr	r1, [pc, #556]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f20:	4b86      	ldr	r3, [pc, #536]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	4983      	ldr	r1, [pc, #524]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f42:	4b7e      	ldr	r3, [pc, #504]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	497a      	ldr	r1, [pc, #488]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f64:	4b75      	ldr	r3, [pc, #468]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	4972      	ldr	r1, [pc, #456]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f86:	4b6d      	ldr	r3, [pc, #436]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	4969      	ldr	r1, [pc, #420]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fa8:	4b64      	ldr	r3, [pc, #400]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	4961      	ldr	r1, [pc, #388]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fca:	4b5c      	ldr	r3, [pc, #368]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	4958      	ldr	r1, [pc, #352]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d015      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fec:	4b53      	ldr	r3, [pc, #332]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	4950      	ldr	r1, [pc, #320]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600a:	d105      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800600c:	4b4b      	ldr	r3, [pc, #300]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4a4a      	ldr	r2, [pc, #296]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006016:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006020:	2b00      	cmp	r3, #0
 8006022:	d015      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006024:	4b45      	ldr	r3, [pc, #276]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	4942      	ldr	r1, [pc, #264]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006042:	d105      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006044:	4b3d      	ldr	r3, [pc, #244]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4a3c      	ldr	r2, [pc, #240]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800604e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800605c:	4b37      	ldr	r3, [pc, #220]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	4934      	ldr	r1, [pc, #208]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800607a:	d105      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800607c:	4b2f      	ldr	r3, [pc, #188]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a2e      	ldr	r2, [pc, #184]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006086:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d015      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006094:	4b29      	ldr	r3, [pc, #164]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	4926      	ldr	r1, [pc, #152]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b4:	4b21      	ldr	r3, [pc, #132]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4a20      	ldr	r2, [pc, #128]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d015      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	4918      	ldr	r1, [pc, #96]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ea:	d105      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ec:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4a12      	ldr	r2, [pc, #72]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	490a      	ldr	r1, [pc, #40]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4a04      	ldr	r2, [pc, #16]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006130:	7cbb      	ldrb	r3, [r7, #18]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000

08006140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e049      	b.n	80061e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fa fef4 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f000 fc7e 	bl	8006a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d001      	beq.n	8006208 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e042      	b.n	800628e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a21      	ldr	r2, [pc, #132]	; (800629c <HAL_TIM_Base_Start+0xac>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_TIM_Base_Start+0x5c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d013      	beq.n	800624c <HAL_TIM_Base_Start+0x5c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <HAL_TIM_Base_Start+0xb0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIM_Base_Start+0x5c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_TIM_Base_Start+0xb4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIM_Base_Start+0x5c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1a      	ldr	r2, [pc, #104]	; (80062a8 <HAL_TIM_Base_Start+0xb8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIM_Base_Start+0x5c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a19      	ldr	r2, [pc, #100]	; (80062ac <HAL_TIM_Base_Start+0xbc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d115      	bne.n	8006278 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <HAL_TIM_Base_Start+0xc0>)
 8006254:	4013      	ands	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b06      	cmp	r3, #6
 800625c:	d015      	beq.n	800628a <HAL_TIM_Base_Start+0x9a>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d011      	beq.n	800628a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006276:	e008      	b.n	800628a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	e000      	b.n	800628c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40013400 	.word	0x40013400
 80062ac:	40014000 	.word	0x40014000
 80062b0:	00010007 	.word	0x00010007

080062b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e049      	b.n	800635a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fa feb8 	bl	8001050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 fbc4 	bl	8006a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d020      	beq.n	80063c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01b      	beq.n	80063c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f06f 0202 	mvn.w	r2, #2
 8006396:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fb49 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 80063b2:	e005      	b.n	80063c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fb3b 	bl	8006a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fb4c 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d020      	beq.n	8006412 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01b      	beq.n	8006412 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f06f 0204 	mvn.w	r2, #4
 80063e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fb23 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 80063fe:	e005      	b.n	800640c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fb15 	bl	8006a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fb26 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d020      	beq.n	800645e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01b      	beq.n	800645e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f06f 0208 	mvn.w	r2, #8
 800642e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2204      	movs	r2, #4
 8006434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fafd 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 800644a:	e005      	b.n	8006458 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 faef 	bl	8006a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fb00 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d020      	beq.n	80064aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01b      	beq.n	80064aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f06f 0210 	mvn.w	r2, #16
 800647a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2208      	movs	r2, #8
 8006480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fad7 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 8006496:	e005      	b.n	80064a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fac9 	bl	8006a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fada 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0201 	mvn.w	r2, #1
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 faa7 	bl	8006a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00c      	beq.n	80064fc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 f808 	bl	800750c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00c      	beq.n	8006520 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d007      	beq.n	8006520 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 f800 	bl	8007520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00c      	beq.n	8006544 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800653c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fa94 	bl	8006a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00c      	beq.n	8006568 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0220 	mvn.w	r2, #32
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 ffc8 	bl	80074f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00c      	beq.n	800658c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 ffd4 	bl	8007534 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00c      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d007      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80065a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 ffcc 	bl	8007548 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00c      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80065cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 ffc4 	bl	800755c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00c      	beq.n	80065f8 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80065f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 ffbc 	bl	8007570 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800661a:	2302      	movs	r3, #2
 800661c:	e0ff      	b.n	800681e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b14      	cmp	r3, #20
 800662a:	f200 80f0 	bhi.w	800680e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006689 	.word	0x08006689
 8006638:	0800680f 	.word	0x0800680f
 800663c:	0800680f 	.word	0x0800680f
 8006640:	0800680f 	.word	0x0800680f
 8006644:	080066c9 	.word	0x080066c9
 8006648:	0800680f 	.word	0x0800680f
 800664c:	0800680f 	.word	0x0800680f
 8006650:	0800680f 	.word	0x0800680f
 8006654:	0800670b 	.word	0x0800670b
 8006658:	0800680f 	.word	0x0800680f
 800665c:	0800680f 	.word	0x0800680f
 8006660:	0800680f 	.word	0x0800680f
 8006664:	0800674b 	.word	0x0800674b
 8006668:	0800680f 	.word	0x0800680f
 800666c:	0800680f 	.word	0x0800680f
 8006670:	0800680f 	.word	0x0800680f
 8006674:	0800678d 	.word	0x0800678d
 8006678:	0800680f 	.word	0x0800680f
 800667c:	0800680f 	.word	0x0800680f
 8006680:	0800680f 	.word	0x0800680f
 8006684:	080067cd 	.word	0x080067cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fa92 	bl	8006bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0208 	orr.w	r2, r2, #8
 80066a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0204 	bic.w	r2, r2, #4
 80066b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6999      	ldr	r1, [r3, #24]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	619a      	str	r2, [r3, #24]
      break;
 80066c6:	e0a5      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fb02 	bl	8006cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6999      	ldr	r1, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	021a      	lsls	r2, r3, #8
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	619a      	str	r2, [r3, #24]
      break;
 8006708:	e084      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fb6b 	bl	8006dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0208 	orr.w	r2, r2, #8
 8006724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0204 	bic.w	r2, r2, #4
 8006734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69d9      	ldr	r1, [r3, #28]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	61da      	str	r2, [r3, #28]
      break;
 8006748:	e064      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fbd3 	bl	8006efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	021a      	lsls	r2, r3, #8
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	61da      	str	r2, [r3, #28]
      break;
 800678a:	e043      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fc3c 	bl	8007010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0208 	orr.w	r2, r2, #8
 80067a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0204 	bic.w	r2, r2, #4
 80067b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80067ca:	e023      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68b9      	ldr	r1, [r7, #8]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fc80 	bl	80070d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	021a      	lsls	r2, r3, #8
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800680c:	e002      	b.n	8006814 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
      break;
 8006812:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop

08006828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIM_ConfigClockSource+0x1c>
 8006840:	2302      	movs	r3, #2
 8006842:	e0de      	b.n	8006a02 <HAL_TIM_ConfigClockSource+0x1da>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a63      	ldr	r2, [pc, #396]	; (8006a0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	f000 80a9 	beq.w	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006884:	4a61      	ldr	r2, [pc, #388]	; (8006a0c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	f200 80ae 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800688c:	4a60      	ldr	r2, [pc, #384]	; (8006a10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	f000 80a1 	beq.w	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006894:	4a5e      	ldr	r2, [pc, #376]	; (8006a10 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	f200 80a6 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800689c:	4a5d      	ldr	r2, [pc, #372]	; (8006a14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	f000 8099 	beq.w	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80068a4:	4a5b      	ldr	r2, [pc, #364]	; (8006a14 <HAL_TIM_ConfigClockSource+0x1ec>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	f200 809e 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80068ac:	4a5a      	ldr	r2, [pc, #360]	; (8006a18 <HAL_TIM_ConfigClockSource+0x1f0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	f000 8091 	beq.w	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80068b4:	4a58      	ldr	r2, [pc, #352]	; (8006a18 <HAL_TIM_ConfigClockSource+0x1f0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	f200 8096 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80068bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80068c0:	f000 8089 	beq.w	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80068c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80068c8:	f200 808e 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d0:	d03e      	beq.n	8006950 <HAL_TIM_ConfigClockSource+0x128>
 80068d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d6:	f200 8087 	bhi.w	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	f000 8086 	beq.w	80069ee <HAL_TIM_ConfigClockSource+0x1c6>
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e6:	d87f      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80068e8:	2b70      	cmp	r3, #112	; 0x70
 80068ea:	d01a      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0xfa>
 80068ec:	2b70      	cmp	r3, #112	; 0x70
 80068ee:	d87b      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80068f0:	2b60      	cmp	r3, #96	; 0x60
 80068f2:	d050      	beq.n	8006996 <HAL_TIM_ConfigClockSource+0x16e>
 80068f4:	2b60      	cmp	r3, #96	; 0x60
 80068f6:	d877      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80068f8:	2b50      	cmp	r3, #80	; 0x50
 80068fa:	d03c      	beq.n	8006976 <HAL_TIM_ConfigClockSource+0x14e>
 80068fc:	2b50      	cmp	r3, #80	; 0x50
 80068fe:	d873      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d058      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0x18e>
 8006904:	2b40      	cmp	r3, #64	; 0x40
 8006906:	d86f      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006908:	2b30      	cmp	r3, #48	; 0x30
 800690a:	d064      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800690c:	2b30      	cmp	r3, #48	; 0x30
 800690e:	d86b      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006910:	2b20      	cmp	r3, #32
 8006912:	d060      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006914:	2b20      	cmp	r3, #32
 8006916:	d867      	bhi.n	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d05c      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800691c:	2b10      	cmp	r3, #16
 800691e:	d05a      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006920:	e062      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006932:	f000 fcb3 	bl	800729c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	609a      	str	r2, [r3, #8]
      break;
 800694e:	e04f      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006960:	f000 fc9c 	bl	800729c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006972:	609a      	str	r2, [r3, #8]
      break;
 8006974:	e03c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	461a      	mov	r2, r3
 8006984:	f000 fc0e 	bl	80071a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2150      	movs	r1, #80	; 0x50
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fc67 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8006994:	e02c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a2:	461a      	mov	r2, r3
 80069a4:	f000 fc2d 	bl	8007202 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2160      	movs	r1, #96	; 0x60
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fc57 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 80069b4:	e01c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	461a      	mov	r2, r3
 80069c4:	f000 fbee 	bl	80071a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2140      	movs	r1, #64	; 0x40
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fc47 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 80069d4:	e00c      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f000 fc3e 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 80069e6:	e003      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      break;
 80069ec:	e000      	b.n	80069f0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80069ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	00100070 	.word	0x00100070
 8006a10:	00100040 	.word	0x00100040
 8006a14:	00100030 	.word	0x00100030
 8006a18:	00100020 	.word	0x00100020

08006a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a42      	ldr	r2, [pc, #264]	; (8006b9c <TIM_Base_SetConfig+0x11c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00f      	beq.n	8006ab8 <TIM_Base_SetConfig+0x38>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9e:	d00b      	beq.n	8006ab8 <TIM_Base_SetConfig+0x38>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3f      	ldr	r2, [pc, #252]	; (8006ba0 <TIM_Base_SetConfig+0x120>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d007      	beq.n	8006ab8 <TIM_Base_SetConfig+0x38>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3e      	ldr	r2, [pc, #248]	; (8006ba4 <TIM_Base_SetConfig+0x124>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_Base_SetConfig+0x38>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a3d      	ldr	r2, [pc, #244]	; (8006ba8 <TIM_Base_SetConfig+0x128>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d108      	bne.n	8006aca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a33      	ldr	r2, [pc, #204]	; (8006b9c <TIM_Base_SetConfig+0x11c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d01b      	beq.n	8006b0a <TIM_Base_SetConfig+0x8a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad8:	d017      	beq.n	8006b0a <TIM_Base_SetConfig+0x8a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a30      	ldr	r2, [pc, #192]	; (8006ba0 <TIM_Base_SetConfig+0x120>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <TIM_Base_SetConfig+0x8a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2f      	ldr	r2, [pc, #188]	; (8006ba4 <TIM_Base_SetConfig+0x124>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <TIM_Base_SetConfig+0x8a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2e      	ldr	r2, [pc, #184]	; (8006ba8 <TIM_Base_SetConfig+0x128>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00b      	beq.n	8006b0a <TIM_Base_SetConfig+0x8a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2d      	ldr	r2, [pc, #180]	; (8006bac <TIM_Base_SetConfig+0x12c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <TIM_Base_SetConfig+0x8a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2c      	ldr	r2, [pc, #176]	; (8006bb0 <TIM_Base_SetConfig+0x130>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_Base_SetConfig+0x8a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2b      	ldr	r2, [pc, #172]	; (8006bb4 <TIM_Base_SetConfig+0x134>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d108      	bne.n	8006b1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a16      	ldr	r2, [pc, #88]	; (8006b9c <TIM_Base_SetConfig+0x11c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <TIM_Base_SetConfig+0xe8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <TIM_Base_SetConfig+0x128>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00b      	beq.n	8006b68 <TIM_Base_SetConfig+0xe8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a16      	ldr	r2, [pc, #88]	; (8006bac <TIM_Base_SetConfig+0x12c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_Base_SetConfig+0xe8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <TIM_Base_SetConfig+0x130>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_Base_SetConfig+0xe8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <TIM_Base_SetConfig+0x134>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d103      	bne.n	8006b70 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d105      	bne.n	8006b8e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f023 0201 	bic.w	r2, r3, #1
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	611a      	str	r2, [r3, #16]
  }
}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800
 8006ba8:	40013400 	.word	0x40013400
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800

08006bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	f023 0201 	bic.w	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0302 	bic.w	r3, r3, #2
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <TIM_OC1_SetConfig+0x10c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00f      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <TIM_OC1_SetConfig+0x110>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <TIM_OC1_SetConfig+0x114>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d007      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a29      	ldr	r2, [pc, #164]	; (8006cd0 <TIM_OC1_SetConfig+0x118>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_OC1_SetConfig+0x80>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <TIM_OC1_SetConfig+0x11c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d10c      	bne.n	8006c52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0308 	bic.w	r3, r3, #8
 8006c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f023 0304 	bic.w	r3, r3, #4
 8006c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <TIM_OC1_SetConfig+0x10c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <TIM_OC1_SetConfig+0x110>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <TIM_OC1_SetConfig+0x114>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <TIM_OC1_SetConfig+0x118>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_OC1_SetConfig+0xc2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <TIM_OC1_SetConfig+0x11c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d111      	bne.n	8006c9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	621a      	str	r2, [r3, #32]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800

08006cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	f023 0210 	bic.w	r2, r3, #16
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a28      	ldr	r2, [pc, #160]	; (8006dd8 <TIM_OC2_SetConfig+0x100>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC2_SetConfig+0x6c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <TIM_OC2_SetConfig+0x104>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10d      	bne.n	8006d60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a1d      	ldr	r2, [pc, #116]	; (8006dd8 <TIM_OC2_SetConfig+0x100>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <TIM_OC2_SetConfig+0x104>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1b      	ldr	r2, [pc, #108]	; (8006de0 <TIM_OC2_SetConfig+0x108>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <TIM_OC2_SetConfig+0x10c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_OC2_SetConfig+0xb0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <TIM_OC2_SetConfig+0x110>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d113      	bne.n	8006db0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800

08006dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <TIM_OC3_SetConfig+0xfc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_OC3_SetConfig+0x6a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a26      	ldr	r2, [pc, #152]	; (8006eec <TIM_OC3_SetConfig+0x100>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10d      	bne.n	8006e72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <TIM_OC3_SetConfig+0xfc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <TIM_OC3_SetConfig+0x100>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00b      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <TIM_OC3_SetConfig+0x104>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <TIM_OC3_SetConfig+0x108>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_OC3_SetConfig+0xae>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <TIM_OC3_SetConfig+0x10c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d113      	bne.n	8006ec2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	621a      	str	r2, [r3, #32]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40013400 	.word	0x40013400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800

08006efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	031b      	lsls	r3, r3, #12
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a28      	ldr	r2, [pc, #160]	; (8006ffc <TIM_OC4_SetConfig+0x100>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_OC4_SetConfig+0x6c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a27      	ldr	r2, [pc, #156]	; (8007000 <TIM_OC4_SetConfig+0x104>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d10d      	bne.n	8006f84 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <TIM_OC4_SetConfig+0x100>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00f      	beq.n	8006fac <TIM_OC4_SetConfig+0xb0>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a1c      	ldr	r2, [pc, #112]	; (8007000 <TIM_OC4_SetConfig+0x104>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00b      	beq.n	8006fac <TIM_OC4_SetConfig+0xb0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a1b      	ldr	r2, [pc, #108]	; (8007004 <TIM_OC4_SetConfig+0x108>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d007      	beq.n	8006fac <TIM_OC4_SetConfig+0xb0>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1a      	ldr	r2, [pc, #104]	; (8007008 <TIM_OC4_SetConfig+0x10c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_OC4_SetConfig+0xb0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a19      	ldr	r2, [pc, #100]	; (800700c <TIM_OC4_SetConfig+0x110>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d113      	bne.n	8006fd4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	019b      	lsls	r3, r3, #6
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	019b      	lsls	r3, r3, #6
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40013400 	.word	0x40013400
 8007004:	40014000 	.word	0x40014000
 8007008:	40014400 	.word	0x40014400
 800700c:	40014800 	.word	0x40014800

08007010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800703e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	041b      	lsls	r3, r3, #16
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <TIM_OC5_SetConfig+0xb4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d00f      	beq.n	800708a <TIM_OC5_SetConfig+0x7a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a16      	ldr	r2, [pc, #88]	; (80070c8 <TIM_OC5_SetConfig+0xb8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00b      	beq.n	800708a <TIM_OC5_SetConfig+0x7a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a15      	ldr	r2, [pc, #84]	; (80070cc <TIM_OC5_SetConfig+0xbc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d007      	beq.n	800708a <TIM_OC5_SetConfig+0x7a>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <TIM_OC5_SetConfig+0xc0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <TIM_OC5_SetConfig+0x7a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <TIM_OC5_SetConfig+0xc4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d109      	bne.n	800709e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	621a      	str	r2, [r3, #32]
}
 80070b8:	bf00      	nop
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	40012c00 	.word	0x40012c00
 80070c8:	40013400 	.word	0x40013400
 80070cc:	40014000 	.word	0x40014000
 80070d0:	40014400 	.word	0x40014400
 80070d4:	40014800 	.word	0x40014800

080070d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800711e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	051b      	lsls	r3, r3, #20
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a18      	ldr	r2, [pc, #96]	; (8007190 <TIM_OC6_SetConfig+0xb8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00f      	beq.n	8007154 <TIM_OC6_SetConfig+0x7c>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a17      	ldr	r2, [pc, #92]	; (8007194 <TIM_OC6_SetConfig+0xbc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00b      	beq.n	8007154 <TIM_OC6_SetConfig+0x7c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a16      	ldr	r2, [pc, #88]	; (8007198 <TIM_OC6_SetConfig+0xc0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d007      	beq.n	8007154 <TIM_OC6_SetConfig+0x7c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a15      	ldr	r2, [pc, #84]	; (800719c <TIM_OC6_SetConfig+0xc4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC6_SetConfig+0x7c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <TIM_OC6_SetConfig+0xc8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d109      	bne.n	8007168 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800715a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	029b      	lsls	r3, r3, #10
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40013400 	.word	0x40013400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800

080071a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f023 0201 	bic.w	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 030a 	bic.w	r3, r3, #10
 80071e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007202:	b480      	push	{r7}
 8007204:	b087      	sub	sp, #28
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f023 0210 	bic.w	r2, r3, #16
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800722c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	031b      	lsls	r3, r3, #12
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800723e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	f043 0307 	orr.w	r3, r3, #7
 8007288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	609a      	str	r2, [r3, #8]
}
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	021a      	lsls	r2, r3, #8
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	431a      	orrs	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	609a      	str	r2, [r3, #8]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e065      	b.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a2c      	ldr	r2, [pc, #176]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d004      	beq.n	8007328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a2b      	ldr	r2, [pc, #172]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d108      	bne.n	800733a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800732e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d018      	beq.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d013      	beq.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00e      	beq.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d009      	beq.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a12      	ldr	r2, [pc, #72]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d004      	beq.n	8007394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a13      	ldr	r2, [pc, #76]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10c      	bne.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40012c00 	.word	0x40012c00
 80073d0:	40013400 	.word	0x40013400
 80073d4:	40000400 	.word	0x40000400
 80073d8:	40000800 	.word	0x40000800
 80073dc:	40014000 	.word	0x40014000

080073e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e073      	b.n	80074e4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	041b      	lsls	r3, r3, #16
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a19      	ldr	r2, [pc, #100]	; (80074f0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d004      	beq.n	8007498 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a18      	ldr	r2, [pc, #96]	; (80074f4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d11c      	bne.n	80074d2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a2:	051b      	lsls	r3, r3, #20
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40013400 	.word	0x40013400

080074f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007594:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007598:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075ba:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80075be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	43db      	mvns	r3, r3
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4013      	ands	r3, r2
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	1d3b      	adds	r3, r7, #4
 80075f2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007624:	b480      	push	{r7}
 8007626:	b09d      	sub	sp, #116	; 0x74
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	78db      	ldrb	r3, [r3, #3]
 8007652:	2b03      	cmp	r3, #3
 8007654:	d81f      	bhi.n	8007696 <USB_ActivateEndpoint+0x72>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <USB_ActivateEndpoint+0x38>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	0800766d 	.word	0x0800766d
 8007660:	08007689 	.word	0x08007689
 8007664:	0800769f 	.word	0x0800769f
 8007668:	0800767b 	.word	0x0800767b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800766c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007674:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007678:	e012      	b.n	80076a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800767a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800767e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007682:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007686:	e00b      	b.n	80076a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007688:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800768c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007690:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007694:	e004      	b.n	80076a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800769c:	e000      	b.n	80076a0 <USB_ActivateEndpoint+0x7c>
      break;
 800769e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	441a      	add	r2, r3
 80076aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076be:	b29b      	uxth	r3, r3
 80076c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	b21b      	sxth	r3, r3
 80076d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	b21a      	sxth	r2, r3
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	b21b      	sxth	r3, r3
 80076e2:	4313      	orrs	r3, r2
 80076e4:	b21b      	sxth	r3, r3
 80076e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	441a      	add	r2, r3
 80076f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	7b1b      	ldrb	r3, [r3, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f040 8178 	bne.w	8007a06 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 8084 	beq.w	8007828 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	61bb      	str	r3, [r7, #24]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772a:	b29b      	uxth	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	4413      	add	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	00da      	lsls	r2, r3, #3
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	88db      	ldrh	r3, [r3, #6]
 8007748:	085b      	lsrs	r3, r3, #1
 800774a:	b29b      	uxth	r3, r3
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	827b      	strh	r3, [r7, #18]
 8007762:	8a7b      	ldrh	r3, [r7, #18]
 8007764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01b      	beq.n	80077a4 <USB_ActivateEndpoint+0x180>
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007782:	823b      	strh	r3, [r7, #16]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	441a      	add	r2, r3
 800778e:	8a3b      	ldrh	r3, [r7, #16]
 8007790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	78db      	ldrb	r3, [r3, #3]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d020      	beq.n	80077ee <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c2:	81bb      	strh	r3, [r7, #12]
 80077c4:	89bb      	ldrh	r3, [r7, #12]
 80077c6:	f083 0320 	eor.w	r3, r3, #32
 80077ca:	81bb      	strh	r3, [r7, #12]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	441a      	add	r2, r3
 80077d6:	89bb      	ldrh	r3, [r7, #12]
 80077d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	8013      	strh	r3, [r2, #0]
 80077ec:	e2d5      	b.n	8007d9a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007804:	81fb      	strh	r3, [r7, #14]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	441a      	add	r2, r3
 8007810:	89fb      	ldrh	r3, [r7, #14]
 8007812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800781a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800781e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007822:	b29b      	uxth	r3, r3
 8007824:	8013      	strh	r3, [r2, #0]
 8007826:	e2b8      	b.n	8007d9a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	633b      	str	r3, [r7, #48]	; 0x30
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007832:	b29b      	uxth	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	4413      	add	r3, r2
 800783a:	633b      	str	r3, [r7, #48]	; 0x30
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	00da      	lsls	r2, r3, #3
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	4413      	add	r3, r2
 8007846:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	88db      	ldrh	r3, [r3, #6]
 8007850:	085b      	lsrs	r3, r3, #1
 8007852:	b29b      	uxth	r3, r3
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007866:	b29b      	uxth	r3, r3
 8007868:	461a      	mov	r2, r3
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	4413      	add	r3, r2
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	00da      	lsls	r2, r3, #3
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	4413      	add	r3, r2
 800787a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800788a:	b29a      	uxth	r2, r3
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	801a      	strh	r2, [r3, #0]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b3e      	cmp	r3, #62	; 0x3e
 8007896:	d91d      	bls.n	80078d4 <USB_ActivateEndpoint+0x2b0>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	095b      	lsrs	r3, r3, #5
 800789e:	66bb      	str	r3, [r7, #104]	; 0x68
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 031f 	and.w	r3, r3, #31
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <USB_ActivateEndpoint+0x28e>
 80078ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078ae:	3b01      	subs	r3, #1
 80078b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	029b      	lsls	r3, r3, #10
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4313      	orrs	r3, r2
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	e026      	b.n	8007922 <USB_ActivateEndpoint+0x2fe>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <USB_ActivateEndpoint+0x2ce>
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	e017      	b.n	8007922 <USB_ActivateEndpoint+0x2fe>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	085b      	lsrs	r3, r3, #1
 80078f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <USB_ActivateEndpoint+0x2e8>
 8007906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007908:	3301      	adds	r3, #1
 800790a:	66bb      	str	r3, [r7, #104]	; 0x68
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29a      	uxth	r2, r3
 8007912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007914:	b29b      	uxth	r3, r3
 8007916:	029b      	lsls	r3, r3, #10
 8007918:	b29b      	uxth	r3, r3
 800791a:	4313      	orrs	r3, r2
 800791c:	b29a      	uxth	r2, r3
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01b      	beq.n	8007972 <USB_ActivateEndpoint+0x34e>
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29b      	uxth	r3, r3
 8007948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007950:	843b      	strh	r3, [r7, #32]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	441a      	add	r2, r3
 800795c:	8c3b      	ldrh	r3, [r7, #32]
 800795e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800796a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796e:	b29b      	uxth	r3, r3
 8007970:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d124      	bne.n	80079c4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	b29b      	uxth	r3, r3
 8007988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800798c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007990:	83bb      	strh	r3, [r7, #28]
 8007992:	8bbb      	ldrh	r3, [r7, #28]
 8007994:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007998:	83bb      	strh	r3, [r7, #28]
 800799a:	8bbb      	ldrh	r3, [r7, #28]
 800799c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079a0:	83bb      	strh	r3, [r7, #28]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	441a      	add	r2, r3
 80079ac:	8bbb      	ldrh	r3, [r7, #28]
 80079ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079be:	b29b      	uxth	r3, r3
 80079c0:	8013      	strh	r3, [r2, #0]
 80079c2:	e1ea      	b.n	8007d9a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	83fb      	strh	r3, [r7, #30]
 80079dc:	8bfb      	ldrh	r3, [r7, #30]
 80079de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079e2:	83fb      	strh	r3, [r7, #30]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	441a      	add	r2, r3
 80079ee:	8bfb      	ldrh	r3, [r7, #30]
 80079f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	8013      	strh	r3, [r2, #0]
 8007a04:	e1c9      	b.n	8007d9a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	78db      	ldrb	r3, [r3, #3]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d11e      	bne.n	8007a4c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a24:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	441a      	add	r2, r3
 8007a32:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	8013      	strh	r3, [r2, #0]
 8007a4a:	e01d      	b.n	8007a88 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a62:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	441a      	add	r2, r3
 8007a70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a98:	4413      	add	r3, r2
 8007a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	00da      	lsls	r2, r3, #3
 8007aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	891b      	ldrh	r3, [r3, #8]
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	657b      	str	r3, [r7, #84]	; 0x54
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007acc:	4413      	add	r3, r2
 8007ace:	657b      	str	r3, [r7, #84]	; 0x54
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	00da      	lsls	r2, r3, #3
 8007ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad8:	4413      	add	r3, r2
 8007ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ade:	653b      	str	r3, [r7, #80]	; 0x50
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	895b      	ldrh	r3, [r3, #10]
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f040 8093 	bne.w	8007c20 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01b      	beq.n	8007b4e <USB_ActivateEndpoint+0x52a>
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	441a      	add	r2, r3
 8007b38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d01b      	beq.n	8007b9e <USB_ActivateEndpoint+0x57a>
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb4:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bbc:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bbe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bc4:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	441a      	add	r2, r3
 8007bd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	441a      	add	r2, r3
 8007c08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	8013      	strh	r3, [r2, #0]
 8007c1e:	e0bc      	b.n	8007d9a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01d      	beq.n	8007c78 <USB_ActivateEndpoint+0x654>
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c52:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	441a      	add	r2, r3
 8007c60:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007c88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01d      	beq.n	8007cd0 <USB_ActivateEndpoint+0x6ac>
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	441a      	add	r2, r3
 8007cb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	78db      	ldrb	r3, [r3, #3]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d024      	beq.n	8007d22 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007cf2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007cf6:	f083 0320 	eor.w	r3, r3, #32
 8007cfa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	441a      	add	r2, r3
 8007d08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	8013      	strh	r3, [r2, #0]
 8007d20:	e01d      	b.n	8007d5e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	441a      	add	r2, r3
 8007d46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	441a      	add	r2, r3
 8007d82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007d9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3774      	adds	r7, #116	; 0x74
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop

08007dac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b08d      	sub	sp, #52	; 0x34
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	7b1b      	ldrb	r3, [r3, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 808e 	bne.w	8007edc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d044      	beq.n	8007e52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	81bb      	strh	r3, [r7, #12]
 8007dd6:	89bb      	ldrh	r3, [r7, #12]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d01b      	beq.n	8007e18 <USB_DeactivateEndpoint+0x6c>
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df6:	817b      	strh	r3, [r7, #10]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	441a      	add	r2, r3
 8007e02:	897b      	ldrh	r3, [r7, #10]
 8007e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e2e:	813b      	strh	r3, [r7, #8]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	441a      	add	r2, r3
 8007e3a:	893b      	ldrh	r3, [r7, #8]
 8007e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	8013      	strh	r3, [r2, #0]
 8007e50:	e192      	b.n	8008178 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	827b      	strh	r3, [r7, #18]
 8007e60:	8a7b      	ldrh	r3, [r7, #18]
 8007e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01b      	beq.n	8007ea2 <USB_DeactivateEndpoint+0xf6>
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e80:	823b      	strh	r3, [r7, #16]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	441a      	add	r2, r3
 8007e8c:	8a3b      	ldrh	r3, [r7, #16]
 8007e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb8:	81fb      	strh	r3, [r7, #14]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	441a      	add	r2, r3
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	8013      	strh	r3, [r2, #0]
 8007eda:	e14d      	b.n	8008178 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 80a5 	bne.w	8008030 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	843b      	strh	r3, [r7, #32]
 8007ef4:	8c3b      	ldrh	r3, [r7, #32]
 8007ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d01b      	beq.n	8007f36 <USB_DeactivateEndpoint+0x18a>
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f14:	83fb      	strh	r3, [r7, #30]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	441a      	add	r2, r3
 8007f20:	8bfb      	ldrh	r3, [r7, #30]
 8007f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	83bb      	strh	r3, [r7, #28]
 8007f44:	8bbb      	ldrh	r3, [r7, #28]
 8007f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01b      	beq.n	8007f86 <USB_DeactivateEndpoint+0x1da>
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f64:	837b      	strh	r3, [r7, #26]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	441a      	add	r2, r3
 8007f70:	8b7b      	ldrh	r3, [r7, #26]
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9c:	833b      	strh	r3, [r7, #24]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	441a      	add	r2, r3
 8007fa8:	8b3b      	ldrh	r3, [r7, #24]
 8007faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd4:	82fb      	strh	r3, [r7, #22]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	8afb      	ldrh	r3, [r7, #22]
 8007fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800800c:	82bb      	strh	r3, [r7, #20]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	8abb      	ldrh	r3, [r7, #20]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]
 800802e:	e0a3      	b.n	8008178 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800803e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01b      	beq.n	8008080 <USB_DeactivateEndpoint+0x2d4>
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	441a      	add	r2, r3
 800806a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800806c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807c:	b29b      	uxth	r3, r3
 800807e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800808e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01b      	beq.n	80080d0 <USB_DeactivateEndpoint+0x324>
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	441a      	add	r2, r3
 80080ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	441a      	add	r2, r3
 80080f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008104:	b29b      	uxth	r3, r3
 8008106:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800811a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800812c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008156:	847b      	strh	r3, [r7, #34]	; 0x22
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	441a      	add	r2, r3
 8008162:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008174:	b29b      	uxth	r3, r3
 8008176:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3734      	adds	r7, #52	; 0x34
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b0c2      	sub	sp, #264	; 0x108
 800818a:	af00      	add	r7, sp, #0
 800818c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008194:	6018      	str	r0, [r3, #0]
 8008196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	f040 86b7 	bne.w	8008f20 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	699a      	ldr	r2, [r3, #24]
 80081be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d908      	bls.n	80081e0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081de:	e007      	b.n	80081f0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80081e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	7b1b      	ldrb	r3, [r3, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d13a      	bne.n	8008276 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6959      	ldr	r1, [r3, #20]
 800820c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	88da      	ldrh	r2, [r3, #6]
 8008218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821c:	b29b      	uxth	r3, r3
 800821e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008222:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008226:	6800      	ldr	r0, [r0, #0]
 8008228:	f001 fc98 	bl	8009b5c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800822c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	613b      	str	r3, [r7, #16]
 8008238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008246:	b29b      	uxth	r3, r3
 8008248:	461a      	mov	r2, r3
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	4413      	add	r3, r2
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	00da      	lsls	r2, r3, #3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	4413      	add	r3, r2
 8008262:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	f000 be1f 	b.w	8008eb4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	2b02      	cmp	r3, #2
 8008284:	f040 8462 	bne.w	8008b4c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6a1a      	ldr	r2, [r3, #32]
 8008294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	f240 83df 	bls.w	8008a64 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80082d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	441a      	add	r2, r3
 80082ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80082ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80082fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fe:	b29b      	uxth	r3, r3
 8008300:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6a1a      	ldr	r2, [r3, #32]
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008312:	1ad2      	subs	r2, r2, r3
 8008314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 81c7 	beq.w	80086d6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800834c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	633b      	str	r3, [r7, #48]	; 0x30
 8008354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	785b      	ldrb	r3, [r3, #1]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d177      	bne.n	8008454 <USB_EPStartXfer+0x2ce>
 8008364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837e:	b29b      	uxth	r3, r3
 8008380:	461a      	mov	r2, r3
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008384:	4413      	add	r3, r2
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
 8008388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	00da      	lsls	r2, r3, #3
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	4413      	add	r3, r2
 800839a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b4:	2b3e      	cmp	r3, #62	; 0x3e
 80083b6:	d921      	bls.n	80083fc <USB_EPStartXfer+0x276>
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c6:	f003 031f 	and.w	r3, r3, #31
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <USB_EPStartXfer+0x252>
 80083ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083d2:	3b01      	subs	r3, #1
 80083d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	029b      	lsls	r3, r3, #10
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	4313      	orrs	r3, r2
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	801a      	strh	r2, [r3, #0]
 80083fa:	e050      	b.n	800849e <USB_EPStartXfer+0x318>
 80083fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <USB_EPStartXfer+0x294>
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29b      	uxth	r3, r3
 800840a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800840e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008412:	b29a      	uxth	r2, r3
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	e041      	b.n	800849e <USB_EPStartXfer+0x318>
 800841a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841e:	085b      	lsrs	r3, r3, #1
 8008420:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <USB_EPStartXfer+0x2b4>
 8008430:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008434:	3301      	adds	r3, #1
 8008436:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29a      	uxth	r2, r3
 8008440:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008444:	b29b      	uxth	r3, r3
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	b29b      	uxth	r3, r3
 800844a:	4313      	orrs	r3, r2
 800844c:	b29a      	uxth	r2, r3
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	e024      	b.n	800849e <USB_EPStartXfer+0x318>
 8008454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	785b      	ldrb	r3, [r3, #1]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d11c      	bne.n	800849e <USB_EPStartXfer+0x318>
 8008464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008472:	b29b      	uxth	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	4413      	add	r3, r2
 800847a:	633b      	str	r3, [r7, #48]	; 0x30
 800847c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	00da      	lsls	r2, r3, #3
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	4413      	add	r3, r2
 800848e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008498:	b29a      	uxth	r2, r3
 800849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800849e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	895b      	ldrh	r3, [r3, #10]
 80084aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6959      	ldr	r1, [r3, #20]
 80084ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80084c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80084c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80084cc:	6800      	ldr	r0, [r0, #0]
 80084ce:	f001 fb45 	bl	8009b5c <USB_WritePMA>
            ep->xfer_buff += len;
 80084d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695a      	ldr	r2, [r3, #20]
 80084de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e2:	441a      	add	r2, r3
 80084e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6a1a      	ldr	r2, [r3, #32]
 80084fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	429a      	cmp	r2, r3
 800850a:	d90f      	bls.n	800852c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800850c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6a1a      	ldr	r2, [r3, #32]
 8008518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851c:	1ad2      	subs	r2, r2, r3
 800851e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	621a      	str	r2, [r3, #32]
 800852a:	e00e      	b.n	800854a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800852c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800853c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800854a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d177      	bne.n	800864a <USB_EPStartXfer+0x4c4>
 800855a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	61bb      	str	r3, [r7, #24]
 8008566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008574:	b29b      	uxth	r3, r3
 8008576:	461a      	mov	r2, r3
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	4413      	add	r3, r2
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	00da      	lsls	r2, r3, #3
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	4413      	add	r3, r2
 8008590:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	801a      	strh	r2, [r3, #0]
 80085a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085aa:	2b3e      	cmp	r3, #62	; 0x3e
 80085ac:	d921      	bls.n	80085f2 <USB_EPStartXfer+0x46c>
 80085ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d104      	bne.n	80085ce <USB_EPStartXfer+0x448>
 80085c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c8:	3b01      	subs	r3, #1
 80085ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085d8:	b29b      	uxth	r3, r3
 80085da:	029b      	lsls	r3, r3, #10
 80085dc:	b29b      	uxth	r3, r3
 80085de:	4313      	orrs	r3, r2
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	801a      	strh	r2, [r3, #0]
 80085f0:	e056      	b.n	80086a0 <USB_EPStartXfer+0x51a>
 80085f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10a      	bne.n	8008610 <USB_EPStartXfer+0x48a>
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008608:	b29a      	uxth	r2, r3
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	e047      	b.n	80086a0 <USB_EPStartXfer+0x51a>
 8008610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008614:	085b      	lsrs	r3, r3, #1
 8008616:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800861a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d004      	beq.n	8008630 <USB_EPStartXfer+0x4aa>
 8008626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800862a:	3301      	adds	r3, #1
 800862c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29a      	uxth	r2, r3
 8008636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800863a:	b29b      	uxth	r3, r3
 800863c:	029b      	lsls	r3, r3, #10
 800863e:	b29b      	uxth	r3, r3
 8008640:	4313      	orrs	r3, r2
 8008642:	b29a      	uxth	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	e02a      	b.n	80086a0 <USB_EPStartXfer+0x51a>
 800864a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d122      	bne.n	80086a0 <USB_EPStartXfer+0x51a>
 800865a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	623b      	str	r3, [r7, #32]
 8008666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008674:	b29b      	uxth	r3, r3
 8008676:	461a      	mov	r2, r3
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	4413      	add	r3, r2
 800867c:	623b      	str	r3, [r7, #32]
 800867e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	00da      	lsls	r2, r3, #3
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	4413      	add	r3, r2
 8008690:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008694:	61fb      	str	r3, [r7, #28]
 8008696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800869a:	b29a      	uxth	r2, r3
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	891b      	ldrh	r3, [r3, #8]
 80086ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6959      	ldr	r1, [r3, #20]
 80086bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086ce:	6800      	ldr	r0, [r0, #0]
 80086d0:	f001 fa44 	bl	8009b5c <USB_WritePMA>
 80086d4:	e3ee      	b.n	8008eb4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d177      	bne.n	80087d6 <USB_EPStartXfer+0x650>
 80086e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008700:	b29b      	uxth	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008706:	4413      	add	r3, r2
 8008708:	64bb      	str	r3, [r7, #72]	; 0x48
 800870a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	00da      	lsls	r2, r3, #3
 8008718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800871a:	4413      	add	r3, r2
 800871c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008720:	647b      	str	r3, [r7, #68]	; 0x44
 8008722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800872c:	b29a      	uxth	r2, r3
 800872e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008730:	801a      	strh	r2, [r3, #0]
 8008732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008736:	2b3e      	cmp	r3, #62	; 0x3e
 8008738:	d921      	bls.n	800877e <USB_EPStartXfer+0x5f8>
 800873a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	2b00      	cmp	r3, #0
 800874e:	d104      	bne.n	800875a <USB_EPStartXfer+0x5d4>
 8008750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008754:	3b01      	subs	r3, #1
 8008756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800875a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008764:	b29b      	uxth	r3, r3
 8008766:	029b      	lsls	r3, r3, #10
 8008768:	b29b      	uxth	r3, r3
 800876a:	4313      	orrs	r3, r2
 800876c:	b29b      	uxth	r3, r3
 800876e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008776:	b29a      	uxth	r2, r3
 8008778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800877a:	801a      	strh	r2, [r3, #0]
 800877c:	e056      	b.n	800882c <USB_EPStartXfer+0x6a6>
 800877e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10a      	bne.n	800879c <USB_EPStartXfer+0x616>
 8008786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008794:	b29a      	uxth	r2, r3
 8008796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008798:	801a      	strh	r2, [r3, #0]
 800879a:	e047      	b.n	800882c <USB_EPStartXfer+0x6a6>
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d004      	beq.n	80087bc <USB_EPStartXfer+0x636>
 80087b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087b6:	3301      	adds	r3, #1
 80087b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	029b      	lsls	r3, r3, #10
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	4313      	orrs	r3, r2
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d2:	801a      	strh	r2, [r3, #0]
 80087d4:	e02a      	b.n	800882c <USB_EPStartXfer+0x6a6>
 80087d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d122      	bne.n	800882c <USB_EPStartXfer+0x6a6>
 80087e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	653b      	str	r3, [r7, #80]	; 0x50
 80087f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008800:	b29b      	uxth	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008806:	4413      	add	r3, r2
 8008808:	653b      	str	r3, [r7, #80]	; 0x50
 800880a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	00da      	lsls	r2, r3, #3
 8008818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881a:	4413      	add	r3, r2
 800881c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008826:	b29a      	uxth	r2, r3
 8008828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800882c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	891b      	ldrh	r3, [r3, #8]
 8008838:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800883c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6959      	ldr	r1, [r3, #20]
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884c:	b29b      	uxth	r3, r3
 800884e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008852:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008856:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800885a:	6800      	ldr	r0, [r0, #0]
 800885c:	f001 f97e 	bl	8009b5c <USB_WritePMA>
            ep->xfer_buff += len;
 8008860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695a      	ldr	r2, [r3, #20]
 800886c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008870:	441a      	add	r2, r3
 8008872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800887e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6a1a      	ldr	r2, [r3, #32]
 800888a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	429a      	cmp	r2, r3
 8008898:	d90f      	bls.n	80088ba <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800889a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6a1a      	ldr	r2, [r3, #32]
 80088a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	621a      	str	r2, [r3, #32]
 80088b8:	e00e      	b.n	80088d8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80088ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80088ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2200      	movs	r2, #0
 80088d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	643b      	str	r3, [r7, #64]	; 0x40
 80088e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d177      	bne.n	80089e4 <USB_EPStartXfer+0x85e>
 80088f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800890e:	b29b      	uxth	r3, r3
 8008910:	461a      	mov	r2, r3
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	4413      	add	r3, r2
 8008916:	63bb      	str	r3, [r7, #56]	; 0x38
 8008918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	00da      	lsls	r2, r3, #3
 8008926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008928:	4413      	add	r3, r2
 800892a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800892e:	637b      	str	r3, [r7, #52]	; 0x34
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800893a:	b29a      	uxth	r2, r3
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	801a      	strh	r2, [r3, #0]
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008944:	2b3e      	cmp	r3, #62	; 0x3e
 8008946:	d921      	bls.n	800898c <USB_EPStartXfer+0x806>
 8008948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894c:	095b      	lsrs	r3, r3, #5
 800894e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008956:	f003 031f 	and.w	r3, r3, #31
 800895a:	2b00      	cmp	r3, #0
 800895c:	d104      	bne.n	8008968 <USB_EPStartXfer+0x7e2>
 800895e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008962:	3b01      	subs	r3, #1
 8008964:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b29a      	uxth	r2, r3
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008972:	b29b      	uxth	r3, r3
 8008974:	029b      	lsls	r3, r3, #10
 8008976:	b29b      	uxth	r3, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	b29b      	uxth	r3, r3
 800897c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008984:	b29a      	uxth	r2, r3
 8008986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008988:	801a      	strh	r2, [r3, #0]
 800898a:	e050      	b.n	8008a2e <USB_EPStartXfer+0x8a8>
 800898c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10a      	bne.n	80089aa <USB_EPStartXfer+0x824>
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	e041      	b.n	8008a2e <USB_EPStartXfer+0x8a8>
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ae:	085b      	lsrs	r3, r3, #1
 80089b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <USB_EPStartXfer+0x844>
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c4:	3301      	adds	r3, #1
 80089c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	029b      	lsls	r3, r3, #10
 80089d8:	b29b      	uxth	r3, r3
 80089da:	4313      	orrs	r3, r2
 80089dc:	b29a      	uxth	r2, r3
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	801a      	strh	r2, [r3, #0]
 80089e2:	e024      	b.n	8008a2e <USB_EPStartXfer+0x8a8>
 80089e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d11c      	bne.n	8008a2e <USB_EPStartXfer+0x8a8>
 80089f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a08:	4413      	add	r3, r2
 8008a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	00da      	lsls	r2, r3, #3
 8008a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	895b      	ldrh	r3, [r3, #10]
 8008a3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6959      	ldr	r1, [r3, #20]
 8008a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f001 f87d 	bl	8009b5c <USB_WritePMA>
 8008a62:	e227      	b.n	8008eb4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	441a      	add	r2, r3
 8008ab8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af0:	4413      	add	r3, r2
 8008af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	00da      	lsls	r2, r3, #3
 8008b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b04:	4413      	add	r3, r2
 8008b06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	891b      	ldrh	r3, [r3, #8]
 8008b22:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6959      	ldr	r1, [r3, #20]
 8008b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b3c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b40:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b44:	6800      	ldr	r0, [r0, #0]
 8008b46:	f001 f809 	bl	8009b5c <USB_WritePMA>
 8008b4a:	e1b3      	b.n	8008eb4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6a1a      	ldr	r2, [r3, #32]
 8008b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b5c:	1ad2      	subs	r2, r2, r3
 8008b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 80c6 	beq.w	8008d1e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	673b      	str	r3, [r7, #112]	; 0x70
 8008b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	785b      	ldrb	r3, [r3, #1]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d177      	bne.n	8008c9e <USB_EPStartXfer+0xb18>
 8008bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	461a      	mov	r2, r3
 8008bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bce:	4413      	add	r3, r2
 8008bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	00da      	lsls	r2, r3, #3
 8008be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008be2:	4413      	add	r3, r2
 8008be4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008be8:	667b      	str	r3, [r7, #100]	; 0x64
 8008bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8008c00:	d921      	bls.n	8008c46 <USB_EPStartXfer+0xac0>
 8008c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c06:	095b      	lsrs	r3, r3, #5
 8008c08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c10:	f003 031f 	and.w	r3, r3, #31
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <USB_EPStartXfer+0xa9c>
 8008c18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	029b      	lsls	r3, r3, #10
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	4313      	orrs	r3, r2
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c42:	801a      	strh	r2, [r3, #0]
 8008c44:	e050      	b.n	8008ce8 <USB_EPStartXfer+0xb62>
 8008c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <USB_EPStartXfer+0xade>
 8008c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c60:	801a      	strh	r2, [r3, #0]
 8008c62:	e041      	b.n	8008ce8 <USB_EPStartXfer+0xb62>
 8008c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c68:	085b      	lsrs	r3, r3, #1
 8008c6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d004      	beq.n	8008c84 <USB_EPStartXfer+0xafe>
 8008c7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c7e:	3301      	adds	r3, #1
 8008c80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	029b      	lsls	r3, r3, #10
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4313      	orrs	r3, r2
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e024      	b.n	8008ce8 <USB_EPStartXfer+0xb62>
 8008c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	785b      	ldrb	r3, [r3, #1]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d11c      	bne.n	8008ce8 <USB_EPStartXfer+0xb62>
 8008cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cc2:	4413      	add	r3, r2
 8008cc4:	673b      	str	r3, [r7, #112]	; 0x70
 8008cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	00da      	lsls	r2, r3, #3
 8008cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	895b      	ldrh	r3, [r3, #10]
 8008cf4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6959      	ldr	r1, [r3, #20]
 8008d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d16:	6800      	ldr	r0, [r0, #0]
 8008d18:	f000 ff20 	bl	8009b5c <USB_WritePMA>
 8008d1c:	e0ca      	b.n	8008eb4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d177      	bne.n	8008e1e <USB_EPStartXfer+0xc98>
 8008d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d4e:	4413      	add	r3, r2
 8008d50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	00da      	lsls	r2, r3, #3
 8008d60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d62:	4413      	add	r3, r2
 8008d64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d68:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d78:	801a      	strh	r2, [r3, #0]
 8008d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d80:	d921      	bls.n	8008dc6 <USB_EPStartXfer+0xc40>
 8008d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d90:	f003 031f 	and.w	r3, r3, #31
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d104      	bne.n	8008da2 <USB_EPStartXfer+0xc1c>
 8008d98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	029b      	lsls	r3, r3, #10
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4313      	orrs	r3, r2
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dc2:	801a      	strh	r2, [r3, #0]
 8008dc4:	e05c      	b.n	8008e80 <USB_EPStartXfer+0xcfa>
 8008dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <USB_EPStartXfer+0xc5e>
 8008dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de0:	801a      	strh	r2, [r3, #0]
 8008de2:	e04d      	b.n	8008e80 <USB_EPStartXfer+0xcfa>
 8008de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <USB_EPStartXfer+0xc7e>
 8008dfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dfe:	3301      	adds	r3, #1
 8008e00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	029b      	lsls	r3, r3, #10
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	4313      	orrs	r3, r2
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	e030      	b.n	8008e80 <USB_EPStartXfer+0xcfa>
 8008e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	785b      	ldrb	r3, [r3, #1]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d128      	bne.n	8008e80 <USB_EPStartXfer+0xcfa>
 8008e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e52:	4413      	add	r3, r2
 8008e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	00da      	lsls	r2, r3, #3
 8008e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	891b      	ldrh	r3, [r3, #8]
 8008e8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6959      	ldr	r1, [r3, #20]
 8008e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ea6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008eaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008eae:	6800      	ldr	r0, [r0, #0]
 8008eb0:	f000 fe54 	bl	8009b5c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eda:	817b      	strh	r3, [r7, #10]
 8008edc:	897b      	ldrh	r3, [r7, #10]
 8008ede:	f083 0310 	eor.w	r3, r3, #16
 8008ee2:	817b      	strh	r3, [r7, #10]
 8008ee4:	897b      	ldrh	r3, [r7, #10]
 8008ee6:	f083 0320 	eor.w	r3, r3, #32
 8008eea:	817b      	strh	r3, [r7, #10]
 8008eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	441a      	add	r2, r3
 8008f06:	897b      	ldrh	r3, [r7, #10]
 8008f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	8013      	strh	r3, [r2, #0]
 8008f1c:	f000 bcde 	b.w	80098dc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	7b1b      	ldrb	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 80bb 	bne.w	80090a8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699a      	ldr	r2, [r3, #24]
 8008f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d917      	bls.n	8008f7e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699a      	ldr	r2, [r3, #24]
 8008f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	619a      	str	r2, [r3, #24]
 8008f7c:	e00e      	b.n	8008f9c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	00da      	lsls	r2, r3, #3
 8008fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fd8:	4413      	add	r3, r2
 8008fda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ff4:	801a      	strh	r2, [r3, #0]
 8008ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ffa:	2b3e      	cmp	r3, #62	; 0x3e
 8008ffc:	d924      	bls.n	8009048 <USB_EPStartXfer+0xec2>
 8008ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <USB_EPStartXfer+0xe98>
 8009014:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009018:	3b01      	subs	r3, #1
 800901a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800901e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	b29a      	uxth	r2, r3
 8009026:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800902a:	b29b      	uxth	r3, r3
 800902c:	029b      	lsls	r3, r3, #10
 800902e:	b29b      	uxth	r3, r3
 8009030:	4313      	orrs	r3, r2
 8009032:	b29b      	uxth	r3, r3
 8009034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903c:	b29a      	uxth	r2, r3
 800903e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	f000 bc10 	b.w	8009868 <USB_EPStartXfer+0x16e2>
 8009048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10c      	bne.n	800906a <USB_EPStartXfer+0xee4>
 8009050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009060:	b29a      	uxth	r2, r3
 8009062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009066:	801a      	strh	r2, [r3, #0]
 8009068:	e3fe      	b.n	8009868 <USB_EPStartXfer+0x16e2>
 800906a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906e:	085b      	lsrs	r3, r3, #1
 8009070:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <USB_EPStartXfer+0xf04>
 8009080:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009084:	3301      	adds	r3, #1
 8009086:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800908a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29a      	uxth	r2, r3
 8009092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009096:	b29b      	uxth	r3, r3
 8009098:	029b      	lsls	r3, r3, #10
 800909a:	b29b      	uxth	r3, r3
 800909c:	4313      	orrs	r3, r2
 800909e:	b29a      	uxth	r2, r3
 80090a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090a4:	801a      	strh	r2, [r3, #0]
 80090a6:	e3df      	b.n	8009868 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80090a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	78db      	ldrb	r3, [r3, #3]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	f040 8218 	bne.w	80094ea <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80090ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	785b      	ldrb	r3, [r3, #1]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f040 809d 	bne.w	8009206 <USB_EPStartXfer+0x1080>
 80090cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	461a      	mov	r2, r3
 80090ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090f0:	4413      	add	r3, r2
 80090f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	00da      	lsls	r2, r3, #3
 8009104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009108:	4413      	add	r3, r2
 800910a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800910e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009112:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800911e:	b29a      	uxth	r2, r3
 8009120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009124:	801a      	strh	r2, [r3, #0]
 8009126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b3e      	cmp	r3, #62	; 0x3e
 8009134:	d92b      	bls.n	800918e <USB_EPStartXfer+0x1008>
 8009136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	095b      	lsrs	r3, r3, #5
 8009144:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	f003 031f 	and.w	r3, r3, #31
 8009158:	2b00      	cmp	r3, #0
 800915a:	d104      	bne.n	8009166 <USB_EPStartXfer+0xfe0>
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009160:	3b01      	subs	r3, #1
 8009162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	b29a      	uxth	r2, r3
 800916e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009172:	b29b      	uxth	r3, r3
 8009174:	029b      	lsls	r3, r3, #10
 8009176:	b29b      	uxth	r3, r3
 8009178:	4313      	orrs	r3, r2
 800917a:	b29b      	uxth	r3, r3
 800917c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009184:	b29a      	uxth	r2, r3
 8009186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800918a:	801a      	strh	r2, [r3, #0]
 800918c:	e070      	b.n	8009270 <USB_EPStartXfer+0x10ea>
 800918e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10c      	bne.n	80091b8 <USB_EPStartXfer+0x1032>
 800919e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091b4:	801a      	strh	r2, [r3, #0]
 80091b6:	e05b      	b.n	8009270 <USB_EPStartXfer+0x10ea>
 80091b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d004      	beq.n	80091e8 <USB_EPStartXfer+0x1062>
 80091de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e2:	3301      	adds	r3, #1
 80091e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	029b      	lsls	r3, r3, #10
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	4313      	orrs	r3, r2
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009202:	801a      	strh	r2, [r3, #0]
 8009204:	e034      	b.n	8009270 <USB_EPStartXfer+0x10ea>
 8009206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	785b      	ldrb	r3, [r3, #1]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d12c      	bne.n	8009270 <USB_EPStartXfer+0x10ea>
 8009216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009232:	b29b      	uxth	r3, r3
 8009234:	461a      	mov	r2, r3
 8009236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800923a:	4413      	add	r3, r2
 800923c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	00da      	lsls	r2, r3, #3
 800924e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009252:	4413      	add	r3, r2
 8009254:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800925c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	b29a      	uxth	r2, r3
 800926a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800927e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	785b      	ldrb	r3, [r3, #1]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f040 809d 	bne.w	80093ca <USB_EPStartXfer+0x1244>
 8009290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800929e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	461a      	mov	r2, r3
 80092b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092b4:	4413      	add	r3, r2
 80092b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	00da      	lsls	r2, r3, #3
 80092c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092cc:	4413      	add	r3, r2
 80092ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092e8:	801a      	strh	r2, [r3, #0]
 80092ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b3e      	cmp	r3, #62	; 0x3e
 80092f8:	d92b      	bls.n	8009352 <USB_EPStartXfer+0x11cc>
 80092fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	095b      	lsrs	r3, r3, #5
 8009308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800930c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	f003 031f 	and.w	r3, r3, #31
 800931c:	2b00      	cmp	r3, #0
 800931e:	d104      	bne.n	800932a <USB_EPStartXfer+0x11a4>
 8009320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009324:	3b01      	subs	r3, #1
 8009326:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800932a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	b29a      	uxth	r2, r3
 8009332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009336:	b29b      	uxth	r3, r3
 8009338:	029b      	lsls	r3, r3, #10
 800933a:	b29b      	uxth	r3, r3
 800933c:	4313      	orrs	r3, r2
 800933e:	b29b      	uxth	r3, r3
 8009340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009348:	b29a      	uxth	r2, r3
 800934a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800934e:	801a      	strh	r2, [r3, #0]
 8009350:	e069      	b.n	8009426 <USB_EPStartXfer+0x12a0>
 8009352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10c      	bne.n	800937c <USB_EPStartXfer+0x11f6>
 8009362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	b29b      	uxth	r3, r3
 800936a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800936e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009372:	b29a      	uxth	r2, r3
 8009374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009378:	801a      	strh	r2, [r3, #0]
 800937a:	e054      	b.n	8009426 <USB_EPStartXfer+0x12a0>
 800937c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	085b      	lsrs	r3, r3, #1
 800938a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800938e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <USB_EPStartXfer+0x1226>
 80093a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093a6:	3301      	adds	r3, #1
 80093a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	029b      	lsls	r3, r3, #10
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093c6:	801a      	strh	r2, [r3, #0]
 80093c8:	e02d      	b.n	8009426 <USB_EPStartXfer+0x12a0>
 80093ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d125      	bne.n	8009426 <USB_EPStartXfer+0x12a0>
 80093da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	461a      	mov	r2, r3
 80093ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093f0:	4413      	add	r3, r2
 80093f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80093f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	00da      	lsls	r2, r3, #3
 8009404:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009408:	4413      	add	r3, r2
 800940a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800940e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	b29a      	uxth	r2, r3
 8009420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009424:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 8218 	beq.w	8009868 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800943c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009458:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800945c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <USB_EPStartXfer+0x12ea>
 8009464:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10d      	bne.n	800948c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009470:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009478:	2b00      	cmp	r3, #0
 800947a:	f040 81f5 	bne.w	8009868 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800947e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	f040 81ee 	bne.w	8009868 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800948c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80094b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	441a      	add	r2, r3
 80094d0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80094d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	8013      	strh	r3, [r2, #0]
 80094e8:	e1be      	b.n	8009868 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80094ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	78db      	ldrb	r3, [r3, #3]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	f040 81b4 	bne.w	8009864 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80094fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	699a      	ldr	r2, [r3, #24]
 8009508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	429a      	cmp	r2, r3
 8009516:	d917      	bls.n	8009548 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800952c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	699a      	ldr	r2, [r3, #24]
 8009534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009538:	1ad2      	subs	r2, r2, r3
 800953a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800953e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	619a      	str	r2, [r3, #24]
 8009546:	e00e      	b.n	8009566 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2200      	movs	r2, #0
 8009564:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f040 8085 	bne.w	8009682 <USB_EPStartXfer+0x14fc>
 8009578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009594:	b29b      	uxth	r3, r3
 8009596:	461a      	mov	r2, r3
 8009598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800959c:	4413      	add	r3, r2
 800959e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	00da      	lsls	r2, r3, #3
 80095b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095b4:	4413      	add	r3, r2
 80095b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095d0:	801a      	strh	r2, [r3, #0]
 80095d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d6:	2b3e      	cmp	r3, #62	; 0x3e
 80095d8:	d923      	bls.n	8009622 <USB_EPStartXfer+0x149c>
 80095da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095de:	095b      	lsrs	r3, r3, #5
 80095e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e8:	f003 031f 	and.w	r3, r3, #31
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d104      	bne.n	80095fa <USB_EPStartXfer+0x1474>
 80095f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095f4:	3b01      	subs	r3, #1
 80095f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b29a      	uxth	r2, r3
 8009602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009606:	b29b      	uxth	r3, r3
 8009608:	029b      	lsls	r3, r3, #10
 800960a:	b29b      	uxth	r3, r3
 800960c:	4313      	orrs	r3, r2
 800960e:	b29b      	uxth	r3, r3
 8009610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009618:	b29a      	uxth	r2, r3
 800961a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800961e:	801a      	strh	r2, [r3, #0]
 8009620:	e060      	b.n	80096e4 <USB_EPStartXfer+0x155e>
 8009622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10c      	bne.n	8009644 <USB_EPStartXfer+0x14be>
 800962a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800963a:	b29a      	uxth	r2, r3
 800963c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009640:	801a      	strh	r2, [r3, #0]
 8009642:	e04f      	b.n	80096e4 <USB_EPStartXfer+0x155e>
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009648:	085b      	lsrs	r3, r3, #1
 800964a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800964e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d004      	beq.n	8009664 <USB_EPStartXfer+0x14de>
 800965a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800965e:	3301      	adds	r3, #1
 8009660:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	b29a      	uxth	r2, r3
 800966c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009670:	b29b      	uxth	r3, r3
 8009672:	029b      	lsls	r3, r3, #10
 8009674:	b29b      	uxth	r3, r3
 8009676:	4313      	orrs	r3, r2
 8009678:	b29a      	uxth	r2, r3
 800967a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800967e:	801a      	strh	r2, [r3, #0]
 8009680:	e030      	b.n	80096e4 <USB_EPStartXfer+0x155e>
 8009682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d128      	bne.n	80096e4 <USB_EPStartXfer+0x155e>
 8009692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80096a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	461a      	mov	r2, r3
 80096b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096b6:	4413      	add	r3, r2
 80096b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80096bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	00da      	lsls	r2, r3, #3
 80096ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096ce:	4413      	add	r3, r2
 80096d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096dc:	b29a      	uxth	r2, r3
 80096de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f040 8085 	bne.w	800980e <USB_EPStartXfer+0x1688>
 8009704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009720:	b29b      	uxth	r3, r3
 8009722:	461a      	mov	r2, r3
 8009724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009728:	4413      	add	r3, r2
 800972a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800972e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	00da      	lsls	r2, r3, #3
 800973c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009740:	4413      	add	r3, r2
 8009742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009746:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800974a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009756:	b29a      	uxth	r2, r3
 8009758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009762:	2b3e      	cmp	r3, #62	; 0x3e
 8009764:	d923      	bls.n	80097ae <USB_EPStartXfer+0x1628>
 8009766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009774:	f003 031f 	and.w	r3, r3, #31
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <USB_EPStartXfer+0x1600>
 800977c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009780:	3b01      	subs	r3, #1
 8009782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29a      	uxth	r2, r3
 800978e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009792:	b29b      	uxth	r3, r3
 8009794:	029b      	lsls	r3, r3, #10
 8009796:	b29b      	uxth	r3, r3
 8009798:	4313      	orrs	r3, r2
 800979a:	b29b      	uxth	r3, r3
 800979c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097aa:	801a      	strh	r2, [r3, #0]
 80097ac:	e05c      	b.n	8009868 <USB_EPStartXfer+0x16e2>
 80097ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10c      	bne.n	80097d0 <USB_EPStartXfer+0x164a>
 80097b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097cc:	801a      	strh	r2, [r3, #0]
 80097ce:	e04b      	b.n	8009868 <USB_EPStartXfer+0x16e2>
 80097d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d4:	085b      	lsrs	r3, r3, #1
 80097d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d004      	beq.n	80097f0 <USB_EPStartXfer+0x166a>
 80097e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ea:	3301      	adds	r3, #1
 80097ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	029b      	lsls	r3, r3, #10
 8009800:	b29b      	uxth	r3, r3
 8009802:	4313      	orrs	r3, r2
 8009804:	b29a      	uxth	r2, r3
 8009806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800980a:	801a      	strh	r2, [r3, #0]
 800980c:	e02c      	b.n	8009868 <USB_EPStartXfer+0x16e2>
 800980e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	785b      	ldrb	r3, [r3, #1]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d124      	bne.n	8009868 <USB_EPStartXfer+0x16e2>
 800981e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800982c:	b29b      	uxth	r3, r3
 800982e:	461a      	mov	r2, r3
 8009830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009834:	4413      	add	r3, r2
 8009836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800983a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	00da      	lsls	r2, r3, #3
 8009848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800984c:	4413      	add	r3, r2
 800984e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009852:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985a:	b29a      	uxth	r2, r3
 800985c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	e001      	b.n	8009868 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e03a      	b.n	80098de <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800988a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009892:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009896:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800989a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800989e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80098a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80098a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80098aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	441a      	add	r2, r3
 80098c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80098c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d8:	b29b      	uxth	r3, r3
 80098da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	785b      	ldrb	r3, [r3, #1]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d020      	beq.n	800993c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	b29b      	uxth	r3, r3
 8009908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800990c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009910:	81bb      	strh	r3, [r7, #12]
 8009912:	89bb      	ldrh	r3, [r7, #12]
 8009914:	f083 0310 	eor.w	r3, r3, #16
 8009918:	81bb      	strh	r3, [r7, #12]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	441a      	add	r2, r3
 8009924:	89bb      	ldrh	r3, [r7, #12]
 8009926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800992a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009936:	b29b      	uxth	r3, r3
 8009938:	8013      	strh	r3, [r2, #0]
 800993a:	e01f      	b.n	800997c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800994e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009952:	81fb      	strh	r3, [r7, #14]
 8009954:	89fb      	ldrh	r3, [r7, #14]
 8009956:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800995a:	81fb      	strh	r3, [r7, #14]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	441a      	add	r2, r3
 8009966:	89fb      	ldrh	r3, [r7, #14]
 8009968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009978:	b29b      	uxth	r3, r3
 800997a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800998a:	b480      	push	{r7}
 800998c:	b087      	sub	sp, #28
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	7b1b      	ldrb	r3, [r3, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f040 809d 	bne.w	8009ad8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	785b      	ldrb	r3, [r3, #1]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d04c      	beq.n	8009a40 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	823b      	strh	r3, [r7, #16]
 80099b4:	8a3b      	ldrh	r3, [r7, #16]
 80099b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d01b      	beq.n	80099f6 <USB_EPClearStall+0x6c>
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d4:	81fb      	strh	r3, [r7, #14]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	441a      	add	r2, r3
 80099e0:	89fb      	ldrh	r3, [r7, #14]
 80099e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	78db      	ldrb	r3, [r3, #3]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d06c      	beq.n	8009ad8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a14:	81bb      	strh	r3, [r7, #12]
 8009a16:	89bb      	ldrh	r3, [r7, #12]
 8009a18:	f083 0320 	eor.w	r3, r3, #32
 8009a1c:	81bb      	strh	r3, [r7, #12]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	441a      	add	r2, r3
 8009a28:	89bb      	ldrh	r3, [r7, #12]
 8009a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	8013      	strh	r3, [r2, #0]
 8009a3e:	e04b      	b.n	8009ad8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	82fb      	strh	r3, [r7, #22]
 8009a4e:	8afb      	ldrh	r3, [r7, #22]
 8009a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d01b      	beq.n	8009a90 <USB_EPClearStall+0x106>
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6e:	82bb      	strh	r3, [r7, #20]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	441a      	add	r2, r3
 8009a7a:	8abb      	ldrh	r3, [r7, #20]
 8009a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	881b      	ldrh	r3, [r3, #0]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aa6:	827b      	strh	r3, [r7, #18]
 8009aa8:	8a7b      	ldrh	r3, [r7, #18]
 8009aaa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009aae:	827b      	strh	r3, [r7, #18]
 8009ab0:	8a7b      	ldrh	r3, [r7, #18]
 8009ab2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ab6:	827b      	strh	r3, [r7, #18]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	441a      	add	r2, r3
 8009ac2:	8a7b      	ldrh	r3, [r7, #18]
 8009ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	460b      	mov	r3, r1
 8009af0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d103      	bne.n	8009b00 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2280      	movs	r2, #128	; 0x80
 8009afc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b083      	sub	sp, #12
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b08b      	sub	sp, #44	; 0x2c
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	4611      	mov	r1, r2
 8009b68:	461a      	mov	r2, r3
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	80fb      	strh	r3, [r7, #6]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b72:	88bb      	ldrh	r3, [r7, #4]
 8009b74:	3301      	adds	r3, #1
 8009b76:	085b      	lsrs	r3, r3, #1
 8009b78:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b82:	88fa      	ldrh	r2, [r7, #6]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	627b      	str	r3, [r7, #36]	; 0x24
 8009b92:	e01b      	b.n	8009bcc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	b21a      	sxth	r2, r3
 8009ba4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	b21b      	sxth	r3, r3
 8009bac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	8a7a      	ldrh	r2, [r7, #18]
 8009bb2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	3302      	adds	r3, #2
 8009bb8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e0      	bne.n	8009b94 <USB_WritePMA+0x38>
  }
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	372c      	adds	r7, #44	; 0x2c
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b08b      	sub	sp, #44	; 0x2c
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	4611      	mov	r1, r2
 8009bec:	461a      	mov	r2, r3
 8009bee:	460b      	mov	r3, r1
 8009bf0:	80fb      	strh	r3, [r7, #6]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009bf6:	88bb      	ldrh	r3, [r7, #4]
 8009bf8:	085b      	lsrs	r3, r3, #1
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c06:	88fa      	ldrh	r2, [r7, #6]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	627b      	str	r3, [r7, #36]	; 0x24
 8009c16:	e018      	b.n	8009c4a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	3302      	adds	r3, #2
 8009c24:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	3301      	adds	r3, #1
 8009c32:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	3301      	adds	r3, #1
 8009c42:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	3b01      	subs	r3, #1
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1e3      	bne.n	8009c18 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009c50:	88bb      	ldrh	r3, [r7, #4]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d007      	beq.n	8009c6c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	701a      	strb	r2, [r3, #0]
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	372c      	adds	r7, #44	; 0x2c
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009c84:	2010      	movs	r0, #16
 8009c86:	f001 fe9b 	bl	800b9c0 <USBD_static_malloc>
 8009c8a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d105      	bne.n	8009c9e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	e01b      	b.n	8009cd6 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	7c1b      	ldrb	r3, [r3, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d103      	bne.n	8009cb6 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2207      	movs	r2, #7
 8009cb2:	875a      	strh	r2, [r3, #58]	; 0x3a
 8009cb4:	e002      	b.n	8009cbc <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009cbc:	2304      	movs	r3, #4
 8009cbe:	2203      	movs	r2, #3
 8009cc0:	2181      	movs	r1, #129	; 0x81
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f001 fd35 	bl	800b732 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8009cea:	2181      	movs	r1, #129	; 0x81
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 fd46 	bl	800b77e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d009      	beq.n	8009d1c <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 fe64 	bl	800b9dc <USBD_static_free>
    pdev->pClassData = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d38:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e0e8      	b.n	8009f1e <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d046      	beq.n	8009de6 <USBD_HID_Setup+0xbe>
 8009d58:	2b20      	cmp	r3, #32
 8009d5a:	f040 80d8 	bne.w	8009f0e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	3b02      	subs	r3, #2
 8009d64:	2b09      	cmp	r3, #9
 8009d66:	d836      	bhi.n	8009dd6 <USBD_HID_Setup+0xae>
 8009d68:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <USBD_HID_Setup+0x48>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009dc7 	.word	0x08009dc7
 8009d74:	08009da7 	.word	0x08009da7
 8009d78:	08009dd7 	.word	0x08009dd7
 8009d7c:	08009dd7 	.word	0x08009dd7
 8009d80:	08009dd7 	.word	0x08009dd7
 8009d84:	08009dd7 	.word	0x08009dd7
 8009d88:	08009dd7 	.word	0x08009dd7
 8009d8c:	08009dd7 	.word	0x08009dd7
 8009d90:	08009db5 	.word	0x08009db5
 8009d94:	08009d99 	.word	0x08009d99
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	885b      	ldrh	r3, [r3, #2]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	601a      	str	r2, [r3, #0]
          break;
 8009da4:	e01e      	b.n	8009de4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 f9d8 	bl	800b162 <USBD_CtlSendData>
          break;
 8009db2:	e017      	b.n	8009de4 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	885b      	ldrh	r3, [r3, #2]
 8009db8:	0a1b      	lsrs	r3, r3, #8
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	605a      	str	r2, [r3, #4]
          break;
 8009dc4:	e00e      	b.n	8009de4 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 f9c7 	bl	800b162 <USBD_CtlSendData>
          break;
 8009dd4:	e006      	b.n	8009de4 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 f951 	bl	800b080 <USBD_CtlError>
          ret = USBD_FAIL;
 8009dde:	2303      	movs	r3, #3
 8009de0:	75fb      	strb	r3, [r7, #23]
          break;
 8009de2:	bf00      	nop
      }
      break;
 8009de4:	e09a      	b.n	8009f1c <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	785b      	ldrb	r3, [r3, #1]
 8009dea:	2b0b      	cmp	r3, #11
 8009dec:	f200 8086 	bhi.w	8009efc <USBD_HID_Setup+0x1d4>
 8009df0:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USBD_HID_Setup+0xd0>)
 8009df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df6:	bf00      	nop
 8009df8:	08009e29 	.word	0x08009e29
 8009dfc:	08009f0b 	.word	0x08009f0b
 8009e00:	08009efd 	.word	0x08009efd
 8009e04:	08009efd 	.word	0x08009efd
 8009e08:	08009efd 	.word	0x08009efd
 8009e0c:	08009efd 	.word	0x08009efd
 8009e10:	08009e53 	.word	0x08009e53
 8009e14:	08009efd 	.word	0x08009efd
 8009e18:	08009efd 	.word	0x08009efd
 8009e1c:	08009efd 	.word	0x08009efd
 8009e20:	08009eab 	.word	0x08009eab
 8009e24:	08009ed5 	.word	0x08009ed5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d107      	bne.n	8009e44 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e34:	f107 030a 	add.w	r3, r7, #10
 8009e38:	2202      	movs	r2, #2
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 f990 	bl	800b162 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e42:	e063      	b.n	8009f0c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 f91a 	bl	800b080 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8009e50:	e05c      	b.n	8009f0c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	885b      	ldrh	r3, [r3, #2]
 8009e56:	0a1b      	lsrs	r3, r3, #8
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	2b22      	cmp	r3, #34	; 0x22
 8009e5c:	d108      	bne.n	8009e70 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	88db      	ldrh	r3, [r3, #6]
 8009e62:	2b4a      	cmp	r3, #74	; 0x4a
 8009e64:	bf28      	it	cs
 8009e66:	234a      	movcs	r3, #74	; 0x4a
 8009e68:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009e6a:	4b2f      	ldr	r3, [pc, #188]	; (8009f28 <USBD_HID_Setup+0x200>)
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	e015      	b.n	8009e9c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	885b      	ldrh	r3, [r3, #2]
 8009e74:	0a1b      	lsrs	r3, r3, #8
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	2b21      	cmp	r3, #33	; 0x21
 8009e7a:	d108      	bne.n	8009e8e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8009e7c:	4b2b      	ldr	r3, [pc, #172]	; (8009f2c <USBD_HID_Setup+0x204>)
 8009e7e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	88db      	ldrh	r3, [r3, #6]
 8009e84:	2b09      	cmp	r3, #9
 8009e86:	bf28      	it	cs
 8009e88:	2309      	movcs	r3, #9
 8009e8a:	82bb      	strh	r3, [r7, #20]
 8009e8c:	e006      	b.n	8009e9c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f8f5 	bl	800b080 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e96:	2303      	movs	r3, #3
 8009e98:	75fb      	strb	r3, [r7, #23]
            break;
 8009e9a:	e037      	b.n	8009f0c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e9c:	8abb      	ldrh	r3, [r7, #20]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	6939      	ldr	r1, [r7, #16]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 f95d 	bl	800b162 <USBD_CtlSendData>
          break;
 8009ea8:	e030      	b.n	8009f0c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d107      	bne.n	8009ec6 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 f94f 	bl	800b162 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ec4:	e022      	b.n	8009f0c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 f8d9 	bl	800b080 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ed2:	e01b      	b.n	8009f0c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d106      	bne.n	8009eee <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	885b      	ldrh	r3, [r3, #2]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009eec:	e00e      	b.n	8009f0c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 f8c5 	bl	800b080 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8009efa:	e007      	b.n	8009f0c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f001 f8be 	bl	800b080 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	75fb      	strb	r3, [r7, #23]
          break;
 8009f08:	e000      	b.n	8009f0c <USBD_HID_Setup+0x1e4>
          break;
 8009f0a:	bf00      	nop
      }
      break;
 8009f0c:	e006      	b.n	8009f1c <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 f8b5 	bl	800b080 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f16:	2303      	movs	r3, #3
 8009f18:	75fb      	strb	r3, [r7, #23]
      break;
 8009f1a:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	200000c8 	.word	0x200000c8
 8009f2c:	200000b0 	.word	0x200000b0

08009f30 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f44:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e013      	b.n	8009f78 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d10c      	bne.n	8009f76 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	7b1b      	ldrb	r3, [r3, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d108      	bne.n	8009f76 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2201      	movs	r2, #1
 8009f68:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8009f6a:	88fb      	ldrh	r3, [r7, #6]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	2181      	movs	r1, #129	; 0x81
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f001 fcac 	bl	800b8ce <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2222      	movs	r2, #34	; 0x22
 8009f8c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8009f8e:	4b03      	ldr	r3, [pc, #12]	; (8009f9c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	20000044 	.word	0x20000044

08009fa0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2222      	movs	r2, #34	; 0x22
 8009fac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8009fae:	4b03      	ldr	r3, [pc, #12]	; (8009fbc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	20000068 	.word	0x20000068

08009fc0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2222      	movs	r2, #34	; 0x22
 8009fcc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8009fce:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	2000008c 	.word	0x2000008c

08009fe0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	220a      	movs	r2, #10
 800a010:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a012:	4b03      	ldr	r3, [pc, #12]	; (800a020 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a014:	4618      	mov	r0, r3
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	200000bc 	.word	0x200000bc

0800a024 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	4613      	mov	r3, r2
 800a030:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a038:	2303      	movs	r3, #3
 800a03a:	e01f      	b.n	800a07c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	79fa      	ldrb	r2, [r7, #7]
 800a06e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f001 faf5 	bl	800b660 <USBD_LL_Init>
 800a076:	4603      	mov	r3, r0
 800a078:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a098:	2303      	movs	r3, #3
 800a09a:	e016      	b.n	800a0ca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	f107 020e 	add.w	r2, r7, #14
 800a0bc:	4610      	mov	r0, r2
 800a0be:	4798      	blx	r3
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 fb0e 	bl	800b6fc <USBD_LL_Start>
 800a0e0:	4603      	mov	r3, r0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a10c:	2303      	movs	r3, #3
 800a10e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a116:	2b00      	cmp	r3, #0
 800a118:	d009      	beq.n	800a12e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	78fa      	ldrb	r2, [r7, #3]
 800a124:	4611      	mov	r1, r2
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	4798      	blx	r3
 800a12a:	4603      	mov	r3, r0
 800a12c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d007      	beq.n	800a15e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	4611      	mov	r1, r2
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	4798      	blx	r3
  }

  return USBD_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 ff46 	bl	800b00c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a18e:	461a      	mov	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a19c:	f003 031f 	and.w	r3, r3, #31
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d01a      	beq.n	800a1da <USBD_LL_SetupStage+0x72>
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d822      	bhi.n	800a1ee <USBD_LL_SetupStage+0x86>
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <USBD_LL_SetupStage+0x4a>
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d00a      	beq.n	800a1c6 <USBD_LL_SetupStage+0x5e>
 800a1b0:	e01d      	b.n	800a1ee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f9ee 	bl	800a59c <USBD_StdDevReq>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c4:	e020      	b.n	800a208 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa52 	bl	800a678 <USBD_StdItfReq>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d8:	e016      	b.n	800a208 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fa91 	bl	800a70a <USBD_StdEPReq>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ec:	e00c      	b.n	800a208 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 fadd 	bl	800b7bc <USBD_LL_StallEP>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]
      break;
 800a206:	bf00      	nop
  }

  return ret;
 800a208:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b086      	sub	sp, #24
 800a216:	af00      	add	r7, sp, #0
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	460b      	mov	r3, r1
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d138      	bne.n	800a298 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a22c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a234:	2b03      	cmp	r3, #3
 800a236:	d14a      	bne.n	800a2ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	429a      	cmp	r2, r3
 800a242:	d913      	bls.n	800a26c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	1ad2      	subs	r2, r2, r3
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	4293      	cmp	r3, r2
 800a25c:	bf28      	it	cs
 800a25e:	4613      	movcs	r3, r2
 800a260:	461a      	mov	r2, r3
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 ffa8 	bl	800b1ba <USBD_CtlContinueRx>
 800a26a:	e030      	b.n	800a2ce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b03      	cmp	r3, #3
 800a276:	d10b      	bne.n	800a290 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f000 ffa3 	bl	800b1dc <USBD_CtlSendStatus>
 800a296:	e01a      	b.n	800a2ce <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d114      	bne.n	800a2ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00e      	beq.n	800a2ce <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	7afa      	ldrb	r2, [r7, #11]
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	4798      	blx	r3
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
 800a2cc:	e000      	b.n	800a2d0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a2e6:	7afb      	ldrb	r3, [r7, #11]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d16b      	bne.n	800a3c4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3314      	adds	r3, #20
 800a2f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d156      	bne.n	800a3aa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	429a      	cmp	r2, r3
 800a306:	d914      	bls.n	800a332 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	1ad2      	subs	r2, r2, r3
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	461a      	mov	r2, r3
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 ff3a 	bl	800b198 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a324:	2300      	movs	r3, #0
 800a326:	2200      	movs	r2, #0
 800a328:	2100      	movs	r1, #0
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f001 faf0 	bl	800b910 <USBD_LL_PrepareReceive>
 800a330:	e03b      	b.n	800a3aa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d11c      	bne.n	800a378 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a346:	429a      	cmp	r2, r3
 800a348:	d316      	bcc.n	800a378 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a354:	429a      	cmp	r2, r3
 800a356:	d20f      	bcs.n	800a378 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a358:	2200      	movs	r2, #0
 800a35a:	2100      	movs	r1, #0
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 ff1b 	bl	800b198 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a36a:	2300      	movs	r3, #0
 800a36c:	2200      	movs	r2, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f001 facd 	bl	800b910 <USBD_LL_PrepareReceive>
 800a376:	e018      	b.n	800a3aa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b03      	cmp	r3, #3
 800a382:	d10b      	bne.n	800a39c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a39c:	2180      	movs	r1, #128	; 0x80
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f001 fa0c 	bl	800b7bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 ff2c 	bl	800b202 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d122      	bne.n	800a3fa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7ff fe98 	bl	800a0ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3c2:	e01a      	b.n	800a3fa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d114      	bne.n	800a3fa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00e      	beq.n	800a3fa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	7afa      	ldrb	r2, [r7, #11]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	4798      	blx	r3
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	e000      	b.n	800a3fc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a434:	2303      	movs	r3, #3
 800a436:	e02f      	b.n	800a498 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	6852      	ldr	r2, [r2, #4]
 800a45a:	b2d2      	uxtb	r2, r2
 800a45c:	4611      	mov	r1, r2
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a462:	2340      	movs	r3, #64	; 0x40
 800a464:	2200      	movs	r2, #0
 800a466:	2100      	movs	r1, #0
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f001 f962 	bl	800b732 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2240      	movs	r2, #64	; 0x40
 800a47a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a47e:	2340      	movs	r3, #64	; 0x40
 800a480:	2200      	movs	r2, #0
 800a482:	2180      	movs	r1, #128	; 0x80
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 f954 	bl	800b732 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2240      	movs	r2, #64	; 0x40
 800a494:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	78fa      	ldrb	r2, [r7, #3]
 800a4b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2204      	movs	r2, #4
 800a4da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b04      	cmp	r3, #4
 800a4fe:	d106      	bne.n	800a50e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a506:	b2da      	uxtb	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a52e:	2303      	movs	r3, #3
 800a530:	e012      	b.n	800a558 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d10b      	bne.n	800a556 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d005      	beq.n	800a556 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	3301      	adds	r3, #1
 800a576:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a57e:	8a3b      	ldrh	r3, [r7, #16]
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	b21a      	sxth	r2, r3
 800a584:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a588:	4313      	orrs	r3, r2
 800a58a:	b21b      	sxth	r3, r3
 800a58c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a58e:	89fb      	ldrh	r3, [r7, #14]
}
 800a590:	4618      	mov	r0, r3
 800a592:	371c      	adds	r7, #28
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5b2:	2b40      	cmp	r3, #64	; 0x40
 800a5b4:	d005      	beq.n	800a5c2 <USBD_StdDevReq+0x26>
 800a5b6:	2b40      	cmp	r3, #64	; 0x40
 800a5b8:	d853      	bhi.n	800a662 <USBD_StdDevReq+0xc6>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00b      	beq.n	800a5d6 <USBD_StdDevReq+0x3a>
 800a5be:	2b20      	cmp	r3, #32
 800a5c0:	d14f      	bne.n	800a662 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	4798      	blx	r3
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d4:	e04a      	b.n	800a66c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	2b09      	cmp	r3, #9
 800a5dc:	d83b      	bhi.n	800a656 <USBD_StdDevReq+0xba>
 800a5de:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <USBD_StdDevReq+0x48>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a639 	.word	0x0800a639
 800a5e8:	0800a64d 	.word	0x0800a64d
 800a5ec:	0800a657 	.word	0x0800a657
 800a5f0:	0800a643 	.word	0x0800a643
 800a5f4:	0800a657 	.word	0x0800a657
 800a5f8:	0800a617 	.word	0x0800a617
 800a5fc:	0800a60d 	.word	0x0800a60d
 800a600:	0800a657 	.word	0x0800a657
 800a604:	0800a62f 	.word	0x0800a62f
 800a608:	0800a621 	.word	0x0800a621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f9de 	bl	800a9d0 <USBD_GetDescriptor>
          break;
 800a614:	e024      	b.n	800a660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fb6d 	bl	800acf8 <USBD_SetAddress>
          break;
 800a61e:	e01f      	b.n	800a660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a620:	6839      	ldr	r1, [r7, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fbac 	bl	800ad80 <USBD_SetConfig>
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]
          break;
 800a62c:	e018      	b.n	800a660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fc4b 	bl	800aecc <USBD_GetConfig>
          break;
 800a636:	e013      	b.n	800a660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fc7c 	bl	800af38 <USBD_GetStatus>
          break;
 800a640:	e00e      	b.n	800a660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fcab 	bl	800afa0 <USBD_SetFeature>
          break;
 800a64a:	e009      	b.n	800a660 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fcba 	bl	800afc8 <USBD_ClrFeature>
          break;
 800a654:	e004      	b.n	800a660 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fd11 	bl	800b080 <USBD_CtlError>
          break;
 800a65e:	bf00      	nop
      }
      break;
 800a660:	e004      	b.n	800a66c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fd0b 	bl	800b080 <USBD_CtlError>
      break;
 800a66a:	bf00      	nop
  }

  return ret;
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop

0800a678 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a68e:	2b40      	cmp	r3, #64	; 0x40
 800a690:	d005      	beq.n	800a69e <USBD_StdItfReq+0x26>
 800a692:	2b40      	cmp	r3, #64	; 0x40
 800a694:	d82f      	bhi.n	800a6f6 <USBD_StdItfReq+0x7e>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <USBD_StdItfReq+0x26>
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	d12b      	bne.n	800a6f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d81d      	bhi.n	800a6e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	889b      	ldrh	r3, [r3, #4]
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d813      	bhi.n	800a6de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	4798      	blx	r3
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	88db      	ldrh	r3, [r3, #6]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d110      	bne.n	800a6f2 <USBD_StdItfReq+0x7a>
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10d      	bne.n	800a6f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fd80 	bl	800b1dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6dc:	e009      	b.n	800a6f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fccd 	bl	800b080 <USBD_CtlError>
          break;
 800a6e6:	e004      	b.n	800a6f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fcc8 	bl	800b080 <USBD_CtlError>
          break;
 800a6f0:	e000      	b.n	800a6f4 <USBD_StdItfReq+0x7c>
          break;
 800a6f2:	bf00      	nop
      }
      break;
 800a6f4:	e004      	b.n	800a700 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fcc1 	bl	800b080 <USBD_CtlError>
      break;
 800a6fe:	bf00      	nop
  }

  return ret;
 800a700:	7bfb      	ldrb	r3, [r7, #15]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	889b      	ldrh	r3, [r3, #4]
 800a71c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a726:	2b40      	cmp	r3, #64	; 0x40
 800a728:	d007      	beq.n	800a73a <USBD_StdEPReq+0x30>
 800a72a:	2b40      	cmp	r3, #64	; 0x40
 800a72c:	f200 8145 	bhi.w	800a9ba <USBD_StdEPReq+0x2b0>
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00c      	beq.n	800a74e <USBD_StdEPReq+0x44>
 800a734:	2b20      	cmp	r3, #32
 800a736:	f040 8140 	bne.w	800a9ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	4798      	blx	r3
 800a748:	4603      	mov	r3, r0
 800a74a:	73fb      	strb	r3, [r7, #15]
      break;
 800a74c:	e13a      	b.n	800a9c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	785b      	ldrb	r3, [r3, #1]
 800a752:	2b03      	cmp	r3, #3
 800a754:	d007      	beq.n	800a766 <USBD_StdEPReq+0x5c>
 800a756:	2b03      	cmp	r3, #3
 800a758:	f300 8129 	bgt.w	800a9ae <USBD_StdEPReq+0x2a4>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d07f      	beq.n	800a860 <USBD_StdEPReq+0x156>
 800a760:	2b01      	cmp	r3, #1
 800a762:	d03c      	beq.n	800a7de <USBD_StdEPReq+0xd4>
 800a764:	e123      	b.n	800a9ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d002      	beq.n	800a778 <USBD_StdEPReq+0x6e>
 800a772:	2b03      	cmp	r3, #3
 800a774:	d016      	beq.n	800a7a4 <USBD_StdEPReq+0x9a>
 800a776:	e02c      	b.n	800a7d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00d      	beq.n	800a79a <USBD_StdEPReq+0x90>
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	2b80      	cmp	r3, #128	; 0x80
 800a782:	d00a      	beq.n	800a79a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f001 f817 	bl	800b7bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a78e:	2180      	movs	r1, #128	; 0x80
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f001 f813 	bl	800b7bc <USBD_LL_StallEP>
 800a796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a798:	e020      	b.n	800a7dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fc6f 	bl	800b080 <USBD_CtlError>
              break;
 800a7a2:	e01b      	b.n	800a7dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	885b      	ldrh	r3, [r3, #2]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10e      	bne.n	800a7ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00b      	beq.n	800a7ca <USBD_StdEPReq+0xc0>
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	2b80      	cmp	r3, #128	; 0x80
 800a7b6:	d008      	beq.n	800a7ca <USBD_StdEPReq+0xc0>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	88db      	ldrh	r3, [r3, #6]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d104      	bne.n	800a7ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fff9 	bl	800b7bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fd06 	bl	800b1dc <USBD_CtlSendStatus>

              break;
 800a7d0:	e004      	b.n	800a7dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fc53 	bl	800b080 <USBD_CtlError>
              break;
 800a7da:	bf00      	nop
          }
          break;
 800a7dc:	e0ec      	b.n	800a9b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d002      	beq.n	800a7f0 <USBD_StdEPReq+0xe6>
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	d016      	beq.n	800a81c <USBD_StdEPReq+0x112>
 800a7ee:	e030      	b.n	800a852 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00d      	beq.n	800a812 <USBD_StdEPReq+0x108>
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	2b80      	cmp	r3, #128	; 0x80
 800a7fa:	d00a      	beq.n	800a812 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 ffdb 	bl	800b7bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a806:	2180      	movs	r1, #128	; 0x80
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 ffd7 	bl	800b7bc <USBD_LL_StallEP>
 800a80e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a810:	e025      	b.n	800a85e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fc33 	bl	800b080 <USBD_CtlError>
              break;
 800a81a:	e020      	b.n	800a85e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	885b      	ldrh	r3, [r3, #2]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d11b      	bne.n	800a85c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d004      	beq.n	800a838 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 ffe1 	bl	800b7fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fccf 	bl	800b1dc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	4798      	blx	r3
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a850:	e004      	b.n	800a85c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fc13 	bl	800b080 <USBD_CtlError>
              break;
 800a85a:	e000      	b.n	800a85e <USBD_StdEPReq+0x154>
              break;
 800a85c:	bf00      	nop
          }
          break;
 800a85e:	e0ab      	b.n	800a9b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d002      	beq.n	800a872 <USBD_StdEPReq+0x168>
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d032      	beq.n	800a8d6 <USBD_StdEPReq+0x1cc>
 800a870:	e097      	b.n	800a9a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d007      	beq.n	800a888 <USBD_StdEPReq+0x17e>
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b80      	cmp	r3, #128	; 0x80
 800a87c:	d004      	beq.n	800a888 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fbfd 	bl	800b080 <USBD_CtlError>
                break;
 800a886:	e091      	b.n	800a9ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	da0b      	bge.n	800a8a8 <USBD_StdEPReq+0x19e>
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a896:	4613      	mov	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	3310      	adds	r3, #16
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	e00b      	b.n	800a8c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	4413      	add	r3, r2
 800a8be:	3304      	adds	r3, #4
 800a8c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fc47 	bl	800b162 <USBD_CtlSendData>
              break;
 800a8d4:	e06a      	b.n	800a9ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da11      	bge.n	800a902 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	f003 020f 	and.w	r2, r3, #15
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3324      	adds	r3, #36	; 0x24
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d117      	bne.n	800a928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fbc0 	bl	800b080 <USBD_CtlError>
                  break;
 800a900:	e054      	b.n	800a9ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a902:	7bbb      	ldrb	r3, [r7, #14]
 800a904:	f003 020f 	and.w	r2, r3, #15
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	4613      	mov	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	440b      	add	r3, r1
 800a914:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d104      	bne.n	800a928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fbad 	bl	800b080 <USBD_CtlError>
                  break;
 800a926:	e041      	b.n	800a9ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da0b      	bge.n	800a948 <USBD_StdEPReq+0x23e>
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a936:	4613      	mov	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	3310      	adds	r3, #16
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	4413      	add	r3, r2
 800a944:	3304      	adds	r3, #4
 800a946:	e00b      	b.n	800a960 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	4413      	add	r3, r2
 800a95e:	3304      	adds	r3, #4
 800a960:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <USBD_StdEPReq+0x264>
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	2b80      	cmp	r3, #128	; 0x80
 800a96c:	d103      	bne.n	800a976 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	e00e      	b.n	800a994 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 ff5c 	bl	800b838 <USBD_LL_IsStallEP>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2201      	movs	r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	e002      	b.n	800a994 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2202      	movs	r2, #2
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fbe1 	bl	800b162 <USBD_CtlSendData>
              break;
 800a9a0:	e004      	b.n	800a9ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fb6b 	bl	800b080 <USBD_CtlError>
              break;
 800a9aa:	bf00      	nop
          }
          break;
 800a9ac:	e004      	b.n	800a9b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fb65 	bl	800b080 <USBD_CtlError>
          break;
 800a9b6:	bf00      	nop
      }
      break;
 800a9b8:	e004      	b.n	800a9c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fb5f 	bl	800b080 <USBD_CtlError>
      break;
 800a9c2:	bf00      	nop
  }

  return ret;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	2b0e      	cmp	r3, #14
 800a9f2:	f200 8152 	bhi.w	800ac9a <USBD_GetDescriptor+0x2ca>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <USBD_GetDescriptor+0x2c>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa6d 	.word	0x0800aa6d
 800aa00:	0800aa85 	.word	0x0800aa85
 800aa04:	0800aac5 	.word	0x0800aac5
 800aa08:	0800ac9b 	.word	0x0800ac9b
 800aa0c:	0800ac9b 	.word	0x0800ac9b
 800aa10:	0800ac3b 	.word	0x0800ac3b
 800aa14:	0800ac67 	.word	0x0800ac67
 800aa18:	0800ac9b 	.word	0x0800ac9b
 800aa1c:	0800ac9b 	.word	0x0800ac9b
 800aa20:	0800ac9b 	.word	0x0800ac9b
 800aa24:	0800ac9b 	.word	0x0800ac9b
 800aa28:	0800ac9b 	.word	0x0800ac9b
 800aa2c:	0800ac9b 	.word	0x0800ac9b
 800aa30:	0800ac9b 	.word	0x0800ac9b
 800aa34:	0800aa39 	.word	0x0800aa39
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	7c12      	ldrb	r2, [r2, #16]
 800aa50:	f107 0108 	add.w	r1, r7, #8
 800aa54:	4610      	mov	r0, r2
 800aa56:	4798      	blx	r3
 800aa58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa5a:	e126      	b.n	800acaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fb0e 	bl	800b080 <USBD_CtlError>
        err++;
 800aa64:	7afb      	ldrb	r3, [r7, #11]
 800aa66:	3301      	adds	r3, #1
 800aa68:	72fb      	strb	r3, [r7, #11]
      break;
 800aa6a:	e11e      	b.n	800acaa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	7c12      	ldrb	r2, [r2, #16]
 800aa78:	f107 0108 	add.w	r1, r7, #8
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	4798      	blx	r3
 800aa80:	60f8      	str	r0, [r7, #12]
      break;
 800aa82:	e112      	b.n	800acaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	7c1b      	ldrb	r3, [r3, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10d      	bne.n	800aaa8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa94:	f107 0208 	add.w	r2, r7, #8
 800aa98:	4610      	mov	r0, r2
 800aa9a:	4798      	blx	r3
 800aa9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aaa6:	e100      	b.n	800acaa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab0:	f107 0208 	add.w	r2, r7, #8
 800aab4:	4610      	mov	r0, r2
 800aab6:	4798      	blx	r3
 800aab8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3301      	adds	r3, #1
 800aabe:	2202      	movs	r2, #2
 800aac0:	701a      	strb	r2, [r3, #0]
      break;
 800aac2:	e0f2      	b.n	800acaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	885b      	ldrh	r3, [r3, #2]
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	f200 80ac 	bhi.w	800ac28 <USBD_GetDescriptor+0x258>
 800aad0:	a201      	add	r2, pc, #4	; (adr r2, 800aad8 <USBD_GetDescriptor+0x108>)
 800aad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad6:	bf00      	nop
 800aad8:	0800aaf1 	.word	0x0800aaf1
 800aadc:	0800ab25 	.word	0x0800ab25
 800aae0:	0800ab59 	.word	0x0800ab59
 800aae4:	0800ab8d 	.word	0x0800ab8d
 800aae8:	0800abc1 	.word	0x0800abc1
 800aaec:	0800abf5 	.word	0x0800abf5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	7c12      	ldrb	r2, [r2, #16]
 800ab08:	f107 0108 	add.w	r1, r7, #8
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	4798      	blx	r3
 800ab10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab12:	e091      	b.n	800ac38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fab2 	bl	800b080 <USBD_CtlError>
            err++;
 800ab1c:	7afb      	ldrb	r3, [r7, #11]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	72fb      	strb	r3, [r7, #11]
          break;
 800ab22:	e089      	b.n	800ac38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00b      	beq.n	800ab48 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	7c12      	ldrb	r2, [r2, #16]
 800ab3c:	f107 0108 	add.w	r1, r7, #8
 800ab40:	4610      	mov	r0, r2
 800ab42:	4798      	blx	r3
 800ab44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab46:	e077      	b.n	800ac38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fa98 	bl	800b080 <USBD_CtlError>
            err++;
 800ab50:	7afb      	ldrb	r3, [r7, #11]
 800ab52:	3301      	adds	r3, #1
 800ab54:	72fb      	strb	r3, [r7, #11]
          break;
 800ab56:	e06f      	b.n	800ac38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00b      	beq.n	800ab7c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	7c12      	ldrb	r2, [r2, #16]
 800ab70:	f107 0108 	add.w	r1, r7, #8
 800ab74:	4610      	mov	r0, r2
 800ab76:	4798      	blx	r3
 800ab78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab7a:	e05d      	b.n	800ac38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 fa7e 	bl	800b080 <USBD_CtlError>
            err++;
 800ab84:	7afb      	ldrb	r3, [r7, #11]
 800ab86:	3301      	adds	r3, #1
 800ab88:	72fb      	strb	r3, [r7, #11]
          break;
 800ab8a:	e055      	b.n	800ac38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00b      	beq.n	800abb0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	7c12      	ldrb	r2, [r2, #16]
 800aba4:	f107 0108 	add.w	r1, r7, #8
 800aba8:	4610      	mov	r0, r2
 800abaa:	4798      	blx	r3
 800abac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abae:	e043      	b.n	800ac38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fa64 	bl	800b080 <USBD_CtlError>
            err++;
 800abb8:	7afb      	ldrb	r3, [r7, #11]
 800abba:	3301      	adds	r3, #1
 800abbc:	72fb      	strb	r3, [r7, #11]
          break;
 800abbe:	e03b      	b.n	800ac38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abc6:	695b      	ldr	r3, [r3, #20]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00b      	beq.n	800abe4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	7c12      	ldrb	r2, [r2, #16]
 800abd8:	f107 0108 	add.w	r1, r7, #8
 800abdc:	4610      	mov	r0, r2
 800abde:	4798      	blx	r3
 800abe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abe2:	e029      	b.n	800ac38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fa4a 	bl	800b080 <USBD_CtlError>
            err++;
 800abec:	7afb      	ldrb	r3, [r7, #11]
 800abee:	3301      	adds	r3, #1
 800abf0:	72fb      	strb	r3, [r7, #11]
          break;
 800abf2:	e021      	b.n	800ac38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	7c12      	ldrb	r2, [r2, #16]
 800ac0c:	f107 0108 	add.w	r1, r7, #8
 800ac10:	4610      	mov	r0, r2
 800ac12:	4798      	blx	r3
 800ac14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac16:	e00f      	b.n	800ac38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fa30 	bl	800b080 <USBD_CtlError>
            err++;
 800ac20:	7afb      	ldrb	r3, [r7, #11]
 800ac22:	3301      	adds	r3, #1
 800ac24:	72fb      	strb	r3, [r7, #11]
          break;
 800ac26:	e007      	b.n	800ac38 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa28 	bl	800b080 <USBD_CtlError>
          err++;
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	3301      	adds	r3, #1
 800ac34:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ac36:	bf00      	nop
      }
      break;
 800ac38:	e037      	b.n	800acaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	7c1b      	ldrb	r3, [r3, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d109      	bne.n	800ac56 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac4a:	f107 0208 	add.w	r2, r7, #8
 800ac4e:	4610      	mov	r0, r2
 800ac50:	4798      	blx	r3
 800ac52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac54:	e029      	b.n	800acaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fa11 	bl	800b080 <USBD_CtlError>
        err++;
 800ac5e:	7afb      	ldrb	r3, [r7, #11]
 800ac60:	3301      	adds	r3, #1
 800ac62:	72fb      	strb	r3, [r7, #11]
      break;
 800ac64:	e021      	b.n	800acaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7c1b      	ldrb	r3, [r3, #16]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10d      	bne.n	800ac8a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac76:	f107 0208 	add.w	r2, r7, #8
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	4798      	blx	r3
 800ac7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3301      	adds	r3, #1
 800ac84:	2207      	movs	r2, #7
 800ac86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac88:	e00f      	b.n	800acaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f9f7 	bl	800b080 <USBD_CtlError>
        err++;
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	3301      	adds	r3, #1
 800ac96:	72fb      	strb	r3, [r7, #11]
      break;
 800ac98:	e007      	b.n	800acaa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f9ef 	bl	800b080 <USBD_CtlError>
      err++;
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	3301      	adds	r3, #1
 800aca6:	72fb      	strb	r3, [r7, #11]
      break;
 800aca8:	bf00      	nop
  }

  if (err != 0U)
 800acaa:	7afb      	ldrb	r3, [r7, #11]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d11e      	bne.n	800acee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	88db      	ldrh	r3, [r3, #6]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d016      	beq.n	800ace6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800acb8:	893b      	ldrh	r3, [r7, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00e      	beq.n	800acdc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	88da      	ldrh	r2, [r3, #6]
 800acc2:	893b      	ldrh	r3, [r7, #8]
 800acc4:	4293      	cmp	r3, r2
 800acc6:	bf28      	it	cs
 800acc8:	4613      	movcs	r3, r2
 800acca:	b29b      	uxth	r3, r3
 800accc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acce:	893b      	ldrh	r3, [r7, #8]
 800acd0:	461a      	mov	r2, r3
 800acd2:	68f9      	ldr	r1, [r7, #12]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fa44 	bl	800b162 <USBD_CtlSendData>
 800acda:	e009      	b.n	800acf0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f9ce 	bl	800b080 <USBD_CtlError>
 800ace4:	e004      	b.n	800acf0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fa78 	bl	800b1dc <USBD_CtlSendStatus>
 800acec:	e000      	b.n	800acf0 <USBD_GetDescriptor+0x320>
    return;
 800acee:	bf00      	nop
  }
}
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop

0800acf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	889b      	ldrh	r3, [r3, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d131      	bne.n	800ad6e <USBD_SetAddress+0x76>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	88db      	ldrh	r3, [r3, #6]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d12d      	bne.n	800ad6e <USBD_SetAddress+0x76>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	885b      	ldrh	r3, [r3, #2]
 800ad16:	2b7f      	cmp	r3, #127	; 0x7f
 800ad18:	d829      	bhi.n	800ad6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	885b      	ldrh	r3, [r3, #2]
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b03      	cmp	r3, #3
 800ad30:	d104      	bne.n	800ad3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f9a3 	bl	800b080 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad3a:	e01d      	b.n	800ad78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	7bfa      	ldrb	r2, [r7, #15]
 800ad40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fda1 	bl	800b890 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fa44 	bl	800b1dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d004      	beq.n	800ad64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad62:	e009      	b.n	800ad78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6c:	e004      	b.n	800ad78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f985 	bl	800b080 <USBD_CtlError>
  }
}
 800ad76:	bf00      	nop
 800ad78:	bf00      	nop
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	885b      	ldrh	r3, [r3, #2]
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	4b4c      	ldr	r3, [pc, #304]	; (800aec8 <USBD_SetConfig+0x148>)
 800ad96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad98:	4b4b      	ldr	r3, [pc, #300]	; (800aec8 <USBD_SetConfig+0x148>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d905      	bls.n	800adac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f96c 	bl	800b080 <USBD_CtlError>
    return USBD_FAIL;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e088      	b.n	800aebe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d002      	beq.n	800adbe <USBD_SetConfig+0x3e>
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d025      	beq.n	800ae08 <USBD_SetConfig+0x88>
 800adbc:	e071      	b.n	800aea2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800adbe:	4b42      	ldr	r3, [pc, #264]	; (800aec8 <USBD_SetConfig+0x148>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d01c      	beq.n	800ae00 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800adc6:	4b40      	ldr	r3, [pc, #256]	; (800aec8 <USBD_SetConfig+0x148>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800add0:	4b3d      	ldr	r3, [pc, #244]	; (800aec8 <USBD_SetConfig+0x148>)
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff f992 	bl	800a100 <USBD_SetClassConfig>
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d004      	beq.n	800adf0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f949 	bl	800b080 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adee:	e065      	b.n	800aebc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f9f3 	bl	800b1dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2203      	movs	r2, #3
 800adfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800adfe:	e05d      	b.n	800aebc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f9eb 	bl	800b1dc <USBD_CtlSendStatus>
      break;
 800ae06:	e059      	b.n	800aebc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae08:	4b2f      	ldr	r3, [pc, #188]	; (800aec8 <USBD_SetConfig+0x148>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d112      	bne.n	800ae36 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2202      	movs	r2, #2
 800ae14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae18:	4b2b      	ldr	r3, [pc, #172]	; (800aec8 <USBD_SetConfig+0x148>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae22:	4b29      	ldr	r3, [pc, #164]	; (800aec8 <USBD_SetConfig+0x148>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff f985 	bl	800a138 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f9d4 	bl	800b1dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae34:	e042      	b.n	800aebc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ae36:	4b24      	ldr	r3, [pc, #144]	; (800aec8 <USBD_SetConfig+0x148>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d02a      	beq.n	800ae9a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff f973 	bl	800a138 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae52:	4b1d      	ldr	r3, [pc, #116]	; (800aec8 <USBD_SetConfig+0x148>)
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae5c:	4b1a      	ldr	r3, [pc, #104]	; (800aec8 <USBD_SetConfig+0x148>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff f94c 	bl	800a100 <USBD_SetClassConfig>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00f      	beq.n	800ae92 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f903 	bl	800b080 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff f958 	bl	800a138 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae90:	e014      	b.n	800aebc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f9a2 	bl	800b1dc <USBD_CtlSendStatus>
      break;
 800ae98:	e010      	b.n	800aebc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f99e 	bl	800b1dc <USBD_CtlSendStatus>
      break;
 800aea0:	e00c      	b.n	800aebc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f8eb 	bl	800b080 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aeaa:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <USBD_SetConfig+0x148>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff f941 	bl	800a138 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeba:	bf00      	nop
  }

  return ret;
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	200004e4 	.word	0x200004e4

0800aecc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	88db      	ldrh	r3, [r3, #6]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d004      	beq.n	800aee8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f8cd 	bl	800b080 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aee6:	e023      	b.n	800af30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	dc02      	bgt.n	800aefa <USBD_GetConfig+0x2e>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dc03      	bgt.n	800af00 <USBD_GetConfig+0x34>
 800aef8:	e015      	b.n	800af26 <USBD_GetConfig+0x5a>
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d00b      	beq.n	800af16 <USBD_GetConfig+0x4a>
 800aefe:	e012      	b.n	800af26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3308      	adds	r3, #8
 800af0a:	2201      	movs	r2, #1
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f927 	bl	800b162 <USBD_CtlSendData>
        break;
 800af14:	e00c      	b.n	800af30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3304      	adds	r3, #4
 800af1a:	2201      	movs	r2, #1
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f91f 	bl	800b162 <USBD_CtlSendData>
        break;
 800af24:	e004      	b.n	800af30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f8a9 	bl	800b080 <USBD_CtlError>
        break;
 800af2e:	bf00      	nop
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	3b01      	subs	r3, #1
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d81e      	bhi.n	800af8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	88db      	ldrh	r3, [r3, #6]
 800af54:	2b02      	cmp	r3, #2
 800af56:	d004      	beq.n	800af62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f890 	bl	800b080 <USBD_CtlError>
        break;
 800af60:	e01a      	b.n	800af98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d005      	beq.n	800af7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f043 0202 	orr.w	r2, r3, #2
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	330c      	adds	r3, #12
 800af82:	2202      	movs	r2, #2
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f8eb 	bl	800b162 <USBD_CtlSendData>
      break;
 800af8c:	e004      	b.n	800af98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f875 	bl	800b080 <USBD_CtlError>
      break;
 800af96:	bf00      	nop
  }
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	885b      	ldrh	r3, [r3, #2]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d106      	bne.n	800afc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f90e 	bl	800b1dc <USBD_CtlSendStatus>
  }
}
 800afc0:	bf00      	nop
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	3b01      	subs	r3, #1
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d80b      	bhi.n	800aff8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	885b      	ldrh	r3, [r3, #2]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d10c      	bne.n	800b002 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f8f3 	bl	800b1dc <USBD_CtlSendStatus>
      }
      break;
 800aff6:	e004      	b.n	800b002 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f840 	bl	800b080 <USBD_CtlError>
      break;
 800b000:	e000      	b.n	800b004 <USBD_ClrFeature+0x3c>
      break;
 800b002:	bf00      	nop
  }
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	781a      	ldrb	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3301      	adds	r3, #1
 800b026:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	781a      	ldrb	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3301      	adds	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7ff fa92 	bl	800a560 <SWAPBYTE>
 800b03c:	4603      	mov	r3, r0
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3301      	adds	r3, #1
 800b048:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3301      	adds	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f7ff fa85 	bl	800a560 <SWAPBYTE>
 800b056:	4603      	mov	r3, r0
 800b058:	461a      	mov	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3301      	adds	r3, #1
 800b062:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7ff fa78 	bl	800a560 <SWAPBYTE>
 800b070:	4603      	mov	r3, r0
 800b072:	461a      	mov	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	80da      	strh	r2, [r3, #6]
}
 800b078:	bf00      	nop
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b08a:	2180      	movs	r1, #128	; 0x80
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fb95 	bl	800b7bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b092:	2100      	movs	r1, #0
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fb91 	bl	800b7bc <USBD_LL_StallEP>
}
 800b09a:	bf00      	nop
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b086      	sub	sp, #24
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d036      	beq.n	800b126 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0bc:	6938      	ldr	r0, [r7, #16]
 800b0be:	f000 f836 	bl	800b12e <USBD_GetLen>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	7812      	ldrb	r2, [r2, #0]
 800b0da:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0dc:	7dfb      	ldrb	r3, [r7, #23]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	2203      	movs	r2, #3
 800b0ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0f2:	e013      	b.n	800b11c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	7812      	ldrb	r2, [r2, #0]
 800b0fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	3301      	adds	r3, #1
 800b104:	613b      	str	r3, [r7, #16]
    idx++;
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	3301      	adds	r3, #1
 800b10a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	4413      	add	r3, r2
 800b112:	2200      	movs	r2, #0
 800b114:	701a      	strb	r2, [r3, #0]
    idx++;
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	3301      	adds	r3, #1
 800b11a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1e7      	bne.n	800b0f4 <USBD_GetString+0x52>
 800b124:	e000      	b.n	800b128 <USBD_GetString+0x86>
    return;
 800b126:	bf00      	nop
  }
}
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b12e:	b480      	push	{r7}
 800b130:	b085      	sub	sp, #20
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b13e:	e005      	b.n	800b14c <USBD_GetLen+0x1e>
  {
    len++;
 800b140:	7bfb      	ldrb	r3, [r7, #15]
 800b142:	3301      	adds	r3, #1
 800b144:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	3301      	adds	r3, #1
 800b14a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1f5      	bne.n	800b140 <USBD_GetLen+0x12>
  }

  return len;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2202      	movs	r2, #2
 800b172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	2100      	movs	r1, #0
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f000 fba0 	bl	800b8ce <USBD_LL_Transmit>

  return USBD_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f000 fb8f 	bl	800b8ce <USBD_LL_Transmit>

  return USBD_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b084      	sub	sp, #16
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 fb9f 	bl	800b910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2204      	movs	r2, #4
 800b1e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fb6b 	bl	800b8ce <USBD_LL_Transmit>

  return USBD_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2205      	movs	r2, #5
 800b20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b212:	2300      	movs	r3, #0
 800b214:	2200      	movs	r2, #0
 800b216:	2100      	movs	r1, #0
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fb79 	bl	800b910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800b22c:	2200      	movs	r2, #0
 800b22e:	490e      	ldr	r1, [pc, #56]	; (800b268 <MX_USB_Device_Init+0x40>)
 800b230:	480e      	ldr	r0, [pc, #56]	; (800b26c <MX_USB_Device_Init+0x44>)
 800b232:	f7fe fef7 	bl	800a024 <USBD_Init>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b23c:	f7f5 fd4c 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800b240:	490b      	ldr	r1, [pc, #44]	; (800b270 <MX_USB_Device_Init+0x48>)
 800b242:	480a      	ldr	r0, [pc, #40]	; (800b26c <MX_USB_Device_Init+0x44>)
 800b244:	f7fe ff1e 	bl	800a084 <USBD_RegisterClass>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b24e:	f7f5 fd43 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b252:	4806      	ldr	r0, [pc, #24]	; (800b26c <MX_USB_Device_Init+0x44>)
 800b254:	f7fe ff3d 	bl	800a0d2 <USBD_Start>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800b25e:	f7f5 fd3b 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b262:	bf00      	nop
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20000114 	.word	0x20000114
 800b26c:	200004e8 	.word	0x200004e8
 800b270:	2000000c 	.word	0x2000000c

0800b274 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2212      	movs	r2, #18
 800b284:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800b286:	4b03      	ldr	r3, [pc, #12]	; (800b294 <USBD_HID_DeviceDescriptor+0x20>)
}
 800b288:	4618      	mov	r0, r3
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	20000134 	.word	0x20000134

0800b298 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	6039      	str	r1, [r7, #0]
 800b2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2204      	movs	r2, #4
 800b2a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b2aa:	4b03      	ldr	r3, [pc, #12]	; (800b2b8 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	20000148 	.word	0x20000148

0800b2bc <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	6039      	str	r1, [r7, #0]
 800b2c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d105      	bne.n	800b2da <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	4907      	ldr	r1, [pc, #28]	; (800b2f0 <USBD_HID_ProductStrDescriptor+0x34>)
 800b2d2:	4808      	ldr	r0, [pc, #32]	; (800b2f4 <USBD_HID_ProductStrDescriptor+0x38>)
 800b2d4:	f7ff fee5 	bl	800b0a2 <USBD_GetString>
 800b2d8:	e004      	b.n	800b2e4 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	4904      	ldr	r1, [pc, #16]	; (800b2f0 <USBD_HID_ProductStrDescriptor+0x34>)
 800b2de:	4805      	ldr	r0, [pc, #20]	; (800b2f4 <USBD_HID_ProductStrDescriptor+0x38>)
 800b2e0:	f7ff fedf 	bl	800b0a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	200007b8 	.word	0x200007b8
 800b2f4:	0800bac4 	.word	0x0800bac4

0800b2f8 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	4904      	ldr	r1, [pc, #16]	; (800b318 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800b308:	4804      	ldr	r0, [pc, #16]	; (800b31c <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800b30a:	f7ff feca 	bl	800b0a2 <USBD_GetString>
  return USBD_StrDesc;
 800b30e:	4b02      	ldr	r3, [pc, #8]	; (800b318 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800b310:	4618      	mov	r0, r3
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	200007b8 	.word	0x200007b8
 800b31c:	0800bad0 	.word	0x0800bad0

0800b320 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	6039      	str	r1, [r7, #0]
 800b32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	221a      	movs	r2, #26
 800b330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b332:	f000 f843 	bl	800b3bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b336:	4b02      	ldr	r3, [pc, #8]	; (800b340 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	2000014c 	.word	0x2000014c

0800b344 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	4603      	mov	r3, r0
 800b34c:	6039      	str	r1, [r7, #0]
 800b34e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b350:	79fb      	ldrb	r3, [r7, #7]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d105      	bne.n	800b362 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	4907      	ldr	r1, [pc, #28]	; (800b378 <USBD_HID_ConfigStrDescriptor+0x34>)
 800b35a:	4808      	ldr	r0, [pc, #32]	; (800b37c <USBD_HID_ConfigStrDescriptor+0x38>)
 800b35c:	f7ff fea1 	bl	800b0a2 <USBD_GetString>
 800b360:	e004      	b.n	800b36c <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	4904      	ldr	r1, [pc, #16]	; (800b378 <USBD_HID_ConfigStrDescriptor+0x34>)
 800b366:	4805      	ldr	r0, [pc, #20]	; (800b37c <USBD_HID_ConfigStrDescriptor+0x38>)
 800b368:	f7ff fe9b 	bl	800b0a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	200007b8 	.word	0x200007b8
 800b37c:	0800bae4 	.word	0x0800bae4

0800b380 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	6039      	str	r1, [r7, #0]
 800b38a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d105      	bne.n	800b39e <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	4907      	ldr	r1, [pc, #28]	; (800b3b4 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800b396:	4808      	ldr	r0, [pc, #32]	; (800b3b8 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800b398:	f7ff fe83 	bl	800b0a2 <USBD_GetString>
 800b39c:	e004      	b.n	800b3a8 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	4904      	ldr	r1, [pc, #16]	; (800b3b4 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800b3a2:	4805      	ldr	r0, [pc, #20]	; (800b3b8 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800b3a4:	f7ff fe7d 	bl	800b0a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3a8:	4b02      	ldr	r3, [pc, #8]	; (800b3b4 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	200007b8 	.word	0x200007b8
 800b3b8:	0800baf0 	.word	0x0800baf0

0800b3bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3c2:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <Get_SerialNum+0x44>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3c8:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <Get_SerialNum+0x48>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3ce:	4b0e      	ldr	r3, [pc, #56]	; (800b408 <Get_SerialNum+0x4c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4413      	add	r3, r2
 800b3da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d009      	beq.n	800b3f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3e2:	2208      	movs	r2, #8
 800b3e4:	4909      	ldr	r1, [pc, #36]	; (800b40c <Get_SerialNum+0x50>)
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f000 f814 	bl	800b414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3ec:	2204      	movs	r2, #4
 800b3ee:	4908      	ldr	r1, [pc, #32]	; (800b410 <Get_SerialNum+0x54>)
 800b3f0:	68b8      	ldr	r0, [r7, #8]
 800b3f2:	f000 f80f 	bl	800b414 <IntToUnicode>
  }
}
 800b3f6:	bf00      	nop
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	1fff7590 	.word	0x1fff7590
 800b404:	1fff7594 	.word	0x1fff7594
 800b408:	1fff7598 	.word	0x1fff7598
 800b40c:	2000014e 	.word	0x2000014e
 800b410:	2000015e 	.word	0x2000015e

0800b414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b414:	b480      	push	{r7}
 800b416:	b087      	sub	sp, #28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	4613      	mov	r3, r2
 800b420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b426:	2300      	movs	r3, #0
 800b428:	75fb      	strb	r3, [r7, #23]
 800b42a:	e027      	b.n	800b47c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	0f1b      	lsrs	r3, r3, #28
 800b430:	2b09      	cmp	r3, #9
 800b432:	d80b      	bhi.n	800b44c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	0f1b      	lsrs	r3, r3, #28
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	7dfb      	ldrb	r3, [r7, #23]
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	4619      	mov	r1, r3
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	440b      	add	r3, r1
 800b444:	3230      	adds	r2, #48	; 0x30
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]
 800b44a:	e00a      	b.n	800b462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	0f1b      	lsrs	r3, r3, #28
 800b450:	b2da      	uxtb	r2, r3
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	005b      	lsls	r3, r3, #1
 800b456:	4619      	mov	r1, r3
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	440b      	add	r3, r1
 800b45c:	3237      	adds	r2, #55	; 0x37
 800b45e:	b2d2      	uxtb	r2, r2
 800b460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	011b      	lsls	r3, r3, #4
 800b466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b468:	7dfb      	ldrb	r3, [r7, #23]
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	3301      	adds	r3, #1
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	4413      	add	r3, r2
 800b472:	2200      	movs	r2, #0
 800b474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	3301      	adds	r3, #1
 800b47a:	75fb      	strb	r3, [r7, #23]
 800b47c:	7dfa      	ldrb	r2, [r7, #23]
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	429a      	cmp	r2, r3
 800b482:	d3d3      	bcc.n	800b42c <IntToUnicode+0x18>
  }
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	371c      	adds	r7, #28
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
	...

0800b494 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b094      	sub	sp, #80	; 0x50
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b49c:	f107 030c 	add.w	r3, r7, #12
 800b4a0:	2244      	movs	r2, #68	; 0x44
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fad5 	bl	800ba54 <memset>
  if(pcdHandle->Instance==USB)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a15      	ldr	r2, [pc, #84]	; (800b504 <HAL_PCD_MspInit+0x70>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d123      	bne.n	800b4fc <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b4b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b4ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b4be:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b4c0:	f107 030c 	add.w	r3, r7, #12
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fa fc4b 	bl	8005d60 <HAL_RCCEx_PeriphCLKConfig>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b4d0:	f7f5 fc02 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b4d4:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <HAL_PCD_MspInit+0x74>)
 800b4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d8:	4a0b      	ldr	r2, [pc, #44]	; (800b508 <HAL_PCD_MspInit+0x74>)
 800b4da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4de:	6593      	str	r3, [r2, #88]	; 0x58
 800b4e0:	4b09      	ldr	r3, [pc, #36]	; (800b508 <HAL_PCD_MspInit+0x74>)
 800b4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4e8:	60bb      	str	r3, [r7, #8]
 800b4ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	2014      	movs	r0, #20
 800b4f2:	f7f7 fd2e 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b4f6:	2014      	movs	r0, #20
 800b4f8:	f7f7 fd45 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4fc:	bf00      	nop
 800b4fe:	3750      	adds	r7, #80	; 0x50
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	40005c00 	.word	0x40005c00
 800b508:	40021000 	.word	0x40021000

0800b50c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b520:	4619      	mov	r1, r3
 800b522:	4610      	mov	r0, r2
 800b524:	f7fe fe20 	bl	800a168 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b528:	bf00      	nop
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b542:	78fa      	ldrb	r2, [r7, #3]
 800b544:	6879      	ldr	r1, [r7, #4]
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	00db      	lsls	r3, r3, #3
 800b54e:	440b      	add	r3, r1
 800b550:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	4619      	mov	r1, r3
 800b55a:	f7fe fe5a 	bl	800a212 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b578:	78fa      	ldrb	r2, [r7, #3]
 800b57a:	6879      	ldr	r1, [r7, #4]
 800b57c:	4613      	mov	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	00db      	lsls	r3, r3, #3
 800b584:	440b      	add	r3, r1
 800b586:	3324      	adds	r3, #36	; 0x24
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	78fb      	ldrb	r3, [r7, #3]
 800b58c:	4619      	mov	r1, r3
 800b58e:	f7fe fea3 	bl	800a2d8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b592:	bf00      	nop
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fe ffb7 	bl	800a51c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	795b      	ldrb	r3, [r3, #5]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d001      	beq.n	800b5ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b5ca:	f7f5 fb85 	bl	8000cd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5d4:	7bfa      	ldrb	r2, [r7, #15]
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fe ff61 	bl	800a4a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fe ff0d 	bl	800a404 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b5ea:	bf00      	nop
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe ff5c 	bl	800a4c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	7a5b      	ldrb	r3, [r3, #9]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d005      	beq.n	800b61c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b610:	4b04      	ldr	r3, [pc, #16]	; (800b624 <HAL_PCD_SuspendCallback+0x30>)
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	4a03      	ldr	r2, [pc, #12]	; (800b624 <HAL_PCD_SuspendCallback+0x30>)
 800b616:	f043 0306 	orr.w	r3, r3, #6
 800b61a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b61c:	bf00      	nop
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	e000ed00 	.word	0xe000ed00

0800b628 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7a5b      	ldrb	r3, [r3, #9]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d007      	beq.n	800b648 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b638:	4b08      	ldr	r3, [pc, #32]	; (800b65c <HAL_PCD_ResumeCallback+0x34>)
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	4a07      	ldr	r2, [pc, #28]	; (800b65c <HAL_PCD_ResumeCallback+0x34>)
 800b63e:	f023 0306 	bic.w	r3, r3, #6
 800b642:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b644:	f000 f9d4 	bl	800b9f0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe ff4c 	bl	800a4ec <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b654:	bf00      	nop
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	e000ed00 	.word	0xe000ed00

0800b660 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b668:	4a22      	ldr	r2, [pc, #136]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a20      	ldr	r2, [pc, #128]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b674:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b678:	4b1e      	ldr	r3, [pc, #120]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b67a:	4a1f      	ldr	r2, [pc, #124]	; (800b6f8 <USBD_LL_Init+0x98>)
 800b67c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b67e:	4b1d      	ldr	r3, [pc, #116]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b680:	2208      	movs	r2, #8
 800b682:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b684:	4b1b      	ldr	r3, [pc, #108]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b686:	2202      	movs	r2, #2
 800b688:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b68a:	4b1a      	ldr	r3, [pc, #104]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b68c:	2202      	movs	r2, #2
 800b68e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b690:	4b18      	ldr	r3, [pc, #96]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b692:	2200      	movs	r2, #0
 800b694:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b696:	4b17      	ldr	r3, [pc, #92]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b698:	2200      	movs	r2, #0
 800b69a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b69c:	4b15      	ldr	r3, [pc, #84]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b6a2:	4b14      	ldr	r3, [pc, #80]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b6a8:	4812      	ldr	r0, [pc, #72]	; (800b6f4 <USBD_LL_Init+0x94>)
 800b6aa:	f7f8 f893 	bl	80037d4 <HAL_PCD_Init>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b6b4:	f7f5 fb10 	bl	8000cd8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b6be:	2318      	movs	r3, #24
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	f7f9 fd35 	bl	8005132 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b6ce:	2358      	movs	r3, #88	; 0x58
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2180      	movs	r1, #128	; 0x80
 800b6d4:	f7f9 fd2d 	bl	8005132 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b6de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2181      	movs	r1, #129	; 0x81
 800b6e6:	f7f9 fd24 	bl	8005132 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	200009b8 	.word	0x200009b8
 800b6f8:	40005c00 	.word	0x40005c00

0800b6fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b712:	4618      	mov	r0, r3
 800b714:	f7f8 f92c 	bl	8003970 <HAL_PCD_Start>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 f96c 	bl	800b9fc <USBD_Get_USB_Status>
 800b724:	4603      	mov	r3, r0
 800b726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b728:	7bbb      	ldrb	r3, [r7, #14]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b084      	sub	sp, #16
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	4608      	mov	r0, r1
 800b73c:	4611      	mov	r1, r2
 800b73e:	461a      	mov	r2, r3
 800b740:	4603      	mov	r3, r0
 800b742:	70fb      	strb	r3, [r7, #3]
 800b744:	460b      	mov	r3, r1
 800b746:	70bb      	strb	r3, [r7, #2]
 800b748:	4613      	mov	r3, r2
 800b74a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b75a:	78bb      	ldrb	r3, [r7, #2]
 800b75c:	883a      	ldrh	r2, [r7, #0]
 800b75e:	78f9      	ldrb	r1, [r7, #3]
 800b760:	f7f8 fa73 	bl	8003c4a <HAL_PCD_EP_Open>
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b768:	7bfb      	ldrb	r3, [r7, #15]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 f946 	bl	800b9fc <USBD_Get_USB_Status>
 800b770:	4603      	mov	r3, r0
 800b772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b774:	7bbb      	ldrb	r3, [r7, #14]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	460b      	mov	r3, r1
 800b788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b798:	78fa      	ldrb	r2, [r7, #3]
 800b79a:	4611      	mov	r1, r2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7f8 fab1 	bl	8003d04 <HAL_PCD_EP_Close>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 f927 	bl	800b9fc <USBD_Get_USB_Status>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7d6:	78fa      	ldrb	r2, [r7, #3]
 800b7d8:	4611      	mov	r1, r2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7f8 fb42 	bl	8003e64 <HAL_PCD_EP_SetStall>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 f908 	bl	800b9fc <USBD_Get_USB_Status>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	4611      	mov	r1, r2
 800b818:	4618      	mov	r0, r3
 800b81a:	f7f8 fb75 	bl	8003f08 <HAL_PCD_EP_ClrStall>
 800b81e:	4603      	mov	r3, r0
 800b820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b822:	7bfb      	ldrb	r3, [r7, #15]
 800b824:	4618      	mov	r0, r3
 800b826:	f000 f8e9 	bl	800b9fc <USBD_Get_USB_Status>
 800b82a:	4603      	mov	r3, r0
 800b82c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b84a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b84c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b850:	2b00      	cmp	r3, #0
 800b852:	da0b      	bge.n	800b86c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b854:	78fb      	ldrb	r3, [r7, #3]
 800b856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b85a:	68f9      	ldr	r1, [r7, #12]
 800b85c:	4613      	mov	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	4413      	add	r3, r2
 800b862:	00db      	lsls	r3, r3, #3
 800b864:	440b      	add	r3, r1
 800b866:	3312      	adds	r3, #18
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	e00b      	b.n	800b884 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b86c:	78fb      	ldrb	r3, [r7, #3]
 800b86e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b872:	68f9      	ldr	r1, [r7, #12]
 800b874:	4613      	mov	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	440b      	add	r3, r1
 800b87e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800b882:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b884:	4618      	mov	r0, r3
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	460b      	mov	r3, r1
 800b89a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8aa:	78fa      	ldrb	r2, [r7, #3]
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f8 f9a7 	bl	8003c02 <HAL_PCD_SetAddress>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 f89e 	bl	800b9fc <USBD_Get_USB_Status>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b086      	sub	sp, #24
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	60f8      	str	r0, [r7, #12]
 800b8d6:	607a      	str	r2, [r7, #4]
 800b8d8:	603b      	str	r3, [r7, #0]
 800b8da:	460b      	mov	r3, r1
 800b8dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b8ec:	7af9      	ldrb	r1, [r7, #11]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	f7f8 fa80 	bl	8003df6 <HAL_PCD_EP_Transmit>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 f87d 	bl	800b9fc <USBD_Get_USB_Status>
 800b902:	4603      	mov	r3, r0
 800b904:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b906:	7dbb      	ldrb	r3, [r7, #22]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	607a      	str	r2, [r7, #4]
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	460b      	mov	r3, r1
 800b91e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b92e:	7af9      	ldrb	r1, [r7, #11]
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	f7f8 fa2e 	bl	8003d94 <HAL_PCD_EP_Receive>
 800b938:	4603      	mov	r3, r0
 800b93a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b93c:	7dfb      	ldrb	r3, [r7, #23]
 800b93e:	4618      	mov	r0, r3
 800b940:	f000 f85c 	bl	800b9fc <USBD_Get_USB_Status>
 800b944:	4603      	mov	r3, r0
 800b946:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b948:	7dbb      	ldrb	r3, [r7, #22]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
	...

0800b954 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <HAL_PCDEx_LPM_Callback+0x18>
 800b966:	2b01      	cmp	r3, #1
 800b968:	d013      	beq.n	800b992 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b96a:	e023      	b.n	800b9b4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	7a5b      	ldrb	r3, [r3, #9]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d007      	beq.n	800b984 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b974:	f000 f83c 	bl	800b9f0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b978:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <HAL_PCDEx_LPM_Callback+0x68>)
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	4a0f      	ldr	r2, [pc, #60]	; (800b9bc <HAL_PCDEx_LPM_Callback+0x68>)
 800b97e:	f023 0306 	bic.w	r3, r3, #6
 800b982:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe fdae 	bl	800a4ec <USBD_LL_Resume>
    break;
 800b990:	e010      	b.n	800b9b4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fe fd91 	bl	800a4c0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7a5b      	ldrb	r3, [r3, #9]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d005      	beq.n	800b9b2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9a6:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <HAL_PCDEx_LPM_Callback+0x68>)
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	4a04      	ldr	r2, [pc, #16]	; (800b9bc <HAL_PCDEx_LPM_Callback+0x68>)
 800b9ac:	f043 0306 	orr.w	r3, r3, #6
 800b9b0:	6113      	str	r3, [r2, #16]
    break;
 800b9b2:	bf00      	nop
}
 800b9b4:	bf00      	nop
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	e000ed00 	.word	0xe000ed00

0800b9c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b9c8:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <USBD_static_malloc+0x18>)
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	20000c94 	.word	0x20000c94

0800b9dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]

}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b9f4:	f7f4 fd74 	bl	80004e0 <SystemClock_Config>
}
 800b9f8:	bf00      	nop
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	4603      	mov	r3, r0
 800ba04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d817      	bhi.n	800ba40 <USBD_Get_USB_Status+0x44>
 800ba10:	a201      	add	r2, pc, #4	; (adr r2, 800ba18 <USBD_Get_USB_Status+0x1c>)
 800ba12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba16:	bf00      	nop
 800ba18:	0800ba29 	.word	0x0800ba29
 800ba1c:	0800ba2f 	.word	0x0800ba2f
 800ba20:	0800ba35 	.word	0x0800ba35
 800ba24:	0800ba3b 	.word	0x0800ba3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2c:	e00b      	b.n	800ba46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	73fb      	strb	r3, [r7, #15]
    break;
 800ba32:	e008      	b.n	800ba46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba34:	2301      	movs	r3, #1
 800ba36:	73fb      	strb	r3, [r7, #15]
    break;
 800ba38:	e005      	b.n	800ba46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3e:	e002      	b.n	800ba46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba40:	2303      	movs	r3, #3
 800ba42:	73fb      	strb	r3, [r7, #15]
    break;
 800ba44:	bf00      	nop
  }
  return usb_status;
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <memset>:
 800ba54:	4402      	add	r2, r0
 800ba56:	4603      	mov	r3, r0
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d100      	bne.n	800ba5e <memset+0xa>
 800ba5c:	4770      	bx	lr
 800ba5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba62:	e7f9      	b.n	800ba58 <memset+0x4>

0800ba64 <__libc_init_array>:
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	4d0d      	ldr	r5, [pc, #52]	; (800ba9c <__libc_init_array+0x38>)
 800ba68:	4c0d      	ldr	r4, [pc, #52]	; (800baa0 <__libc_init_array+0x3c>)
 800ba6a:	1b64      	subs	r4, r4, r5
 800ba6c:	10a4      	asrs	r4, r4, #2
 800ba6e:	2600      	movs	r6, #0
 800ba70:	42a6      	cmp	r6, r4
 800ba72:	d109      	bne.n	800ba88 <__libc_init_array+0x24>
 800ba74:	4d0b      	ldr	r5, [pc, #44]	; (800baa4 <__libc_init_array+0x40>)
 800ba76:	4c0c      	ldr	r4, [pc, #48]	; (800baa8 <__libc_init_array+0x44>)
 800ba78:	f000 f818 	bl	800baac <_init>
 800ba7c:	1b64      	subs	r4, r4, r5
 800ba7e:	10a4      	asrs	r4, r4, #2
 800ba80:	2600      	movs	r6, #0
 800ba82:	42a6      	cmp	r6, r4
 800ba84:	d105      	bne.n	800ba92 <__libc_init_array+0x2e>
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8c:	4798      	blx	r3
 800ba8e:	3601      	adds	r6, #1
 800ba90:	e7ee      	b.n	800ba70 <__libc_init_array+0xc>
 800ba92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba96:	4798      	blx	r3
 800ba98:	3601      	adds	r6, #1
 800ba9a:	e7f2      	b.n	800ba82 <__libc_init_array+0x1e>
 800ba9c:	0800bb10 	.word	0x0800bb10
 800baa0:	0800bb10 	.word	0x0800bb10
 800baa4:	0800bb10 	.word	0x0800bb10
 800baa8:	0800bb14 	.word	0x0800bb14

0800baac <_init>:
 800baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baae:	bf00      	nop
 800bab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab2:	bc08      	pop	{r3}
 800bab4:	469e      	mov	lr, r3
 800bab6:	4770      	bx	lr

0800bab8 <_fini>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr
