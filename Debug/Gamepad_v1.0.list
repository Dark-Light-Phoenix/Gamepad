
Gamepad_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf7c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800c154  0800c154  0001c154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1ac  0800c1ac  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  0800c1ac  0800c1ac  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c1ac  0800c1ac  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1b0  0800c1b0  0001c1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800c1b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc0  20000168  0800c31c  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e28  0800c31c  00020e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c997  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000447c  00000000  00000000  0003cb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  00040ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001296  00000000  00000000  00042868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a39  00000000  00000000  00043afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0f0  00000000  00000000  00066537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9de7  00000000  00000000  00085627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065f4  00000000  00000000  0015f410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00165a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c13c 	.word	0x0800c13c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800c13c 	.word	0x0800c13c

08000218 <Left_Cascade>:
extern uint8_t Circle, Triangle, Chrest, Square;
extern uint8_t L1, L2;
extern uint8_t R1, R2;

void Left_Cascade (uint8_t *Left, uint8_t *Up, uint8_t *Right, uint8_t *Down)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	*Left = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4);
 8000226:	2110      	movs	r1, #16
 8000228:	4811      	ldr	r0, [pc, #68]	; (8000270 <Left_Cascade+0x58>)
 800022a:	f003 f9cd 	bl	80035c8 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	461a      	mov	r2, r3
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	701a      	strb	r2, [r3, #0]
	*Up = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5);
 8000236:	2120      	movs	r1, #32
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <Left_Cascade+0x58>)
 800023a:	f003 f9c5 	bl	80035c8 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	461a      	mov	r2, r3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	701a      	strb	r2, [r3, #0]
	*Right = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_6);
 8000246:	2140      	movs	r1, #64	; 0x40
 8000248:	4809      	ldr	r0, [pc, #36]	; (8000270 <Left_Cascade+0x58>)
 800024a:	f003 f9bd 	bl	80035c8 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	461a      	mov	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	701a      	strb	r2, [r3, #0]
	*Down = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_7);
 8000256:	2180      	movs	r1, #128	; 0x80
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <Left_Cascade+0x58>)
 800025a:	f003 f9b5 	bl	80035c8 <HAL_GPIO_ReadPin>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	701a      	strb	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	48000400 	.word	0x48000400

08000274 <Right_Cascade>:

void Right_Cascade (uint8_t *Circle, uint8_t *Triangle, uint8_t *Chrest, uint8_t *Square)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
 8000280:	603b      	str	r3, [r7, #0]
	*Circle = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_10);
 8000282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f003 f99d 	bl	80035c8 <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	701a      	strb	r2, [r3, #0]
	*Triangle = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_9);
 8000296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f003 f993 	bl	80035c8 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	701a      	strb	r2, [r3, #0]
	*Chrest = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_8);
 80002aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b2:	f003 f989 	bl	80035c8 <HAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	701a      	strb	r2, [r3, #0]
	*Square = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_0);
 80002be:	2101      	movs	r1, #1
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <Right_Cascade+0x64>)
 80002c2:	f003 f981 	bl	80035c8 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	701a      	strb	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	48000400 	.word	0x48000400

080002dc <Triggers>:

void Triggers (uint8_t *L1, uint8_t *L2, uint8_t *R1, uint8_t *R2)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
 80002e8:	603b      	str	r3, [r7, #0]
	*L1 = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3);
 80002ea:	2108      	movs	r1, #8
 80002ec:	4814      	ldr	r0, [pc, #80]	; (8000340 <Triggers+0x64>)
 80002ee:	f003 f96b 	bl	80035c8 <HAL_GPIO_ReadPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	701a      	strb	r2, [r3, #0]
	*L2 = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_15);
 80002fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f003 f961 	bl	80035c8 <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	701a      	strb	r2, [r3, #0]
	*R1 = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_14);
 800030e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f003 f957 	bl	80035c8 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	701a      	strb	r2, [r3, #0]
	*R2 = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_13);
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f003 f94d 	bl	80035c8 <HAL_GPIO_ReadPin>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	701a      	strb	r2, [r3, #0]
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	48000400 	.word	0x48000400

08000344 <ADC_DMA_Init>:

uint32_t adc_buffer1 [BUFFER_SIZE];
uint32_t adc_buffer2 [BUFFER_SIZE];

void ADC_DMA_Init (void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA (&hadc1, (uint32_t *)adc_buffer1, BUFFER_SIZE);
 8000348:	2202      	movs	r2, #2
 800034a:	4907      	ldr	r1, [pc, #28]	; (8000368 <ADC_DMA_Init+0x24>)
 800034c:	4807      	ldr	r0, [pc, #28]	; (800036c <ADC_DMA_Init+0x28>)
 800034e:	f001 fd33 	bl	8001db8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA (&hadc2, (uint32_t *)adc_buffer2, BUFFER_SIZE);
 8000352:	2202      	movs	r2, #2
 8000354:	4906      	ldr	r1, [pc, #24]	; (8000370 <ADC_DMA_Init+0x2c>)
 8000356:	4807      	ldr	r0, [pc, #28]	; (8000374 <ADC_DMA_Init+0x30>)
 8000358:	f001 fd2e 	bl	8001db8 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start (&htim6);
 800035c:	4806      	ldr	r0, [pc, #24]	; (8000378 <ADC_DMA_Init+0x34>)
 800035e:	f005 fe71 	bl	8006044 <HAL_TIM_Base_Start>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000184 	.word	0x20000184
 800036c:	20000324 	.word	0x20000324
 8000370:	2000018c 	.word	0x2000018c
 8000374:	20000390 	.word	0x20000390
 8000378:	20000554 	.word	0x20000554

0800037c <setColor>:

int counter = 0;
int CPB = 0;

void setColor (uint8_t red, uint8_t green, uint8_t blue, int ledIndex)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	603b      	str	r3, [r7, #0]
 8000384:	4603      	mov	r3, r0
 8000386:	71fb      	strb	r3, [r7, #7]
 8000388:	460b      	mov	r3, r1
 800038a:	71bb      	strb	r3, [r7, #6]
 800038c:	4613      	mov	r3, r2
 800038e:	717b      	strb	r3, [r7, #5]
	uint8_t ledData [3] = {green, red, blue};
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	723b      	strb	r3, [r7, #8]
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	727b      	strb	r3, [r7, #9]
 8000398:	797b      	ldrb	r3, [r7, #5]
 800039a:	72bb      	strb	r3, [r7, #10]
	int bitIndex = ledIndex * LEDbits;
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	4613      	mov	r3, r2
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	4413      	add	r3, r2
 80003a4:	00db      	lsls	r3, r3, #3
 80003a6:	617b      	str	r3, [r7, #20]

	for (int color = 0; color < 3; color++)
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	e028      	b.n	8000400 <setColor+0x84>
	{
		for (int bit = 0; bit < 8; bit++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	e01f      	b.n	80003f4 <setColor+0x78>
		{
			if (ledData [color] & (1 << (7 - bit)))
 80003b4:	f107 0208 	add.w	r2, r7, #8
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	4413      	add	r3, r2
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	461a      	mov	r2, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f1c3 0307 	rsb	r3, r3, #7
 80003c6:	fa42 f303 	asr.w	r3, r2, r3
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d005      	beq.n	80003de <setColor+0x62>
			{
				pwmData [bitIndex] = HIGH_DUTY_CICLE;
 80003d2:	4a15      	ldr	r2, [pc, #84]	; (8000428 <setColor+0xac>)
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	2126      	movs	r1, #38	; 0x26
 80003d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003dc:	e004      	b.n	80003e8 <setColor+0x6c>
			}
			else
			{
				pwmData [bitIndex] = LOW_DUTY_CICLE;
 80003de:	4a12      	ldr	r2, [pc, #72]	; (8000428 <setColor+0xac>)
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	2113      	movs	r1, #19
 80003e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			bitIndex++;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	3301      	adds	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
		for (int bit = 0; bit < 8; bit++)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	3301      	adds	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	2b07      	cmp	r3, #7
 80003f8:	dddc      	ble.n	80003b4 <setColor+0x38>
	for (int color = 0; color < 3; color++)
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	3301      	adds	r3, #1
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
 8000402:	2b02      	cmp	r3, #2
 8000404:	ddd3      	ble.n	80003ae <setColor+0x32>
		}
	}
	HAL_TIM_PWM_Start_DMA (&htim17, TIM_CHANNEL_1, (uint32_t*)pwmData, numLEDs * LEDbits);
 8000406:	23c0      	movs	r3, #192	; 0xc0
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <setColor+0xac>)
 800040a:	2100      	movs	r1, #0
 800040c:	4807      	ldr	r0, [pc, #28]	; (800042c <setColor+0xb0>)
 800040e:	f005 fed3 	bl	80061b8 <HAL_TIM_PWM_Start_DMA>
	HAL_Delay (1);
 8000412:	2001      	movs	r0, #1
 8000414:	f001 f90c 	bl	8001630 <HAL_Delay>
	HAL_TIM_PWM_Stop_DMA (&htim17, TIM_CHANNEL_1);
 8000418:	2100      	movs	r1, #0
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <setColor+0xb0>)
 800041c:	f006 f8e4 	bl	80065e8 <HAL_TIM_PWM_Stop_DMA>
}
 8000420:	bf00      	nop
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000194 	.word	0x20000194
 800042c:	200005a0 	.word	0x200005a0

08000430 <CounterSwitch>:

void CounterSwitch (void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	GPIO_PinState Backlight = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_5);
 8000436:	2120      	movs	r1, #32
 8000438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043c:	f003 f8c4 	bl	80035c8 <HAL_GPIO_ReadPin>
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]

	if (Backlight != 1)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d00b      	beq.n	8000462 <CounterSwitch+0x32>
	{
		counter += 1;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <CounterSwitch+0x54>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <CounterSwitch+0x54>)
 8000452:	6013      	str	r3, [r2, #0]
		if (counter > 3)
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <CounterSwitch+0x54>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b03      	cmp	r3, #3
 800045a:	dd02      	ble.n	8000462 <CounterSwitch+0x32>
		{
			counter = 0;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <CounterSwitch+0x54>)
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
		}
	}

	if (counter == 0)
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <CounterSwitch+0x54>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d101      	bne.n	800046e <CounterSwitch+0x3e>
	{
		clearLEDs();
 800046a:	f000 f877 	bl	800055c <clearLEDs>
	}

	if (counter == 1)
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <CounterSwitch+0x54>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d101      	bne.n	800047a <CounterSwitch+0x4a>
	{
		Blinking ();
 8000476:	f000 f807 	bl	8000488 <Blinking>
	}
	else if (counter == 3)
	{
		Wawe();
	}*/
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000314 	.word	0x20000314

08000488 <Blinking>:

void Blinking (void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
	for (int brightness_a = 0; brightness_a <= 255; brightness_a++)
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
 8000492:	e02a      	b.n	80004ea <Blinking+0x62>
	{
		for (int brightness_b = 0; brightness_b <= 255; brightness_b++)
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
 8000498:	e021      	b.n	80004de <Blinking+0x56>
		{
			for (int brightness_c = 0; brightness_c <= 255; brightness_c++)
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	e018      	b.n	80004d2 <Blinking+0x4a>
			{
				for (int i = 0; i < numLEDs; i++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	e00b      	b.n	80004be <Blinking+0x36>
				{
					setColor (brightness_a, brightness_b, brightness_c, i);
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	b2d8      	uxtb	r0, r3
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	b2d9      	uxtb	r1, r3
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	f7ff ff62 	bl	800037c <setColor>
				for (int i = 0; i < numLEDs; i++)
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	3301      	adds	r3, #1
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	ddf0      	ble.n	80004a6 <Blinking+0x1e>
				}
				HAL_Delay(1000);
 80004c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c8:	f001 f8b2 	bl	8001630 <HAL_Delay>
			for (int brightness_c = 0; brightness_c <= 255; brightness_c++)
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	3301      	adds	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2bff      	cmp	r3, #255	; 0xff
 80004d6:	dde3      	ble.n	80004a0 <Blinking+0x18>
		for (int brightness_b = 0; brightness_b <= 255; brightness_b++)
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	3301      	adds	r3, #1
 80004dc:	61bb      	str	r3, [r7, #24]
 80004de:	69bb      	ldr	r3, [r7, #24]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	ddda      	ble.n	800049a <Blinking+0x12>
	for (int brightness_a = 0; brightness_a <= 255; brightness_a++)
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	3301      	adds	r3, #1
 80004e8:	61fb      	str	r3, [r7, #28]
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	ddd1      	ble.n	8000494 <Blinking+0xc>
			}
		}

	}

	for (int brightness_a = 255; brightness_a >= 0; brightness_a--)
 80004f0:	23ff      	movs	r3, #255	; 0xff
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	e02a      	b.n	800054c <Blinking+0xc4>
	{
		for (int brightness_b = 255; brightness_b >= 0; brightness_b--)
 80004f6:	23ff      	movs	r3, #255	; 0xff
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	e021      	b.n	8000540 <Blinking+0xb8>
		{
			for (int brightness_c = 255; brightness_c >= 0; brightness_c--)
 80004fc:	23ff      	movs	r3, #255	; 0xff
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	e018      	b.n	8000534 <Blinking+0xac>
			{
				for (int i = 0; i < numLEDs; i++)
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	e00b      	b.n	8000520 <Blinking+0x98>
				{
					setColor (brightness_a, brightness_b, brightness_c, i);
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	b2d8      	uxtb	r0, r3
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	b2d9      	uxtb	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	b2da      	uxtb	r2, r3
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f7ff ff31 	bl	800037c <setColor>
				for (int i = 0; i < numLEDs; i++)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	2b07      	cmp	r3, #7
 8000524:	ddf0      	ble.n	8000508 <Blinking+0x80>
				}
				HAL_Delay(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f001 f881 	bl	8001630 <HAL_Delay>
			for (int brightness_c = 255; brightness_c >= 0; brightness_c--)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	dae3      	bge.n	8000502 <Blinking+0x7a>
		for (int brightness_b = 255; brightness_b >= 0; brightness_b--)
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	3b01      	subs	r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	2b00      	cmp	r3, #0
 8000544:	dada      	bge.n	80004fc <Blinking+0x74>
	for (int brightness_a = 255; brightness_a >= 0; brightness_a--)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3b01      	subs	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b00      	cmp	r3, #0
 8000550:	dad1      	bge.n	80004f6 <Blinking+0x6e>
			}
		}

	}
}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <clearLEDs>:
		CPB = 7;
	}
}*/

void clearLEDs (void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    for (int i = 0; i < numLEDs; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	e008      	b.n	800057a <clearLEDs+0x1e>
    {
        setColor(0, 0, 0, i);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2000      	movs	r0, #0
 8000570:	f7ff ff04 	bl	800037c <setColor>
    for (int i = 0; i < numLEDs; i++)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b07      	cmp	r3, #7
 800057e:	ddf3      	ble.n	8000568 <clearLEDs+0xc>
    }
    HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t*)pwmData, numLEDs * LEDbits);
 8000580:	23c0      	movs	r3, #192	; 0xc0
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <clearLEDs+0x48>)
 8000584:	2100      	movs	r1, #0
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <clearLEDs+0x4c>)
 8000588:	f005 fe16 	bl	80061b8 <HAL_TIM_PWM_Start_DMA>
    HAL_Delay (1);
 800058c:	2001      	movs	r0, #1
 800058e:	f001 f84f 	bl	8001630 <HAL_Delay>
    HAL_TIM_PWM_Stop_DMA (&htim17, TIM_CHANNEL_1);
 8000592:	2100      	movs	r1, #0
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <clearLEDs+0x4c>)
 8000596:	f006 f827 	bl	80065e8 <HAL_TIM_PWM_Stop_DMA>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000194 	.word	0x20000194
 80005a8:	200005a0 	.word	0x200005a0

080005ac <UpdateButton>:
};

GamepadReport_TypeDef gamepad_report = {0};

void UpdateButton (void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
    gamepad_report.buttons = 0;
 80005b0:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <UpdateButton+0xc4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	801a      	strh	r2, [r3, #0]

    if (Left)      gamepad_report.buttons |= (1 << 0);
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <UpdateButton+0xc8>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <UpdateButton+0x20>
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <UpdateButton+0xc4>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <UpdateButton+0xc4>)
 80005ca:	801a      	strh	r2, [r3, #0]
    if (Up)        gamepad_report.buttons |= (1 << 1);
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <UpdateButton+0xcc>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d006      	beq.n	80005e2 <UpdateButton+0x36>
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <UpdateButton+0xc4>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <UpdateButton+0xc4>)
 80005e0:	801a      	strh	r2, [r3, #0]
    if (Right)     gamepad_report.buttons |= (1 << 2);
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <UpdateButton+0xd0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <UpdateButton+0x4c>
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <UpdateButton+0xc4>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <UpdateButton+0xc4>)
 80005f6:	801a      	strh	r2, [r3, #0]
    if (Down)      gamepad_report.buttons |= (1 << 3);
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <UpdateButton+0xd4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <UpdateButton+0x62>
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <UpdateButton+0xc4>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <UpdateButton+0xc4>)
 800060c:	801a      	strh	r2, [r3, #0]
    if (Circle)    gamepad_report.buttons |= (1 << 4);
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <UpdateButton+0xd8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <UpdateButton+0x78>
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <UpdateButton+0xc4>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <UpdateButton+0xc4>)
 8000622:	801a      	strh	r2, [r3, #0]
    if (Triangle)  gamepad_report.buttons |= (1 << 5);
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <UpdateButton+0xdc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d006      	beq.n	800063a <UpdateButton+0x8e>
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <UpdateButton+0xc4>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	f043 0320 	orr.w	r3, r3, #32
 8000634:	b29a      	uxth	r2, r3
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <UpdateButton+0xc4>)
 8000638:	801a      	strh	r2, [r3, #0]
    if (Chrest)    gamepad_report.buttons |= (1 << 6);
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <UpdateButton+0xe0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <UpdateButton+0xa4>
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <UpdateButton+0xc4>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <UpdateButton+0xc4>)
 800064e:	801a      	strh	r2, [r3, #0]
    if (Square)    gamepad_report.buttons |= (1 << 7);
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <UpdateButton+0xe4>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d006      	beq.n	8000666 <UpdateButton+0xba>
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <UpdateButton+0xc4>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <UpdateButton+0xc4>)
 8000664:	801a      	strh	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	20000318 	.word	0x20000318
 8000674:	2000064c 	.word	0x2000064c
 8000678:	2000064d 	.word	0x2000064d
 800067c:	2000064e 	.word	0x2000064e
 8000680:	2000064f 	.word	0x2000064f
 8000684:	20000650 	.word	0x20000650
 8000688:	20000651 	.word	0x20000651
 800068c:	20000652 	.word	0x20000652
 8000690:	20000653 	.word	0x20000653

08000694 <UpdateJoystick>:

void UpdateJoystick (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
    gamepad_report.x1 = (uint8_t)((adc_buffer1 [0] * 255 / 4095) - 128);
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <UpdateJoystick+0xa0>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4613      	mov	r3, r2
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	1a9a      	subs	r2, r3, r2
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <UpdateJoystick+0xa4>)
 80006a4:	fba3 1302 	umull	r1, r3, r3, r2
 80006a8:	1ad2      	subs	r2, r2, r3
 80006aa:	0852      	lsrs	r2, r2, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	0adb      	lsrs	r3, r3, #11
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	3b80      	subs	r3, #128	; 0x80
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	b25a      	sxtb	r2, r3
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <UpdateJoystick+0xa8>)
 80006ba:	709a      	strb	r2, [r3, #2]
    gamepad_report.y1 = (uint8_t)((adc_buffer1 [1] * 255 / 4095) - 128);
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <UpdateJoystick+0xa0>)
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	4613      	mov	r3, r2
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	1a9a      	subs	r2, r3, r2
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <UpdateJoystick+0xa4>)
 80006c8:	fba3 1302 	umull	r1, r3, r3, r2
 80006cc:	1ad2      	subs	r2, r2, r3
 80006ce:	0852      	lsrs	r2, r2, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	0adb      	lsrs	r3, r3, #11
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3b80      	subs	r3, #128	; 0x80
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	b25a      	sxtb	r2, r3
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <UpdateJoystick+0xa8>)
 80006de:	70da      	strb	r2, [r3, #3]
    gamepad_report.x2 = (uint8_t)((adc_buffer2 [0] * 255 / 4095) - 128);
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <UpdateJoystick+0xac>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4613      	mov	r3, r2
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	1a9a      	subs	r2, r3, r2
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <UpdateJoystick+0xa4>)
 80006ec:	fba3 1302 	umull	r1, r3, r3, r2
 80006f0:	1ad2      	subs	r2, r2, r3
 80006f2:	0852      	lsrs	r2, r2, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	0adb      	lsrs	r3, r3, #11
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3b80      	subs	r3, #128	; 0x80
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	b25a      	sxtb	r2, r3
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <UpdateJoystick+0xa8>)
 8000702:	711a      	strb	r2, [r3, #4]
    gamepad_report.y2 = (uint8_t)((adc_buffer2 [1] * 255 / 4095) - 128);
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <UpdateJoystick+0xac>)
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	021b      	lsls	r3, r3, #8
 800070c:	1a9a      	subs	r2, r3, r2
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <UpdateJoystick+0xa4>)
 8000710:	fba3 1302 	umull	r1, r3, r3, r2
 8000714:	1ad2      	subs	r2, r2, r3
 8000716:	0852      	lsrs	r2, r2, #1
 8000718:	4413      	add	r3, r2
 800071a:	0adb      	lsrs	r3, r3, #11
 800071c:	b2db      	uxtb	r3, r3
 800071e:	3b80      	subs	r3, #128	; 0x80
 8000720:	b2db      	uxtb	r3, r3
 8000722:	b25a      	sxtb	r2, r3
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <UpdateJoystick+0xa8>)
 8000726:	715a      	strb	r2, [r3, #5]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000184 	.word	0x20000184
 8000738:	00100101 	.word	0x00100101
 800073c:	20000318 	.word	0x20000318
 8000740:	2000018c 	.word	0x2000018c

08000744 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if (hadc -> Instance == hadc1.Instance || hadc->Instance == hadc2.Instance)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d005      	beq.n	8000764 <HAL_ADC_ConvCpltCallback+0x20>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_ADC_ConvCpltCallback+0x30>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	429a      	cmp	r2, r3
 8000762:	d101      	bne.n	8000768 <HAL_ADC_ConvCpltCallback+0x24>
	{
		SendReport ();
 8000764:	f000 f808 	bl	8000778 <SendReport>
	}
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000324 	.word	0x20000324
 8000774:	20000390 	.word	0x20000390

08000778 <SendReport>:

void SendReport (void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    UpdateButton();
 800077c:	f7ff ff16 	bl	80005ac <UpdateButton>
    UpdateJoystick();
 8000780:	f7ff ff88 	bl	8000694 <UpdateJoystick>
    USBD_HID_SendReport (&hUsbDeviceFS, (uint8_t *) &gamepad_report, sizeof (gamepad_report));
 8000784:	2206      	movs	r2, #6
 8000786:	4903      	ldr	r1, [pc, #12]	; (8000794 <SendReport+0x1c>)
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <SendReport+0x20>)
 800078a:	f009 ff19 	bl	800a5c0 <USBD_HID_SendReport>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000318 	.word	0x20000318
 8000798:	20000668 	.word	0x20000668

0800079c <HID_Report_Output>:

extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim3;

void HID_Report_Output (uint8_t *report)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	left_motor = report [0];
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HID_Report_Output+0x30>)
 80007aa:	701a      	strb	r2, [r3, #0]
	right_motor = report [1];
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	785a      	ldrb	r2, [r3, #1]
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <HID_Report_Output+0x34>)
 80007b2:	701a      	strb	r2, [r3, #0]

	ControlVibration (left_motor, right_motor);
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HID_Report_Output+0x30>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <HID_Report_Output+0x34>)
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f808 	bl	80007d4 <ControlVibration>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000031e 	.word	0x2000031e
 80007d0:	2000031f 	.word	0x2000031f

080007d4 <ControlVibration>:

void ControlVibration (uint8_t left_depth, uint8_t right_depth)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	460a      	mov	r2, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_depth);
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <ControlVibration+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_depth);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <ControlVibration+0x30>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000508 	.word	0x20000508
 8000804:	200004bc 	.word	0x200004bc

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fe9f 	bl	800154e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f84e 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 fb36 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000818:	f000 fafa 	bl	8000e10 <MX_DMA_Init>
  MX_ADC1_Init();
 800081c:	f000 f892 	bl	8000944 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000820:	f000 f90a 	bl	8000a38 <MX_ADC2_Init>
  MX_USB_Device_Init();
 8000824:	f00b f848 	bl	800b8b8 <MX_USB_Device_Init>
  MX_TIM6_Init();
 8000828:	f000 fa42 	bl	8000cb0 <MX_TIM6_Init>
  MX_TIM3_Init();
 800082c:	f000 f96c 	bl	8000b08 <MX_TIM3_Init>
  MX_TIM17_Init();
 8000830:	f000 fa76 	bl	8000d20 <MX_TIM17_Init>
  MX_TIM4_Init();
 8000834:	f000 f9e0 	bl	8000bf8 <MX_TIM4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Left_Cascade (&Left, &Up, &Right, &Down);
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <main+0x70>)
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <main+0x74>)
 800083c:	4910      	ldr	r1, [pc, #64]	; (8000880 <main+0x78>)
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <main+0x7c>)
 8000840:	f7ff fcea 	bl	8000218 <Left_Cascade>
	  Right_Cascade (&Circle, &Triangle, &Chrest, &Square);
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <main+0x80>)
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <main+0x84>)
 8000848:	4911      	ldr	r1, [pc, #68]	; (8000890 <main+0x88>)
 800084a:	4812      	ldr	r0, [pc, #72]	; (8000894 <main+0x8c>)
 800084c:	f7ff fd12 	bl	8000274 <Right_Cascade>
	  Triggers (&L1, &L2, &R1, &R2);
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <main+0x90>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <main+0x94>)
 8000854:	4912      	ldr	r1, [pc, #72]	; (80008a0 <main+0x98>)
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <main+0x9c>)
 8000858:	f7ff fd40 	bl	80002dc <Triggers>
	  ADC_DMA_Init();
 800085c:	f7ff fd72 	bl	8000344 <ADC_DMA_Init>
	  CounterSwitch ();
 8000860:	f7ff fde6 	bl	8000430 <CounterSwitch>
	  HAL_ADC_ConvCpltCallback (hadc);
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <main+0xa0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff6b 	bl	8000744 <HAL_ADC_ConvCpltCallback>
	  HID_Report_Output (&report);
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <main+0xa4>)
 8000870:	f7ff ff94 	bl	800079c <HID_Report_Output>
	  Left_Cascade (&Left, &Up, &Right, &Down);
 8000874:	e7e0      	b.n	8000838 <main+0x30>
 8000876:	bf00      	nop
 8000878:	2000064f 	.word	0x2000064f
 800087c:	2000064e 	.word	0x2000064e
 8000880:	2000064d 	.word	0x2000064d
 8000884:	2000064c 	.word	0x2000064c
 8000888:	20000653 	.word	0x20000653
 800088c:	20000652 	.word	0x20000652
 8000890:	20000651 	.word	0x20000651
 8000894:	20000650 	.word	0x20000650
 8000898:	20000657 	.word	0x20000657
 800089c:	20000656 	.word	0x20000656
 80008a0:	20000655 	.word	0x20000655
 80008a4:	20000654 	.word	0x20000654
 80008a8:	20000658 	.word	0x20000658
 80008ac:	20000320 	.word	0x20000320

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	2238      	movs	r2, #56	; 0x38
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f00b fc10 	bl	800c0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d6:	f004 fbc3 	bl	8005060 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e8:	2303      	movs	r3, #3
 80008ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80008ec:	2303      	movs	r3, #3
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80008f0:	230c      	movs	r3, #12
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	4618      	mov	r0, r3
 8000906:	f004 fc5f 	bl	80051c8 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000910:	f000 fb38 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000918:	2302      	movs	r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f004 ff5d 	bl	80057ec <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000938:	f000 fb24 	bl	8000f84 <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3750      	adds	r7, #80	; 0x50
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2220      	movs	r2, #32
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f00b fbc1 	bl	800c0e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000962:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <MX_ADC1_Init+0xec>)
 8000964:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000968:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <MX_ADC1_Init+0xec>)
 800096c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000970:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000972:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <MX_ADC1_Init+0xec>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000978:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <MX_ADC1_Init+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <MX_ADC1_Init+0xec>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <MX_ADC1_Init+0xec>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <MX_ADC1_Init+0xec>)
 800098c:	2204      	movs	r2, #4
 800098e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <MX_ADC1_Init+0xec>)
 8000992:	2200      	movs	r2, #0
 8000994:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <MX_ADC1_Init+0xec>)
 8000998:	2200      	movs	r2, #0
 800099a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <MX_ADC1_Init+0xec>)
 800099e:	2201      	movs	r2, #1
 80009a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009ac:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009bc:	2201      	movs	r2, #1
 80009be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d0:	4817      	ldr	r0, [pc, #92]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009d2:	f001 f86d 	bl	8001ab0 <HAL_ADC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80009dc:	f000 fad2 	bl	8000f84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_ADC1_Init+0xec>)
 80009ec:	f001 ffdc 	bl	80029a8 <HAL_ADCEx_MultiModeConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80009f6:	f000 fac5 	bl	8000f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_ADC1_Init+0xf0>)
 80009fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fe:	2306      	movs	r3, #6
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a06:	237f      	movs	r3, #127	; 0x7f
 8000a08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	; (8000a30 <MX_ADC1_Init+0xec>)
 8000a18:	f001 fa96 	bl	8001f48 <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a22:	f000 faaf 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000324 	.word	0x20000324
 8000a34:	0c900008 	.word	0x0c900008

08000a38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2220      	movs	r2, #32
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00b fb4d 	bl	800c0e4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a4c:	4a2c      	ldr	r2, [pc, #176]	; (8000b00 <MX_ADC2_Init+0xc8>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a56:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a58:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a64:	4b25      	ldr	r3, [pc, #148]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a92:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ab6:	4811      	ldr	r0, [pc, #68]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000ab8:	f000 fffa 	bl	8001ab0 <HAL_ADC_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000ac2:	f000 fa5f 	bl	8000f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_ADC2_Init+0xcc>)
 8000ac8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aca:	2306      	movs	r3, #6
 8000acc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ad2:	237f      	movs	r3, #127	; 0x7f
 8000ad4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_ADC2_Init+0xc4>)
 8000ae4:	f001 fa30 	bl	8001f48 <HAL_ADC_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000aee:	f000 fa49 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000390 	.word	0x20000390
 8000b00:	50000100 	.word	0x50000100
 8000b04:	08600004 	.word	0x08600004

08000b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b3c:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <MX_TIM3_Init+0xec>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b42:	f240 128f 	movw	r2, #399	; 0x18f
 8000b46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 599;
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b50:	f240 2257 	movw	r2, #599	; 0x257
 8000b54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b62:	4823      	ldr	r0, [pc, #140]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b64:	f005 fa16 	bl	8005f94 <HAL_TIM_Base_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b6e:	f000 fa09 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b80:	f006 f88e 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b8a:	f000 f9fb 	bl	8000f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b8e:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b90:	f005 faba 	bl	8006108 <HAL_TIM_PWM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b9a:	f000 f9f3 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000bae:	f006 fedd 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bb8:	f000 f9e4 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbc:	2360      	movs	r3, #96	; 0x60
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2204      	movs	r2, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000bd4:	f005 ff50 	bl	8006a78 <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000bde:	f000 f9d1 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000be4:	f000 fb9a 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000be8:	bf00      	nop
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200004bc 	.word	0x200004bc
 8000bf4:	40000400 	.word	0x40000400

08000bf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <MX_TIM4_Init+0xb4>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 399;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c24:	f240 128f 	movw	r2, #399	; 0x18f
 8000c28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 599;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c32:	f240 2257 	movw	r2, #599	; 0x257
 8000c36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c46:	f005 fa5f 	bl	8006108 <HAL_TIM_PWM_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000c50:	f000 f998 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c64:	f006 fe82 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000c6e:	f000 f989 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c72:	2360      	movs	r3, #96	; 0x60
 8000c74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	2208      	movs	r2, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c8a:	f005 fef5 	bl	8006a78 <HAL_TIM_PWM_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000c94:	f000 f976 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <MX_TIM4_Init+0xb0>)
 8000c9a:	f000 fb3f 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000508 	.word	0x20000508
 8000cac:	40000800 	.word	0x40000800

08000cb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_TIM6_Init+0x68>)
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <MX_TIM6_Init+0x6c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_TIM6_Init+0x68>)
 8000cc8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000ccc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_TIM6_Init+0x68>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_TIM6_Init+0x68>)
 8000cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cda:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_TIM6_Init+0x68>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_TIM6_Init+0x68>)
 8000ce4:	f005 f956 	bl	8005f94 <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000cee:	f000 f949 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_TIM6_Init+0x68>)
 8000d00:	f006 fe34 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d0a:	f000 f93b 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000554 	.word	0x20000554
 8000d1c:	40001000 	.word	0x40001000

08000d20 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2234      	movs	r2, #52	; 0x34
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00b f9cf 	bl	800c0e4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d48:	4a30      	ldr	r2, [pc, #192]	; (8000e0c <MX_TIM17_Init+0xec>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 59;
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d5a:	223b      	movs	r2, #59	; 0x3b
 8000d5c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d70:	4825      	ldr	r0, [pc, #148]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d72:	f005 f90f 	bl	8005f94 <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000d7c:	f000 f902 	bl	8000f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000d82:	f005 f9c1 	bl	8006108 <HAL_TIM_PWM_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f000 f8fa 	bl	8000f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d90:	2360      	movs	r3, #96	; 0x60
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	4814      	ldr	r0, [pc, #80]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000db6:	f005 fe5f 	bl	8006a78 <HAL_TIM_PWM_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000dc0:	f000 f8e0 	bl	8000f84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ddc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4807      	ldr	r0, [pc, #28]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000dec:	f006 fe40 	bl	8007a70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000df6:	f000 f8c5 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000dfa:	4803      	ldr	r0, [pc, #12]	; (8000e08 <MX_TIM17_Init+0xe8>)
 8000dfc:	f000 fa8e 	bl	800131c <HAL_TIM_MspPostInit>

}
 8000e00:	bf00      	nop
 8000e02:	3750      	adds	r7, #80	; 0x50
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200005a0 	.word	0x200005a0
 8000e0c:	40014800 	.word	0x40014800

08000e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_DMA_Init+0x70>)
 8000e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <MX_DMA_Init+0x70>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6493      	str	r3, [r2, #72]	; 0x48
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_DMA_Init+0x70>)
 8000e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_DMA_Init+0x70>)
 8000e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_DMA_Init+0x70>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6493      	str	r3, [r2, #72]	; 0x48
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_DMA_Init+0x70>)
 8000e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200b      	movs	r0, #11
 8000e4c:	f001 ff2b 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e50:	200b      	movs	r0, #11
 8000e52:	f001 ff42 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	200c      	movs	r0, #12
 8000e5c:	f001 ff23 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e60:	200c      	movs	r0, #12
 8000e62:	f001 ff3a 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	200d      	movs	r0, #13
 8000e6c:	f001 ff1b 	bl	8002ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e70:	200d      	movs	r0, #13
 8000e72:	f001 ff32 	bl	8002cda <HAL_NVIC_EnableIRQ>

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a36      	ldr	r2, [pc, #216]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb2:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a2a      	ldr	r2, [pc, #168]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <MX_GPIO_Init+0xf4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2101      	movs	r1, #1
 8000efe:	481f      	ldr	r0, [pc, #124]	; (8000f7c <MX_GPIO_Init+0xf8>)
 8000f00:	f002 fb7a 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4819      	ldr	r0, [pc, #100]	; (8000f80 <MX_GPIO_Init+0xfc>)
 8000f1a:	f002 f9d3 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 PA8 PA9
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8000f1e:	f248 7328 	movw	r3, #34600	; 0x8728
 8000f22:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f002 f9c5 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480a      	ldr	r0, [pc, #40]	; (8000f7c <MX_GPIO_Init+0xf8>)
 8000f52:	f002 f9b7 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000f56:	23f8      	movs	r3, #248	; 0xf8
 8000f58:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_GPIO_Init+0xf8>)
 8000f6a:	f002 f9ab 	bl	80032c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	48001800 	.word	0x48001800

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fc6:	f004 f8ef 	bl	80051a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b09c      	sub	sp, #112	; 0x70
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	f107 0318 	add.w	r3, r7, #24
 8000ff4:	2244      	movs	r2, #68	; 0x44
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00b f873 	bl	800c0e4 <memset>
  if(hadc->Instance==ADC1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001006:	d16a      	bne.n	80010de <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800100e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001012:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fdcb 	bl	8005bb4 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001024:	f7ff ffae 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <HAL_ADC_MspInit+0x1ec>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	4a65      	ldr	r2, [pc, #404]	; (80011c4 <HAL_ADC_MspInit+0x1ec>)
 8001030:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001032:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <HAL_ADC_MspInit+0x1ec>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d10b      	bne.n	8001052 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a62      	ldr	r2, [pc, #392]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001040:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a5c      	ldr	r2, [pc, #368]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800106a:	2305      	movs	r3, #5
 800106c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	2303      	movs	r3, #3
 8001070:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f002 f920 	bl	80032c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 8001086:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_ADC_MspInit+0x1f8>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 800108c:	2205      	movs	r2, #5
 800108e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001090:	4b4e      	ldr	r3, [pc, #312]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800109c:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a2:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010aa:	4b48      	ldr	r3, [pc, #288]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 80010ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010b2:	4b46      	ldr	r3, [pc, #280]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 80010b4:	2220      	movs	r2, #32
 80010b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 80010ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010c0:	4842      	ldr	r0, [pc, #264]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 80010c2:	f001 fe25 	bl	8002d10 <HAL_DMA_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80010cc:	f7ff ff5a 	bl	8000f84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a3e      	ldr	r2, [pc, #248]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
 80010d6:	4a3d      	ldr	r2, [pc, #244]	; (80011cc <HAL_ADC_MspInit+0x1f4>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010dc:	e06e      	b.n	80011bc <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a3c      	ldr	r2, [pc, #240]	; (80011d4 <HAL_ADC_MspInit+0x1fc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d169      	bne.n	80011bc <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	4618      	mov	r0, r3
 80010fa:	f004 fd5b 	bl	8005bb4 <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8001104:	f7ff ff3e 	bl	8000f84 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_ADC_MspInit+0x1ec>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <HAL_ADC_MspInit+0x1ec>)
 8001110:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001112:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <HAL_ADC_MspInit+0x1ec>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10b      	bne.n	8001132 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001120:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_ADC_MspInit+0x1f0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800114a:	2342      	movs	r3, #66	; 0x42
 800114c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114e:	2303      	movs	r3, #3
 8001150:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f002 f8b0 	bl	80032c4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 8001166:	4a1d      	ldr	r2, [pc, #116]	; (80011dc <HAL_ADC_MspInit+0x204>)
 8001168:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 800116c:	2224      	movs	r2, #36	; 0x24
 800116e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 8001184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001188:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 800118c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001190:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 8001194:	2220      	movs	r2, #32
 8001196:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 800119a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 80011a2:	f001 fdb5 	bl	8002d10 <HAL_DMA_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 80011ac:	f7ff feea 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_ADC_MspInit+0x200>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6293      	str	r3, [r2, #40]	; 0x28
}
 80011bc:	bf00      	nop
 80011be:	3770      	adds	r7, #112	; 0x70
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000065c 	.word	0x2000065c
 80011c8:	40021000 	.word	0x40021000
 80011cc:	200003fc 	.word	0x200003fc
 80011d0:	40020008 	.word	0x40020008
 80011d4:	50000100 	.word	0x50000100
 80011d8:	2000045c 	.word	0x2000045c
 80011dc:	4002001c 	.word	0x4002001c

080011e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a35      	ldr	r2, [pc, #212]	; (80012c4 <HAL_TIM_Base_MspInit+0xe4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10c      	bne.n	800120c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a34      	ldr	r2, [pc, #208]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800120a:	e056      	b.n	80012ba <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a2e      	ldr	r2, [pc, #184]	; (80012cc <HAL_TIM_Base_MspInit+0xec>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10c      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	6593      	str	r3, [r2, #88]	; 0x58
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
}
 800122e:	e044      	b.n	80012ba <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM17)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <HAL_TIM_Base_MspInit+0xf0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d13f      	bne.n	80012ba <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123e:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6613      	str	r3, [r2, #96]	; 0x60
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_TIM_Base_MspInit+0xe8>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 8001254:	4a20      	ldr	r2, [pc, #128]	; (80012d8 <HAL_TIM_Base_MspInit+0xf8>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 800125a:	2254      	movs	r2, #84	; 0x54
 800125c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 8001260:	2210      	movs	r2, #16
 8001262:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 8001272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001276:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 800127a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127e:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_NORMAL;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 8001288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 8001290:	f001 fd3e 	bl	8002d10 <HAL_DMA_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 800129a:	f7ff fe73 	bl	8000f84 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
 80012a4:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_TIM_Base_MspInit+0xf4>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	201a      	movs	r0, #26
 80012b0:	f001 fcf9 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80012b4:	201a      	movs	r0, #26
 80012b6:	f001 fd10 	bl	8002cda <HAL_NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40000400 	.word	0x40000400
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40001000 	.word	0x40001000
 80012d0:	40014800 	.word	0x40014800
 80012d4:	200005ec 	.word	0x200005ec
 80012d8:	40020030 	.word	0x40020030

080012dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_TIM_PWM_MspInit+0x38>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10b      	bne.n	8001306 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_TIM_PWM_MspInit+0x3c>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_TIM_PWM_MspInit+0x3c>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6593      	str	r3, [r2, #88]	; 0x58
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_TIM_PWM_MspInit+0x3c>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40000800 	.word	0x40000800
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a34      	ldr	r2, [pc, #208]	; (800140c <HAL_TIM_MspPostInit+0xf0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d11d      	bne.n	800137a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a33      	ldr	r2, [pc, #204]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001356:	2310      	movs	r3, #16
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135a:	2312      	movs	r3, #18
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001366:	2302      	movs	r3, #2
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f001 ffa6 	bl	80032c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001378:	e044      	b.n	8001404 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a25      	ldr	r2, [pc, #148]	; (8001414 <HAL_TIM_MspPostInit+0xf8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d11d      	bne.n	80013c0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013ae:	2302      	movs	r3, #2
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4817      	ldr	r0, [pc, #92]	; (8001418 <HAL_TIM_MspPostInit+0xfc>)
 80013ba:	f001 ff83 	bl	80032c4 <HAL_GPIO_Init>
}
 80013be:	e021      	b.n	8001404 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM17)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a15      	ldr	r2, [pc, #84]	; (800141c <HAL_TIM_MspPostInit+0x100>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d11c      	bne.n	8001404 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_TIM_MspPostInit+0xf4>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80013f2:	2301      	movs	r3, #1
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f001 ff60 	bl	80032c4 <HAL_GPIO_Init>
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40000400 	.word	0x40000400
 8001410:	40021000 	.word	0x40021000
 8001414:	40000800 	.word	0x40000800
 8001418:	48000400 	.word	0x48000400
 800141c:	40014800 	.word	0x40014800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 f8c2 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <DMA1_Channel1_IRQHandler+0x10>)
 800147a:	f001 fdd3 	bl	8003024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200003fc 	.word	0x200003fc

08001488 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <DMA1_Channel2_IRQHandler+0x10>)
 800148e:	f001 fdc9 	bl	8003024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000045c 	.word	0x2000045c

0800149c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <DMA1_Channel3_IRQHandler+0x10>)
 80014a2:	f001 fdbf 	bl	8003024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200005ec 	.word	0x200005ec

080014b0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USB_LP_IRQHandler+0x10>)
 80014b6:	f002 f9a7 	bl	8003808 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000b38 	.word	0x20000b38

080014c4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80014ca:	f005 f985 	bl	80067d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200005a0 	.word	0x200005a0

080014d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001500:	f7ff ffea 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <LoopForever+0x6>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	; (800153c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <LoopForever+0xe>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	; (8001548 <LoopForever+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800152a:	f00a fde3 	bl	800c0f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800152e:	f7ff f96b 	bl	8000808 <main>

08001532 <LoopForever>:

LoopForever:
    b LoopForever
 8001532:	e7fe      	b.n	8001532 <LoopForever>
  ldr   r0, =_estack
 8001534:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001540:	0800c1b4 	.word	0x0800c1b4
  ldr r2, =_sbss
 8001544:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001548:	20000e28 	.word	0x20000e28

0800154c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC1_2_IRQHandler>

0800154e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f001 fb99 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f80e 	bl	8001580 <HAL_InitTick>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e001      	b.n	8001574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001570:	f7ff fd0e 	bl	8000f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001574:	79fb      	ldrb	r3, [r7, #7]

}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_InitTick+0x68>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d022      	beq.n	80015da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_InitTick+0x6c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_InitTick+0x68>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fba4 	bl	8002cf6 <HAL_SYSTICK_Config>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10f      	bne.n	80015d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	d809      	bhi.n	80015ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ba:	2200      	movs	r2, #0
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	f04f 30ff 	mov.w	r0, #4294967295
 80015c2:	f001 fb70 	bl	8002ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_InitTick+0x70>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e007      	b.n	80015de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e004      	b.n	80015de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e001      	b.n	80015de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_IncTick+0x1c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x20>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4413      	add	r3, r2
 8001602:	4a03      	ldr	r2, [pc, #12]	; (8001610 <HAL_IncTick+0x1c>)
 8001604:	6013      	str	r3, [r2, #0]
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20000660 	.word	0x20000660
 8001614:	20000008 	.word	0x20000008

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000660 	.word	0x20000660

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d004      	beq.n	8001654 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_Delay+0x40>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001654:	bf00      	nop
 8001656:	f7ff ffdf 	bl	8001618 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	429a      	cmp	r2, r3
 8001664:	d8f7      	bhi.n	8001656 <HAL_Delay+0x26>
  {
  }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000008 	.word	0x20000008

08001674 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	609a      	str	r2, [r3, #8]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3360      	adds	r3, #96	; 0x60
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <LL_ADC_SetOffset+0x44>)
 80016fe:	4013      	ands	r3, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	4313      	orrs	r3, r2
 800170c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001714:	bf00      	nop
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	03fff000 	.word	0x03fff000

08001724 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3360      	adds	r3, #96	; 0x60
 8001732:	461a      	mov	r2, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3360      	adds	r3, #96	; 0x60
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800177a:	bf00      	nop
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001786:	b480      	push	{r7}
 8001788:	b087      	sub	sp, #28
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3360      	adds	r3, #96	; 0x60
 8001796:	461a      	mov	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80017b0:	bf00      	nop
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3360      	adds	r3, #96	; 0x60
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	615a      	str	r2, [r3, #20]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800183e:	b480      	push	{r7}
 8001840:	b087      	sub	sp, #28
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3330      	adds	r3, #48	; 0x30
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	4413      	add	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	211f      	movs	r1, #31
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0e9b      	lsrs	r3, r3, #26
 8001876:	f003 011f 	and.w	r1, r3, #31
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	431a      	orrs	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800188a:	bf00      	nop
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001896:	b480      	push	{r7}
 8001898:	b087      	sub	sp, #28
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3314      	adds	r3, #20
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	0e5b      	lsrs	r3, r3, #25
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	0d1b      	lsrs	r3, r3, #20
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	2107      	movs	r1, #7
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	0d1b      	lsrs	r3, r3, #20
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001904:	43db      	mvns	r3, r3
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0318 	and.w	r3, r3, #24
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001910:	40d9      	lsrs	r1, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	400b      	ands	r3, r1
 8001916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191a:	431a      	orrs	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	0007ffff 	.word	0x0007ffff

08001934 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 031f 	and.w	r3, r3, #31
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6093      	str	r3, [r2, #8]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001988:	d101      	bne.n	800198e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019d8:	d101      	bne.n	80019de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <LL_ADC_IsEnabled+0x18>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_ADC_IsEnabled+0x1a>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4e:	f043 0204 	orr.w	r2, r3, #4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d101      	bne.n	8001aa0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e167      	b.n	8001d9a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fa7d 	bl	8000fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff3f 	bl	8001974 <LL_ADC_IsDeepPowerDownEnabled>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff25 	bl	8001950 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff5a 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d115      	bne.n	8001b42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff3e 	bl	800199c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b20:	4ba0      	ldr	r3, [pc, #640]	; (8001da4 <HAL_ADC_Init+0x2f4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	4aa0      	ldr	r2, [pc, #640]	; (8001da8 <HAL_ADC_Init+0x2f8>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	3301      	adds	r3, #1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff3c 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	f043 0210 	orr.w	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff75 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001b78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 8100 	bne.w	8001d88 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 80fc 	bne.w	8001d88 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b98:	f043 0202 	orr.w	r2, r3, #2
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff35 	bl	8001a14 <LL_ADC_IsEnabled>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d111      	bne.n	8001bd4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001bb4:	f7ff ff2e 	bl	8001a14 <LL_ADC_IsEnabled>
 8001bb8:	4604      	mov	r4, r0
 8001bba:	487c      	ldr	r0, [pc, #496]	; (8001dac <HAL_ADC_Init+0x2fc>)
 8001bbc:	f7ff ff2a 	bl	8001a14 <LL_ADC_IsEnabled>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4323      	orrs	r3, r4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4878      	ldr	r0, [pc, #480]	; (8001db0 <HAL_ADC_Init+0x300>)
 8001bd0:	f7ff fd50 	bl	8001674 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7f5b      	ldrb	r3, [r3, #29]
 8001bd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001be4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001bea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d106      	bne.n	8001c10 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	045b      	lsls	r3, r3, #17
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <HAL_ADC_Init+0x304>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff14 	bl	8001a88 <LL_ADC_INJ_IsConversionOngoing>
 8001c60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d16d      	bne.n	8001d44 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d16a      	bne.n	8001d44 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c8a:	f023 0302 	bic.w	r3, r3, #2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d017      	beq.n	8001cd0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001cb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6911      	ldr	r1, [r2, #16]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001cce:	e013      	b.n	8001cf8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d118      	bne.n	8001d34 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d24:	430a      	orrs	r2, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	e007      	b.n	8001d44 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10c      	bne.n	8001d66 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f023 010f 	bic.w	r1, r3, #15
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020f 	bic.w	r2, r2, #15
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d86:	e007      	b.n	8001d98 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000000 	.word	0x20000000
 8001da8:	053e2d63 	.word	0x053e2d63
 8001dac:	50000100 	.word	0x50000100
 8001db0:	50000300 	.word	0x50000300
 8001db4:	fff04007 	.word	0xfff04007

08001db8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc4:	4851      	ldr	r0, [pc, #324]	; (8001f0c <HAL_ADC_Start_DMA+0x154>)
 8001dc6:	f7ff fdb5 	bl	8001934 <LL_ADC_GetMultimode>
 8001dca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fe46 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 808f 	bne.w	8001efc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_Start_DMA+0x34>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e08a      	b.n	8001f02 <HAL_ADC_Start_DMA+0x14a>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d002      	beq.n	8001e06 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	d173      	bne.n	8001eee <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 fc8e 	bl	8002728 <ADC_Enable>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d166      	bne.n	8001ee4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <HAL_ADC_Start_DMA+0x158>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d002      	beq.n	8001e3a <HAL_ADC_Start_DMA+0x82>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	e001      	b.n	8001e3e <HAL_ADC_Start_DMA+0x86>
 8001e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d002      	beq.n	8001e4c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e68:	f023 0206 	bic.w	r2, r3, #6
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	661a      	str	r2, [r3, #96]	; 0x60
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <HAL_ADC_Start_DMA+0x15c>)
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <HAL_ADC_Start_DMA+0x160>)
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_ADC_Start_DMA+0x164>)
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	221c      	movs	r2, #28
 8001e96:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0210 	orr.w	r2, r2, #16
 8001eae:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3340      	adds	r3, #64	; 0x40
 8001eca:	4619      	mov	r1, r3
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f000 ffc6 	bl	8002e60 <HAL_DMA_Start_IT>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fdac 	bl	8001a3a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ee2:	e00d      	b.n	8001f00 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001eec:	e008      	b.n	8001f00 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001efa:	e001      	b.n	8001f00 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
 8001efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	50000300 	.word	0x50000300
 8001f10:	50000100 	.word	0x50000100
 8001f14:	08002835 	.word	0x08002835
 8001f18:	0800290d 	.word	0x0800290d
 8001f1c:	08002929 	.word	0x08002929

08001f20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0b6      	sub	sp, #216	; 0xd8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x22>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e3c8      	b.n	80026fc <HAL_ADC_ConfigChannel+0x7b4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fd73 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 83ad 	bne.w	80026de <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f7ff fc54 	bl	800183e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fd61 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001fa0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fd6d 	bl	8001a88 <LL_ADC_INJ_IsConversionOngoing>
 8001fae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 81d9 	bne.w	800236e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 81d4 	bne.w	800236e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fce:	d10f      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7ff fc5b 	bl	8001896 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fc02 	bl	80017f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001fee:	e00e      	b.n	800200e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f7ff fc4a 	bl	8001896 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fbf2 	bl	80017f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	08db      	lsrs	r3, r3, #3
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d022      	beq.n	8002076 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6919      	ldr	r1, [r3, #16]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002040:	f7ff fb4c 	bl	80016dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6919      	ldr	r1, [r3, #16]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	461a      	mov	r2, r3
 8002052:	f7ff fb98 	bl	8001786 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002062:	2b01      	cmp	r3, #1
 8002064:	d102      	bne.n	800206c <HAL_ADC_ConfigChannel+0x124>
 8002066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206a:	e000      	b.n	800206e <HAL_ADC_ConfigChannel+0x126>
 800206c:	2300      	movs	r3, #0
 800206e:	461a      	mov	r2, r3
 8002070:	f7ff fba4 	bl	80017bc <LL_ADC_SetOffsetSaturation>
 8002074:	e17b      	b.n	800236e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fb51 	bl	8001724 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x15a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fb46 	bl	8001724 <LL_ADC_GetOffsetChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	0e9b      	lsrs	r3, r3, #26
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	e01e      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x198>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fb3b 	bl	8001724 <LL_ADC_GetOffsetChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e004      	b.n	80020de <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80020d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x1b0>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	e018      	b.n	800212a <HAL_ADC_ConfigChannel+0x1e2>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800210c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800211c:	2320      	movs	r3, #32
 800211e:	e004      	b.n	800212a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800212a:	429a      	cmp	r2, r3
 800212c:	d106      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fb0a 	bl	8001750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2101      	movs	r1, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff faee 	bl	8001724 <LL_ADC_GetOffsetChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x220>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2101      	movs	r1, #1
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fae3 	bl	8001724 <LL_ADC_GetOffsetChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	e01e      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x25e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fad8 	bl	8001724 <LL_ADC_GetOffsetChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800218a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800218e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002196:	2320      	movs	r3, #32
 8002198:	e004      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800219a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_ADC_ConfigChannel+0x276>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	e018      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x2a8>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80021d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80021da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e004      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80021e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d106      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	2101      	movs	r1, #1
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff faa7 	bl	8001750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2102      	movs	r1, #2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fa8b 	bl	8001724 <LL_ADC_GetOffsetChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_ADC_ConfigChannel+0x2e6>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2102      	movs	r1, #2
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fa80 	bl	8001724 <LL_ADC_GetOffsetChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	0e9b      	lsrs	r3, r3, #26
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	e01e      	b.n	800226c <HAL_ADC_ConfigChannel+0x324>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2102      	movs	r1, #2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fa75 	bl	8001724 <LL_ADC_GetOffsetChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800224c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e004      	b.n	800226a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002260:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x33c>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	e016      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x36a>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800229c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e004      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80022a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d106      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2102      	movs	r1, #2
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fa46 	bl	8001750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2103      	movs	r1, #3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fa2a 	bl	8001724 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x3a8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2103      	movs	r1, #3
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fa1f 	bl	8001724 <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	f003 021f 	and.w	r2, r3, #31
 80022ee:	e017      	b.n	8002320 <HAL_ADC_ConfigChannel+0x3d8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2103      	movs	r1, #3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa14 	bl	8001724 <LL_ADC_GetOffsetChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800230c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e003      	b.n	800231e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x3f0>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	e011      	b.n	800235c <HAL_ADC_ConfigChannel+0x414>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002348:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800234a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e003      	b.n	800235c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800235c:	429a      	cmp	r2, r3
 800235e:	d106      	bne.n	800236e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	2103      	movs	r1, #3
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f9f1 	bl	8001750 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fb4e 	bl	8001a14 <LL_ADC_IsEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 8140 	bne.w	8002600 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	461a      	mov	r2, r3
 800238e:	f7ff faad 	bl	80018ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4a8f      	ldr	r2, [pc, #572]	; (80025d4 <HAL_ADC_ConfigChannel+0x68c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	f040 8131 	bne.w	8002600 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10b      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x47e>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	bf94      	ite	ls
 80023be:	2301      	movls	r3, #1
 80023c0:	2300      	movhi	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	e019      	b.n	80023fa <HAL_ADC_ConfigChannel+0x4b2>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80023d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80023d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e003      	b.n	80023ea <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80023e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2b09      	cmp	r3, #9
 80023f2:	bf94      	ite	ls
 80023f4:	2301      	movls	r3, #1
 80023f6:	2300      	movhi	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d079      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	2b00      	cmp	r3, #0
 8002408:	d107      	bne.n	800241a <HAL_ADC_ConfigChannel+0x4d2>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	3301      	adds	r3, #1
 8002412:	069b      	lsls	r3, r3, #26
 8002414:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002418:	e015      	b.n	8002446 <HAL_ADC_ConfigChannel+0x4fe>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800242c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3301      	adds	r3, #1
 8002440:	069b      	lsls	r3, r3, #26
 8002442:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x51e>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0e9b      	lsrs	r3, r3, #26
 8002458:	3301      	adds	r3, #1
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	e017      	b.n	8002496 <HAL_ADC_ConfigChannel+0x54e>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e003      	b.n	800248a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	ea42 0103 	orr.w	r1, r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x574>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0e9b      	lsrs	r3, r3, #26
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 021f 	and.w	r2, r3, #31
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	051b      	lsls	r3, r3, #20
 80024ba:	e018      	b.n	80024ee <HAL_ADC_ConfigChannel+0x5a6>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80024ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e003      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80024d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ee:	430b      	orrs	r3, r1
 80024f0:	e081      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <HAL_ADC_ConfigChannel+0x5c6>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	0e9b      	lsrs	r3, r3, #26
 8002504:	3301      	adds	r3, #1
 8002506:	069b      	lsls	r3, r3, #26
 8002508:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250c:	e015      	b.n	800253a <HAL_ADC_ConfigChannel+0x5f2>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e003      	b.n	8002532 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	069b      	lsls	r3, r3, #26
 8002536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_ADC_ConfigChannel+0x612>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	3301      	adds	r3, #1
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	e017      	b.n	800258a <HAL_ADC_ConfigChannel+0x642>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	61fb      	str	r3, [r7, #28]
  return result;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e003      	b.n	800257e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	ea42 0103 	orr.w	r1, r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x66e>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 021f 	and.w	r2, r3, #31
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	3b1e      	subs	r3, #30
 80025ae:	051b      	lsls	r3, r3, #20
 80025b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025b4:	e01e      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x6ac>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	613b      	str	r3, [r7, #16]
  return result;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	e006      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x698>
 80025d2:	bf00      	nop
 80025d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 021f 	and.w	r2, r3, #31
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	3b1e      	subs	r3, #30
 80025ee:	051b      	lsls	r3, r3, #20
 80025f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7ff f94b 	bl	8001896 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_ADC_ConfigChannel+0x7bc>)
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d071      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800260c:	483e      	ldr	r0, [pc, #248]	; (8002708 <HAL_ADC_ConfigChannel+0x7c0>)
 800260e:	f7ff f857 	bl	80016c0 <LL_ADC_GetCommonPathInternalCh>
 8002612:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a3c      	ldr	r2, [pc, #240]	; (800270c <HAL_ADC_ConfigChannel+0x7c4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_ADC_ConfigChannel+0x6e2>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3a      	ldr	r2, [pc, #232]	; (8002710 <HAL_ADC_ConfigChannel+0x7c8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d127      	bne.n	800267a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800262a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800262e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d121      	bne.n	800267a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263e:	d157      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002644:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002648:	4619      	mov	r1, r3
 800264a:	482f      	ldr	r0, [pc, #188]	; (8002708 <HAL_ADC_ConfigChannel+0x7c0>)
 800264c:	f7ff f825 	bl	800169a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_ADC_ConfigChannel+0x7cc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	4a30      	ldr	r2, [pc, #192]	; (8002718 <HAL_ADC_ConfigChannel+0x7d0>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800266a:	e002      	b.n	8002672 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3b01      	subs	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002678:	e03a      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a27      	ldr	r2, [pc, #156]	; (800271c <HAL_ADC_ConfigChannel+0x7d4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d113      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_ADC_ConfigChannel+0x7d8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02a      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800269a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a2:	4619      	mov	r1, r3
 80026a4:	4818      	ldr	r0, [pc, #96]	; (8002708 <HAL_ADC_ConfigChannel+0x7c0>)
 80026a6:	f7fe fff8 	bl	800169a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026aa:	e021      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <HAL_ADC_ConfigChannel+0x7dc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11c      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d116      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_ADC_ConfigChannel+0x7d8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d011      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026d4:	4619      	mov	r1, r3
 80026d6:	480c      	ldr	r0, [pc, #48]	; (8002708 <HAL_ADC_ConfigChannel+0x7c0>)
 80026d8:	f7fe ffdf 	bl	800169a <LL_ADC_SetCommonPathInternalCh>
 80026dc:	e008      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	37d8      	adds	r7, #216	; 0xd8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	80080000 	.word	0x80080000
 8002708:	50000300 	.word	0x50000300
 800270c:	c3210000 	.word	0xc3210000
 8002710:	90c00010 	.word	0x90c00010
 8002714:	20000000 	.word	0x20000000
 8002718:	053e2d63 	.word	0x053e2d63
 800271c:	c7520000 	.word	0xc7520000
 8002720:	50000100 	.word	0x50000100
 8002724:	cb840000 	.word	0xcb840000

08002728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff f96b 	bl	8001a14 <LL_ADC_IsEnabled>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d169      	bne.n	8002818 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <ADC_Enable+0xfc>)
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00d      	beq.n	800276e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e055      	b.n	800281a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff f93a 	bl	80019ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002778:	482b      	ldr	r0, [pc, #172]	; (8002828 <ADC_Enable+0x100>)
 800277a:	f7fe ffa1 	bl	80016c0 <LL_ADC_GetCommonPathInternalCh>
 800277e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <ADC_Enable+0x104>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <ADC_Enable+0x108>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027a2:	e002      	b.n	80027aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f9      	bne.n	80027a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027b0:	f7fe ff32 	bl	8001618 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027b6:	e028      	b.n	800280a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff f929 	bl	8001a14 <LL_ADC_IsEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d104      	bne.n	80027d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f90d 	bl	80019ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027d2:	f7fe ff21 	bl	8001618 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d914      	bls.n	800280a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d00d      	beq.n	800280a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	f043 0210 	orr.w	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e007      	b.n	800281a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d1cf      	bne.n	80027b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	8000003f 	.word	0x8000003f
 8002828:	50000300 	.word	0x50000300
 800282c:	20000000 	.word	0x20000000
 8002830:	053e2d63 	.word	0x053e2d63

08002834 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800284a:	2b00      	cmp	r3, #0
 800284c:	d14b      	bne.n	80028e6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d021      	beq.n	80028ac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe ffd3 	bl	8001818 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d032      	beq.n	80028de <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d12b      	bne.n	80028de <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11f      	bne.n	80028de <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80028aa:	e018      	b.n	80028de <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d111      	bne.n	80028de <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d105      	bne.n	80028de <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7fd ff30 	bl	8000744 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028e4:	e00e      	b.n	8002904 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff fb1e 	bl	8001f34 <HAL_ADC_ErrorCallback>
}
 80028f8:	e004      	b.n	8002904 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff fb00 	bl	8001f20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff faf0 	bl	8001f34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <LL_ADC_IsEnabled>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <LL_ADC_IsEnabled+0x18>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <LL_ADC_IsEnabled+0x1a>
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_REG_IsConversionOngoing>:
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b04      	cmp	r3, #4
 8002994:	d101      	bne.n	800299a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b0a1      	sub	sp, #132	; 0x84
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e08b      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029ce:	2300      	movs	r3, #0
 80029d0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029d2:	2300      	movs	r3, #0
 80029d4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029de:	d102      	bne.n	80029e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029e0:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	e001      	b.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e06a      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ffb9 	bl	8002982 <LL_ADC_REG_IsConversionOngoing>
 8002a10:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ffb3 	bl	8002982 <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d14c      	bne.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d149      	bne.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a2a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d028      	beq.n	8002a86 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a46:	035b      	lsls	r3, r3, #13
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a54:	f7ff ff82 	bl	800295c <LL_ADC_IsEnabled>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	4823      	ldr	r0, [pc, #140]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a5c:	f7ff ff7e 	bl	800295c <LL_ADC_IsEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4323      	orrs	r3, r4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d133      	bne.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a70:	f023 030f 	bic.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	6811      	ldr	r1, [r2, #0]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	6892      	ldr	r2, [r2, #8]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a82:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a84:	e024      	b.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a90:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a92:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a96:	f7ff ff61 	bl	800295c <LL_ADC_IsEnabled>
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	4812      	ldr	r0, [pc, #72]	; (8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a9e:	f7ff ff5d 	bl	800295c <LL_ADC_IsEnabled>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4323      	orrs	r3, r4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d112      	bne.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ab2:	f023 030f 	bic.w	r3, r3, #15
 8002ab6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ab8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aba:	e009      	b.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ace:	e000      	b.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ada:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3784      	adds	r7, #132	; 0x84
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	50000100 	.word	0x50000100
 8002aec:	50000300 	.word	0x50000300

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff8e 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff29 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb4:	f7ff ff40 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff90 	bl	8002be4 <NVIC_EncodePriority>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff5f 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff33 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffa4 	bl	8002c4c <SysTick_Config>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e08d      	b.n	8002e3e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_DMA_Init+0x138>)
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d80f      	bhi.n	8002d4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <HAL_DMA_Init+0x13c>)
 8002d36:	4413      	add	r3, r2
 8002d38:	4a45      	ldr	r2, [pc, #276]	; (8002e50 <HAL_DMA_Init+0x140>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	009a      	lsls	r2, r3, #2
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a42      	ldr	r2, [pc, #264]	; (8002e54 <HAL_DMA_Init+0x144>)
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d4c:	e00e      	b.n	8002d6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_DMA_Init+0x148>)
 8002d56:	4413      	add	r3, r2
 8002d58:	4a3d      	ldr	r2, [pc, #244]	; (8002e50 <HAL_DMA_Init+0x140>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	009a      	lsls	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <HAL_DMA_Init+0x14c>)
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa1e 	bl	8003200 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dcc:	d102      	bne.n	8002dd4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002de8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_DMA_Init+0x104>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d80c      	bhi.n	8002e14 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa3e 	bl	800327c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	e008      	b.n	8002e26 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40020407 	.word	0x40020407
 8002e4c:	bffdfff8 	.word	0xbffdfff8
 8002e50:	cccccccd 	.word	0xcccccccd
 8002e54:	40020000 	.word	0x40020000
 8002e58:	bffdfbf8 	.word	0xbffdfbf8
 8002e5c:	40020400 	.word	0x40020400

08002e60 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_DMA_Start_IT+0x20>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e066      	b.n	8002f4e <HAL_DMA_Start_IT+0xee>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d155      	bne.n	8002f40 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f962 	bl	8003182 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 020e 	orr.w	r2, r2, #14
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e00f      	b.n	8002ef8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0204 	bic.w	r2, r2, #4
 8002ee6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 020a 	orr.w	r2, r2, #10
 8002ef6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e005      	b.n	8002f4c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d00d      	beq.n	8002f8a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e047      	b.n	800301a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020e 	bic.w	r2, r2, #14
 8002f98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fd6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00c      	beq.n	8002ffa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ff8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
    }
  }
  return status;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2204      	movs	r2, #4
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d026      	beq.n	800309e <HAL_DMA_IRQHandler+0x7a>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d021      	beq.n	800309e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	2104      	movs	r1, #4
 8003086:	fa01 f202 	lsl.w	r2, r1, r2
 800308a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	d071      	beq.n	8003178 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800309c:	e06c      	b.n	8003178 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2202      	movs	r2, #2
 80030a8:	409a      	lsls	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02e      	beq.n	8003110 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d029      	beq.n	8003110 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 020a 	bic.w	r2, r2, #10
 80030d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f003 021f 	and.w	r2, r3, #31
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2102      	movs	r1, #2
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d038      	beq.n	8003178 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800310e:	e033      	b.n	8003178 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2208      	movs	r2, #8
 800311a:	409a      	lsls	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d02a      	beq.n	800317a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d025      	beq.n	800317a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 020e 	bic.w	r2, r2, #14
 800313c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f003 021f 	and.w	r2, r3, #31
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003178:	bf00      	nop
 800317a:	bf00      	nop
}
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003198:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d108      	bne.n	80031e2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031e0:	e007      	b.n	80031f2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	60da      	str	r2, [r3, #12]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003210:	429a      	cmp	r2, r3
 8003212:	d802      	bhi.n	800321a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003214:	4b15      	ldr	r3, [pc, #84]	; (800326c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e001      	b.n	800321e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800321c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3b08      	subs	r3, #8
 800322a:	4a12      	ldr	r2, [pc, #72]	; (8003274 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	009a      	lsls	r2, r3, #2
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	461a      	mov	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800324a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2201      	movs	r2, #1
 8003254:	409a      	lsls	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	651a      	str	r2, [r3, #80]	; 0x50
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40020407 	.word	0x40020407
 800326c:	40020800 	.word	0x40020800
 8003270:	40020820 	.word	0x40020820
 8003274:	cccccccd 	.word	0xcccccccd
 8003278:	40020880 	.word	0x40020880

0800327c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800329e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	1000823f 	.word	0x1000823f
 80032c0:	40020940 	.word	0x40020940

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032d2:	e15a      	b.n	800358a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	2101      	movs	r1, #1
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	4013      	ands	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 814c 	beq.w	8003584 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d005      	beq.n	8003304 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003300:	2b02      	cmp	r3, #2
 8003302:	d130      	bne.n	8003366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800333a:	2201      	movs	r2, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	f003 0201 	and.w	r2, r3, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b03      	cmp	r3, #3
 8003370:	d017      	beq.n	80033a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d123      	bne.n	80033f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	08da      	lsrs	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3208      	adds	r2, #8
 80033b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	08da      	lsrs	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3208      	adds	r2, #8
 80033f0:	6939      	ldr	r1, [r7, #16]
 80033f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80a6 	beq.w	8003584 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003438:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <HAL_GPIO_Init+0x2e4>)
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	4a5a      	ldr	r2, [pc, #360]	; (80035a8 <HAL_GPIO_Init+0x2e4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6613      	str	r3, [r2, #96]	; 0x60
 8003444:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <HAL_GPIO_Init+0x2e4>)
 8003446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003450:	4a56      	ldr	r2, [pc, #344]	; (80035ac <HAL_GPIO_Init+0x2e8>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800347a:	d01f      	beq.n	80034bc <HAL_GPIO_Init+0x1f8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a4c      	ldr	r2, [pc, #304]	; (80035b0 <HAL_GPIO_Init+0x2ec>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d019      	beq.n	80034b8 <HAL_GPIO_Init+0x1f4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a4b      	ldr	r2, [pc, #300]	; (80035b4 <HAL_GPIO_Init+0x2f0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_GPIO_Init+0x1f0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a4a      	ldr	r2, [pc, #296]	; (80035b8 <HAL_GPIO_Init+0x2f4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00d      	beq.n	80034b0 <HAL_GPIO_Init+0x1ec>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a49      	ldr	r2, [pc, #292]	; (80035bc <HAL_GPIO_Init+0x2f8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <HAL_GPIO_Init+0x1e8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a48      	ldr	r2, [pc, #288]	; (80035c0 <HAL_GPIO_Init+0x2fc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_GPIO_Init+0x1e4>
 80034a4:	2305      	movs	r3, #5
 80034a6:	e00a      	b.n	80034be <HAL_GPIO_Init+0x1fa>
 80034a8:	2306      	movs	r3, #6
 80034aa:	e008      	b.n	80034be <HAL_GPIO_Init+0x1fa>
 80034ac:	2304      	movs	r3, #4
 80034ae:	e006      	b.n	80034be <HAL_GPIO_Init+0x1fa>
 80034b0:	2303      	movs	r3, #3
 80034b2:	e004      	b.n	80034be <HAL_GPIO_Init+0x1fa>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e002      	b.n	80034be <HAL_GPIO_Init+0x1fa>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_GPIO_Init+0x1fa>
 80034bc:	2300      	movs	r3, #0
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	f002 0203 	and.w	r2, r2, #3
 80034c4:	0092      	lsls	r2, r2, #2
 80034c6:	4093      	lsls	r3, r2
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ce:	4937      	ldr	r1, [pc, #220]	; (80035ac <HAL_GPIO_Init+0x2e8>)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_GPIO_Init+0x300>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003500:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <HAL_GPIO_Init+0x300>)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003506:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_GPIO_Init+0x300>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800352a:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_GPIO_Init+0x300>)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_GPIO_Init+0x300>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	43db      	mvns	r3, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003554:	4a1b      	ldr	r2, [pc, #108]	; (80035c4 <HAL_GPIO_Init+0x300>)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_GPIO_Init+0x300>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800357e:	4a11      	ldr	r2, [pc, #68]	; (80035c4 <HAL_GPIO_Init+0x300>)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3301      	adds	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f ae9d 	bne.w	80032d4 <HAL_GPIO_Init+0x10>
  }
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40010000 	.word	0x40010000
 80035b0:	48000400 	.word	0x48000400
 80035b4:	48000800 	.word	0x48000800
 80035b8:	48000c00 	.word	0x48000c00
 80035bc:	48001000 	.word	0x48001000
 80035c0:	48001400 	.word	0x48001400
 80035c4:	40010400 	.word	0x40010400

080035c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e001      	b.n	80035ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003614:	e002      	b.n	800361c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0c0      	b.n	80037bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f008 fa68 	bl	800bb24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2203      	movs	r2, #3
 8003658:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f004 faee 	bl	8007c42 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	e03e      	b.n	80036ea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	3311      	adds	r3, #17
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	3310      	adds	r3, #16
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	3313      	adds	r3, #19
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	3320      	adds	r3, #32
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	440b      	add	r3, r1
 80036ca:	3324      	adds	r3, #36	; 0x24
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	3301      	adds	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	791b      	ldrb	r3, [r3, #4]
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d3bb      	bcc.n	800366c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	e044      	b.n	8003784 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	f203 1351 	addw	r3, r3, #337	; 0x151
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	440b      	add	r3, r1
 800371e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	440b      	add	r3, r1
 8003776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	3301      	adds	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	791b      	ldrb	r3, [r3, #4]
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3b5      	bcc.n	80036fa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	e893 0006 	ldmia.w	r3, {r1, r2}
 800379a:	f004 fa6d 	bl	8007c78 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7a9b      	ldrb	r3, [r3, #10]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d102      	bne.n	80037ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f001 fc29 	bl	800500c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_PCD_Start+0x16>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e012      	b.n	8003800 <HAL_PCD_Start+0x3c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 fa14 	bl	8007c14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f006 fcd4 	bl	800a19e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f006 fcd9 	bl	800a1cc <USB_ReadInterrupts>
 800381a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 faec 	bl	8003e04 <PCD_EP_ISR_Handler>

    return;
 800382c:	e110      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	b292      	uxth	r2, r2
 800384c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f008 f9f8 	bl	800bc46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003856:	2100      	movs	r1, #0
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8fc 	bl	8003a56 <HAL_PCD_SetAddress>

    return;
 800385e:	e0f7      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800387c:	b292      	uxth	r2, r2
 800387e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003882:	e0e5      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a0:	b292      	uxth	r2, r2
 80038a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80038a6:	e0d3      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d034      	beq.n	800391c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0204 	bic.w	r2, r2, #4
 80038c4:	b292      	uxth	r2, r2
 80038c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0208 	bic.w	r2, r2, #8
 80038dc:	b292      	uxth	r2, r2
 80038de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038f4:	2100      	movs	r1, #0
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f008 fb74 	bl	800bfe4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f008 f9db 	bl	800bcb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003914:	b292      	uxth	r2, r2
 8003916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800391a:	e099      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003922:	2b00      	cmp	r3, #0
 8003924:	d027      	beq.n	8003976 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0208 	orr.w	r2, r2, #8
 8003938:	b292      	uxth	r2, r2
 800393a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003950:	b292      	uxth	r2, r2
 8003952:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0204 	orr.w	r2, r2, #4
 8003968:	b292      	uxth	r2, r2
 800396a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f008 f988 	bl	800bc84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003974:	e06c      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b00      	cmp	r3, #0
 800397e:	d040      	beq.n	8003a02 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003992:	b292      	uxth	r2, r2
 8003994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d12b      	bne.n	80039fa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0204 	orr.w	r2, r2, #4
 80039b4:	b292      	uxth	r2, r2
 80039b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0208 	orr.w	r2, r2, #8
 80039cc:	b292      	uxth	r2, r2
 80039ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80039f0:	2101      	movs	r1, #1
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f008 faf6 	bl	800bfe4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80039f8:	e02a      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f008 f942 	bl	800bc84 <HAL_PCD_SuspendCallback>
    return;
 8003a00:	e026      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00f      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f008 f900 	bl	800bc2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a2a:	e011      	b.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a48:	b292      	uxth	r2, r2
 8003a4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a4e:	bf00      	nop
  }
}
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_PCD_SetAddress+0x1a>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e012      	b.n	8003a96 <HAL_PCD_SetAddress+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f006 fb75 	bl	800a176 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4603      	mov	r3, r0
 8003aae:	70fb      	strb	r3, [r7, #3]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	803b      	strh	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da0e      	bge.n	8003ae2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 0207 	and.w	r2, r3, #7
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	3310      	adds	r3, #16
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	705a      	strb	r2, [r3, #1]
 8003ae0:	e00e      	b.n	8003b00 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 0207 	and.w	r2, r3, #7
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b0c:	883a      	ldrh	r2, [r7, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	78ba      	ldrb	r2, [r7, #2]
 8003b16:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b18:	78bb      	ldrb	r3, [r7, #2]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d102      	bne.n	8003b24 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_PCD_EP_Open+0x94>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e00e      	b.n	8003b50 <HAL_PCD_EP_Open+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f004 f8b7 	bl	8007cb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da0e      	bge.n	8003b8a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 0207 	and.w	r2, r3, #7
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	3310      	adds	r3, #16
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	705a      	strb	r2, [r3, #1]
 8003b88:	e00e      	b.n	8003ba8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	f003 0207 	and.w	r2, r3, #7
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_PCD_EP_Close+0x6a>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e00e      	b.n	8003be0 <HAL_PCD_EP_Close+0x88>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 fc33 	bl	800843c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf8:	7afb      	ldrb	r3, [r7, #11]
 8003bfa:	f003 0207 	and.w	r2, r3, #7
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6979      	ldr	r1, [r7, #20]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f004 fdeb 	bl	8008816 <USB_EPStartXfer>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	460b      	mov	r3, r1
 8003c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	f003 0207 	and.w	r2, r3, #7
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	3310      	adds	r3, #16
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2201      	movs	r2, #1
 8003c94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c96:	7afb      	ldrb	r3, [r7, #11]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f004 fdb4 	bl	8008816 <USB_EPStartXfer>

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	7912      	ldrb	r2, [r2, #4]
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e03e      	b.n	8003d54 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	da0e      	bge.n	8003cfc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	f003 0207 	and.w	r2, r3, #7
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	3310      	adds	r3, #16
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	705a      	strb	r2, [r3, #1]
 8003cfa:	e00c      	b.n	8003d16 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_PCD_EP_SetStall+0x7e>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e00e      	b.n	8003d54 <HAL_PCD_EP_SetStall+0x9c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f006 f917 	bl	8009f78 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	7912      	ldrb	r2, [r2, #4]
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e040      	b.n	8003dfc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da0e      	bge.n	8003da0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 0207 	and.w	r2, r3, #7
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	3310      	adds	r3, #16
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	705a      	strb	r2, [r3, #1]
 8003d9e:	e00e      	b.n	8003dbe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_PCD_EP_ClrStall+0x82>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e00e      	b.n	8003dfc <HAL_PCD_EP_ClrStall+0xa0>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f006 f914 	bl	800a01a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b096      	sub	sp, #88	; 0x58
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e0c:	e3ae      	b.n	800456c <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003e28:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f040 8170 	bne.w	8004112 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d14d      	bne.n	8003eda <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	81fb      	strh	r3, [r7, #14]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	89fb      	ldrh	r3, [r7, #14]
 8003e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3310      	adds	r3, #16
 8003e66:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	441a      	add	r2, r3
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f007 fea8 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7b1b      	ldrb	r3, [r3, #12]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 835d 	beq.w	800456c <PCD_EP_ISR_Handler+0x768>
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 8358 	bne.w	800456c <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7b1b      	ldrb	r3, [r3, #12]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	b292      	uxth	r2, r2
 8003ece:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	731a      	strb	r2, [r3, #12]
 8003ed8:	e348      	b.n	800456c <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ee0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003eec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d032      	beq.n	8003f5e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f30:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f006 f99c 	bl	800a270 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f44:	4013      	ands	r3, r2
 8003f46:	823b      	strh	r3, [r7, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	8a3a      	ldrh	r2, [r7, #16]
 8003f4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f52:	b292      	uxth	r2, r2
 8003f54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f007 fe20 	bl	800bb9c <HAL_PCD_SetupStageCallback>
 8003f5c:	e306      	b.n	800456c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f5e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f280 8302 	bge.w	800456c <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f74:	4013      	ands	r3, r2
 8003f76:	83fb      	strh	r3, [r7, #30]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	8bfa      	ldrh	r2, [r7, #30]
 8003f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f82:	b292      	uxth	r2, r2
 8003f84:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <PCD_EP_ISR_Handler+0x1e6>
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d015      	beq.n	8003fea <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc4:	6959      	ldr	r1, [r3, #20]
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fcc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f006 f94e 	bl	800a270 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	441a      	add	r2, r3
 8003fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f007 fdeb 	bl	800bbc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ff4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 82b5 	bne.w	800456c <PCD_EP_ISR_Handler+0x768>
 8004002:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004006:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800400a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800400e:	f000 82ad 	beq.w	800456c <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004020:	b29b      	uxth	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	4413      	add	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800403c:	b29a      	uxth	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b3e      	cmp	r3, #62	; 0x3e
 8004048:	d91d      	bls.n	8004086 <PCD_EP_ISR_Handler+0x282>
 800404a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	647b      	str	r3, [r7, #68]	; 0x44
 8004052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <PCD_EP_ISR_Handler+0x260>
 800405e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004060:	3b01      	subs	r3, #1
 8004062:	647b      	str	r3, [r7, #68]	; 0x44
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29a      	uxth	r2, r3
 800406a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800406c:	b29b      	uxth	r3, r3
 800406e:	029b      	lsls	r3, r3, #10
 8004070:	b29b      	uxth	r3, r3
 8004072:	4313      	orrs	r3, r2
 8004074:	b29b      	uxth	r3, r3
 8004076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407e:	b29a      	uxth	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	e026      	b.n	80040d4 <PCD_EP_ISR_Handler+0x2d0>
 8004086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <PCD_EP_ISR_Handler+0x2a0>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409c:	b29a      	uxth	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	801a      	strh	r2, [r3, #0]
 80040a2:	e017      	b.n	80040d4 <PCD_EP_ISR_Handler+0x2d0>
 80040a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	647b      	str	r3, [r7, #68]	; 0x44
 80040ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <PCD_EP_ISR_Handler+0x2ba>
 80040b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ba:	3301      	adds	r3, #1
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	4313      	orrs	r3, r2
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e4:	827b      	strh	r3, [r7, #18]
 80040e6:	8a7b      	ldrh	r3, [r7, #18]
 80040e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040ec:	827b      	strh	r3, [r7, #18]
 80040ee:	8a7b      	ldrh	r3, [r7, #18]
 80040f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040f4:	827b      	strh	r3, [r7, #18]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	8a7b      	ldrh	r3, [r7, #18]
 80040fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410c:	b29b      	uxth	r3, r3
 800410e:	8013      	strh	r3, [r2, #0]
 8004110:	e22c      	b.n	800456c <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004126:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800412a:	2b00      	cmp	r3, #0
 800412c:	f280 80f6 	bge.w	800431c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29a      	uxth	r2, r3
 8004142:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004146:	4013      	ands	r3, r2
 8004148:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800415e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004162:	b292      	uxth	r2, r2
 8004164:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004166:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800417c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417e:	7b1b      	ldrb	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d123      	bne.n	80041cc <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418c:	b29b      	uxth	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	4413      	add	r3, r2
 800419e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80041ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 808e 	beq.w	80042d2 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041bc:	6959      	ldr	r1, [r3, #20]
 80041be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c0:	88da      	ldrh	r2, [r3, #6]
 80041c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80041c6:	f006 f853 	bl	800a270 <USB_ReadPMA>
 80041ca:	e082      	b.n	80042d2 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80041cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ce:	78db      	ldrb	r3, [r3, #3]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d10a      	bne.n	80041ea <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80041d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041d8:	461a      	mov	r2, r3
 80041da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f9d3 	bl	8004588 <HAL_PCD_EP_DB_Receive>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80041e8:	e073      	b.n	80042d2 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	441a      	add	r2, r3
 8004216:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800421a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800422a:	b29b      	uxth	r3, r3
 800422c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d022      	beq.n	800428e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004250:	b29b      	uxth	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	4413      	add	r3, r2
 8004262:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004270:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02c      	beq.n	80042d2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427e:	6959      	ldr	r1, [r3, #20]
 8004280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004282:	891a      	ldrh	r2, [r3, #8]
 8004284:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004288:	f005 fff2 	bl	800a270 <USB_ReadPMA>
 800428c:	e021      	b.n	80042d2 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004296:	b29b      	uxth	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80042b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c4:	6959      	ldr	r1, [r3, #20]
 80042c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c8:	895a      	ldrh	r2, [r3, #10]
 80042ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042ce:	f005 ffcf 	bl	800a270 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042da:	441a      	add	r2, r3
 80042dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042e8:	441a      	add	r2, r3
 80042ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <PCD_EP_ISR_Handler+0x4fe>
 80042f6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80042fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d206      	bcs.n	8004310 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f007 fc59 	bl	800bbc0 <HAL_PCD_DataOutStageCallback>
 800430e:	e005      	b.n	800431c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004316:	4618      	mov	r0, r3
 8004318:	f004 fa7d 	bl	8008816 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800431c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8121 	beq.w	800456c <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800432a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	3310      	adds	r3, #16
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4413      	add	r3, r2
 800433c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004358:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	441a      	add	r2, r3
 800436a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800436e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004376:	b29b      	uxth	r3, r3
 8004378:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800437a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437c:	78db      	ldrb	r3, [r3, #3]
 800437e:	2b01      	cmp	r3, #1
 8004380:	f040 80a2 	bne.w	80044c8 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800438a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438c:	7b1b      	ldrb	r3, [r3, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8093 	beq.w	80044ba <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004394:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d046      	beq.n	800442e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a2:	785b      	ldrb	r3, [r3, #1]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d126      	bne.n	80043f6 <PCD_EP_ISR_Handler+0x5f2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	4413      	add	r3, r2
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	00da      	lsls	r2, r3, #3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	4413      	add	r3, r2
 80043ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043da:	b29a      	uxth	r2, r3
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	801a      	strh	r2, [r3, #0]
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	e061      	b.n	80044ba <PCD_EP_ISR_Handler+0x6b6>
 80043f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d15d      	bne.n	80044ba <PCD_EP_ISR_Handler+0x6b6>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800440c:	b29b      	uxth	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	4413      	add	r3, r2
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	00da      	lsls	r2, r3, #3
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	4413      	add	r3, r2
 8004420:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	2200      	movs	r2, #0
 800442a:	801a      	strh	r2, [r3, #0]
 800442c:	e045      	b.n	80044ba <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d126      	bne.n	800448a <PCD_EP_ISR_Handler+0x686>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	4413      	add	r3, r2
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
 8004454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	00da      	lsls	r2, r3, #3
 800445a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445c:	4413      	add	r3, r2
 800445e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446e:	b29a      	uxth	r2, r3
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800447e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004482:	b29a      	uxth	r2, r3
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	e017      	b.n	80044ba <PCD_EP_ISR_Handler+0x6b6>
 800448a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448c:	785b      	ldrb	r3, [r3, #1]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d113      	bne.n	80044ba <PCD_EP_ISR_Handler+0x6b6>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449a:	b29b      	uxth	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a0:	4413      	add	r3, r2
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	00da      	lsls	r2, r3, #3
 80044aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ac:	4413      	add	r3, r2
 80044ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	2200      	movs	r2, #0
 80044b8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f007 fb98 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
 80044c6:	e051      	b.n	800456c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80044c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d144      	bne.n	800455e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044dc:	b29b      	uxth	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	4413      	add	r3, r2
 80044ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80044fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004504:	429a      	cmp	r2, r3
 8004506:	d907      	bls.n	8004518 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450a:	699a      	ldr	r2, [r3, #24]
 800450c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004510:	1ad2      	subs	r2, r2, r3
 8004512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004514:	619a      	str	r2, [r3, #24]
 8004516:	e002      	b.n	800451e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451a:	2200      	movs	r2, #0
 800451c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800451e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f007 fb62 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
 8004532:	e01b      	b.n	800456c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800453c:	441a      	add	r2, r3
 800453e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004540:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800454a:	441a      	add	r2, r3
 800454c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004556:	4618      	mov	r0, r3
 8004558:	f004 f95d 	bl	8008816 <USB_EPStartXfer>
 800455c:	e006      	b.n	800456c <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800455e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004562:	461a      	mov	r2, r3
 8004564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f917 	bl	800479a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004574:	b29b      	uxth	r3, r3
 8004576:	b21b      	sxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	f6ff ac48 	blt.w	8003e0e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3758      	adds	r7, #88	; 0x58
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	4613      	mov	r3, r2
 8004594:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d07c      	beq.n	800469a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	8b7b      	ldrh	r3, [r7, #26]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d306      	bcc.n	80045de <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	8b7b      	ldrh	r3, [r7, #26]
 80045d6:	1ad2      	subs	r2, r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	619a      	str	r2, [r3, #24]
 80045dc:	e002      	b.n	80045e4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2200      	movs	r2, #0
 80045e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d123      	bne.n	8004634 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	833b      	strh	r3, [r7, #24]
 8004608:	8b3b      	ldrh	r3, [r7, #24]
 800460a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800460e:	833b      	strh	r3, [r7, #24]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	8b3b      	ldrh	r3, [r7, #24]
 8004620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004630:	b29b      	uxth	r3, r3
 8004632:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01f      	beq.n	800467e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004658:	82fb      	strh	r3, [r7, #22]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	8afb      	ldrh	r3, [r7, #22]
 800466a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800467a:	b29b      	uxth	r3, r3
 800467c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800467e:	8b7b      	ldrh	r3, [r7, #26]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8085 	beq.w	8004790 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	6959      	ldr	r1, [r3, #20]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	891a      	ldrh	r2, [r3, #8]
 8004692:	8b7b      	ldrh	r3, [r7, #26]
 8004694:	f005 fdec 	bl	800a270 <USB_ReadPMA>
 8004698:	e07a      	b.n	8004790 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	4413      	add	r3, r2
 80046b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	699a      	ldr	r2, [r3, #24]
 80046c4:	8b7b      	ldrh	r3, [r7, #26]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d306      	bcc.n	80046d8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	8b7b      	ldrh	r3, [r7, #26]
 80046d0:	1ad2      	subs	r2, r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	619a      	str	r2, [r3, #24]
 80046d6:	e002      	b.n	80046de <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d123      	bne.n	800472e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004700:	83fb      	strh	r3, [r7, #30]
 8004702:	8bfb      	ldrh	r3, [r7, #30]
 8004704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004708:	83fb      	strh	r3, [r7, #30]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	8bfb      	ldrh	r3, [r7, #30]
 800471a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	b29b      	uxth	r3, r3
 800472c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11f      	bne.n	8004778 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	83bb      	strh	r3, [r7, #28]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	8bbb      	ldrh	r3, [r7, #28]
 8004764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004774:	b29b      	uxth	r3, r3
 8004776:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004778:	8b7b      	ldrh	r3, [r7, #26]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6959      	ldr	r1, [r3, #20]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	895a      	ldrh	r2, [r3, #10]
 800478a:	8b7b      	ldrh	r3, [r7, #26]
 800478c:	f005 fd70 	bl	800a270 <USB_ReadPMA>
    }
  }

  return count;
 8004790:	8b7b      	ldrh	r3, [r7, #26]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b0a4      	sub	sp, #144	; 0x90
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	4613      	mov	r3, r2
 80047a6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 81db 	beq.w	8004b6a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047bc:	b29b      	uxth	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d907      	bls.n	80047f8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80047f0:	1ad2      	subs	r2, r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	619a      	str	r2, [r3, #24]
 80047f6:	e002      	b.n	80047fe <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 80b9 	bne.w	800497a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d126      	bne.n	800485e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	4413      	add	r3, r2
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	00da      	lsls	r2, r3, #3
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	4413      	add	r3, r2
 8004832:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004842:	b29a      	uxth	r2, r3
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	801a      	strh	r2, [r3, #0]
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004856:	b29a      	uxth	r2, r3
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	e01a      	b.n	8004894 <HAL_PCD_EP_DB_Transmit+0xfa>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d116      	bne.n	8004894 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	637b      	str	r3, [r7, #52]	; 0x34
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004874:	b29b      	uxth	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487a:	4413      	add	r3, r2
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	00da      	lsls	r2, r3, #3
 8004884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004886:	4413      	add	r3, r2
 8004888:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	2200      	movs	r2, #0
 8004892:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	785b      	ldrb	r3, [r3, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d126      	bne.n	80048f0 <HAL_PCD_EP_DB_Transmit+0x156>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	00da      	lsls	r2, r3, #3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	e017      	b.n	8004920 <HAL_PCD_EP_DB_Transmit+0x186>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d113      	bne.n	8004920 <HAL_PCD_EP_DB_Transmit+0x186>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004900:	b29b      	uxth	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	4413      	add	r3, r2
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	00da      	lsls	r2, r3, #3
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	4413      	add	r3, r2
 8004914:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004918:	623b      	str	r3, [r7, #32]
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2200      	movs	r2, #0
 800491e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	4619      	mov	r1, r3
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f007 f965 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 82fa 	beq.w	8004f2c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	82fb      	strh	r3, [r7, #22]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	8afb      	ldrh	r3, [r7, #22]
 8004964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]
 8004978:	e2d8      	b.n	8004f2c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d021      	beq.n	80049c8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80049b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	f040 82ac 	bne.w	8004f2c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049dc:	441a      	add	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049ea:	441a      	add	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6a1a      	ldr	r2, [r3, #32]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d30b      	bcc.n	8004a14 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6a1a      	ldr	r2, [r3, #32]
 8004a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a0c:	1ad2      	subs	r2, r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	621a      	str	r2, [r3, #32]
 8004a12:	e017      	b.n	8004a44 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d108      	bne.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004a1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a2c:	e00a      	b.n	8004a44 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2200      	movs	r2, #0
 8004a42:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d165      	bne.n	8004b18 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a60:	4413      	add	r3, r2
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	00da      	lsls	r2, r3, #3
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a88:	2b3e      	cmp	r3, #62	; 0x3e
 8004a8a:	d91d      	bls.n	8004ac8 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d102      	bne.n	8004aa6 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	e044      	b.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	e035      	b.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_PCD_EP_DB_Transmit+0x366>
 8004afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afc:	3301      	adds	r3, #1
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	e01c      	b.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d118      	bne.n	8004b52 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	647b      	str	r3, [r7, #68]	; 0x44
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b34:	4413      	add	r3, r2
 8004b36:	647b      	str	r3, [r7, #68]	; 0x44
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	00da      	lsls	r2, r3, #3
 8004b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b40:	4413      	add	r3, r2
 8004b42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40
 8004b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b50:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6959      	ldr	r1, [r3, #20]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	891a      	ldrh	r2, [r3, #8]
 8004b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f005 fb42 	bl	800a1ec <USB_WritePMA>
 8004b68:	e1e0      	b.n	8004f2c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	4413      	add	r3, r2
 8004b84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b8e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d307      	bcc.n	8004bae <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ba6:	1ad2      	subs	r2, r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	619a      	str	r2, [r3, #24]
 8004bac:	e002      	b.n	8004bb4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 80c0 	bne.w	8004d3e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d126      	bne.n	8004c14 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bda:	4413      	add	r3, r2
 8004bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	00da      	lsls	r2, r3, #3
 8004be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004be6:	4413      	add	r3, r2
 8004be8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	e01a      	b.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d116      	bne.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	667b      	str	r3, [r7, #100]	; 0x64
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c30:	4413      	add	r3, r2
 8004c32:	667b      	str	r3, [r7, #100]	; 0x64
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	00da      	lsls	r2, r3, #3
 8004c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c42:	663b      	str	r3, [r7, #96]	; 0x60
 8004c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c46:	2200      	movs	r2, #0
 8004c48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	677b      	str	r3, [r7, #116]	; 0x74
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d12b      	bne.n	8004cb0 <HAL_PCD_EP_DB_Transmit+0x516>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6c:	4413      	add	r3, r2
 8004c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	00da      	lsls	r2, r3, #3
 8004c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c78:	4413      	add	r3, r2
 8004c7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	e017      	b.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x546>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d113      	bne.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x546>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc6:	4413      	add	r3, r2
 8004cc8:	677b      	str	r3, [r7, #116]	; 0x74
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	00da      	lsls	r2, r3, #3
 8004cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cd8:	673b      	str	r3, [r7, #112]	; 0x70
 8004cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cdc:	2200      	movs	r2, #0
 8004cde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f006 ff85 	bl	800bbf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f040 811a 	bne.w	8004f2c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8013      	strh	r3, [r2, #0]
 8004d3c:	e0f6      	b.n	8004f2c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d121      	bne.n	8004d8c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	441a      	add	r2, r3
 8004d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	f040 80ca 	bne.w	8004f2c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004da0:	441a      	add	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004dae:	441a      	add	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d30b      	bcc.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dd0:	1ad2      	subs	r2, r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	621a      	str	r2, [r3, #32]
 8004dd6:	e017      	b.n	8004e08 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d108      	bne.n	8004df2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004de0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004df0:	e00a      	b.n	8004e08 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d165      	bne.n	8004ee2 <HAL_PCD_EP_DB_Transmit+0x748>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2a:	4413      	add	r3, r2
 8004e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	00da      	lsls	r2, r3, #3
 8004e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e36:	4413      	add	r3, r2
 8004e38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e52:	2b3e      	cmp	r3, #62	; 0x3e
 8004e54:	d91d      	bls.n	8004e92 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	029b      	lsls	r3, r3, #10
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e041      	b.n	8004f16 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <HAL_PCD_EP_DB_Transmit+0x716>
 8004e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	e032      	b.n	8004f16 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_PCD_EP_DB_Transmit+0x730>
 8004ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	029b      	lsls	r3, r3, #10
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	e019      	b.n	8004f16 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d115      	bne.n	8004f16 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef8:	4413      	add	r3, r2
 8004efa:	657b      	str	r3, [r7, #84]	; 0x54
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	00da      	lsls	r2, r3, #3
 8004f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f04:	4413      	add	r3, r2
 8004f06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f0a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	6959      	ldr	r1, [r3, #20]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	895a      	ldrh	r2, [r3, #10]
 8004f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f005 f960 	bl	800a1ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f46:	82bb      	strh	r3, [r7, #20]
 8004f48:	8abb      	ldrh	r3, [r7, #20]
 8004f4a:	f083 0310 	eor.w	r3, r3, #16
 8004f4e:	82bb      	strh	r3, [r7, #20]
 8004f50:	8abb      	ldrh	r3, [r7, #20]
 8004f52:	f083 0320 	eor.w	r3, r3, #32
 8004f56:	82bb      	strh	r3, [r7, #20]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	8abb      	ldrh	r3, [r7, #20]
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3790      	adds	r7, #144	; 0x90
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	817b      	strh	r3, [r7, #10]
 8004f94:	4613      	mov	r3, r2
 8004f96:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f98:	897b      	ldrh	r3, [r7, #10]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00b      	beq.n	8004fbc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa4:	897b      	ldrh	r3, [r7, #10]
 8004fa6:	f003 0207 	and.w	r2, r3, #7
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	3310      	adds	r3, #16
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	e009      	b.n	8004fd0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fbc:	897a      	ldrh	r2, [r7, #10]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004fd0:	893b      	ldrh	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d107      	bne.n	8004fe6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	80da      	strh	r2, [r3, #6]
 8004fe4:	e00b      	b.n	8004ffe <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	0c1b      	lsrs	r3, r3, #16
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005030:	b29b      	uxth	r3, r3
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005044:	b29b      	uxth	r3, r3
 8005046:	f043 0302 	orr.w	r3, r3, #2
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d141      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800506e:	4b4b      	ldr	r3, [pc, #300]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507a:	d131      	bne.n	80050e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800507c:	4b47      	ldr	r3, [pc, #284]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005082:	4a46      	ldr	r2, [pc, #280]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800508c:	4b43      	ldr	r3, [pc, #268]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005094:	4a41      	ldr	r2, [pc, #260]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800509a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800509c:	4b40      	ldr	r3, [pc, #256]	; (80051a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2232      	movs	r2, #50	; 0x32
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	4a3f      	ldr	r2, [pc, #252]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	0c9b      	lsrs	r3, r3, #18
 80050ae:	3301      	adds	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b2:	e002      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ba:	4b38      	ldr	r3, [pc, #224]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c6:	d102      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f2      	bne.n	80050b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ce:	4b33      	ldr	r3, [pc, #204]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050da:	d158      	bne.n	800518e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e057      	b.n	8005190 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050e0:	4b2e      	ldr	r3, [pc, #184]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e6:	4a2d      	ldr	r2, [pc, #180]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050f0:	e04d      	b.n	800518e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f8:	d141      	bne.n	800517e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050fa:	4b28      	ldr	r3, [pc, #160]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005106:	d131      	bne.n	800516c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005108:	4b24      	ldr	r3, [pc, #144]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800510e:	4a23      	ldr	r2, [pc, #140]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005120:	4a1e      	ldr	r2, [pc, #120]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005126:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2232      	movs	r2, #50	; 0x32
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	0c9b      	lsrs	r3, r3, #18
 800513a:	3301      	adds	r3, #1
 800513c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800513e:	e002      	b.n	8005146 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3b01      	subs	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	d102      	bne.n	800515a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f2      	bne.n	8005140 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005166:	d112      	bne.n	800518e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e011      	b.n	8005190 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800517c:	e007      	b.n	800518e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800517e:	4b07      	ldr	r3, [pc, #28]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005186:	4a05      	ldr	r2, [pc, #20]	; (800519c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005188:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800518c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40007000 	.word	0x40007000
 80051a0:	20000000 	.word	0x20000000
 80051a4:	431bde83 	.word	0x431bde83

080051a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	4a04      	ldr	r2, [pc, #16]	; (80051c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051b6:	6093      	str	r3, [r2, #8]
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40007000 	.word	0x40007000

080051c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e2fe      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d075      	beq.n	80052d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e6:	4b97      	ldr	r3, [pc, #604]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f0:	4b94      	ldr	r3, [pc, #592]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d102      	bne.n	8005206 <HAL_RCC_OscConfig+0x3e>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d002      	beq.n	800520c <HAL_RCC_OscConfig+0x44>
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d10b      	bne.n	8005224 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800520c:	4b8d      	ldr	r3, [pc, #564]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d05b      	beq.n	80052d0 <HAL_RCC_OscConfig+0x108>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d157      	bne.n	80052d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e2d9      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d106      	bne.n	800523c <HAL_RCC_OscConfig+0x74>
 800522e:	4b85      	ldr	r3, [pc, #532]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a84      	ldr	r2, [pc, #528]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e01d      	b.n	8005278 <HAL_RCC_OscConfig+0xb0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x98>
 8005246:	4b7f      	ldr	r3, [pc, #508]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a7e      	ldr	r2, [pc, #504]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800524c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	4b7c      	ldr	r3, [pc, #496]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a7b      	ldr	r2, [pc, #492]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0xb0>
 8005260:	4b78      	ldr	r3, [pc, #480]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a77      	ldr	r2, [pc, #476]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4b75      	ldr	r3, [pc, #468]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a74      	ldr	r2, [pc, #464]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fc f9ca 	bl	8001618 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005288:	f7fc f9c6 	bl	8001618 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	; 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e29e      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800529a:	4b6a      	ldr	r3, [pc, #424]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0xc0>
 80052a6:	e014      	b.n	80052d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fc f9b6 	bl	8001618 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fc f9b2 	bl	8001618 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e28a      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052c2:	4b60      	ldr	r3, [pc, #384]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0xe8>
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d075      	beq.n	80053ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052de:	4b59      	ldr	r3, [pc, #356]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e8:	4b56      	ldr	r3, [pc, #344]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d102      	bne.n	80052fe <HAL_RCC_OscConfig+0x136>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_OscConfig+0x13c>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b04      	cmp	r3, #4
 8005302:	d11f      	bne.n	8005344 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005304:	4b4f      	ldr	r3, [pc, #316]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_OscConfig+0x154>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e25d      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b49      	ldr	r3, [pc, #292]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	4946      	ldr	r1, [pc, #280]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005330:	4b45      	ldr	r3, [pc, #276]	; (8005448 <HAL_RCC_OscConfig+0x280>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fc f923 	bl	8001580 <HAL_InitTick>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d043      	beq.n	80053c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e249      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d023      	beq.n	8005394 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800534c:	4b3d      	ldr	r3, [pc, #244]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a3c      	ldr	r2, [pc, #240]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fc f95e 	bl	8001618 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005360:	f7fc f95a 	bl	8001618 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e232      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005372:	4b34      	ldr	r3, [pc, #208]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537e:	4b31      	ldr	r3, [pc, #196]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	061b      	lsls	r3, r3, #24
 800538c:	492d      	ldr	r1, [pc, #180]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
 8005392:	e01a      	b.n	80053ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2a      	ldr	r2, [pc, #168]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800539a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fc f93a 	bl	8001618 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a8:	f7fc f936 	bl	8001618 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e20e      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053ba:	4b22      	ldr	r3, [pc, #136]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x1e0>
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d041      	beq.n	800545a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01c      	beq.n	8005418 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053de:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e4:	4a17      	ldr	r2, [pc, #92]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fc f913 	bl	8001618 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fc f90f 	bl	8001618 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1e7      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0ef      	beq.n	80053f6 <HAL_RCC_OscConfig+0x22e>
 8005416:	e020      	b.n	800545a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541e:	4a09      	ldr	r2, [pc, #36]	; (8005444 <HAL_RCC_OscConfig+0x27c>)
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005428:	f7fc f8f6 	bl	8001618 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800542e:	e00d      	b.n	800544c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005430:	f7fc f8f2 	bl	8001618 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d906      	bls.n	800544c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e1ca      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000
 8005448:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800544c:	4b8c      	ldr	r3, [pc, #560]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 800544e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1ea      	bne.n	8005430 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80a6 	beq.w	80055b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005468:	2300      	movs	r3, #0
 800546a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800546c:	4b84      	ldr	r3, [pc, #528]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 800546e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_OscConfig+0x2b4>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x2b6>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	4b7f      	ldr	r3, [pc, #508]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	4a7e      	ldr	r2, [pc, #504]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548c:	6593      	str	r3, [r2, #88]	; 0x58
 800548e:	4b7c      	ldr	r3, [pc, #496]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800549a:	2301      	movs	r3, #1
 800549c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549e:	4b79      	ldr	r3, [pc, #484]	; (8005684 <HAL_RCC_OscConfig+0x4bc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d118      	bne.n	80054dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054aa:	4b76      	ldr	r3, [pc, #472]	; (8005684 <HAL_RCC_OscConfig+0x4bc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a75      	ldr	r2, [pc, #468]	; (8005684 <HAL_RCC_OscConfig+0x4bc>)
 80054b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b6:	f7fc f8af 	bl	8001618 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054be:	f7fc f8ab 	bl	8001618 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e183      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d0:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <HAL_RCC_OscConfig+0x4bc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d108      	bne.n	80054f6 <HAL_RCC_OscConfig+0x32e>
 80054e4:	4b66      	ldr	r3, [pc, #408]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	4a65      	ldr	r2, [pc, #404]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054f4:	e024      	b.n	8005540 <HAL_RCC_OscConfig+0x378>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d110      	bne.n	8005520 <HAL_RCC_OscConfig+0x358>
 80054fe:	4b60      	ldr	r3, [pc, #384]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	4a5e      	ldr	r2, [pc, #376]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005506:	f043 0304 	orr.w	r3, r3, #4
 800550a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800550e:	4b5c      	ldr	r3, [pc, #368]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	4a5a      	ldr	r2, [pc, #360]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800551e:	e00f      	b.n	8005540 <HAL_RCC_OscConfig+0x378>
 8005520:	4b57      	ldr	r3, [pc, #348]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	4a56      	ldr	r2, [pc, #344]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005530:	4b53      	ldr	r3, [pc, #332]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	4a52      	ldr	r2, [pc, #328]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005538:	f023 0304 	bic.w	r3, r3, #4
 800553c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d016      	beq.n	8005576 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005548:	f7fc f866 	bl	8001618 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554e:	e00a      	b.n	8005566 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005550:	f7fc f862 	bl	8001618 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e138      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005566:	4b46      	ldr	r3, [pc, #280]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ed      	beq.n	8005550 <HAL_RCC_OscConfig+0x388>
 8005574:	e015      	b.n	80055a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005576:	f7fc f84f 	bl	8001618 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800557c:	e00a      	b.n	8005594 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557e:	f7fc f84b 	bl	8001618 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f241 3288 	movw	r2, #5000	; 0x1388
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e121      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005594:	4b3a      	ldr	r3, [pc, #232]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1ed      	bne.n	800557e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055a2:	7ffb      	ldrb	r3, [r7, #31]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d105      	bne.n	80055b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a8:	4b35      	ldr	r3, [pc, #212]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ac:	4a34      	ldr	r2, [pc, #208]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 80055ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d03c      	beq.n	800563a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01c      	beq.n	8005602 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055c8:	4b2d      	ldr	r3, [pc, #180]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ce:	4a2c      	ldr	r2, [pc, #176]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fc f81e 	bl	8001618 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055e0:	f7fc f81a 	bl	8001618 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e0f2      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055f2:	4b23      	ldr	r3, [pc, #140]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 80055f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ef      	beq.n	80055e0 <HAL_RCC_OscConfig+0x418>
 8005600:	e01b      	b.n	800563a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005602:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005608:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005612:	f7fc f801 	bl	8001618 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800561a:	f7fb fffd 	bl	8001618 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e0d5      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800562c:	4b14      	ldr	r3, [pc, #80]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 800562e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ef      	bne.n	800561a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80c9 	beq.w	80057d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 030c 	and.w	r3, r3, #12
 800564c:	2b0c      	cmp	r3, #12
 800564e:	f000 8083 	beq.w	8005758 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d15e      	bne.n	8005718 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a08      	ldr	r2, [pc, #32]	; (8005680 <HAL_RCC_OscConfig+0x4b8>)
 8005660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005666:	f7fb ffd7 	bl	8001618 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800566c:	e00c      	b.n	8005688 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566e:	f7fb ffd3 	bl	8001618 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d905      	bls.n	8005688 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e0ab      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
 8005680:	40021000 	.word	0x40021000
 8005684:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005688:	4b55      	ldr	r3, [pc, #340]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ec      	bne.n	800566e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005694:	4b52      	ldr	r3, [pc, #328]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	4b52      	ldr	r3, [pc, #328]	; (80057e4 <HAL_RCC_OscConfig+0x61c>)
 800569a:	4013      	ands	r3, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6a11      	ldr	r1, [r2, #32]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056a4:	3a01      	subs	r2, #1
 80056a6:	0112      	lsls	r2, r2, #4
 80056a8:	4311      	orrs	r1, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80056ae:	0212      	lsls	r2, r2, #8
 80056b0:	4311      	orrs	r1, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056b6:	0852      	lsrs	r2, r2, #1
 80056b8:	3a01      	subs	r2, #1
 80056ba:	0552      	lsls	r2, r2, #21
 80056bc:	4311      	orrs	r1, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	3a01      	subs	r2, #1
 80056c6:	0652      	lsls	r2, r2, #25
 80056c8:	4311      	orrs	r1, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056ce:	06d2      	lsls	r2, r2, #27
 80056d0:	430a      	orrs	r2, r1
 80056d2:	4943      	ldr	r1, [pc, #268]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d8:	4b41      	ldr	r3, [pc, #260]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a40      	ldr	r2, [pc, #256]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 80056de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056e4:	4b3e      	ldr	r3, [pc, #248]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a3d      	ldr	r2, [pc, #244]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 80056ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fb ff92 	bl	8001618 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fb ff8e 	bl	8001618 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e066      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800570a:	4b35      	ldr	r3, [pc, #212]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCC_OscConfig+0x530>
 8005716:	e05e      	b.n	80057d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005718:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a30      	ldr	r2, [pc, #192]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 800571e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fb ff78 	bl	8001618 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572c:	f7fb ff74 	bl	8001618 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e04c      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800573e:	4b28      	ldr	r3, [pc, #160]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1f0      	bne.n	800572c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800574a:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	4924      	ldr	r1, [pc, #144]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_RCC_OscConfig+0x620>)
 8005752:	4013      	ands	r3, r2
 8005754:	60cb      	str	r3, [r1, #12]
 8005756:	e03e      	b.n	80057d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e039      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005764:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <HAL_RCC_OscConfig+0x618>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f003 0203 	and.w	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	429a      	cmp	r2, r3
 8005776:	d12c      	bne.n	80057d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	3b01      	subs	r3, #1
 8005784:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005786:	429a      	cmp	r2, r3
 8005788:	d123      	bne.n	80057d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d11b      	bne.n	80057d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d113      	bne.n	80057d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	3b01      	subs	r3, #1
 80057b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d109      	bne.n	80057d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	3b01      	subs	r3, #1
 80057cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d001      	beq.n	80057d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40021000 	.word	0x40021000
 80057e4:	019f800c 	.word	0x019f800c
 80057e8:	feeefffc 	.word	0xfeeefffc

080057ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e11e      	b.n	8005a42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005804:	4b91      	ldr	r3, [pc, #580]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d910      	bls.n	8005834 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005812:	4b8e      	ldr	r3, [pc, #568]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 020f 	bic.w	r2, r3, #15
 800581a:	498c      	ldr	r1, [pc, #560]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005822:	4b8a      	ldr	r3, [pc, #552]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e106      	b.n	8005a42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d073      	beq.n	8005928 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d129      	bne.n	800589c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005848:	4b81      	ldr	r3, [pc, #516]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0f4      	b.n	8005a42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005858:	f000 f966 	bl	8005b28 <RCC_GetSysClockFreqFromPLLSource>
 800585c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4a7c      	ldr	r2, [pc, #496]	; (8005a54 <HAL_RCC_ClockConfig+0x268>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d93f      	bls.n	80058e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005866:	4b7a      	ldr	r3, [pc, #488]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800587a:	2b00      	cmp	r3, #0
 800587c:	d033      	beq.n	80058e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005882:	2b00      	cmp	r3, #0
 8005884:	d12f      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005886:	4b72      	ldr	r3, [pc, #456]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800588e:	4a70      	ldr	r2, [pc, #448]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005894:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e024      	b.n	80058e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d107      	bne.n	80058b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058a4:	4b6a      	ldr	r3, [pc, #424]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0c6      	b.n	8005a42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b4:	4b66      	ldr	r3, [pc, #408]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0be      	b.n	8005a42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058c4:	f000 f8ce 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 80058c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4a61      	ldr	r2, [pc, #388]	; (8005a54 <HAL_RCC_ClockConfig+0x268>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d909      	bls.n	80058e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058d2:	4b5f      	ldr	r3, [pc, #380]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058da:	4a5d      	ldr	r2, [pc, #372]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 80058dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058e6:	4b5a      	ldr	r3, [pc, #360]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f023 0203 	bic.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4957      	ldr	r1, [pc, #348]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f8:	f7fb fe8e 	bl	8001618 <HAL_GetTick>
 80058fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fe:	e00a      	b.n	8005916 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005900:	f7fb fe8a 	bl	8001618 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	f241 3288 	movw	r2, #5000	; 0x1388
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e095      	b.n	8005a42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005916:	4b4e      	ldr	r3, [pc, #312]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 020c 	and.w	r2, r3, #12
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	429a      	cmp	r2, r3
 8005926:	d1eb      	bne.n	8005900 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d023      	beq.n	800597c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005940:	4b43      	ldr	r3, [pc, #268]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	4a42      	ldr	r2, [pc, #264]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800594a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005958:	4b3d      	ldr	r3, [pc, #244]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005960:	4a3b      	ldr	r2, [pc, #236]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005968:	4b39      	ldr	r3, [pc, #228]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4936      	ldr	r1, [pc, #216]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
 800597a:	e008      	b.n	800598e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b80      	cmp	r3, #128	; 0x80
 8005980:	d105      	bne.n	800598e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005982:	4b33      	ldr	r3, [pc, #204]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4a32      	ldr	r2, [pc, #200]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800598e:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d21d      	bcs.n	80059d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599c:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 020f 	bic.w	r2, r3, #15
 80059a4:	4929      	ldr	r1, [pc, #164]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059ac:	f7fb fe34 	bl	8001618 <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b4:	f7fb fe30 	bl	8001618 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e03b      	b.n	8005a42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d1ed      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4917      	ldr	r1, [pc, #92]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	490f      	ldr	r1, [pc, #60]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a16:	f000 f825 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <HAL_RCC_ClockConfig+0x264>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	490c      	ldr	r1, [pc, #48]	; (8005a58 <HAL_RCC_ClockConfig+0x26c>)
 8005a28:	5ccb      	ldrb	r3, [r1, r3]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a32:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <HAL_RCC_ClockConfig+0x270>)
 8005a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <HAL_RCC_ClockConfig+0x274>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fb fda0 	bl	8001580 <HAL_InitTick>
 8005a40:	4603      	mov	r3, r0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40022000 	.word	0x40022000
 8005a50:	40021000 	.word	0x40021000
 8005a54:	04c4b400 	.word	0x04c4b400
 8005a58:	0800c19c 	.word	0x0800c19c
 8005a5c:	20000000 	.word	0x20000000
 8005a60:	20000004 	.word	0x20000004

08005a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a6a:	4b2c      	ldr	r3, [pc, #176]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d102      	bne.n	8005a7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a76:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e047      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a7c:	4b27      	ldr	r3, [pc, #156]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 030c 	and.w	r3, r3, #12
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d102      	bne.n	8005a8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a88:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	e03e      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a8e:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b0c      	cmp	r3, #12
 8005a98:	d136      	bne.n	8005b08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a9a:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aa4:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ab8:	4a1a      	ldr	r2, [pc, #104]	; (8005b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ac2:	68d2      	ldr	r2, [r2, #12]
 8005ac4:	0a12      	lsrs	r2, r2, #8
 8005ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	617b      	str	r3, [r7, #20]
      break;
 8005ad0:	e00c      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ad2:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005adc:	68d2      	ldr	r2, [r2, #12]
 8005ade:	0a12      	lsrs	r2, r2, #8
 8005ae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]
      break;
 8005aea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aec:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	0e5b      	lsrs	r3, r3, #25
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	3301      	adds	r3, #1
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	e001      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b0c:	693b      	ldr	r3, [r7, #16]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	00f42400 	.word	0x00f42400
 8005b24:	02dc6c00 	.word	0x02dc6c00

08005b28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	091b      	lsrs	r3, r3, #4
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d10c      	bne.n	8005b66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b4c:	4a17      	ldr	r2, [pc, #92]	; (8005bac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b56:	68d2      	ldr	r2, [r2, #12]
 8005b58:	0a12      	lsrs	r2, r2, #8
 8005b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	617b      	str	r3, [r7, #20]
    break;
 8005b64:	e00c      	b.n	8005b80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b66:	4a12      	ldr	r2, [pc, #72]	; (8005bb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b70:	68d2      	ldr	r2, [r2, #12]
 8005b72:	0a12      	lsrs	r2, r2, #8
 8005b74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b78:	fb02 f303 	mul.w	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
    break;
 8005b7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	0e5b      	lsrs	r3, r3, #25
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b9a:	687b      	ldr	r3, [r7, #4]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	02dc6c00 	.word	0x02dc6c00
 8005bb0:	00f42400 	.word	0x00f42400

08005bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8098 	beq.w	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd6:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be2:	4b40      	ldr	r3, [pc, #256]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	4a3f      	ldr	r2, [pc, #252]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bec:	6593      	str	r3, [r2, #88]	; 0x58
 8005bee:	4b3d      	ldr	r3, [pc, #244]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a39      	ldr	r2, [pc, #228]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c0a:	f7fb fd05 	bl	8001618 <HAL_GetTick>
 8005c0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c10:	e009      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c12:	f7fb fd01 	bl	8001618 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d902      	bls.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	74fb      	strb	r3, [r7, #19]
        break;
 8005c24:	e005      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c26:	4b30      	ldr	r3, [pc, #192]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0ef      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c32:	7cfb      	ldrb	r3, [r7, #19]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d159      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c38:	4b2a      	ldr	r3, [pc, #168]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01e      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d019      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c54:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c60:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c70:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c80:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d016      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fb fcc1 	bl	8001618 <HAL_GetTick>
 8005c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c98:	e00b      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9a:	f7fb fcbd 	bl	8001618 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d902      	bls.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	74fb      	strb	r3, [r7, #19]
            break;
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ec      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10b      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	4903      	ldr	r1, [pc, #12]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cde:	7cfb      	ldrb	r3, [r7, #19]
 8005ce0:	74bb      	strb	r3, [r7, #18]
 8005ce2:	e005      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	7cfb      	ldrb	r3, [r7, #19]
 8005cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cf0:	7c7b      	ldrb	r3, [r7, #17]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d105      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf6:	4ba6      	ldr	r3, [pc, #664]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfa:	4aa5      	ldr	r2, [pc, #660]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d0e:	4ba0      	ldr	r3, [pc, #640]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f023 0203 	bic.w	r2, r3, #3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	499c      	ldr	r1, [pc, #624]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d30:	4b97      	ldr	r3, [pc, #604]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	f023 020c 	bic.w	r2, r3, #12
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4994      	ldr	r1, [pc, #592]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d52:	4b8f      	ldr	r3, [pc, #572]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	498b      	ldr	r1, [pc, #556]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d74:	4b86      	ldr	r3, [pc, #536]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	4983      	ldr	r1, [pc, #524]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d96:	4b7e      	ldr	r3, [pc, #504]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	497a      	ldr	r1, [pc, #488]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005db8:	4b75      	ldr	r3, [pc, #468]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	4972      	ldr	r1, [pc, #456]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dda:	4b6d      	ldr	r3, [pc, #436]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	4969      	ldr	r1, [pc, #420]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dfc:	4b64      	ldr	r3, [pc, #400]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	4961      	ldr	r1, [pc, #388]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e1e:	4b5c      	ldr	r3, [pc, #368]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	4958      	ldr	r1, [pc, #352]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d015      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e40:	4b53      	ldr	r3, [pc, #332]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	4950      	ldr	r1, [pc, #320]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5e:	d105      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e60:	4b4b      	ldr	r3, [pc, #300]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a4a      	ldr	r2, [pc, #296]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d015      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e78:	4b45      	ldr	r3, [pc, #276]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	4942      	ldr	r1, [pc, #264]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e98:	4b3d      	ldr	r3, [pc, #244]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4a3c      	ldr	r2, [pc, #240]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ea2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d015      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005eb0:	4b37      	ldr	r3, [pc, #220]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	4934      	ldr	r1, [pc, #208]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ece:	d105      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed0:	4b2f      	ldr	r3, [pc, #188]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ee8:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	4926      	ldr	r1, [pc, #152]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f06:	d105      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f08:	4b21      	ldr	r3, [pc, #132]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a20      	ldr	r2, [pc, #128]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	4918      	ldr	r1, [pc, #96]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f3e:	d105      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f40:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a12      	ldr	r2, [pc, #72]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f58:	4b0d      	ldr	r3, [pc, #52]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	490a      	ldr	r1, [pc, #40]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f76:	d105      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f84:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40021000 	.word	0x40021000

08005f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e049      	b.n	800603a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fb f910 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f001 f876 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e042      	b.n	80060e2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_TIM_Base_Start+0xac>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d018      	beq.n	80060a0 <HAL_TIM_Base_Start+0x5c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006076:	d013      	beq.n	80060a0 <HAL_TIM_Base_Start+0x5c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <HAL_TIM_Base_Start+0xb0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00e      	beq.n	80060a0 <HAL_TIM_Base_Start+0x5c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1c      	ldr	r2, [pc, #112]	; (80060f8 <HAL_TIM_Base_Start+0xb4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d009      	beq.n	80060a0 <HAL_TIM_Base_Start+0x5c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1a      	ldr	r2, [pc, #104]	; (80060fc <HAL_TIM_Base_Start+0xb8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d004      	beq.n	80060a0 <HAL_TIM_Base_Start+0x5c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a19      	ldr	r2, [pc, #100]	; (8006100 <HAL_TIM_Base_Start+0xbc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d115      	bne.n	80060cc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	4b17      	ldr	r3, [pc, #92]	; (8006104 <HAL_TIM_Base_Start+0xc0>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b06      	cmp	r3, #6
 80060b0:	d015      	beq.n	80060de <HAL_TIM_Base_Start+0x9a>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b8:	d011      	beq.n	80060de <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0201 	orr.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	e008      	b.n	80060de <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e000      	b.n	80060e0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40013400 	.word	0x40013400
 8006100:	40014000 	.word	0x40014000
 8006104:	00010007 	.word	0x00010007

08006108 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e049      	b.n	80061ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb f8d4 	bl	80012dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f000 ffbc 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e03c      	b.n	800625e <HAL_TIM_PWM_Start_DMA+0xa6>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d109      	bne.n	80061fe <HAL_TIM_PWM_Start_DMA+0x46>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	bf0c      	ite	eq
 80061f6:	2301      	moveq	r3, #1
 80061f8:	2300      	movne	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	e02f      	b.n	800625e <HAL_TIM_PWM_Start_DMA+0xa6>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b08      	cmp	r3, #8
 8006202:	d109      	bne.n	8006218 <HAL_TIM_PWM_Start_DMA+0x60>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	e022      	b.n	800625e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b0c      	cmp	r3, #12
 800621c:	d109      	bne.n	8006232 <HAL_TIM_PWM_Start_DMA+0x7a>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	e015      	b.n	800625e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b10      	cmp	r3, #16
 8006236:	d109      	bne.n	800624c <HAL_TIM_PWM_Start_DMA+0x94>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e008      	b.n	800625e <HAL_TIM_PWM_Start_DMA+0xa6>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
 8006264:	e1a6      	b.n	80065b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <HAL_TIM_PWM_Start_DMA+0xc8>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	bf0c      	ite	eq
 8006278:	2301      	moveq	r3, #1
 800627a:	2300      	movne	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e03c      	b.n	80062fa <HAL_TIM_PWM_Start_DMA+0x142>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b04      	cmp	r3, #4
 8006284:	d109      	bne.n	800629a <HAL_TIM_PWM_Start_DMA+0xe2>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b01      	cmp	r3, #1
 8006290:	bf0c      	ite	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	2300      	movne	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	e02f      	b.n	80062fa <HAL_TIM_PWM_Start_DMA+0x142>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d109      	bne.n	80062b4 <HAL_TIM_PWM_Start_DMA+0xfc>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	e022      	b.n	80062fa <HAL_TIM_PWM_Start_DMA+0x142>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	d109      	bne.n	80062ce <HAL_TIM_PWM_Start_DMA+0x116>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	bf0c      	ite	eq
 80062c6:	2301      	moveq	r3, #1
 80062c8:	2300      	movne	r3, #0
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	e015      	b.n	80062fa <HAL_TIM_PWM_Start_DMA+0x142>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d109      	bne.n	80062e8 <HAL_TIM_PWM_Start_DMA+0x130>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	e008      	b.n	80062fa <HAL_TIM_PWM_Start_DMA+0x142>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d034      	beq.n	8006368 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_TIM_PWM_Start_DMA+0x152>
 8006304:	887b      	ldrh	r3, [r7, #2]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e152      	b.n	80065b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_TIM_PWM_Start_DMA+0x166>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800631c:	e026      	b.n	800636c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b04      	cmp	r3, #4
 8006322:	d104      	bne.n	800632e <HAL_TIM_PWM_Start_DMA+0x176>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800632c:	e01e      	b.n	800636c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b08      	cmp	r3, #8
 8006332:	d104      	bne.n	800633e <HAL_TIM_PWM_Start_DMA+0x186>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800633c:	e016      	b.n	800636c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b0c      	cmp	r3, #12
 8006342:	d104      	bne.n	800634e <HAL_TIM_PWM_Start_DMA+0x196>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800634c:	e00e      	b.n	800636c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b10      	cmp	r3, #16
 8006352:	d104      	bne.n	800635e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800635c:	e006      	b.n	800636c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006366:	e001      	b.n	800636c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e123      	b.n	80065b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b0c      	cmp	r3, #12
 8006370:	f200 80ae 	bhi.w	80064d0 <HAL_TIM_PWM_Start_DMA+0x318>
 8006374:	a201      	add	r2, pc, #4	; (adr r2, 800637c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	080063b1 	.word	0x080063b1
 8006380:	080064d1 	.word	0x080064d1
 8006384:	080064d1 	.word	0x080064d1
 8006388:	080064d1 	.word	0x080064d1
 800638c:	080063f9 	.word	0x080063f9
 8006390:	080064d1 	.word	0x080064d1
 8006394:	080064d1 	.word	0x080064d1
 8006398:	080064d1 	.word	0x080064d1
 800639c:	08006441 	.word	0x08006441
 80063a0:	080064d1 	.word	0x080064d1
 80063a4:	080064d1 	.word	0x080064d1
 80063a8:	080064d1 	.word	0x080064d1
 80063ac:	08006489 	.word	0x08006489
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	4a81      	ldr	r2, [pc, #516]	; (80065bc <HAL_TIM_PWM_Start_DMA+0x404>)
 80063b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	4a80      	ldr	r2, [pc, #512]	; (80065c0 <HAL_TIM_PWM_Start_DMA+0x408>)
 80063be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	4a7f      	ldr	r2, [pc, #508]	; (80065c4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80063c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3334      	adds	r3, #52	; 0x34
 80063d4:	461a      	mov	r2, r3
 80063d6:	887b      	ldrh	r3, [r7, #2]
 80063d8:	f7fc fd42 	bl	8002e60 <HAL_DMA_Start_IT>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0e6      	b.n	80065b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f4:	60da      	str	r2, [r3, #12]
      break;
 80063f6:	e06e      	b.n	80064d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	4a6f      	ldr	r2, [pc, #444]	; (80065bc <HAL_TIM_PWM_Start_DMA+0x404>)
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	4a6e      	ldr	r2, [pc, #440]	; (80065c0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006406:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	4a6d      	ldr	r2, [pc, #436]	; (80065c4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800640e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3338      	adds	r3, #56	; 0x38
 800641c:	461a      	mov	r2, r3
 800641e:	887b      	ldrh	r3, [r7, #2]
 8006420:	f7fc fd1e 	bl	8002e60 <HAL_DMA_Start_IT>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e0c2      	b.n	80065b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800643c:	60da      	str	r2, [r3, #12]
      break;
 800643e:	e04a      	b.n	80064d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	4a5d      	ldr	r2, [pc, #372]	; (80065bc <HAL_TIM_PWM_Start_DMA+0x404>)
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	4a5c      	ldr	r2, [pc, #368]	; (80065c0 <HAL_TIM_PWM_Start_DMA+0x408>)
 800644e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a5b      	ldr	r2, [pc, #364]	; (80065c4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8006456:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	333c      	adds	r3, #60	; 0x3c
 8006464:	461a      	mov	r2, r3
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	f7fc fcfa 	bl	8002e60 <HAL_DMA_Start_IT>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e09e      	b.n	80065b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006484:	60da      	str	r2, [r3, #12]
      break;
 8006486:	e026      	b.n	80064d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	4a4b      	ldr	r2, [pc, #300]	; (80065bc <HAL_TIM_PWM_Start_DMA+0x404>)
 800648e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	4a4a      	ldr	r2, [pc, #296]	; (80065c0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8006496:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	4a49      	ldr	r2, [pc, #292]	; (80065c4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800649e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3340      	adds	r3, #64	; 0x40
 80064ac:	461a      	mov	r2, r3
 80064ae:	887b      	ldrh	r3, [r7, #2]
 80064b0:	f7fc fcd6 	bl	8002e60 <HAL_DMA_Start_IT>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e07a      	b.n	80065b4 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064cc:	60da      	str	r2, [r3, #12]
      break;
 80064ce:	e002      	b.n	80064d6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	75fb      	strb	r3, [r7, #23]
      break;
 80064d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d16a      	bne.n	80065b2 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2201      	movs	r2, #1
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fa1b 	bl	8007920 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a36      	ldr	r2, [pc, #216]	; (80065c8 <HAL_TIM_PWM_Start_DMA+0x410>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_TIM_PWM_Start_DMA+0x364>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a34      	ldr	r2, [pc, #208]	; (80065cc <HAL_TIM_PWM_Start_DMA+0x414>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_TIM_PWM_Start_DMA+0x364>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a33      	ldr	r2, [pc, #204]	; (80065d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_TIM_PWM_Start_DMA+0x364>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a31      	ldr	r2, [pc, #196]	; (80065d4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_TIM_PWM_Start_DMA+0x364>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a30      	ldr	r2, [pc, #192]	; (80065d8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d101      	bne.n	8006520 <HAL_TIM_PWM_Start_DMA+0x368>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_TIM_PWM_Start_DMA+0x36a>
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d007      	beq.n	8006536 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006534:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <HAL_TIM_PWM_Start_DMA+0x410>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d018      	beq.n	8006572 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d013      	beq.n	8006572 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a23      	ldr	r2, [pc, #140]	; (80065dc <HAL_TIM_PWM_Start_DMA+0x424>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00e      	beq.n	8006572 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a21      	ldr	r2, [pc, #132]	; (80065e0 <HAL_TIM_PWM_Start_DMA+0x428>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d009      	beq.n	8006572 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <HAL_TIM_PWM_Start_DMA+0x414>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d004      	beq.n	8006572 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a18      	ldr	r2, [pc, #96]	; (80065d0 <HAL_TIM_PWM_Start_DMA+0x418>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d115      	bne.n	800659e <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b06      	cmp	r3, #6
 8006582:	d015      	beq.n	80065b0 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658a:	d011      	beq.n	80065b0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659c:	e008      	b.n	80065b0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0201 	orr.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e000      	b.n	80065b2 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	08006fb3 	.word	0x08006fb3
 80065c0:	0800705b 	.word	0x0800705b
 80065c4:	08006f21 	.word	0x08006f21
 80065c8:	40012c00 	.word	0x40012c00
 80065cc:	40013400 	.word	0x40013400
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	00010007 	.word	0x00010007

080065e8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b0c      	cmp	r3, #12
 80065fa:	d855      	bhi.n	80066a8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80065fc:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80065fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006602:	bf00      	nop
 8006604:	08006639 	.word	0x08006639
 8006608:	080066a9 	.word	0x080066a9
 800660c:	080066a9 	.word	0x080066a9
 8006610:	080066a9 	.word	0x080066a9
 8006614:	08006655 	.word	0x08006655
 8006618:	080066a9 	.word	0x080066a9
 800661c:	080066a9 	.word	0x080066a9
 8006620:	080066a9 	.word	0x080066a9
 8006624:	08006671 	.word	0x08006671
 8006628:	080066a9 	.word	0x080066a9
 800662c:	080066a9 	.word	0x080066a9
 8006630:	080066a9 	.word	0x080066a9
 8006634:	0800668d 	.word	0x0800668d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006646:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	4618      	mov	r0, r3
 800664e:	f7fc fc82 	bl	8002f56 <HAL_DMA_Abort_IT>
      break;
 8006652:	e02c      	b.n	80066ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	4618      	mov	r0, r3
 800666a:	f7fc fc74 	bl	8002f56 <HAL_DMA_Abort_IT>
      break;
 800666e:	e01e      	b.n	80066ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800667e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4618      	mov	r0, r3
 8006686:	f7fc fc66 	bl	8002f56 <HAL_DMA_Abort_IT>
      break;
 800668a:	e010      	b.n	80066ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800669a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fc fc58 	bl	8002f56 <HAL_DMA_Abort_IT>
      break;
 80066a6:	e002      	b.n	80066ae <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
      break;
 80066ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f040 8081 	bne.w	80067b8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2200      	movs	r2, #0
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 f92e 	bl	8007920 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a3e      	ldr	r2, [pc, #248]	; (80067c4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a3d      	ldr	r2, [pc, #244]	; (80067c8 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a3b      	ldr	r2, [pc, #236]	; (80067cc <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a3a      	ldr	r2, [pc, #232]	; (80067d0 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a38      	ldr	r2, [pc, #224]	; (80067d4 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_PWM_Stop_DMA+0x112>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <HAL_TIM_PWM_Stop_DMA+0x114>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d017      	beq.n	8006730 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6a1a      	ldr	r2, [r3, #32]
 8006706:	f241 1311 	movw	r3, #4369	; 0x1111
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10f      	bne.n	8006730 <HAL_TIM_PWM_Stop_DMA+0x148>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	f244 4344 	movw	r3, #17476	; 0x4444
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <HAL_TIM_PWM_Stop_DMA+0x148>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800672e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6a1a      	ldr	r2, [r3, #32]
 8006736:	f241 1311 	movw	r3, #4369	; 0x1111
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10f      	bne.n	8006760 <HAL_TIM_PWM_Stop_DMA+0x178>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6a1a      	ldr	r2, [r3, #32]
 8006746:	f244 4344 	movw	r3, #17476	; 0x4444
 800674a:	4013      	ands	r3, r2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d107      	bne.n	8006760 <HAL_TIM_PWM_Stop_DMA+0x178>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <HAL_TIM_PWM_Stop_DMA+0x188>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800676e:	e023      	b.n	80067b8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d104      	bne.n	8006780 <HAL_TIM_PWM_Stop_DMA+0x198>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800677e:	e01b      	b.n	80067b8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b08      	cmp	r3, #8
 8006784:	d104      	bne.n	8006790 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800678e:	e013      	b.n	80067b8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b0c      	cmp	r3, #12
 8006794:	d104      	bne.n	80067a0 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800679e:	e00b      	b.n	80067b8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d104      	bne.n	80067b0 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067ae:	e003      	b.n	80067b8 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40012c00 	.word	0x40012c00
 80067c8:	40013400 	.word	0x40013400
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800

080067d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d020      	beq.n	800683c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01b      	beq.n	800683c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0202 	mvn.w	r2, #2
 800680c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fb4a 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006828:	e005      	b.n	8006836 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fb3c 	bl	8006ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fb4d 	bl	8006ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d020      	beq.n	8006888 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01b      	beq.n	8006888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f06f 0204 	mvn.w	r2, #4
 8006858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fb24 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 8006874:	e005      	b.n	8006882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fb16 	bl	8006ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fb27 	bl	8006ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d020      	beq.n	80068d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01b      	beq.n	80068d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0208 	mvn.w	r2, #8
 80068a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2204      	movs	r2, #4
 80068aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fafe 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 faf0 	bl	8006ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fb01 	bl	8006ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 0310 	and.w	r3, r3, #16
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d020      	beq.n	8006920 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01b      	beq.n	8006920 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0210 	mvn.w	r2, #16
 80068f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2208      	movs	r2, #8
 80068f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fad8 	bl	8006ebc <HAL_TIM_IC_CaptureCallback>
 800690c:	e005      	b.n	800691a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 faca 	bl	8006ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fadb 	bl	8006ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00c      	beq.n	8006944 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0201 	mvn.w	r2, #1
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 faa8 	bl	8006e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800696a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 f915 	bl	8007b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00c      	beq.n	8006996 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800698e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f90d 	bl	8007bb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00c      	beq.n	80069ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d007      	beq.n	80069ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fa9f 	bl	8006ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d007      	beq.n	80069de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f06f 0220 	mvn.w	r2, #32
 80069d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 f8d5 	bl	8007b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00c      	beq.n	8006a02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80069fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f8e1 	bl	8007bc4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00c      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d007      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f8d9 	bl	8007bd8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00c      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 f8d1 	bl	8007bec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00c      	beq.n	8006a6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f8c9 	bl	8007c00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a6e:	bf00      	nop
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e0ff      	b.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b14      	cmp	r3, #20
 8006aa2:	f200 80f0 	bhi.w	8006c86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006aa6:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006b01 	.word	0x08006b01
 8006ab0:	08006c87 	.word	0x08006c87
 8006ab4:	08006c87 	.word	0x08006c87
 8006ab8:	08006c87 	.word	0x08006c87
 8006abc:	08006b41 	.word	0x08006b41
 8006ac0:	08006c87 	.word	0x08006c87
 8006ac4:	08006c87 	.word	0x08006c87
 8006ac8:	08006c87 	.word	0x08006c87
 8006acc:	08006b83 	.word	0x08006b83
 8006ad0:	08006c87 	.word	0x08006c87
 8006ad4:	08006c87 	.word	0x08006c87
 8006ad8:	08006c87 	.word	0x08006c87
 8006adc:	08006bc3 	.word	0x08006bc3
 8006ae0:	08006c87 	.word	0x08006c87
 8006ae4:	08006c87 	.word	0x08006c87
 8006ae8:	08006c87 	.word	0x08006c87
 8006aec:	08006c05 	.word	0x08006c05
 8006af0:	08006c87 	.word	0x08006c87
 8006af4:	08006c87 	.word	0x08006c87
 8006af8:	08006c87 	.word	0x08006c87
 8006afc:	08006c45 	.word	0x08006c45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fb78 	bl	80071fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0208 	orr.w	r2, r2, #8
 8006b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0204 	bic.w	r2, r2, #4
 8006b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6999      	ldr	r1, [r3, #24]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	619a      	str	r2, [r3, #24]
      break;
 8006b3e:	e0a5      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fbe8 	bl	800731c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6999      	ldr	r1, [r3, #24]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	021a      	lsls	r2, r3, #8
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	619a      	str	r2, [r3, #24]
      break;
 8006b80:	e084      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fc51 	bl	8007430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0208 	orr.w	r2, r2, #8
 8006b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0204 	bic.w	r2, r2, #4
 8006bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69d9      	ldr	r1, [r3, #28]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	61da      	str	r2, [r3, #28]
      break;
 8006bc0:	e064      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fcb9 	bl	8007540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69d9      	ldr	r1, [r3, #28]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	021a      	lsls	r2, r3, #8
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	61da      	str	r2, [r3, #28]
      break;
 8006c02:	e043      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fd22 	bl	8007654 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0208 	orr.w	r2, r2, #8
 8006c1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0204 	bic.w	r2, r2, #4
 8006c2e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c42:	e023      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fd66 	bl	800771c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c84:	e002      	b.n	8006c8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop

08006ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIM_ConfigClockSource+0x1c>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e0de      	b.n	8006e7a <HAL_TIM_ConfigClockSource+0x1da>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a63      	ldr	r2, [pc, #396]	; (8006e84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	f000 80a9 	beq.w	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006cfc:	4a61      	ldr	r2, [pc, #388]	; (8006e84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	f200 80ae 	bhi.w	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d04:	4a60      	ldr	r2, [pc, #384]	; (8006e88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	f000 80a1 	beq.w	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d0c:	4a5e      	ldr	r2, [pc, #376]	; (8006e88 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	f200 80a6 	bhi.w	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d14:	4a5d      	ldr	r2, [pc, #372]	; (8006e8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	f000 8099 	beq.w	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d1c:	4a5b      	ldr	r2, [pc, #364]	; (8006e8c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f200 809e 	bhi.w	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d24:	4a5a      	ldr	r2, [pc, #360]	; (8006e90 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	f000 8091 	beq.w	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d2c:	4a58      	ldr	r2, [pc, #352]	; (8006e90 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	f200 8096 	bhi.w	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d38:	f000 8089 	beq.w	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d40:	f200 808e 	bhi.w	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d48:	d03e      	beq.n	8006dc8 <HAL_TIM_ConfigClockSource+0x128>
 8006d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d4e:	f200 8087 	bhi.w	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d56:	f000 8086 	beq.w	8006e66 <HAL_TIM_ConfigClockSource+0x1c6>
 8006d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5e:	d87f      	bhi.n	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d60:	2b70      	cmp	r3, #112	; 0x70
 8006d62:	d01a      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0xfa>
 8006d64:	2b70      	cmp	r3, #112	; 0x70
 8006d66:	d87b      	bhi.n	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d68:	2b60      	cmp	r3, #96	; 0x60
 8006d6a:	d050      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x16e>
 8006d6c:	2b60      	cmp	r3, #96	; 0x60
 8006d6e:	d877      	bhi.n	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d70:	2b50      	cmp	r3, #80	; 0x50
 8006d72:	d03c      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x14e>
 8006d74:	2b50      	cmp	r3, #80	; 0x50
 8006d76:	d873      	bhi.n	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d058      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x18e>
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d86f      	bhi.n	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d80:	2b30      	cmp	r3, #48	; 0x30
 8006d82:	d064      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d84:	2b30      	cmp	r3, #48	; 0x30
 8006d86:	d86b      	bhi.n	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d060      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d867      	bhi.n	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d05c      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d94:	2b10      	cmp	r3, #16
 8006d96:	d05a      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d98:	e062      	b.n	8006e60 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006daa:	f000 fd99 	bl	80078e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	609a      	str	r2, [r3, #8]
      break;
 8006dc6:	e04f      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dd8:	f000 fd82 	bl	80078e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dea:	609a      	str	r2, [r3, #8]
      break;
 8006dec:	e03c      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f000 fcf4 	bl	80077e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2150      	movs	r1, #80	; 0x50
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fd4d 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 8006e0c:	e02c      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f000 fd13 	bl	8007846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2160      	movs	r1, #96	; 0x60
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fd3d 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 8006e2c:	e01c      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f000 fcd4 	bl	80077e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2140      	movs	r1, #64	; 0x40
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fd2d 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 8006e4c:	e00c      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4619      	mov	r1, r3
 8006e58:	4610      	mov	r0, r2
 8006e5a:	f000 fd24 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 8006e5e:	e003      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	73fb      	strb	r3, [r7, #15]
      break;
 8006e64:	e000      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	00100070 	.word	0x00100070
 8006e88:	00100040 	.word	0x00100040
 8006e8c:	00100030 	.word	0x00100030
 8006e90:	00100020 	.word	0x00100020

08006e94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d107      	bne.n	8006f48 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f46:	e02a      	b.n	8006f9e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d107      	bne.n	8006f62 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2202      	movs	r2, #2
 8006f56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f60:	e01d      	b.n	8006f9e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d107      	bne.n	8006f7c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f7a:	e010      	b.n	8006f9e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d107      	bne.n	8006f96 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f94:	e003      	b.n	8006f9e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff ffb4 	bl	8006f0c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	771a      	strb	r2, [r3, #28]
}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d10b      	bne.n	8006fe2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d136      	bne.n	8007046 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe0:	e031      	b.n	8007046 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d10b      	bne.n	8007004 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d125      	bne.n	8007046 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007002:	e020      	b.n	8007046 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	429a      	cmp	r2, r3
 800700c:	d10b      	bne.n	8007026 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2204      	movs	r2, #4
 8007012:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d114      	bne.n	8007046 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007024:	e00f      	b.n	8007046 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	429a      	cmp	r2, r3
 800702e:	d10a      	bne.n	8007046 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2208      	movs	r2, #8
 8007034:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff ff42 	bl	8006ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	771a      	strb	r2, [r3, #28]
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d103      	bne.n	800707a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	771a      	strb	r2, [r3, #28]
 8007078:	e019      	b.n	80070ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d103      	bne.n	800708c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2202      	movs	r2, #2
 8007088:	771a      	strb	r2, [r3, #28]
 800708a:	e010      	b.n	80070ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d103      	bne.n	800709e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2204      	movs	r2, #4
 800709a:	771a      	strb	r2, [r3, #28]
 800709c:	e007      	b.n	80070ae <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d102      	bne.n	80070ae <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2208      	movs	r2, #8
 80070ac:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff ff18 	bl	8006ee4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	771a      	strb	r2, [r3, #28]
}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a42      	ldr	r2, [pc, #264]	; (80071e0 <TIM_Base_SetConfig+0x11c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00f      	beq.n	80070fc <TIM_Base_SetConfig+0x38>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e2:	d00b      	beq.n	80070fc <TIM_Base_SetConfig+0x38>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3f      	ldr	r2, [pc, #252]	; (80071e4 <TIM_Base_SetConfig+0x120>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d007      	beq.n	80070fc <TIM_Base_SetConfig+0x38>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a3e      	ldr	r2, [pc, #248]	; (80071e8 <TIM_Base_SetConfig+0x124>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_Base_SetConfig+0x38>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a3d      	ldr	r2, [pc, #244]	; (80071ec <TIM_Base_SetConfig+0x128>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d108      	bne.n	800710e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a33      	ldr	r2, [pc, #204]	; (80071e0 <TIM_Base_SetConfig+0x11c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01b      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d017      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a30      	ldr	r2, [pc, #192]	; (80071e4 <TIM_Base_SetConfig+0x120>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2f      	ldr	r2, [pc, #188]	; (80071e8 <TIM_Base_SetConfig+0x124>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00f      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2e      	ldr	r2, [pc, #184]	; (80071ec <TIM_Base_SetConfig+0x128>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00b      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2d      	ldr	r2, [pc, #180]	; (80071f0 <TIM_Base_SetConfig+0x12c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d007      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2c      	ldr	r2, [pc, #176]	; (80071f4 <TIM_Base_SetConfig+0x130>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d003      	beq.n	800714e <TIM_Base_SetConfig+0x8a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2b      	ldr	r2, [pc, #172]	; (80071f8 <TIM_Base_SetConfig+0x134>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d108      	bne.n	8007160 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a16      	ldr	r2, [pc, #88]	; (80071e0 <TIM_Base_SetConfig+0x11c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00f      	beq.n	80071ac <TIM_Base_SetConfig+0xe8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a17      	ldr	r2, [pc, #92]	; (80071ec <TIM_Base_SetConfig+0x128>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00b      	beq.n	80071ac <TIM_Base_SetConfig+0xe8>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a16      	ldr	r2, [pc, #88]	; (80071f0 <TIM_Base_SetConfig+0x12c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_Base_SetConfig+0xe8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <TIM_Base_SetConfig+0x130>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0xe8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a14      	ldr	r2, [pc, #80]	; (80071f8 <TIM_Base_SetConfig+0x134>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d105      	bne.n	80071d2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f023 0201 	bic.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	611a      	str	r2, [r3, #16]
  }
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40013400 	.word	0x40013400
 80071f0:	40014000 	.word	0x40014000
 80071f4:	40014400 	.word	0x40014400
 80071f8:	40014800 	.word	0x40014800

080071fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f023 0201 	bic.w	r2, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0303 	bic.w	r3, r3, #3
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f023 0302 	bic.w	r3, r3, #2
 8007248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a2c      	ldr	r2, [pc, #176]	; (8007308 <TIM_OC1_SetConfig+0x10c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00f      	beq.n	800727c <TIM_OC1_SetConfig+0x80>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2b      	ldr	r2, [pc, #172]	; (800730c <TIM_OC1_SetConfig+0x110>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00b      	beq.n	800727c <TIM_OC1_SetConfig+0x80>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a2a      	ldr	r2, [pc, #168]	; (8007310 <TIM_OC1_SetConfig+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d007      	beq.n	800727c <TIM_OC1_SetConfig+0x80>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a29      	ldr	r2, [pc, #164]	; (8007314 <TIM_OC1_SetConfig+0x118>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC1_SetConfig+0x80>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a28      	ldr	r2, [pc, #160]	; (8007318 <TIM_OC1_SetConfig+0x11c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d10c      	bne.n	8007296 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f023 0308 	bic.w	r3, r3, #8
 8007282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 0304 	bic.w	r3, r3, #4
 8007294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <TIM_OC1_SetConfig+0x10c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00f      	beq.n	80072be <TIM_OC1_SetConfig+0xc2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a1a      	ldr	r2, [pc, #104]	; (800730c <TIM_OC1_SetConfig+0x110>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00b      	beq.n	80072be <TIM_OC1_SetConfig+0xc2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a19      	ldr	r2, [pc, #100]	; (8007310 <TIM_OC1_SetConfig+0x114>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d007      	beq.n	80072be <TIM_OC1_SetConfig+0xc2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a18      	ldr	r2, [pc, #96]	; (8007314 <TIM_OC1_SetConfig+0x118>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d003      	beq.n	80072be <TIM_OC1_SetConfig+0xc2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a17      	ldr	r2, [pc, #92]	; (8007318 <TIM_OC1_SetConfig+0x11c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d111      	bne.n	80072e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	621a      	str	r2, [r3, #32]
}
 80072fc:	bf00      	nop
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40012c00 	.word	0x40012c00
 800730c:	40013400 	.word	0x40013400
 8007310:	40014000 	.word	0x40014000
 8007314:	40014400 	.word	0x40014400
 8007318:	40014800 	.word	0x40014800

0800731c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f023 0210 	bic.w	r2, r3, #16
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800734a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f023 0320 	bic.w	r3, r3, #32
 800736a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a28      	ldr	r2, [pc, #160]	; (800741c <TIM_OC2_SetConfig+0x100>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d003      	beq.n	8007388 <TIM_OC2_SetConfig+0x6c>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a27      	ldr	r2, [pc, #156]	; (8007420 <TIM_OC2_SetConfig+0x104>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d10d      	bne.n	80073a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800738e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	011b      	lsls	r3, r3, #4
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4313      	orrs	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a1d      	ldr	r2, [pc, #116]	; (800741c <TIM_OC2_SetConfig+0x100>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00f      	beq.n	80073cc <TIM_OC2_SetConfig+0xb0>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a1c      	ldr	r2, [pc, #112]	; (8007420 <TIM_OC2_SetConfig+0x104>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00b      	beq.n	80073cc <TIM_OC2_SetConfig+0xb0>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a1b      	ldr	r2, [pc, #108]	; (8007424 <TIM_OC2_SetConfig+0x108>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d007      	beq.n	80073cc <TIM_OC2_SetConfig+0xb0>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a1a      	ldr	r2, [pc, #104]	; (8007428 <TIM_OC2_SetConfig+0x10c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC2_SetConfig+0xb0>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a19      	ldr	r2, [pc, #100]	; (800742c <TIM_OC2_SetConfig+0x110>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d113      	bne.n	80073f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	621a      	str	r2, [r3, #32]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40012c00 	.word	0x40012c00
 8007420:	40013400 	.word	0x40013400
 8007424:	40014000 	.word	0x40014000
 8007428:	40014400 	.word	0x40014400
 800742c:	40014800 	.word	0x40014800

08007430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800745e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800747c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a27      	ldr	r2, [pc, #156]	; (800752c <TIM_OC3_SetConfig+0xfc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d003      	beq.n	800749a <TIM_OC3_SetConfig+0x6a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a26      	ldr	r2, [pc, #152]	; (8007530 <TIM_OC3_SetConfig+0x100>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d10d      	bne.n	80074b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1c      	ldr	r2, [pc, #112]	; (800752c <TIM_OC3_SetConfig+0xfc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00f      	beq.n	80074de <TIM_OC3_SetConfig+0xae>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <TIM_OC3_SetConfig+0x100>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00b      	beq.n	80074de <TIM_OC3_SetConfig+0xae>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <TIM_OC3_SetConfig+0x104>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d007      	beq.n	80074de <TIM_OC3_SetConfig+0xae>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a19      	ldr	r2, [pc, #100]	; (8007538 <TIM_OC3_SetConfig+0x108>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d003      	beq.n	80074de <TIM_OC3_SetConfig+0xae>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a18      	ldr	r2, [pc, #96]	; (800753c <TIM_OC3_SetConfig+0x10c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d113      	bne.n	8007506 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	621a      	str	r2, [r3, #32]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40012c00 	.word	0x40012c00
 8007530:	40013400 	.word	0x40013400
 8007534:	40014000 	.word	0x40014000
 8007538:	40014400 	.word	0x40014400
 800753c:	40014800 	.word	0x40014800

08007540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800756e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800758e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	031b      	lsls	r3, r3, #12
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a28      	ldr	r2, [pc, #160]	; (8007640 <TIM_OC4_SetConfig+0x100>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_OC4_SetConfig+0x6c>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a27      	ldr	r2, [pc, #156]	; (8007644 <TIM_OC4_SetConfig+0x104>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d10d      	bne.n	80075c8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	031b      	lsls	r3, r3, #12
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <TIM_OC4_SetConfig+0x100>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00f      	beq.n	80075f0 <TIM_OC4_SetConfig+0xb0>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <TIM_OC4_SetConfig+0x104>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00b      	beq.n	80075f0 <TIM_OC4_SetConfig+0xb0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <TIM_OC4_SetConfig+0x108>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d007      	beq.n	80075f0 <TIM_OC4_SetConfig+0xb0>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a1a      	ldr	r2, [pc, #104]	; (800764c <TIM_OC4_SetConfig+0x10c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <TIM_OC4_SetConfig+0xb0>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a19      	ldr	r2, [pc, #100]	; (8007650 <TIM_OC4_SetConfig+0x110>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d113      	bne.n	8007618 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	019b      	lsls	r3, r3, #6
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	019b      	lsls	r3, r3, #6
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40012c00 	.word	0x40012c00
 8007644:	40013400 	.word	0x40013400
 8007648:	40014000 	.word	0x40014000
 800764c:	40014400 	.word	0x40014400
 8007650:	40014800 	.word	0x40014800

08007654 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007698:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	041b      	lsls	r3, r3, #16
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a17      	ldr	r2, [pc, #92]	; (8007708 <TIM_OC5_SetConfig+0xb4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00f      	beq.n	80076ce <TIM_OC5_SetConfig+0x7a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a16      	ldr	r2, [pc, #88]	; (800770c <TIM_OC5_SetConfig+0xb8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d00b      	beq.n	80076ce <TIM_OC5_SetConfig+0x7a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a15      	ldr	r2, [pc, #84]	; (8007710 <TIM_OC5_SetConfig+0xbc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d007      	beq.n	80076ce <TIM_OC5_SetConfig+0x7a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a14      	ldr	r2, [pc, #80]	; (8007714 <TIM_OC5_SetConfig+0xc0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d003      	beq.n	80076ce <TIM_OC5_SetConfig+0x7a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a13      	ldr	r2, [pc, #76]	; (8007718 <TIM_OC5_SetConfig+0xc4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d109      	bne.n	80076e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	621a      	str	r2, [r3, #32]
}
 80076fc:	bf00      	nop
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40013400 	.word	0x40013400
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800

0800771c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	051b      	lsls	r3, r3, #20
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a18      	ldr	r2, [pc, #96]	; (80077d4 <TIM_OC6_SetConfig+0xb8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00f      	beq.n	8007798 <TIM_OC6_SetConfig+0x7c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <TIM_OC6_SetConfig+0xbc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d00b      	beq.n	8007798 <TIM_OC6_SetConfig+0x7c>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a16      	ldr	r2, [pc, #88]	; (80077dc <TIM_OC6_SetConfig+0xc0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d007      	beq.n	8007798 <TIM_OC6_SetConfig+0x7c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a15      	ldr	r2, [pc, #84]	; (80077e0 <TIM_OC6_SetConfig+0xc4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d003      	beq.n	8007798 <TIM_OC6_SetConfig+0x7c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a14      	ldr	r2, [pc, #80]	; (80077e4 <TIM_OC6_SetConfig+0xc8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d109      	bne.n	80077ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	029b      	lsls	r3, r3, #10
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	621a      	str	r2, [r3, #32]
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40013400 	.word	0x40013400
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800

080077e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f023 0201 	bic.w	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f023 030a 	bic.w	r3, r3, #10
 8007824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007846:	b480      	push	{r7}
 8007848:	b087      	sub	sp, #28
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f023 0210 	bic.w	r2, r3, #16
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	031b      	lsls	r3, r3, #12
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007882:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	621a      	str	r2, [r3, #32]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80078bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f043 0307 	orr.w	r3, r3, #7
 80078cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	609a      	str	r2, [r3, #8]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	021a      	lsls	r2, r3, #8
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	431a      	orrs	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4313      	orrs	r3, r2
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	609a      	str	r2, [r3, #8]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2201      	movs	r2, #1
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6a1a      	ldr	r2, [r3, #32]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	43db      	mvns	r3, r3
 8007942:	401a      	ands	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1a      	ldr	r2, [r3, #32]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f003 031f 	and.w	r3, r3, #31
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	fa01 f303 	lsl.w	r3, r1, r3
 8007958:	431a      	orrs	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	621a      	str	r2, [r3, #32]
}
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007980:	2302      	movs	r3, #2
 8007982:	e065      	b.n	8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2c      	ldr	r2, [pc, #176]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a2b      	ldr	r2, [pc, #172]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d108      	bne.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a1b      	ldr	r2, [pc, #108]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d018      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fa:	d013      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a18      	ldr	r2, [pc, #96]	; (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00e      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d009      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a12      	ldr	r2, [pc, #72]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d004      	beq.n	8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d10c      	bne.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	40012c00 	.word	0x40012c00
 8007a60:	40013400 	.word	0x40013400
 8007a64:	40000400 	.word	0x40000400
 8007a68:	40000800 	.word	0x40000800
 8007a6c:	40014000 	.word	0x40014000

08007a70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d101      	bne.n	8007a8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e073      	b.n	8007b74 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	041b      	lsls	r3, r3, #16
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a19      	ldr	r2, [pc, #100]	; (8007b80 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d004      	beq.n	8007b28 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a18      	ldr	r2, [pc, #96]	; (8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d11c      	bne.n	8007b62 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	051b      	lsls	r3, r3, #20
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40013400 	.word	0x40013400

08007b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c24:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007c28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c4a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007c4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	43db      	mvns	r3, r3
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	4013      	ands	r3, r2
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	1d3b      	adds	r3, r7, #4
 8007c82:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b09d      	sub	sp, #116	; 0x74
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	78db      	ldrb	r3, [r3, #3]
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d81f      	bhi.n	8007d26 <USB_ActivateEndpoint+0x72>
 8007ce6:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <USB_ActivateEndpoint+0x38>)
 8007ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cec:	08007cfd 	.word	0x08007cfd
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d2f 	.word	0x08007d2f
 8007cf8:	08007d0b 	.word	0x08007d0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007cfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d08:	e012      	b.n	8007d30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d16:	e00b      	b.n	8007d30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d24:	e004      	b.n	8007d30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007d2c:	e000      	b.n	8007d30 <USB_ActivateEndpoint+0x7c>
      break;
 8007d2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	441a      	add	r2, r3
 8007d3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	b21b      	sxth	r3, r3
 8007d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	b21a      	sxth	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b21b      	sxth	r3, r3
 8007d72:	4313      	orrs	r3, r2
 8007d74:	b21b      	sxth	r3, r3
 8007d76:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	441a      	add	r2, r3
 8007d84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	7b1b      	ldrb	r3, [r3, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f040 8178 	bne.w	8008096 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8084 	beq.w	8007eb8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	00da      	lsls	r2, r3, #3
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	88db      	ldrh	r3, [r3, #6]
 8007dd8:	085b      	lsrs	r3, r3, #1
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	827b      	strh	r3, [r7, #18]
 8007df2:	8a7b      	ldrh	r3, [r7, #18]
 8007df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01b      	beq.n	8007e34 <USB_ActivateEndpoint+0x180>
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e12:	823b      	strh	r3, [r7, #16]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	441a      	add	r2, r3
 8007e1e:	8a3b      	ldrh	r3, [r7, #16]
 8007e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	78db      	ldrb	r3, [r3, #3]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d020      	beq.n	8007e7e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e52:	81bb      	strh	r3, [r7, #12]
 8007e54:	89bb      	ldrh	r3, [r7, #12]
 8007e56:	f083 0320 	eor.w	r3, r3, #32
 8007e5a:	81bb      	strh	r3, [r7, #12]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	89bb      	ldrh	r3, [r7, #12]
 8007e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	8013      	strh	r3, [r2, #0]
 8007e7c:	e2d5      	b.n	800842a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e94:	81fb      	strh	r3, [r7, #14]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	441a      	add	r2, r3
 8007ea0:	89fb      	ldrh	r3, [r7, #14]
 8007ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	8013      	strh	r3, [r2, #0]
 8007eb6:	e2b8      	b.n	800842a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	633b      	str	r3, [r7, #48]	; 0x30
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	4413      	add	r3, r2
 8007eca:	633b      	str	r3, [r7, #48]	; 0x30
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	00da      	lsls	r2, r3, #3
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	88db      	ldrh	r3, [r3, #6]
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	4413      	add	r3, r2
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	00da      	lsls	r2, r3, #3
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	4413      	add	r3, r2
 8007f0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	2b3e      	cmp	r3, #62	; 0x3e
 8007f26:	d91d      	bls.n	8007f64 <USB_ActivateEndpoint+0x2b0>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f003 031f 	and.w	r3, r3, #31
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d102      	bne.n	8007f42 <USB_ActivateEndpoint+0x28e>
 8007f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	881b      	ldrh	r3, [r3, #0]
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	029b      	lsls	r3, r3, #10
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	801a      	strh	r2, [r3, #0]
 8007f62:	e026      	b.n	8007fb2 <USB_ActivateEndpoint+0x2fe>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <USB_ActivateEndpoint+0x2ce>
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e017      	b.n	8007fb2 <USB_ActivateEndpoint+0x2fe>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <USB_ActivateEndpoint+0x2e8>
 8007f96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f98:	3301      	adds	r3, #1
 8007f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	029b      	lsls	r3, r3, #10
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8007fc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01b      	beq.n	8008002 <USB_ActivateEndpoint+0x34e>
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe0:	843b      	strh	r3, [r7, #32]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	441a      	add	r2, r3
 8007fec:	8c3b      	ldrh	r3, [r7, #32]
 8007fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d124      	bne.n	8008054 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	b29b      	uxth	r3, r3
 8008018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800801c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008020:	83bb      	strh	r3, [r7, #28]
 8008022:	8bbb      	ldrh	r3, [r7, #28]
 8008024:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008028:	83bb      	strh	r3, [r7, #28]
 800802a:	8bbb      	ldrh	r3, [r7, #28]
 800802c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008030:	83bb      	strh	r3, [r7, #28]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	441a      	add	r2, r3
 800803c:	8bbb      	ldrh	r3, [r7, #28]
 800803e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800804a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804e:	b29b      	uxth	r3, r3
 8008050:	8013      	strh	r3, [r2, #0]
 8008052:	e1ea      	b.n	800842a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800806a:	83fb      	strh	r3, [r7, #30]
 800806c:	8bfb      	ldrh	r3, [r7, #30]
 800806e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008072:	83fb      	strh	r3, [r7, #30]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	441a      	add	r2, r3
 800807e:	8bfb      	ldrh	r3, [r7, #30]
 8008080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800808c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008090:	b29b      	uxth	r3, r3
 8008092:	8013      	strh	r3, [r2, #0]
 8008094:	e1c9      	b.n	800842a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	78db      	ldrb	r3, [r3, #3]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d11e      	bne.n	80080dc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	441a      	add	r2, r3
 80080c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80080c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80080d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	8013      	strh	r3, [r2, #0]
 80080da:	e01d      	b.n	8008118 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	441a      	add	r2, r3
 8008100:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800810c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008114:	b29b      	uxth	r3, r3
 8008116:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008122:	b29b      	uxth	r3, r3
 8008124:	461a      	mov	r2, r3
 8008126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008128:	4413      	add	r3, r2
 800812a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	00da      	lsls	r2, r3, #3
 8008132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008134:	4413      	add	r3, r2
 8008136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800813a:	65bb      	str	r3, [r7, #88]	; 0x58
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	891b      	ldrh	r3, [r3, #8]
 8008140:	085b      	lsrs	r3, r3, #1
 8008142:	b29b      	uxth	r3, r3
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	657b      	str	r3, [r7, #84]	; 0x54
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008156:	b29b      	uxth	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800815c:	4413      	add	r3, r2
 800815e:	657b      	str	r3, [r7, #84]	; 0x54
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	00da      	lsls	r2, r3, #3
 8008166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008168:	4413      	add	r3, r2
 800816a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800816e:	653b      	str	r3, [r7, #80]	; 0x50
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	895b      	ldrh	r3, [r3, #10]
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	b29b      	uxth	r3, r3
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800817e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	785b      	ldrb	r3, [r3, #1]
 8008184:	2b00      	cmp	r3, #0
 8008186:	f040 8093 	bne.w	80082b0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800819a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800819e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d01b      	beq.n	80081de <USB_ActivateEndpoint+0x52a>
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	441a      	add	r2, r3
 80081c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081da:	b29b      	uxth	r3, r3
 80081dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80081ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d01b      	beq.n	800822e <USB_ActivateEndpoint+0x57a>
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	441a      	add	r2, r3
 8008218:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800821a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800821e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800822a:	b29b      	uxth	r3, r3
 800822c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008244:	873b      	strh	r3, [r7, #56]	; 0x38
 8008246:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008248:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800824c:	873b      	strh	r3, [r7, #56]	; 0x38
 800824e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008254:	873b      	strh	r3, [r7, #56]	; 0x38
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	441a      	add	r2, r3
 8008260:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800826a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008272:	b29b      	uxth	r3, r3
 8008274:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800828c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800829a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	8013      	strh	r3, [r2, #0]
 80082ae:	e0bc      	b.n	800842a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80082c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80082c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d01d      	beq.n	8008308 <USB_ActivateEndpoint+0x654>
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	441a      	add	r2, r3
 80082f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80082f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008304:	b29b      	uxth	r3, r3
 8008306:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008318:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800831c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01d      	beq.n	8008360 <USB_ActivateEndpoint+0x6ac>
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29b      	uxth	r3, r3
 8008332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	441a      	add	r2, r3
 8008348:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800834c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800835c:	b29b      	uxth	r3, r3
 800835e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	78db      	ldrb	r3, [r3, #3]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d024      	beq.n	80083b2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008382:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008386:	f083 0320 	eor.w	r3, r3, #32
 800838a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	441a      	add	r2, r3
 8008398:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800839c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	8013      	strh	r3, [r2, #0]
 80083b0:	e01d      	b.n	80083ee <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	441a      	add	r2, r3
 80083d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80083da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008404:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	441a      	add	r2, r3
 8008412:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008426:	b29b      	uxth	r3, r3
 8008428:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800842a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800842e:	4618      	mov	r0, r3
 8008430:	3774      	adds	r7, #116	; 0x74
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop

0800843c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800843c:	b480      	push	{r7}
 800843e:	b08d      	sub	sp, #52	; 0x34
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	7b1b      	ldrb	r3, [r3, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 808e 	bne.w	800856c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	785b      	ldrb	r3, [r3, #1]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d044      	beq.n	80084e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	81bb      	strh	r3, [r7, #12]
 8008466:	89bb      	ldrh	r3, [r7, #12]
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01b      	beq.n	80084a8 <USB_DeactivateEndpoint+0x6c>
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	b29b      	uxth	r3, r3
 800847e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008486:	817b      	strh	r3, [r7, #10]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	441a      	add	r2, r3
 8008492:	897b      	ldrh	r3, [r7, #10]
 8008494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084be:	813b      	strh	r3, [r7, #8]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	441a      	add	r2, r3
 80084ca:	893b      	ldrh	r3, [r7, #8]
 80084cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084dc:	b29b      	uxth	r3, r3
 80084de:	8013      	strh	r3, [r2, #0]
 80084e0:	e192      	b.n	8008808 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	827b      	strh	r3, [r7, #18]
 80084f0:	8a7b      	ldrh	r3, [r7, #18]
 80084f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d01b      	beq.n	8008532 <USB_DeactivateEndpoint+0xf6>
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800850c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008510:	823b      	strh	r3, [r7, #16]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	441a      	add	r2, r3
 800851c:	8a3b      	ldrh	r3, [r7, #16]
 800851e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800852a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852e:	b29b      	uxth	r3, r3
 8008530:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008548:	81fb      	strh	r3, [r7, #14]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	441a      	add	r2, r3
 8008554:	89fb      	ldrh	r3, [r7, #14]
 8008556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800855a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800855e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008566:	b29b      	uxth	r3, r3
 8008568:	8013      	strh	r3, [r2, #0]
 800856a:	e14d      	b.n	8008808 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	785b      	ldrb	r3, [r3, #1]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f040 80a5 	bne.w	80086c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	843b      	strh	r3, [r7, #32]
 8008584:	8c3b      	ldrh	r3, [r7, #32]
 8008586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d01b      	beq.n	80085c6 <USB_DeactivateEndpoint+0x18a>
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a4:	83fb      	strh	r3, [r7, #30]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	441a      	add	r2, r3
 80085b0:	8bfb      	ldrh	r3, [r7, #30]
 80085b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	83bb      	strh	r3, [r7, #28]
 80085d4:	8bbb      	ldrh	r3, [r7, #28]
 80085d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01b      	beq.n	8008616 <USB_DeactivateEndpoint+0x1da>
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f4:	837b      	strh	r3, [r7, #26]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	441a      	add	r2, r3
 8008600:	8b7b      	ldrh	r3, [r7, #26]
 8008602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800860a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800860e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008612:	b29b      	uxth	r3, r3
 8008614:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862c:	833b      	strh	r3, [r7, #24]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	441a      	add	r2, r3
 8008638:	8b3b      	ldrh	r3, [r7, #24]
 800863a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800863e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008646:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800864a:	b29b      	uxth	r3, r3
 800864c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	b29b      	uxth	r3, r3
 800865c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008664:	82fb      	strh	r3, [r7, #22]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	441a      	add	r2, r3
 8008670:	8afb      	ldrh	r3, [r7, #22]
 8008672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800867e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008682:	b29b      	uxth	r3, r3
 8008684:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869c:	82bb      	strh	r3, [r7, #20]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	8abb      	ldrh	r3, [r7, #20]
 80086aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	8013      	strh	r3, [r2, #0]
 80086be:	e0a3      	b.n	8008808 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01b      	beq.n	8008710 <USB_DeactivateEndpoint+0x2d4>
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	441a      	add	r2, r3
 80086fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80086fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870c:	b29b      	uxth	r3, r3
 800870e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800871e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01b      	beq.n	8008760 <USB_DeactivateEndpoint+0x324>
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b29b      	uxth	r3, r3
 8008736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800873a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	441a      	add	r2, r3
 800874a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800874c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800875c:	b29b      	uxth	r3, r3
 800875e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	b29b      	uxth	r3, r3
 800876e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008776:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	441a      	add	r2, r3
 8008782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800878c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008794:	b29b      	uxth	r3, r3
 8008796:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	441a      	add	r2, r3
 80087ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	441a      	add	r2, r3
 80087f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008804:	b29b      	uxth	r3, r3
 8008806:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3734      	adds	r7, #52	; 0x34
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b0c2      	sub	sp, #264	; 0x108
 800881a:	af00      	add	r7, sp, #0
 800881c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008824:	6018      	str	r0, [r3, #0]
 8008826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800882e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2b01      	cmp	r3, #1
 800883e:	f040 86b7 	bne.w	80095b0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	429a      	cmp	r2, r3
 800885c:	d908      	bls.n	8008870 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800885e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800886e:	e007      	b.n	8008880 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	7b1b      	ldrb	r3, [r3, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d13a      	bne.n	8008906 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6959      	ldr	r1, [r3, #20]
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	88da      	ldrh	r2, [r3, #6]
 80088a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088b6:	6800      	ldr	r0, [r0, #0]
 80088b8:	f001 fc98 	bl	800a1ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80088bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	4413      	add	r3, r2
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	00da      	lsls	r2, r3, #3
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	f000 be1f 	b.w	8009544 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	78db      	ldrb	r3, [r3, #3]
 8008912:	2b02      	cmp	r3, #2
 8008914:	f040 8462 	bne.w	80091dc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6a1a      	ldr	r2, [r3, #32]
 8008924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	429a      	cmp	r2, r3
 8008932:	f240 83df 	bls.w	80090f4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	441a      	add	r2, r3
 800897a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800897e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008986:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800898a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898e:	b29b      	uxth	r3, r3
 8008990:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6a1a      	ldr	r2, [r3, #32]
 800899e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a2:	1ad2      	subs	r2, r2, r3
 80089a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80089b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 81c7 	beq.w	8008d66 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	633b      	str	r3, [r7, #48]	; 0x30
 80089e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d177      	bne.n	8008ae4 <USB_EPStartXfer+0x2ce>
 80089f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	4413      	add	r3, r2
 8008a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	00da      	lsls	r2, r3, #3
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	4413      	add	r3, r2
 8008a2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	801a      	strh	r2, [r3, #0]
 8008a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a44:	2b3e      	cmp	r3, #62	; 0x3e
 8008a46:	d921      	bls.n	8008a8c <USB_EPStartXfer+0x276>
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4c:	095b      	lsrs	r3, r3, #5
 8008a4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d104      	bne.n	8008a68 <USB_EPStartXfer+0x252>
 8008a5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a62:	3b01      	subs	r3, #1
 8008a64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	029b      	lsls	r3, r3, #10
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	e050      	b.n	8008b2e <USB_EPStartXfer+0x318>
 8008a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <USB_EPStartXfer+0x294>
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	e041      	b.n	8008b2e <USB_EPStartXfer+0x318>
 8008aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <USB_EPStartXfer+0x2b4>
 8008ac0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	029b      	lsls	r3, r3, #10
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	801a      	strh	r2, [r3, #0]
 8008ae2:	e024      	b.n	8008b2e <USB_EPStartXfer+0x318>
 8008ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d11c      	bne.n	8008b2e <USB_EPStartXfer+0x318>
 8008af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	461a      	mov	r2, r3
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	4413      	add	r3, r2
 8008b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	00da      	lsls	r2, r3, #3
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	895b      	ldrh	r3, [r3, #10]
 8008b3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6959      	ldr	r1, [r3, #20]
 8008b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b5c:	6800      	ldr	r0, [r0, #0]
 8008b5e:	f001 fb45 	bl	800a1ec <USB_WritePMA>
            ep->xfer_buff += len;
 8008b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695a      	ldr	r2, [r3, #20]
 8008b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b72:	441a      	add	r2, r3
 8008b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6a1a      	ldr	r2, [r3, #32]
 8008b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d90f      	bls.n	8008bbc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bac:	1ad2      	subs	r2, r2, r3
 8008bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	621a      	str	r2, [r3, #32]
 8008bba:	e00e      	b.n	8008bda <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d177      	bne.n	8008cda <USB_EPStartXfer+0x4c4>
 8008bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	61bb      	str	r3, [r7, #24]
 8008bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	61bb      	str	r3, [r7, #24]
 8008c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	00da      	lsls	r2, r3, #3
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	801a      	strh	r2, [r3, #0]
 8008c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c3c:	d921      	bls.n	8008c82 <USB_EPStartXfer+0x46c>
 8008c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c42:	095b      	lsrs	r3, r3, #5
 8008c44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4c:	f003 031f 	and.w	r3, r3, #31
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d104      	bne.n	8008c5e <USB_EPStartXfer+0x448>
 8008c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	029b      	lsls	r3, r3, #10
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	801a      	strh	r2, [r3, #0]
 8008c80:	e056      	b.n	8008d30 <USB_EPStartXfer+0x51a>
 8008c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <USB_EPStartXfer+0x48a>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	e047      	b.n	8008d30 <USB_EPStartXfer+0x51a>
 8008ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <USB_EPStartXfer+0x4aa>
 8008cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cba:	3301      	adds	r3, #1
 8008cbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	029b      	lsls	r3, r3, #10
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	801a      	strh	r2, [r3, #0]
 8008cd8:	e02a      	b.n	8008d30 <USB_EPStartXfer+0x51a>
 8008cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	785b      	ldrb	r3, [r3, #1]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d122      	bne.n	8008d30 <USB_EPStartXfer+0x51a>
 8008cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	623b      	str	r3, [r7, #32]
 8008cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	461a      	mov	r2, r3
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	623b      	str	r3, [r7, #32]
 8008d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	00da      	lsls	r2, r3, #3
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	891b      	ldrh	r3, [r3, #8]
 8008d3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6959      	ldr	r1, [r3, #20]
 8008d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d5e:	6800      	ldr	r0, [r0, #0]
 8008d60:	f001 fa44 	bl	800a1ec <USB_WritePMA>
 8008d64:	e3ee      	b.n	8009544 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d177      	bne.n	8008e66 <USB_EPStartXfer+0x650>
 8008d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d96:	4413      	add	r3, r2
 8008d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	00da      	lsls	r2, r3, #3
 8008da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008daa:	4413      	add	r3, r2
 8008dac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008db0:	647b      	str	r3, [r7, #68]	; 0x44
 8008db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8008dc8:	d921      	bls.n	8008e0e <USB_EPStartXfer+0x5f8>
 8008dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd8:	f003 031f 	and.w	r3, r3, #31
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d104      	bne.n	8008dea <USB_EPStartXfer+0x5d4>
 8008de0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008de4:	3b01      	subs	r3, #1
 8008de6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	029b      	lsls	r3, r3, #10
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e0a:	801a      	strh	r2, [r3, #0]
 8008e0c:	e056      	b.n	8008ebc <USB_EPStartXfer+0x6a6>
 8008e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <USB_EPStartXfer+0x616>
 8008e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e28:	801a      	strh	r2, [r3, #0]
 8008e2a:	e047      	b.n	8008ebc <USB_EPStartXfer+0x6a6>
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d004      	beq.n	8008e4c <USB_EPStartXfer+0x636>
 8008e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e46:	3301      	adds	r3, #1
 8008e48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	029b      	lsls	r3, r3, #10
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e62:	801a      	strh	r2, [r3, #0]
 8008e64:	e02a      	b.n	8008ebc <USB_EPStartXfer+0x6a6>
 8008e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d122      	bne.n	8008ebc <USB_EPStartXfer+0x6a6>
 8008e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	653b      	str	r3, [r7, #80]	; 0x50
 8008e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	461a      	mov	r2, r3
 8008e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e96:	4413      	add	r3, r2
 8008e98:	653b      	str	r3, [r7, #80]	; 0x50
 8008e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	00da      	lsls	r2, r3, #3
 8008ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eaa:	4413      	add	r3, r2
 8008eac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	891b      	ldrh	r3, [r3, #8]
 8008ec8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6959      	ldr	r1, [r3, #20]
 8008ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ee2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ee6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008eea:	6800      	ldr	r0, [r0, #0]
 8008eec:	f001 f97e 	bl	800a1ec <USB_WritePMA>
            ep->xfer_buff += len;
 8008ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	695a      	ldr	r2, [r3, #20]
 8008efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f00:	441a      	add	r2, r3
 8008f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6a1a      	ldr	r2, [r3, #32]
 8008f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d90f      	bls.n	8008f4a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6a1a      	ldr	r2, [r3, #32]
 8008f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	621a      	str	r2, [r3, #32]
 8008f48:	e00e      	b.n	8008f68 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2200      	movs	r2, #0
 8008f66:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	643b      	str	r3, [r7, #64]	; 0x40
 8008f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	785b      	ldrb	r3, [r3, #1]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d177      	bne.n	8009074 <USB_EPStartXfer+0x85e>
 8008f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	4413      	add	r3, r2
 8008fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	00da      	lsls	r2, r3, #3
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	4413      	add	r3, r2
 8008fba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fce:	801a      	strh	r2, [r3, #0]
 8008fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8008fd6:	d921      	bls.n	800901c <USB_EPStartXfer+0x806>
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fdc:	095b      	lsrs	r3, r3, #5
 8008fde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe6:	f003 031f 	and.w	r3, r3, #31
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d104      	bne.n	8008ff8 <USB_EPStartXfer+0x7e2>
 8008fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009002:	b29b      	uxth	r3, r3
 8009004:	029b      	lsls	r3, r3, #10
 8009006:	b29b      	uxth	r3, r3
 8009008:	4313      	orrs	r3, r2
 800900a:	b29b      	uxth	r3, r3
 800900c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009014:	b29a      	uxth	r2, r3
 8009016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009018:	801a      	strh	r2, [r3, #0]
 800901a:	e050      	b.n	80090be <USB_EPStartXfer+0x8a8>
 800901c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <USB_EPStartXfer+0x824>
 8009024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	b29b      	uxth	r3, r3
 800902a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009032:	b29a      	uxth	r2, r3
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	e041      	b.n	80090be <USB_EPStartXfer+0x8a8>
 800903a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800903e:	085b      	lsrs	r3, r3, #1
 8009040:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <USB_EPStartXfer+0x844>
 8009050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009054:	3301      	adds	r3, #1
 8009056:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800905a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	b29a      	uxth	r2, r3
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009064:	b29b      	uxth	r3, r3
 8009066:	029b      	lsls	r3, r3, #10
 8009068:	b29b      	uxth	r3, r3
 800906a:	4313      	orrs	r3, r2
 800906c:	b29a      	uxth	r2, r3
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	e024      	b.n	80090be <USB_EPStartXfer+0x8a8>
 8009074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	785b      	ldrb	r3, [r3, #1]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d11c      	bne.n	80090be <USB_EPStartXfer+0x8a8>
 8009084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009092:	b29b      	uxth	r3, r3
 8009094:	461a      	mov	r2, r3
 8009096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009098:	4413      	add	r3, r2
 800909a:	643b      	str	r3, [r7, #64]	; 0x40
 800909c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	00da      	lsls	r2, r3, #3
 80090aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ac:	4413      	add	r3, r2
 80090ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	895b      	ldrh	r3, [r3, #10]
 80090ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6959      	ldr	r1, [r3, #20]
 80090da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090de:	b29b      	uxth	r3, r3
 80090e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80090e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80090e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80090ec:	6800      	ldr	r0, [r0, #0]
 80090ee:	f001 f87d 	bl	800a1ec <USB_WritePMA>
 80090f2:	e227      	b.n	8009544 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80090f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6a1b      	ldr	r3, [r3, #32]
 8009100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b29b      	uxth	r3, r3
 8009122:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800912e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	441a      	add	r2, r3
 8009148:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800914c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915c:	b29b      	uxth	r3, r3
 800915e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800916c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800917a:	b29b      	uxth	r3, r3
 800917c:	461a      	mov	r2, r3
 800917e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009180:	4413      	add	r3, r2
 8009182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	00da      	lsls	r2, r3, #3
 8009192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009194:	4413      	add	r3, r2
 8009196:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800919a:	65bb      	str	r3, [r7, #88]	; 0x58
 800919c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80091a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	891b      	ldrh	r3, [r3, #8]
 80091b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6959      	ldr	r1, [r3, #20]
 80091c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80091d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80091d4:	6800      	ldr	r0, [r0, #0]
 80091d6:	f001 f809 	bl	800a1ec <USB_WritePMA>
 80091da:	e1b3      	b.n	8009544 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80091dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6a1a      	ldr	r2, [r3, #32]
 80091e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ec:	1ad2      	subs	r2, r2, r3
 80091ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80091fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80c6 	beq.w	80093ae <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009226:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	673b      	str	r3, [r7, #112]	; 0x70
 800922e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d177      	bne.n	800932e <USB_EPStartXfer+0xb18>
 800923e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	66bb      	str	r3, [r7, #104]	; 0x68
 800924a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009258:	b29b      	uxth	r3, r3
 800925a:	461a      	mov	r2, r3
 800925c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800925e:	4413      	add	r3, r2
 8009260:	66bb      	str	r3, [r7, #104]	; 0x68
 8009262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	00da      	lsls	r2, r3, #3
 8009270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009272:	4413      	add	r3, r2
 8009274:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009278:	667b      	str	r3, [r7, #100]	; 0x64
 800927a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	b29b      	uxth	r3, r3
 8009280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009284:	b29a      	uxth	r2, r3
 8009286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009288:	801a      	strh	r2, [r3, #0]
 800928a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800928e:	2b3e      	cmp	r3, #62	; 0x3e
 8009290:	d921      	bls.n	80092d6 <USB_EPStartXfer+0xac0>
 8009292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009296:	095b      	lsrs	r3, r3, #5
 8009298:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800929c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a0:	f003 031f 	and.w	r3, r3, #31
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d104      	bne.n	80092b2 <USB_EPStartXfer+0xa9c>
 80092a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092ac:	3b01      	subs	r3, #1
 80092ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092bc:	b29b      	uxth	r3, r3
 80092be:	029b      	lsls	r3, r3, #10
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	4313      	orrs	r3, r2
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092d2:	801a      	strh	r2, [r3, #0]
 80092d4:	e050      	b.n	8009378 <USB_EPStartXfer+0xb62>
 80092d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10a      	bne.n	80092f4 <USB_EPStartXfer+0xade>
 80092de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	e041      	b.n	8009378 <USB_EPStartXfer+0xb62>
 80092f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <USB_EPStartXfer+0xafe>
 800930a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800930e:	3301      	adds	r3, #1
 8009310:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29a      	uxth	r2, r3
 800931a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800931e:	b29b      	uxth	r3, r3
 8009320:	029b      	lsls	r3, r3, #10
 8009322:	b29b      	uxth	r3, r3
 8009324:	4313      	orrs	r3, r2
 8009326:	b29a      	uxth	r2, r3
 8009328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	e024      	b.n	8009378 <USB_EPStartXfer+0xb62>
 800932e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d11c      	bne.n	8009378 <USB_EPStartXfer+0xb62>
 800933e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800934c:	b29b      	uxth	r3, r3
 800934e:	461a      	mov	r2, r3
 8009350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009352:	4413      	add	r3, r2
 8009354:	673b      	str	r3, [r7, #112]	; 0x70
 8009356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	00da      	lsls	r2, r3, #3
 8009364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009366:	4413      	add	r3, r2
 8009368:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800936c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800936e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009372:	b29a      	uxth	r2, r3
 8009374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009376:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	895b      	ldrh	r3, [r3, #10]
 8009384:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6959      	ldr	r1, [r3, #20]
 8009394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009398:	b29b      	uxth	r3, r3
 800939a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800939e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80093a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80093a6:	6800      	ldr	r0, [r0, #0]
 80093a8:	f000 ff20 	bl	800a1ec <USB_WritePMA>
 80093ac:	e0ca      	b.n	8009544 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d177      	bne.n	80094ae <USB_EPStartXfer+0xc98>
 80093be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093d8:	b29b      	uxth	r3, r3
 80093da:	461a      	mov	r2, r3
 80093dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093de:	4413      	add	r3, r2
 80093e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	00da      	lsls	r2, r3, #3
 80093f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093f2:	4413      	add	r3, r2
 80093f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80093fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009404:	b29a      	uxth	r2, r3
 8009406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009408:	801a      	strh	r2, [r3, #0]
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800940e:	2b3e      	cmp	r3, #62	; 0x3e
 8009410:	d921      	bls.n	8009456 <USB_EPStartXfer+0xc40>
 8009412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009416:	095b      	lsrs	r3, r3, #5
 8009418:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800941c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009420:	f003 031f 	and.w	r3, r3, #31
 8009424:	2b00      	cmp	r3, #0
 8009426:	d104      	bne.n	8009432 <USB_EPStartXfer+0xc1c>
 8009428:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800942c:	3b01      	subs	r3, #1
 800942e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29a      	uxth	r2, r3
 8009438:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800943c:	b29b      	uxth	r3, r3
 800943e:	029b      	lsls	r3, r3, #10
 8009440:	b29b      	uxth	r3, r3
 8009442:	4313      	orrs	r3, r2
 8009444:	b29b      	uxth	r3, r3
 8009446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800944a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800944e:	b29a      	uxth	r2, r3
 8009450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	e05c      	b.n	8009510 <USB_EPStartXfer+0xcfa>
 8009456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10a      	bne.n	8009474 <USB_EPStartXfer+0xc5e>
 800945e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800946c:	b29a      	uxth	r2, r3
 800946e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009470:	801a      	strh	r2, [r3, #0]
 8009472:	e04d      	b.n	8009510 <USB_EPStartXfer+0xcfa>
 8009474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009478:	085b      	lsrs	r3, r3, #1
 800947a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800947e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	2b00      	cmp	r3, #0
 8009488:	d004      	beq.n	8009494 <USB_EPStartXfer+0xc7e>
 800948a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800948e:	3301      	adds	r3, #1
 8009490:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	b29a      	uxth	r2, r3
 800949a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800949e:	b29b      	uxth	r3, r3
 80094a0:	029b      	lsls	r3, r3, #10
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	e030      	b.n	8009510 <USB_EPStartXfer+0xcfa>
 80094ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	785b      	ldrb	r3, [r3, #1]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d128      	bne.n	8009510 <USB_EPStartXfer+0xcfa>
 80094be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094da:	b29b      	uxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094e2:	4413      	add	r3, r2
 80094e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	00da      	lsls	r2, r3, #3
 80094f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094fa:	4413      	add	r3, r2
 80094fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009508:	b29a      	uxth	r2, r3
 800950a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800950e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	891b      	ldrh	r3, [r3, #8]
 800951c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6959      	ldr	r1, [r3, #20]
 800952c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009530:	b29b      	uxth	r3, r3
 8009532:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009536:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800953a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800953e:	6800      	ldr	r0, [r0, #0]
 8009540:	f000 fe54 	bl	800a1ec <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29b      	uxth	r3, r3
 8009562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956a:	817b      	strh	r3, [r7, #10]
 800956c:	897b      	ldrh	r3, [r7, #10]
 800956e:	f083 0310 	eor.w	r3, r3, #16
 8009572:	817b      	strh	r3, [r7, #10]
 8009574:	897b      	ldrh	r3, [r7, #10]
 8009576:	f083 0320 	eor.w	r3, r3, #32
 800957a:	817b      	strh	r3, [r7, #10]
 800957c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009580:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	441a      	add	r2, r3
 8009596:	897b      	ldrh	r3, [r7, #10]
 8009598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800959c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	8013      	strh	r3, [r2, #0]
 80095ac:	f000 bcde 	b.w	8009f6c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80095b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	7b1b      	ldrb	r3, [r3, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 80bb 	bne.w	8009738 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80095c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d917      	bls.n	800960e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80095de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80095ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	699a      	ldr	r2, [r3, #24]
 80095fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095fe:	1ad2      	subs	r2, r2, r3
 8009600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	619a      	str	r2, [r3, #24]
 800960c:	e00e      	b.n	800962c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800960e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800961e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2200      	movs	r2, #0
 800962a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800962c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800963a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009648:	b29b      	uxth	r3, r3
 800964a:	461a      	mov	r2, r3
 800964c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009650:	4413      	add	r3, r2
 8009652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	00da      	lsls	r2, r3, #3
 8009664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009668:	4413      	add	r3, r2
 800966a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800966e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800967e:	b29a      	uxth	r2, r3
 8009680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968a:	2b3e      	cmp	r3, #62	; 0x3e
 800968c:	d924      	bls.n	80096d8 <USB_EPStartXfer+0xec2>
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009692:	095b      	lsrs	r3, r3, #5
 8009694:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969c:	f003 031f 	and.w	r3, r3, #31
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <USB_EPStartXfer+0xe98>
 80096a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096a8:	3b01      	subs	r3, #1
 80096aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	029b      	lsls	r3, r3, #10
 80096be:	b29b      	uxth	r3, r3
 80096c0:	4313      	orrs	r3, r2
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096d2:	801a      	strh	r2, [r3, #0]
 80096d4:	f000 bc10 	b.w	8009ef8 <USB_EPStartXfer+0x16e2>
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10c      	bne.n	80096fa <USB_EPStartXfer+0xee4>
 80096e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	e3fe      	b.n	8009ef8 <USB_EPStartXfer+0x16e2>
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fe:	085b      	lsrs	r3, r3, #1
 8009700:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <USB_EPStartXfer+0xf04>
 8009710:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009714:	3301      	adds	r3, #1
 8009716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800971a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29a      	uxth	r2, r3
 8009722:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009726:	b29b      	uxth	r3, r3
 8009728:	029b      	lsls	r3, r3, #10
 800972a:	b29b      	uxth	r3, r3
 800972c:	4313      	orrs	r3, r2
 800972e:	b29a      	uxth	r2, r3
 8009730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009734:	801a      	strh	r2, [r3, #0]
 8009736:	e3df      	b.n	8009ef8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	78db      	ldrb	r3, [r3, #3]
 8009744:	2b02      	cmp	r3, #2
 8009746:	f040 8218 	bne.w	8009b7a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800974a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	785b      	ldrb	r3, [r3, #1]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f040 809d 	bne.w	8009896 <USB_EPStartXfer+0x1080>
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800976a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009778:	b29b      	uxth	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009780:	4413      	add	r3, r2
 8009782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	00da      	lsls	r2, r3, #3
 8009794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009798:	4413      	add	r3, r2
 800979a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800979e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80097a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097b4:	801a      	strh	r2, [r3, #0]
 80097b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	2b3e      	cmp	r3, #62	; 0x3e
 80097c4:	d92b      	bls.n	800981e <USB_EPStartXfer+0x1008>
 80097c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	095b      	lsrs	r3, r3, #5
 80097d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f003 031f 	and.w	r3, r3, #31
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <USB_EPStartXfer+0xfe0>
 80097ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f0:	3b01      	subs	r3, #1
 80097f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009802:	b29b      	uxth	r3, r3
 8009804:	029b      	lsls	r3, r3, #10
 8009806:	b29b      	uxth	r3, r3
 8009808:	4313      	orrs	r3, r2
 800980a:	b29b      	uxth	r3, r3
 800980c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009814:	b29a      	uxth	r2, r3
 8009816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800981a:	801a      	strh	r2, [r3, #0]
 800981c:	e070      	b.n	8009900 <USB_EPStartXfer+0x10ea>
 800981e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10c      	bne.n	8009848 <USB_EPStartXfer+0x1032>
 800982e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800983a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800983e:	b29a      	uxth	r2, r3
 8009840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009844:	801a      	strh	r2, [r3, #0]
 8009846:	e05b      	b.n	8009900 <USB_EPStartXfer+0x10ea>
 8009848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800984c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800985a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d004      	beq.n	8009878 <USB_EPStartXfer+0x1062>
 800986e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009872:	3301      	adds	r3, #1
 8009874:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	b29a      	uxth	r2, r3
 8009880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009884:	b29b      	uxth	r3, r3
 8009886:	029b      	lsls	r3, r3, #10
 8009888:	b29b      	uxth	r3, r3
 800988a:	4313      	orrs	r3, r2
 800988c:	b29a      	uxth	r2, r3
 800988e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009892:	801a      	strh	r2, [r3, #0]
 8009894:	e034      	b.n	8009900 <USB_EPStartXfer+0x10ea>
 8009896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	785b      	ldrb	r3, [r3, #1]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d12c      	bne.n	8009900 <USB_EPStartXfer+0x10ea>
 80098a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098ca:	4413      	add	r3, r2
 80098cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	00da      	lsls	r2, r3, #3
 80098de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098e2:	4413      	add	r3, r2
 80098e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80098fe:	801a      	strh	r2, [r3, #0]
 8009900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800990e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	785b      	ldrb	r3, [r3, #1]
 800991a:	2b00      	cmp	r3, #0
 800991c:	f040 809d 	bne.w	8009a5a <USB_EPStartXfer+0x1244>
 8009920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800992e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800993c:	b29b      	uxth	r3, r3
 800993e:	461a      	mov	r2, r3
 8009940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009944:	4413      	add	r3, r2
 8009946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800994a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	00da      	lsls	r2, r3, #3
 8009958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800995c:	4413      	add	r3, r2
 800995e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009962:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009966:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009972:	b29a      	uxth	r2, r3
 8009974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009978:	801a      	strh	r2, [r3, #0]
 800997a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800997e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	2b3e      	cmp	r3, #62	; 0x3e
 8009988:	d92b      	bls.n	80099e2 <USB_EPStartXfer+0x11cc>
 800998a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	095b      	lsrs	r3, r3, #5
 8009998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800999c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f003 031f 	and.w	r3, r3, #31
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d104      	bne.n	80099ba <USB_EPStartXfer+0x11a4>
 80099b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b4:	3b01      	subs	r3, #1
 80099b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	029b      	lsls	r3, r3, #10
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	4313      	orrs	r3, r2
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099d8:	b29a      	uxth	r2, r3
 80099da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099de:	801a      	strh	r2, [r3, #0]
 80099e0:	e069      	b.n	8009ab6 <USB_EPStartXfer+0x12a0>
 80099e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10c      	bne.n	8009a0c <USB_EPStartXfer+0x11f6>
 80099f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a08:	801a      	strh	r2, [r3, #0]
 8009a0a:	e054      	b.n	8009ab6 <USB_EPStartXfer+0x12a0>
 8009a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	085b      	lsrs	r3, r3, #1
 8009a1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d004      	beq.n	8009a3c <USB_EPStartXfer+0x1226>
 8009a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a36:	3301      	adds	r3, #1
 8009a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	029b      	lsls	r3, r3, #10
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a56:	801a      	strh	r2, [r3, #0]
 8009a58:	e02d      	b.n	8009ab6 <USB_EPStartXfer+0x12a0>
 8009a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d125      	bne.n	8009ab6 <USB_EPStartXfer+0x12a0>
 8009a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a80:	4413      	add	r3, r2
 8009a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	00da      	lsls	r2, r3, #3
 8009a94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a98:	4413      	add	r3, r2
 8009a9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ab4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 8218 	beq.w	8009ef8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ae8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d005      	beq.n	8009b00 <USB_EPStartXfer+0x12ea>
 8009af4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10d      	bne.n	8009b1c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f040 81f5 	bne.w	8009ef8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f040 81ee 	bne.w	8009ef8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b42:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	441a      	add	r2, r3
 8009b60:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	8013      	strh	r3, [r2, #0]
 8009b78:	e1be      	b.n	8009ef8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	78db      	ldrb	r3, [r3, #3]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	f040 81b4 	bne.w	8009ef4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	699a      	ldr	r2, [r3, #24]
 8009b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d917      	bls.n	8009bd8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc8:	1ad2      	subs	r2, r2, r3
 8009bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	619a      	str	r2, [r3, #24]
 8009bd6:	e00e      	b.n	8009bf6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f040 8085 	bne.w	8009d12 <USB_EPStartXfer+0x14fc>
 8009c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	461a      	mov	r2, r3
 8009c28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	00da      	lsls	r2, r3, #3
 8009c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c44:	4413      	add	r3, r2
 8009c46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c60:	801a      	strh	r2, [r3, #0]
 8009c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c66:	2b3e      	cmp	r3, #62	; 0x3e
 8009c68:	d923      	bls.n	8009cb2 <USB_EPStartXfer+0x149c>
 8009c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6e:	095b      	lsrs	r3, r3, #5
 8009c70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c78:	f003 031f 	and.w	r3, r3, #31
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d104      	bne.n	8009c8a <USB_EPStartXfer+0x1474>
 8009c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c84:	3b01      	subs	r3, #1
 8009c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	029b      	lsls	r3, r3, #10
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cae:	801a      	strh	r2, [r3, #0]
 8009cb0:	e060      	b.n	8009d74 <USB_EPStartXfer+0x155e>
 8009cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10c      	bne.n	8009cd4 <USB_EPStartXfer+0x14be>
 8009cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	e04f      	b.n	8009d74 <USB_EPStartXfer+0x155e>
 8009cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd8:	085b      	lsrs	r3, r3, #1
 8009cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d004      	beq.n	8009cf4 <USB_EPStartXfer+0x14de>
 8009cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cee:	3301      	adds	r3, #1
 8009cf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	029b      	lsls	r3, r3, #10
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	e030      	b.n	8009d74 <USB_EPStartXfer+0x155e>
 8009d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	785b      	ldrb	r3, [r3, #1]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d128      	bne.n	8009d74 <USB_EPStartXfer+0x155e>
 8009d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	461a      	mov	r2, r3
 8009d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d46:	4413      	add	r3, r2
 8009d48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	00da      	lsls	r2, r3, #3
 8009d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d5e:	4413      	add	r3, r2
 8009d60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d72:	801a      	strh	r2, [r3, #0]
 8009d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	785b      	ldrb	r3, [r3, #1]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 8085 	bne.w	8009e9e <USB_EPStartXfer+0x1688>
 8009d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	461a      	mov	r2, r3
 8009db4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009db8:	4413      	add	r3, r2
 8009dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	00da      	lsls	r2, r3, #3
 8009dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009dd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dec:	801a      	strh	r2, [r3, #0]
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df2:	2b3e      	cmp	r3, #62	; 0x3e
 8009df4:	d923      	bls.n	8009e3e <USB_EPStartXfer+0x1628>
 8009df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dfa:	095b      	lsrs	r3, r3, #5
 8009dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e04:	f003 031f 	and.w	r3, r3, #31
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d104      	bne.n	8009e16 <USB_EPStartXfer+0x1600>
 8009e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e10:	3b01      	subs	r3, #1
 8009e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	029b      	lsls	r3, r3, #10
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e3a:	801a      	strh	r2, [r3, #0]
 8009e3c:	e05c      	b.n	8009ef8 <USB_EPStartXfer+0x16e2>
 8009e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10c      	bne.n	8009e60 <USB_EPStartXfer+0x164a>
 8009e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e4a:	881b      	ldrh	r3, [r3, #0]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e5c:	801a      	strh	r2, [r3, #0]
 8009e5e:	e04b      	b.n	8009ef8 <USB_EPStartXfer+0x16e2>
 8009e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e64:	085b      	lsrs	r3, r3, #1
 8009e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <USB_EPStartXfer+0x166a>
 8009e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	029b      	lsls	r3, r3, #10
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4313      	orrs	r3, r2
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e9a:	801a      	strh	r2, [r3, #0]
 8009e9c:	e02c      	b.n	8009ef8 <USB_EPStartXfer+0x16e2>
 8009e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d124      	bne.n	8009ef8 <USB_EPStartXfer+0x16e2>
 8009eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	00da      	lsls	r2, r3, #3
 8009ed8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009edc:	4413      	add	r3, r2
 8009ede:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ef0:	801a      	strh	r2, [r3, #0]
 8009ef2:	e001      	b.n	8009ef8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e03a      	b.n	8009f6e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f2a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f36:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	441a      	add	r2, r3
 8009f54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d020      	beq.n	8009fcc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa0:	81bb      	strh	r3, [r7, #12]
 8009fa2:	89bb      	ldrh	r3, [r7, #12]
 8009fa4:	f083 0310 	eor.w	r3, r3, #16
 8009fa8:	81bb      	strh	r3, [r7, #12]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	441a      	add	r2, r3
 8009fb4:	89bb      	ldrh	r3, [r7, #12]
 8009fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	8013      	strh	r3, [r2, #0]
 8009fca:	e01f      	b.n	800a00c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe2:	81fb      	strh	r3, [r7, #14]
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009fea:	81fb      	strh	r3, [r7, #14]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	441a      	add	r2, r3
 8009ff6:	89fb      	ldrh	r3, [r7, #14]
 8009ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a008:	b29b      	uxth	r3, r3
 800a00a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b087      	sub	sp, #28
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	7b1b      	ldrb	r3, [r3, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f040 809d 	bne.w	800a168 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d04c      	beq.n	800a0d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	823b      	strh	r3, [r7, #16]
 800a044:	8a3b      	ldrh	r3, [r7, #16]
 800a046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d01b      	beq.n	800a086 <USB_EPClearStall+0x6c>
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a064:	81fb      	strh	r3, [r7, #14]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	441a      	add	r2, r3
 800a070:	89fb      	ldrh	r3, [r7, #14]
 800a072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a07a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a07e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a082:	b29b      	uxth	r3, r3
 800a084:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	78db      	ldrb	r3, [r3, #3]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d06c      	beq.n	800a168 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0a4:	81bb      	strh	r3, [r7, #12]
 800a0a6:	89bb      	ldrh	r3, [r7, #12]
 800a0a8:	f083 0320 	eor.w	r3, r3, #32
 800a0ac:	81bb      	strh	r3, [r7, #12]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	441a      	add	r2, r3
 800a0b8:	89bb      	ldrh	r3, [r7, #12]
 800a0ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	8013      	strh	r3, [r2, #0]
 800a0ce:	e04b      	b.n	800a168 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	82fb      	strh	r3, [r7, #22]
 800a0de:	8afb      	ldrh	r3, [r7, #22]
 800a0e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01b      	beq.n	800a120 <USB_EPClearStall+0x106>
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fe:	82bb      	strh	r3, [r7, #20]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	441a      	add	r2, r3
 800a10a:	8abb      	ldrh	r3, [r7, #20]
 800a10c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a136:	827b      	strh	r3, [r7, #18]
 800a138:	8a7b      	ldrh	r3, [r7, #18]
 800a13a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a13e:	827b      	strh	r3, [r7, #18]
 800a140:	8a7b      	ldrh	r3, [r7, #18]
 800a142:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a146:	827b      	strh	r3, [r7, #18]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	441a      	add	r2, r3
 800a152:	8a7b      	ldrh	r3, [r7, #18]
 800a154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a15c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a164:	b29b      	uxth	r3, r3
 800a166:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	371c      	adds	r7, #28
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	460b      	mov	r3, r1
 800a180:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a182:	78fb      	ldrb	r3, [r7, #3]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d103      	bne.n	800a190 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2280      	movs	r2, #128	; 0x80
 800a18c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a1de:	68fb      	ldr	r3, [r7, #12]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3714      	adds	r7, #20
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b08b      	sub	sp, #44	; 0x2c
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	80fb      	strh	r3, [r7, #6]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a202:	88bb      	ldrh	r3, [r7, #4]
 800a204:	3301      	adds	r3, #1
 800a206:	085b      	lsrs	r3, r3, #1
 800a208:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a212:	88fa      	ldrh	r2, [r7, #6]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a21c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
 800a222:	e01b      	b.n	800a25c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	3301      	adds	r3, #1
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	021b      	lsls	r3, r3, #8
 800a232:	b21a      	sxth	r2, r3
 800a234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a238:	4313      	orrs	r3, r2
 800a23a:	b21b      	sxth	r3, r3
 800a23c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	8a7a      	ldrh	r2, [r7, #18]
 800a242:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	3302      	adds	r3, #2
 800a248:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	3301      	adds	r3, #1
 800a24e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	3301      	adds	r3, #1
 800a254:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	3b01      	subs	r3, #1
 800a25a:	627b      	str	r3, [r7, #36]	; 0x24
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e0      	bne.n	800a224 <USB_WritePMA+0x38>
  }
}
 800a262:	bf00      	nop
 800a264:	bf00      	nop
 800a266:	372c      	adds	r7, #44	; 0x2c
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a270:	b480      	push	{r7}
 800a272:	b08b      	sub	sp, #44	; 0x2c
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	4611      	mov	r1, r2
 800a27c:	461a      	mov	r2, r3
 800a27e:	460b      	mov	r3, r1
 800a280:	80fb      	strh	r3, [r7, #6]
 800a282:	4613      	mov	r3, r2
 800a284:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a286:	88bb      	ldrh	r3, [r7, #4]
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a296:	88fa      	ldrh	r2, [r7, #6]
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2a0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a6:	e018      	b.n	800a2da <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	3302      	adds	r3, #2
 800a2b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	0a1b      	lsrs	r3, r3, #8
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e3      	bne.n	800a2a8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a2e0:	88bb      	ldrh	r3, [r7, #4]
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	701a      	strb	r2, [r3, #0]
  }
}
 800a2fc:	bf00      	nop
 800a2fe:	372c      	adds	r7, #44	; 0x2c
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a314:	2010      	movs	r0, #16
 800a316:	f001 fe9b 	bl	800c050 <USBD_static_malloc>
 800a31a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d105      	bne.n	800a32e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a32a:	2302      	movs	r3, #2
 800a32c:	e01b      	b.n	800a366 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7c1b      	ldrb	r3, [r3, #16]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d103      	bne.n	800a346 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2207      	movs	r2, #7
 800a342:	875a      	strh	r2, [r3, #58]	; 0x3a
 800a344:	e002      	b.n	800a34c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a34c:	2304      	movs	r3, #4
 800a34e:	2203      	movs	r2, #3
 800a350:	2181      	movs	r1, #129	; 0x81
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f001 fd35 	bl	800bdc2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	460b      	mov	r3, r1
 800a378:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800a37a:	2181      	movs	r1, #129	; 0x81
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f001 fd46 	bl	800be0e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a394:	2b00      	cmp	r3, #0
 800a396:	d009      	beq.n	800a3ac <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 fe64 	bl	800c06c <USBD_static_free>
    pdev->pClassData = NULL;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3c8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e0e8      	b.n	800a5ae <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d046      	beq.n	800a476 <USBD_HID_Setup+0xbe>
 800a3e8:	2b20      	cmp	r3, #32
 800a3ea:	f040 80d8 	bne.w	800a59e <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	785b      	ldrb	r3, [r3, #1]
 800a3f2:	3b02      	subs	r3, #2
 800a3f4:	2b09      	cmp	r3, #9
 800a3f6:	d836      	bhi.n	800a466 <USBD_HID_Setup+0xae>
 800a3f8:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <USBD_HID_Setup+0x48>)
 800a3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fe:	bf00      	nop
 800a400:	0800a457 	.word	0x0800a457
 800a404:	0800a437 	.word	0x0800a437
 800a408:	0800a467 	.word	0x0800a467
 800a40c:	0800a467 	.word	0x0800a467
 800a410:	0800a467 	.word	0x0800a467
 800a414:	0800a467 	.word	0x0800a467
 800a418:	0800a467 	.word	0x0800a467
 800a41c:	0800a467 	.word	0x0800a467
 800a420:	0800a445 	.word	0x0800a445
 800a424:	0800a429 	.word	0x0800a429
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	885b      	ldrh	r3, [r3, #2]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	461a      	mov	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	601a      	str	r2, [r3, #0]
          break;
 800a434:	e01e      	b.n	800a474 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2201      	movs	r2, #1
 800a43a:	4619      	mov	r1, r3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f001 f9d8 	bl	800b7f2 <USBD_CtlSendData>
          break;
 800a442:	e017      	b.n	800a474 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	885b      	ldrh	r3, [r3, #2]
 800a448:	0a1b      	lsrs	r3, r3, #8
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	461a      	mov	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	605a      	str	r2, [r3, #4]
          break;
 800a454:	e00e      	b.n	800a474 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3304      	adds	r3, #4
 800a45a:	2201      	movs	r2, #1
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 f9c7 	bl	800b7f2 <USBD_CtlSendData>
          break;
 800a464:	e006      	b.n	800a474 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f001 f951 	bl	800b710 <USBD_CtlError>
          ret = USBD_FAIL;
 800a46e:	2303      	movs	r3, #3
 800a470:	75fb      	strb	r3, [r7, #23]
          break;
 800a472:	bf00      	nop
      }
      break;
 800a474:	e09a      	b.n	800a5ac <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	785b      	ldrb	r3, [r3, #1]
 800a47a:	2b0b      	cmp	r3, #11
 800a47c:	f200 8086 	bhi.w	800a58c <USBD_HID_Setup+0x1d4>
 800a480:	a201      	add	r2, pc, #4	; (adr r2, 800a488 <USBD_HID_Setup+0xd0>)
 800a482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a486:	bf00      	nop
 800a488:	0800a4b9 	.word	0x0800a4b9
 800a48c:	0800a59b 	.word	0x0800a59b
 800a490:	0800a58d 	.word	0x0800a58d
 800a494:	0800a58d 	.word	0x0800a58d
 800a498:	0800a58d 	.word	0x0800a58d
 800a49c:	0800a58d 	.word	0x0800a58d
 800a4a0:	0800a4e3 	.word	0x0800a4e3
 800a4a4:	0800a58d 	.word	0x0800a58d
 800a4a8:	0800a58d 	.word	0x0800a58d
 800a4ac:	0800a58d 	.word	0x0800a58d
 800a4b0:	0800a53b 	.word	0x0800a53b
 800a4b4:	0800a565 	.word	0x0800a565
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d107      	bne.n	800a4d4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a4c4:	f107 030a 	add.w	r3, r7, #10
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f001 f990 	bl	800b7f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4d2:	e063      	b.n	800a59c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f001 f91a 	bl	800b710 <USBD_CtlError>
            ret = USBD_FAIL;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	75fb      	strb	r3, [r7, #23]
          break;
 800a4e0:	e05c      	b.n	800a59c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	885b      	ldrh	r3, [r3, #2]
 800a4e6:	0a1b      	lsrs	r3, r3, #8
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	2b22      	cmp	r3, #34	; 0x22
 800a4ec:	d108      	bne.n	800a500 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	88db      	ldrh	r3, [r3, #6]
 800a4f2:	2b4a      	cmp	r3, #74	; 0x4a
 800a4f4:	bf28      	it	cs
 800a4f6:	234a      	movcs	r3, #74	; 0x4a
 800a4f8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a4fa:	4b2f      	ldr	r3, [pc, #188]	; (800a5b8 <USBD_HID_Setup+0x200>)
 800a4fc:	613b      	str	r3, [r7, #16]
 800a4fe:	e015      	b.n	800a52c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	885b      	ldrh	r3, [r3, #2]
 800a504:	0a1b      	lsrs	r3, r3, #8
 800a506:	b29b      	uxth	r3, r3
 800a508:	2b21      	cmp	r3, #33	; 0x21
 800a50a:	d108      	bne.n	800a51e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800a50c:	4b2b      	ldr	r3, [pc, #172]	; (800a5bc <USBD_HID_Setup+0x204>)
 800a50e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	88db      	ldrh	r3, [r3, #6]
 800a514:	2b09      	cmp	r3, #9
 800a516:	bf28      	it	cs
 800a518:	2309      	movcs	r3, #9
 800a51a:	82bb      	strh	r3, [r7, #20]
 800a51c:	e006      	b.n	800a52c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 f8f5 	bl	800b710 <USBD_CtlError>
            ret = USBD_FAIL;
 800a526:	2303      	movs	r3, #3
 800a528:	75fb      	strb	r3, [r7, #23]
            break;
 800a52a:	e037      	b.n	800a59c <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a52c:	8abb      	ldrh	r3, [r7, #20]
 800a52e:	461a      	mov	r2, r3
 800a530:	6939      	ldr	r1, [r7, #16]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 f95d 	bl	800b7f2 <USBD_CtlSendData>
          break;
 800a538:	e030      	b.n	800a59c <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b03      	cmp	r3, #3
 800a544:	d107      	bne.n	800a556 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	3308      	adds	r3, #8
 800a54a:	2201      	movs	r2, #1
 800a54c:	4619      	mov	r1, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f001 f94f 	bl	800b7f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a554:	e022      	b.n	800a59c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 f8d9 	bl	800b710 <USBD_CtlError>
            ret = USBD_FAIL;
 800a55e:	2303      	movs	r3, #3
 800a560:	75fb      	strb	r3, [r7, #23]
          break;
 800a562:	e01b      	b.n	800a59c <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d106      	bne.n	800a57e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	885b      	ldrh	r3, [r3, #2]
 800a574:	b2db      	uxtb	r3, r3
 800a576:	461a      	mov	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a57c:	e00e      	b.n	800a59c <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 f8c5 	bl	800b710 <USBD_CtlError>
            ret = USBD_FAIL;
 800a586:	2303      	movs	r3, #3
 800a588:	75fb      	strb	r3, [r7, #23]
          break;
 800a58a:	e007      	b.n	800a59c <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f001 f8be 	bl	800b710 <USBD_CtlError>
          ret = USBD_FAIL;
 800a594:	2303      	movs	r3, #3
 800a596:	75fb      	strb	r3, [r7, #23]
          break;
 800a598:	e000      	b.n	800a59c <USBD_HID_Setup+0x1e4>
          break;
 800a59a:	bf00      	nop
      }
      break;
 800a59c:	e006      	b.n	800a5ac <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 f8b5 	bl	800b710 <USBD_CtlError>
      ret = USBD_FAIL;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a5aa:	bf00      	nop
  }

  return (uint8_t)ret;
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	200000c8 	.word	0x200000c8
 800a5bc:	200000b0 	.word	0x200000b0

0800a5c0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5d4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e013      	b.n	800a608 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d10c      	bne.n	800a606 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	7b1b      	ldrb	r3, [r3, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d108      	bne.n	800a606 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	2181      	movs	r1, #129	; 0x81
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f001 fcac 	bl	800bf5e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2222      	movs	r2, #34	; 0x22
 800a61c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800a61e:	4b03      	ldr	r3, [pc, #12]	; (800a62c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	20000044 	.word	0x20000044

0800a630 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2222      	movs	r2, #34	; 0x22
 800a63c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800a63e:	4b03      	ldr	r3, [pc, #12]	; (800a64c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	20000068 	.word	0x20000068

0800a650 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2222      	movs	r2, #34	; 0x22
 800a65c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800a65e:	4b03      	ldr	r3, [pc, #12]	; (800a66c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	2000008c 	.word	0x2000008c

0800a670 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a682:	2200      	movs	r2, #0
 800a684:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	220a      	movs	r2, #10
 800a6a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a6a2:	4b03      	ldr	r3, [pc, #12]	; (800a6b0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	200000bc 	.word	0x200000bc

0800a6b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a6c8:	2303      	movs	r3, #3
 800a6ca:	e01f      	b.n	800a70c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	79fa      	ldrb	r2, [r7, #7]
 800a6fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f001 faf5 	bl	800bcf0 <USBD_LL_Init>
 800a706:	4603      	mov	r3, r0
 800a708:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a728:	2303      	movs	r3, #3
 800a72a:	e016      	b.n	800a75a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00b      	beq.n	800a758 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	f107 020e 	add.w	r2, r7, #14
 800a74c:	4610      	mov	r0, r2
 800a74e:	4798      	blx	r3
 800a750:	4602      	mov	r2, r0
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f001 fb0e 	bl	800bd8c <USBD_LL_Start>
 800a770:	4603      	mov	r3, r0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a79c:	2303      	movs	r3, #3
 800a79e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d009      	beq.n	800a7be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	78fa      	ldrb	r2, [r7, #3]
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	78fa      	ldrb	r2, [r7, #3]
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	4798      	blx	r3
  }

  return USBD_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 ff46 	bl	800b69c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a81e:	461a      	mov	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a82c:	f003 031f 	and.w	r3, r3, #31
 800a830:	2b02      	cmp	r3, #2
 800a832:	d01a      	beq.n	800a86a <USBD_LL_SetupStage+0x72>
 800a834:	2b02      	cmp	r3, #2
 800a836:	d822      	bhi.n	800a87e <USBD_LL_SetupStage+0x86>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <USBD_LL_SetupStage+0x4a>
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d00a      	beq.n	800a856 <USBD_LL_SetupStage+0x5e>
 800a840:	e01d      	b.n	800a87e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f9ee 	bl	800ac2c <USBD_StdDevReq>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]
      break;
 800a854:	e020      	b.n	800a898 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fa52 	bl	800ad08 <USBD_StdItfReq>
 800a864:	4603      	mov	r3, r0
 800a866:	73fb      	strb	r3, [r7, #15]
      break;
 800a868:	e016      	b.n	800a898 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa91 	bl	800ad9a <USBD_StdEPReq>
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]
      break;
 800a87c:	e00c      	b.n	800a898 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 fadd 	bl	800be4c <USBD_LL_StallEP>
 800a892:	4603      	mov	r3, r0
 800a894:	73fb      	strb	r3, [r7, #15]
      break;
 800a896:	bf00      	nop
  }

  return ret;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a8b0:	7afb      	ldrb	r3, [r7, #11]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d138      	bne.n	800a928 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d14a      	bne.n	800a95e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	689a      	ldr	r2, [r3, #8]
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d913      	bls.n	800a8fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	1ad2      	subs	r2, r2, r3
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	68da      	ldr	r2, [r3, #12]
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	bf28      	it	cs
 800a8ee:	4613      	movcs	r3, r2
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 ffa8 	bl	800b84a <USBD_CtlContinueRx>
 800a8fa:	e030      	b.n	800a95e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b03      	cmp	r3, #3
 800a906:	d10b      	bne.n	800a920 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 ffa3 	bl	800b86c <USBD_CtlSendStatus>
 800a926:	e01a      	b.n	800a95e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b03      	cmp	r3, #3
 800a932:	d114      	bne.n	800a95e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00e      	beq.n	800a95e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	7afa      	ldrb	r2, [r7, #11]
 800a94a:	4611      	mov	r1, r2
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	4798      	blx	r3
 800a950:	4603      	mov	r3, r0
 800a952:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	e000      	b.n	800a960 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	460b      	mov	r3, r1
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d16b      	bne.n	800aa54 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3314      	adds	r3, #20
 800a980:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d156      	bne.n	800aa3a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	689a      	ldr	r2, [r3, #8]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	429a      	cmp	r2, r3
 800a996:	d914      	bls.n	800a9c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	1ad2      	subs	r2, r2, r3
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 ff3a 	bl	800b828 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f001 faf0 	bl	800bfa0 <USBD_LL_PrepareReceive>
 800a9c0:	e03b      	b.n	800aa3a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	68da      	ldr	r2, [r3, #12]
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d11c      	bne.n	800aa08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	685a      	ldr	r2, [r3, #4]
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d316      	bcc.n	800aa08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d20f      	bcs.n	800aa08 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 ff1b 	bl	800b828 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f001 facd 	bl	800bfa0 <USBD_LL_PrepareReceive>
 800aa06:	e018      	b.n	800aa3a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d10b      	bne.n	800aa2c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d005      	beq.n	800aa2c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa2c:	2180      	movs	r1, #128	; 0x80
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f001 fa0c 	bl	800be4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 ff2c 	bl	800b892 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d122      	bne.n	800aa8a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f7ff fe98 	bl	800a77a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aa52:	e01a      	b.n	800aa8a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	d114      	bne.n	800aa8a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00e      	beq.n	800aa8a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	7afa      	ldrb	r2, [r7, #11]
 800aa76:	4611      	mov	r1, r2
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	4798      	blx	r3
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	e000      	b.n	800aa8c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e02f      	b.n	800ab28 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00f      	beq.n	800aaf2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d009      	beq.n	800aaf2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	6852      	ldr	r2, [r2, #4]
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	4611      	mov	r1, r2
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f001 f962 	bl	800bdc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2240      	movs	r2, #64	; 0x40
 800ab0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab0e:	2340      	movs	r3, #64	; 0x40
 800ab10:	2200      	movs	r2, #0
 800ab12:	2180      	movs	r1, #128	; 0x80
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f001 f954 	bl	800bdc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2240      	movs	r2, #64	; 0x40
 800ab24:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2204      	movs	r2, #4
 800ab6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b04      	cmp	r3, #4
 800ab8e:	d106      	bne.n	800ab9e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e012      	b.n	800abe8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d10b      	bne.n	800abe6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d005      	beq.n	800abe6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	3301      	adds	r3, #1
 800ac06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac0e:	8a3b      	ldrh	r3, [r7, #16]
 800ac10:	021b      	lsls	r3, r3, #8
 800ac12:	b21a      	sxth	r2, r3
 800ac14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	b21b      	sxth	r3, r3
 800ac1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac1e:	89fb      	ldrh	r3, [r7, #14]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac42:	2b40      	cmp	r3, #64	; 0x40
 800ac44:	d005      	beq.n	800ac52 <USBD_StdDevReq+0x26>
 800ac46:	2b40      	cmp	r3, #64	; 0x40
 800ac48:	d853      	bhi.n	800acf2 <USBD_StdDevReq+0xc6>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00b      	beq.n	800ac66 <USBD_StdDevReq+0x3a>
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d14f      	bne.n	800acf2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	4798      	blx	r3
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]
      break;
 800ac64:	e04a      	b.n	800acfc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	785b      	ldrb	r3, [r3, #1]
 800ac6a:	2b09      	cmp	r3, #9
 800ac6c:	d83b      	bhi.n	800ace6 <USBD_StdDevReq+0xba>
 800ac6e:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <USBD_StdDevReq+0x48>)
 800ac70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac74:	0800acc9 	.word	0x0800acc9
 800ac78:	0800acdd 	.word	0x0800acdd
 800ac7c:	0800ace7 	.word	0x0800ace7
 800ac80:	0800acd3 	.word	0x0800acd3
 800ac84:	0800ace7 	.word	0x0800ace7
 800ac88:	0800aca7 	.word	0x0800aca7
 800ac8c:	0800ac9d 	.word	0x0800ac9d
 800ac90:	0800ace7 	.word	0x0800ace7
 800ac94:	0800acbf 	.word	0x0800acbf
 800ac98:	0800acb1 	.word	0x0800acb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f9de 	bl	800b060 <USBD_GetDescriptor>
          break;
 800aca4:	e024      	b.n	800acf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fb6d 	bl	800b388 <USBD_SetAddress>
          break;
 800acae:	e01f      	b.n	800acf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fbac 	bl	800b410 <USBD_SetConfig>
 800acb8:	4603      	mov	r3, r0
 800acba:	73fb      	strb	r3, [r7, #15]
          break;
 800acbc:	e018      	b.n	800acf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fc4b 	bl	800b55c <USBD_GetConfig>
          break;
 800acc6:	e013      	b.n	800acf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fc7c 	bl	800b5c8 <USBD_GetStatus>
          break;
 800acd0:	e00e      	b.n	800acf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fcab 	bl	800b630 <USBD_SetFeature>
          break;
 800acda:	e009      	b.n	800acf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fcba 	bl	800b658 <USBD_ClrFeature>
          break;
 800ace4:	e004      	b.n	800acf0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fd11 	bl	800b710 <USBD_CtlError>
          break;
 800acee:	bf00      	nop
      }
      break;
 800acf0:	e004      	b.n	800acfc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fd0b 	bl	800b710 <USBD_CtlError>
      break;
 800acfa:	bf00      	nop
  }

  return ret;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop

0800ad08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad1e:	2b40      	cmp	r3, #64	; 0x40
 800ad20:	d005      	beq.n	800ad2e <USBD_StdItfReq+0x26>
 800ad22:	2b40      	cmp	r3, #64	; 0x40
 800ad24:	d82f      	bhi.n	800ad86 <USBD_StdItfReq+0x7e>
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <USBD_StdItfReq+0x26>
 800ad2a:	2b20      	cmp	r3, #32
 800ad2c:	d12b      	bne.n	800ad86 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	3b01      	subs	r3, #1
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d81d      	bhi.n	800ad78 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	889b      	ldrh	r3, [r3, #4]
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d813      	bhi.n	800ad6e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	4798      	blx	r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	88db      	ldrh	r3, [r3, #6]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d110      	bne.n	800ad82 <USBD_StdItfReq+0x7a>
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10d      	bne.n	800ad82 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fd80 	bl	800b86c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad6c:	e009      	b.n	800ad82 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fccd 	bl	800b710 <USBD_CtlError>
          break;
 800ad76:	e004      	b.n	800ad82 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fcc8 	bl	800b710 <USBD_CtlError>
          break;
 800ad80:	e000      	b.n	800ad84 <USBD_StdItfReq+0x7c>
          break;
 800ad82:	bf00      	nop
      }
      break;
 800ad84:	e004      	b.n	800ad90 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fcc1 	bl	800b710 <USBD_CtlError>
      break;
 800ad8e:	bf00      	nop
  }

  return ret;
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	889b      	ldrh	r3, [r3, #4]
 800adac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adb6:	2b40      	cmp	r3, #64	; 0x40
 800adb8:	d007      	beq.n	800adca <USBD_StdEPReq+0x30>
 800adba:	2b40      	cmp	r3, #64	; 0x40
 800adbc:	f200 8145 	bhi.w	800b04a <USBD_StdEPReq+0x2b0>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00c      	beq.n	800adde <USBD_StdEPReq+0x44>
 800adc4:	2b20      	cmp	r3, #32
 800adc6:	f040 8140 	bne.w	800b04a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	4798      	blx	r3
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
      break;
 800addc:	e13a      	b.n	800b054 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	785b      	ldrb	r3, [r3, #1]
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d007      	beq.n	800adf6 <USBD_StdEPReq+0x5c>
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	f300 8129 	bgt.w	800b03e <USBD_StdEPReq+0x2a4>
 800adec:	2b00      	cmp	r3, #0
 800adee:	d07f      	beq.n	800aef0 <USBD_StdEPReq+0x156>
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d03c      	beq.n	800ae6e <USBD_StdEPReq+0xd4>
 800adf4:	e123      	b.n	800b03e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d002      	beq.n	800ae08 <USBD_StdEPReq+0x6e>
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d016      	beq.n	800ae34 <USBD_StdEPReq+0x9a>
 800ae06:	e02c      	b.n	800ae62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00d      	beq.n	800ae2a <USBD_StdEPReq+0x90>
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
 800ae10:	2b80      	cmp	r3, #128	; 0x80
 800ae12:	d00a      	beq.n	800ae2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae14:	7bbb      	ldrb	r3, [r7, #14]
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f001 f817 	bl	800be4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae1e:	2180      	movs	r1, #128	; 0x80
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f001 f813 	bl	800be4c <USBD_LL_StallEP>
 800ae26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae28:	e020      	b.n	800ae6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fc6f 	bl	800b710 <USBD_CtlError>
              break;
 800ae32:	e01b      	b.n	800ae6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	885b      	ldrh	r3, [r3, #2]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10e      	bne.n	800ae5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00b      	beq.n	800ae5a <USBD_StdEPReq+0xc0>
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	2b80      	cmp	r3, #128	; 0x80
 800ae46:	d008      	beq.n	800ae5a <USBD_StdEPReq+0xc0>
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	88db      	ldrh	r3, [r3, #6]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fff9 	bl	800be4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fd06 	bl	800b86c <USBD_CtlSendStatus>

              break;
 800ae60:	e004      	b.n	800ae6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fc53 	bl	800b710 <USBD_CtlError>
              break;
 800ae6a:	bf00      	nop
          }
          break;
 800ae6c:	e0ec      	b.n	800b048 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d002      	beq.n	800ae80 <USBD_StdEPReq+0xe6>
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d016      	beq.n	800aeac <USBD_StdEPReq+0x112>
 800ae7e:	e030      	b.n	800aee2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae80:	7bbb      	ldrb	r3, [r7, #14]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00d      	beq.n	800aea2 <USBD_StdEPReq+0x108>
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	2b80      	cmp	r3, #128	; 0x80
 800ae8a:	d00a      	beq.n	800aea2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae8c:	7bbb      	ldrb	r3, [r7, #14]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 ffdb 	bl	800be4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae96:	2180      	movs	r1, #128	; 0x80
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 ffd7 	bl	800be4c <USBD_LL_StallEP>
 800ae9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aea0:	e025      	b.n	800aeee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fc33 	bl	800b710 <USBD_CtlError>
              break;
 800aeaa:	e020      	b.n	800aeee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	885b      	ldrh	r3, [r3, #2]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d11b      	bne.n	800aeec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
 800aeb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d004      	beq.n	800aec8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 ffe1 	bl	800be8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fccf 	bl	800b86c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	4798      	blx	r3
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aee0:	e004      	b.n	800aeec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fc13 	bl	800b710 <USBD_CtlError>
              break;
 800aeea:	e000      	b.n	800aeee <USBD_StdEPReq+0x154>
              break;
 800aeec:	bf00      	nop
          }
          break;
 800aeee:	e0ab      	b.n	800b048 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d002      	beq.n	800af02 <USBD_StdEPReq+0x168>
 800aefc:	2b03      	cmp	r3, #3
 800aefe:	d032      	beq.n	800af66 <USBD_StdEPReq+0x1cc>
 800af00:	e097      	b.n	800b032 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d007      	beq.n	800af18 <USBD_StdEPReq+0x17e>
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b80      	cmp	r3, #128	; 0x80
 800af0c:	d004      	beq.n	800af18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fbfd 	bl	800b710 <USBD_CtlError>
                break;
 800af16:	e091      	b.n	800b03c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	da0b      	bge.n	800af38 <USBD_StdEPReq+0x19e>
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af26:	4613      	mov	r3, r2
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	4413      	add	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	3310      	adds	r3, #16
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	4413      	add	r3, r2
 800af34:	3304      	adds	r3, #4
 800af36:	e00b      	b.n	800af50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af38:	7bbb      	ldrb	r3, [r7, #14]
 800af3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af3e:	4613      	mov	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	4413      	add	r3, r2
 800af4e:	3304      	adds	r3, #4
 800af50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	2202      	movs	r2, #2
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fc47 	bl	800b7f2 <USBD_CtlSendData>
              break;
 800af64:	e06a      	b.n	800b03c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da11      	bge.n	800af92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	f003 020f 	and.w	r2, r3, #15
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	4613      	mov	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	440b      	add	r3, r1
 800af80:	3324      	adds	r3, #36	; 0x24
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d117      	bne.n	800afb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fbc0 	bl	800b710 <USBD_CtlError>
                  break;
 800af90:	e054      	b.n	800b03c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af92:	7bbb      	ldrb	r3, [r7, #14]
 800af94:	f003 020f 	and.w	r2, r3, #15
 800af98:	6879      	ldr	r1, [r7, #4]
 800af9a:	4613      	mov	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	440b      	add	r3, r1
 800afa4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d104      	bne.n	800afb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fbad 	bl	800b710 <USBD_CtlError>
                  break;
 800afb6:	e041      	b.n	800b03c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	da0b      	bge.n	800afd8 <USBD_StdEPReq+0x23e>
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	3310      	adds	r3, #16
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	4413      	add	r3, r2
 800afd4:	3304      	adds	r3, #4
 800afd6:	e00b      	b.n	800aff0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afde:	4613      	mov	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	4413      	add	r3, r2
 800afee:	3304      	adds	r3, #4
 800aff0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aff2:	7bbb      	ldrb	r3, [r7, #14]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <USBD_StdEPReq+0x264>
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	2b80      	cmp	r3, #128	; 0x80
 800affc:	d103      	bne.n	800b006 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2200      	movs	r2, #0
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	e00e      	b.n	800b024 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 ff5c 	bl	800bec8 <USBD_LL_IsStallEP>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2201      	movs	r2, #1
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	e002      	b.n	800b024 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2202      	movs	r2, #2
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fbe1 	bl	800b7f2 <USBD_CtlSendData>
              break;
 800b030:	e004      	b.n	800b03c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fb6b 	bl	800b710 <USBD_CtlError>
              break;
 800b03a:	bf00      	nop
          }
          break;
 800b03c:	e004      	b.n	800b048 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fb65 	bl	800b710 <USBD_CtlError>
          break;
 800b046:	bf00      	nop
      }
      break;
 800b048:	e004      	b.n	800b054 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fb5f 	bl	800b710 <USBD_CtlError>
      break;
 800b052:	bf00      	nop
  }

  return ret;
 800b054:	7bfb      	ldrb	r3, [r7, #15]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
	...

0800b060 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b072:	2300      	movs	r3, #0
 800b074:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	885b      	ldrh	r3, [r3, #2]
 800b07a:	0a1b      	lsrs	r3, r3, #8
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	3b01      	subs	r3, #1
 800b080:	2b0e      	cmp	r3, #14
 800b082:	f200 8152 	bhi.w	800b32a <USBD_GetDescriptor+0x2ca>
 800b086:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <USBD_GetDescriptor+0x2c>)
 800b088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08c:	0800b0fd 	.word	0x0800b0fd
 800b090:	0800b115 	.word	0x0800b115
 800b094:	0800b155 	.word	0x0800b155
 800b098:	0800b32b 	.word	0x0800b32b
 800b09c:	0800b32b 	.word	0x0800b32b
 800b0a0:	0800b2cb 	.word	0x0800b2cb
 800b0a4:	0800b2f7 	.word	0x0800b2f7
 800b0a8:	0800b32b 	.word	0x0800b32b
 800b0ac:	0800b32b 	.word	0x0800b32b
 800b0b0:	0800b32b 	.word	0x0800b32b
 800b0b4:	0800b32b 	.word	0x0800b32b
 800b0b8:	0800b32b 	.word	0x0800b32b
 800b0bc:	0800b32b 	.word	0x0800b32b
 800b0c0:	0800b32b 	.word	0x0800b32b
 800b0c4:	0800b0c9 	.word	0x0800b0c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ce:	69db      	ldr	r3, [r3, #28]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00b      	beq.n	800b0ec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	7c12      	ldrb	r2, [r2, #16]
 800b0e0:	f107 0108 	add.w	r1, r7, #8
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4798      	blx	r3
 800b0e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0ea:	e126      	b.n	800b33a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fb0e 	bl	800b710 <USBD_CtlError>
        err++;
 800b0f4:	7afb      	ldrb	r3, [r7, #11]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	72fb      	strb	r3, [r7, #11]
      break;
 800b0fa:	e11e      	b.n	800b33a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	7c12      	ldrb	r2, [r2, #16]
 800b108:	f107 0108 	add.w	r1, r7, #8
 800b10c:	4610      	mov	r0, r2
 800b10e:	4798      	blx	r3
 800b110:	60f8      	str	r0, [r7, #12]
      break;
 800b112:	e112      	b.n	800b33a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7c1b      	ldrb	r3, [r3, #16]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10d      	bne.n	800b138 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b124:	f107 0208 	add.w	r2, r7, #8
 800b128:	4610      	mov	r0, r2
 800b12a:	4798      	blx	r3
 800b12c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3301      	adds	r3, #1
 800b132:	2202      	movs	r2, #2
 800b134:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b136:	e100      	b.n	800b33a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	f107 0208 	add.w	r2, r7, #8
 800b144:	4610      	mov	r0, r2
 800b146:	4798      	blx	r3
 800b148:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	2202      	movs	r2, #2
 800b150:	701a      	strb	r2, [r3, #0]
      break;
 800b152:	e0f2      	b.n	800b33a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	885b      	ldrh	r3, [r3, #2]
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b05      	cmp	r3, #5
 800b15c:	f200 80ac 	bhi.w	800b2b8 <USBD_GetDescriptor+0x258>
 800b160:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <USBD_GetDescriptor+0x108>)
 800b162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b166:	bf00      	nop
 800b168:	0800b181 	.word	0x0800b181
 800b16c:	0800b1b5 	.word	0x0800b1b5
 800b170:	0800b1e9 	.word	0x0800b1e9
 800b174:	0800b21d 	.word	0x0800b21d
 800b178:	0800b251 	.word	0x0800b251
 800b17c:	0800b285 	.word	0x0800b285
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00b      	beq.n	800b1a4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	7c12      	ldrb	r2, [r2, #16]
 800b198:	f107 0108 	add.w	r1, r7, #8
 800b19c:	4610      	mov	r0, r2
 800b19e:	4798      	blx	r3
 800b1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1a2:	e091      	b.n	800b2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fab2 	bl	800b710 <USBD_CtlError>
            err++;
 800b1ac:	7afb      	ldrb	r3, [r7, #11]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1b2:	e089      	b.n	800b2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	7c12      	ldrb	r2, [r2, #16]
 800b1cc:	f107 0108 	add.w	r1, r7, #8
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	4798      	blx	r3
 800b1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1d6:	e077      	b.n	800b2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fa98 	bl	800b710 <USBD_CtlError>
            err++;
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1e6:	e06f      	b.n	800b2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00b      	beq.n	800b20c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	7c12      	ldrb	r2, [r2, #16]
 800b200:	f107 0108 	add.w	r1, r7, #8
 800b204:	4610      	mov	r0, r2
 800b206:	4798      	blx	r3
 800b208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b20a:	e05d      	b.n	800b2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fa7e 	bl	800b710 <USBD_CtlError>
            err++;
 800b214:	7afb      	ldrb	r3, [r7, #11]
 800b216:	3301      	adds	r3, #1
 800b218:	72fb      	strb	r3, [r7, #11]
          break;
 800b21a:	e055      	b.n	800b2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00b      	beq.n	800b240 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	7c12      	ldrb	r2, [r2, #16]
 800b234:	f107 0108 	add.w	r1, r7, #8
 800b238:	4610      	mov	r0, r2
 800b23a:	4798      	blx	r3
 800b23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b23e:	e043      	b.n	800b2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fa64 	bl	800b710 <USBD_CtlError>
            err++;
 800b248:	7afb      	ldrb	r3, [r7, #11]
 800b24a:	3301      	adds	r3, #1
 800b24c:	72fb      	strb	r3, [r7, #11]
          break;
 800b24e:	e03b      	b.n	800b2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	7c12      	ldrb	r2, [r2, #16]
 800b268:	f107 0108 	add.w	r1, r7, #8
 800b26c:	4610      	mov	r0, r2
 800b26e:	4798      	blx	r3
 800b270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b272:	e029      	b.n	800b2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 fa4a 	bl	800b710 <USBD_CtlError>
            err++;
 800b27c:	7afb      	ldrb	r3, [r7, #11]
 800b27e:	3301      	adds	r3, #1
 800b280:	72fb      	strb	r3, [r7, #11]
          break;
 800b282:	e021      	b.n	800b2c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00b      	beq.n	800b2a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	7c12      	ldrb	r2, [r2, #16]
 800b29c:	f107 0108 	add.w	r1, r7, #8
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4798      	blx	r3
 800b2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2a6:	e00f      	b.n	800b2c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fa30 	bl	800b710 <USBD_CtlError>
            err++;
 800b2b0:	7afb      	ldrb	r3, [r7, #11]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2b6:	e007      	b.n	800b2c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fa28 	bl	800b710 <USBD_CtlError>
          err++;
 800b2c0:	7afb      	ldrb	r3, [r7, #11]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b2c6:	bf00      	nop
      }
      break;
 800b2c8:	e037      	b.n	800b33a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	7c1b      	ldrb	r3, [r3, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d109      	bne.n	800b2e6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2da:	f107 0208 	add.w	r2, r7, #8
 800b2de:	4610      	mov	r0, r2
 800b2e0:	4798      	blx	r3
 800b2e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2e4:	e029      	b.n	800b33a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fa11 	bl	800b710 <USBD_CtlError>
        err++;
 800b2ee:	7afb      	ldrb	r3, [r7, #11]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b2f4:	e021      	b.n	800b33a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	7c1b      	ldrb	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10d      	bne.n	800b31a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b306:	f107 0208 	add.w	r2, r7, #8
 800b30a:	4610      	mov	r0, r2
 800b30c:	4798      	blx	r3
 800b30e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3301      	adds	r3, #1
 800b314:	2207      	movs	r2, #7
 800b316:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b318:	e00f      	b.n	800b33a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f9f7 	bl	800b710 <USBD_CtlError>
        err++;
 800b322:	7afb      	ldrb	r3, [r7, #11]
 800b324:	3301      	adds	r3, #1
 800b326:	72fb      	strb	r3, [r7, #11]
      break;
 800b328:	e007      	b.n	800b33a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f9ef 	bl	800b710 <USBD_CtlError>
      err++;
 800b332:	7afb      	ldrb	r3, [r7, #11]
 800b334:	3301      	adds	r3, #1
 800b336:	72fb      	strb	r3, [r7, #11]
      break;
 800b338:	bf00      	nop
  }

  if (err != 0U)
 800b33a:	7afb      	ldrb	r3, [r7, #11]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d11e      	bne.n	800b37e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	88db      	ldrh	r3, [r3, #6]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d016      	beq.n	800b376 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b348:	893b      	ldrh	r3, [r7, #8]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00e      	beq.n	800b36c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	88da      	ldrh	r2, [r3, #6]
 800b352:	893b      	ldrh	r3, [r7, #8]
 800b354:	4293      	cmp	r3, r2
 800b356:	bf28      	it	cs
 800b358:	4613      	movcs	r3, r2
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b35e:	893b      	ldrh	r3, [r7, #8]
 800b360:	461a      	mov	r2, r3
 800b362:	68f9      	ldr	r1, [r7, #12]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fa44 	bl	800b7f2 <USBD_CtlSendData>
 800b36a:	e009      	b.n	800b380 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f9ce 	bl	800b710 <USBD_CtlError>
 800b374:	e004      	b.n	800b380 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa78 	bl	800b86c <USBD_CtlSendStatus>
 800b37c:	e000      	b.n	800b380 <USBD_GetDescriptor+0x320>
    return;
 800b37e:	bf00      	nop
  }
}
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop

0800b388 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	889b      	ldrh	r3, [r3, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d131      	bne.n	800b3fe <USBD_SetAddress+0x76>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	88db      	ldrh	r3, [r3, #6]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d12d      	bne.n	800b3fe <USBD_SetAddress+0x76>
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	885b      	ldrh	r3, [r3, #2]
 800b3a6:	2b7f      	cmp	r3, #127	; 0x7f
 800b3a8:	d829      	bhi.n	800b3fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	885b      	ldrh	r3, [r3, #2]
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d104      	bne.n	800b3cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f9a3 	bl	800b710 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ca:	e01d      	b.n	800b408 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	7bfa      	ldrb	r2, [r7, #15]
 800b3d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fda1 	bl	800bf20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa44 	bl	800b86c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d004      	beq.n	800b3f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f2:	e009      	b.n	800b408 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3fc:	e004      	b.n	800b408 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f985 	bl	800b710 <USBD_CtlError>
  }
}
 800b406:	bf00      	nop
 800b408:	bf00      	nop
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	885b      	ldrh	r3, [r3, #2]
 800b422:	b2da      	uxtb	r2, r3
 800b424:	4b4c      	ldr	r3, [pc, #304]	; (800b558 <USBD_SetConfig+0x148>)
 800b426:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b428:	4b4b      	ldr	r3, [pc, #300]	; (800b558 <USBD_SetConfig+0x148>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d905      	bls.n	800b43c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f96c 	bl	800b710 <USBD_CtlError>
    return USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	e088      	b.n	800b54e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b02      	cmp	r3, #2
 800b446:	d002      	beq.n	800b44e <USBD_SetConfig+0x3e>
 800b448:	2b03      	cmp	r3, #3
 800b44a:	d025      	beq.n	800b498 <USBD_SetConfig+0x88>
 800b44c:	e071      	b.n	800b532 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b44e:	4b42      	ldr	r3, [pc, #264]	; (800b558 <USBD_SetConfig+0x148>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d01c      	beq.n	800b490 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b456:	4b40      	ldr	r3, [pc, #256]	; (800b558 <USBD_SetConfig+0x148>)
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	461a      	mov	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b460:	4b3d      	ldr	r3, [pc, #244]	; (800b558 <USBD_SetConfig+0x148>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff f992 	bl	800a790 <USBD_SetClassConfig>
 800b46c:	4603      	mov	r3, r0
 800b46e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b470:	7bfb      	ldrb	r3, [r7, #15]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d004      	beq.n	800b480 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f949 	bl	800b710 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b47e:	e065      	b.n	800b54c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f9f3 	bl	800b86c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2203      	movs	r2, #3
 800b48a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b48e:	e05d      	b.n	800b54c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f9eb 	bl	800b86c <USBD_CtlSendStatus>
      break;
 800b496:	e059      	b.n	800b54c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b498:	4b2f      	ldr	r3, [pc, #188]	; (800b558 <USBD_SetConfig+0x148>)
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d112      	bne.n	800b4c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b4a8:	4b2b      	ldr	r3, [pc, #172]	; (800b558 <USBD_SetConfig+0x148>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4b2:	4b29      	ldr	r3, [pc, #164]	; (800b558 <USBD_SetConfig+0x148>)
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff f985 	bl	800a7c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f9d4 	bl	800b86c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4c4:	e042      	b.n	800b54c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b4c6:	4b24      	ldr	r3, [pc, #144]	; (800b558 <USBD_SetConfig+0x148>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d02a      	beq.n	800b52a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7ff f973 	bl	800a7c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b4e2:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <USBD_SetConfig+0x148>)
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4ec:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <USBD_SetConfig+0x148>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff f94c 	bl	800a790 <USBD_SetClassConfig>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00f      	beq.n	800b522 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f903 	bl	800b710 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7ff f958 	bl	800a7c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2202      	movs	r2, #2
 800b51c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b520:	e014      	b.n	800b54c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f9a2 	bl	800b86c <USBD_CtlSendStatus>
      break;
 800b528:	e010      	b.n	800b54c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f99e 	bl	800b86c <USBD_CtlSendStatus>
      break;
 800b530:	e00c      	b.n	800b54c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f8eb 	bl	800b710 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b53a:	4b07      	ldr	r3, [pc, #28]	; (800b558 <USBD_SetConfig+0x148>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff f941 	bl	800a7c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b546:	2303      	movs	r3, #3
 800b548:	73fb      	strb	r3, [r7, #15]
      break;
 800b54a:	bf00      	nop
  }

  return ret;
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000664 	.word	0x20000664

0800b55c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	88db      	ldrh	r3, [r3, #6]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d004      	beq.n	800b578 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f8cd 	bl	800b710 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b576:	e023      	b.n	800b5c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	2b02      	cmp	r3, #2
 800b582:	dc02      	bgt.n	800b58a <USBD_GetConfig+0x2e>
 800b584:	2b00      	cmp	r3, #0
 800b586:	dc03      	bgt.n	800b590 <USBD_GetConfig+0x34>
 800b588:	e015      	b.n	800b5b6 <USBD_GetConfig+0x5a>
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d00b      	beq.n	800b5a6 <USBD_GetConfig+0x4a>
 800b58e:	e012      	b.n	800b5b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3308      	adds	r3, #8
 800b59a:	2201      	movs	r2, #1
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f927 	bl	800b7f2 <USBD_CtlSendData>
        break;
 800b5a4:	e00c      	b.n	800b5c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f91f 	bl	800b7f2 <USBD_CtlSendData>
        break;
 800b5b4:	e004      	b.n	800b5c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b5b6:	6839      	ldr	r1, [r7, #0]
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f8a9 	bl	800b710 <USBD_CtlError>
        break;
 800b5be:	bf00      	nop
}
 800b5c0:	bf00      	nop
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d81e      	bhi.n	800b61e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	88db      	ldrh	r3, [r3, #6]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d004      	beq.n	800b5f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f890 	bl	800b710 <USBD_CtlError>
        break;
 800b5f0:	e01a      	b.n	800b628 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d005      	beq.n	800b60e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	f043 0202 	orr.w	r2, r3, #2
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	330c      	adds	r3, #12
 800b612:	2202      	movs	r2, #2
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f8eb 	bl	800b7f2 <USBD_CtlSendData>
      break;
 800b61c:	e004      	b.n	800b628 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f875 	bl	800b710 <USBD_CtlError>
      break;
 800b626:	bf00      	nop
  }
}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	885b      	ldrh	r3, [r3, #2]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d106      	bne.n	800b650 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f90e 	bl	800b86c <USBD_CtlSendStatus>
  }
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	3b01      	subs	r3, #1
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d80b      	bhi.n	800b688 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	885b      	ldrh	r3, [r3, #2]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d10c      	bne.n	800b692 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f8f3 	bl	800b86c <USBD_CtlSendStatus>
      }
      break;
 800b686:	e004      	b.n	800b692 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f840 	bl	800b710 <USBD_CtlError>
      break;
 800b690:	e000      	b.n	800b694 <USBD_ClrFeature+0x3c>
      break;
 800b692:	bf00      	nop
  }
}
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	781a      	ldrb	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	781a      	ldrb	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7ff fa92 	bl	800abf0 <SWAPBYTE>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff fa85 	bl	800abf0 <SWAPBYTE>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f7ff fa78 	bl	800abf0 <SWAPBYTE>
 800b700:	4603      	mov	r3, r0
 800b702:	461a      	mov	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	80da      	strh	r2, [r3, #6]
}
 800b708:	bf00      	nop
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b71a:	2180      	movs	r1, #128	; 0x80
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fb95 	bl	800be4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b722:	2100      	movs	r1, #0
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fb91 	bl	800be4c <USBD_LL_StallEP>
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b732:	b580      	push	{r7, lr}
 800b734:	b086      	sub	sp, #24
 800b736:	af00      	add	r7, sp, #0
 800b738:	60f8      	str	r0, [r7, #12]
 800b73a:	60b9      	str	r1, [r7, #8]
 800b73c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b73e:	2300      	movs	r3, #0
 800b740:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d036      	beq.n	800b7b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b74c:	6938      	ldr	r0, [r7, #16]
 800b74e:	f000 f836 	bl	800b7be <USBD_GetLen>
 800b752:	4603      	mov	r3, r0
 800b754:	3301      	adds	r3, #1
 800b756:	b29b      	uxth	r3, r3
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b760:	7dfb      	ldrb	r3, [r7, #23]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	4413      	add	r3, r2
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	7812      	ldrb	r2, [r2, #0]
 800b76a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	3301      	adds	r3, #1
 800b770:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	4413      	add	r3, r2
 800b778:	2203      	movs	r2, #3
 800b77a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
 800b77e:	3301      	adds	r3, #1
 800b780:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b782:	e013      	b.n	800b7ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b784:	7dfb      	ldrb	r3, [r7, #23]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	4413      	add	r3, r2
 800b78a:	693a      	ldr	r2, [r7, #16]
 800b78c:	7812      	ldrb	r2, [r2, #0]
 800b78e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	3301      	adds	r3, #1
 800b794:	613b      	str	r3, [r7, #16]
    idx++;
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	3301      	adds	r3, #1
 800b79a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	701a      	strb	r2, [r3, #0]
    idx++;
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1e7      	bne.n	800b784 <USBD_GetString+0x52>
 800b7b4:	e000      	b.n	800b7b8 <USBD_GetString+0x86>
    return;
 800b7b6:	bf00      	nop
  }
}
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7ce:	e005      	b.n	800b7dc <USBD_GetLen+0x1e>
  {
    len++;
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1f5      	bne.n	800b7d0 <USBD_GetLen+0x12>
  }

  return len;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2202      	movs	r2, #2
 800b802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	2100      	movs	r1, #0
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 fba0 	bl	800bf5e <USBD_LL_Transmit>

  return USBD_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68ba      	ldr	r2, [r7, #8]
 800b838:	2100      	movs	r1, #0
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 fb8f 	bl	800bf5e <USBD_LL_Transmit>

  return USBD_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	60f8      	str	r0, [r7, #12]
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	2100      	movs	r1, #0
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 fb9f 	bl	800bfa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2204      	movs	r2, #4
 800b878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b87c:	2300      	movs	r3, #0
 800b87e:	2200      	movs	r2, #0
 800b880:	2100      	movs	r1, #0
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fb6b 	bl	800bf5e <USBD_LL_Transmit>

  return USBD_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b082      	sub	sp, #8
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2205      	movs	r2, #5
 800b89e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fb79 	bl	800bfa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800b8bc:	2200      	movs	r2, #0
 800b8be:	490e      	ldr	r1, [pc, #56]	; (800b8f8 <MX_USB_Device_Init+0x40>)
 800b8c0:	480e      	ldr	r0, [pc, #56]	; (800b8fc <MX_USB_Device_Init+0x44>)
 800b8c2:	f7fe fef7 	bl	800a6b4 <USBD_Init>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b8cc:	f7f5 fb5a 	bl	8000f84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800b8d0:	490b      	ldr	r1, [pc, #44]	; (800b900 <MX_USB_Device_Init+0x48>)
 800b8d2:	480a      	ldr	r0, [pc, #40]	; (800b8fc <MX_USB_Device_Init+0x44>)
 800b8d4:	f7fe ff1e 	bl	800a714 <USBD_RegisterClass>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b8de:	f7f5 fb51 	bl	8000f84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b8e2:	4806      	ldr	r0, [pc, #24]	; (800b8fc <MX_USB_Device_Init+0x44>)
 800b8e4:	f7fe ff3d 	bl	800a762 <USBD_Start>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800b8ee:	f7f5 fb49 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b8f2:	bf00      	nop
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20000114 	.word	0x20000114
 800b8fc:	20000668 	.word	0x20000668
 800b900:	2000000c 	.word	0x2000000c

0800b904 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	6039      	str	r1, [r7, #0]
 800b90e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2212      	movs	r2, #18
 800b914:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800b916:	4b03      	ldr	r3, [pc, #12]	; (800b924 <USBD_HID_DeviceDescriptor+0x20>)
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	20000134 	.word	0x20000134

0800b928 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	6039      	str	r1, [r7, #0]
 800b932:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2204      	movs	r2, #4
 800b938:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b93a:	4b03      	ldr	r3, [pc, #12]	; (800b948 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr
 800b948:	20000148 	.word	0x20000148

0800b94c <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	6039      	str	r1, [r7, #0]
 800b956:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b958:	79fb      	ldrb	r3, [r7, #7]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d105      	bne.n	800b96a <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	4907      	ldr	r1, [pc, #28]	; (800b980 <USBD_HID_ProductStrDescriptor+0x34>)
 800b962:	4808      	ldr	r0, [pc, #32]	; (800b984 <USBD_HID_ProductStrDescriptor+0x38>)
 800b964:	f7ff fee5 	bl	800b732 <USBD_GetString>
 800b968:	e004      	b.n	800b974 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	4904      	ldr	r1, [pc, #16]	; (800b980 <USBD_HID_ProductStrDescriptor+0x34>)
 800b96e:	4805      	ldr	r0, [pc, #20]	; (800b984 <USBD_HID_ProductStrDescriptor+0x38>)
 800b970:	f7ff fedf 	bl	800b732 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b974:	4b02      	ldr	r3, [pc, #8]	; (800b980 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000938 	.word	0x20000938
 800b984:	0800c154 	.word	0x0800c154

0800b988 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	4603      	mov	r3, r0
 800b990:	6039      	str	r1, [r7, #0]
 800b992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	4904      	ldr	r1, [pc, #16]	; (800b9a8 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800b998:	4804      	ldr	r0, [pc, #16]	; (800b9ac <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800b99a:	f7ff feca 	bl	800b732 <USBD_GetString>
  return USBD_StrDesc;
 800b99e:	4b02      	ldr	r3, [pc, #8]	; (800b9a8 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20000938 	.word	0x20000938
 800b9ac:	0800c16c 	.word	0x0800c16c

0800b9b0 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	6039      	str	r1, [r7, #0]
 800b9ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	221a      	movs	r2, #26
 800b9c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9c2:	f000 f843 	bl	800ba4c <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b9c6:	4b02      	ldr	r3, [pc, #8]	; (800b9d0 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	2000014c 	.word	0x2000014c

0800b9d4 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	6039      	str	r1, [r7, #0]
 800b9de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d105      	bne.n	800b9f2 <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	4907      	ldr	r1, [pc, #28]	; (800ba08 <USBD_HID_ConfigStrDescriptor+0x34>)
 800b9ea:	4808      	ldr	r0, [pc, #32]	; (800ba0c <USBD_HID_ConfigStrDescriptor+0x38>)
 800b9ec:	f7ff fea1 	bl	800b732 <USBD_GetString>
 800b9f0:	e004      	b.n	800b9fc <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	4904      	ldr	r1, [pc, #16]	; (800ba08 <USBD_HID_ConfigStrDescriptor+0x34>)
 800b9f6:	4805      	ldr	r0, [pc, #20]	; (800ba0c <USBD_HID_ConfigStrDescriptor+0x38>)
 800b9f8:	f7ff fe9b 	bl	800b732 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9fc:	4b02      	ldr	r3, [pc, #8]	; (800ba08 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000938 	.word	0x20000938
 800ba0c:	0800c180 	.word	0x0800c180

0800ba10 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d105      	bne.n	800ba2e <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	4907      	ldr	r1, [pc, #28]	; (800ba44 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800ba26:	4808      	ldr	r0, [pc, #32]	; (800ba48 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800ba28:	f7ff fe83 	bl	800b732 <USBD_GetString>
 800ba2c:	e004      	b.n	800ba38 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4904      	ldr	r1, [pc, #16]	; (800ba44 <USBD_HID_InterfaceStrDescriptor+0x34>)
 800ba32:	4805      	ldr	r0, [pc, #20]	; (800ba48 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800ba34:	f7ff fe7d 	bl	800b732 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba38:	4b02      	ldr	r3, [pc, #8]	; (800ba44 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000938 	.word	0x20000938
 800ba48:	0800c18c 	.word	0x0800c18c

0800ba4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba52:	4b0f      	ldr	r3, [pc, #60]	; (800ba90 <Get_SerialNum+0x44>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba58:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <Get_SerialNum+0x48>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba5e:	4b0e      	ldr	r3, [pc, #56]	; (800ba98 <Get_SerialNum+0x4c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4413      	add	r3, r2
 800ba6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d009      	beq.n	800ba86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba72:	2208      	movs	r2, #8
 800ba74:	4909      	ldr	r1, [pc, #36]	; (800ba9c <Get_SerialNum+0x50>)
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f000 f814 	bl	800baa4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba7c:	2204      	movs	r2, #4
 800ba7e:	4908      	ldr	r1, [pc, #32]	; (800baa0 <Get_SerialNum+0x54>)
 800ba80:	68b8      	ldr	r0, [r7, #8]
 800ba82:	f000 f80f 	bl	800baa4 <IntToUnicode>
  }
}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	1fff7590 	.word	0x1fff7590
 800ba94:	1fff7594 	.word	0x1fff7594
 800ba98:	1fff7598 	.word	0x1fff7598
 800ba9c:	2000014e 	.word	0x2000014e
 800baa0:	2000015e 	.word	0x2000015e

0800baa4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	4613      	mov	r3, r2
 800bab0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bab6:	2300      	movs	r3, #0
 800bab8:	75fb      	strb	r3, [r7, #23]
 800baba:	e027      	b.n	800bb0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	0f1b      	lsrs	r3, r3, #28
 800bac0:	2b09      	cmp	r3, #9
 800bac2:	d80b      	bhi.n	800badc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	0f1b      	lsrs	r3, r3, #28
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	4619      	mov	r1, r3
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	440b      	add	r3, r1
 800bad4:	3230      	adds	r2, #48	; 0x30
 800bad6:	b2d2      	uxtb	r2, r2
 800bad8:	701a      	strb	r2, [r3, #0]
 800bada:	e00a      	b.n	800baf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	0f1b      	lsrs	r3, r3, #28
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	4619      	mov	r1, r3
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	440b      	add	r3, r1
 800baec:	3237      	adds	r2, #55	; 0x37
 800baee:	b2d2      	uxtb	r2, r2
 800baf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	011b      	lsls	r3, r3, #4
 800baf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	3301      	adds	r3, #1
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	4413      	add	r3, r2
 800bb02:	2200      	movs	r2, #0
 800bb04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	75fb      	strb	r3, [r7, #23]
 800bb0c:	7dfa      	ldrb	r2, [r7, #23]
 800bb0e:	79fb      	ldrb	r3, [r7, #7]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d3d3      	bcc.n	800babc <IntToUnicode+0x18>
  }
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	371c      	adds	r7, #28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
	...

0800bb24 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b094      	sub	sp, #80	; 0x50
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bb2c:	f107 030c 	add.w	r3, r7, #12
 800bb30:	2244      	movs	r2, #68	; 0x44
 800bb32:	2100      	movs	r1, #0
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 fad5 	bl	800c0e4 <memset>
  if(pcdHandle->Instance==USB)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a15      	ldr	r2, [pc, #84]	; (800bb94 <HAL_PCD_MspInit+0x70>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d123      	bne.n	800bb8c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bb44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb48:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bb4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb4e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb50:	f107 030c 	add.w	r3, r7, #12
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fa f82d 	bl	8005bb4 <HAL_RCCEx_PeriphCLKConfig>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800bb60:	f7f5 fa10 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bb64:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <HAL_PCD_MspInit+0x74>)
 800bb66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb68:	4a0b      	ldr	r2, [pc, #44]	; (800bb98 <HAL_PCD_MspInit+0x74>)
 800bb6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb6e:	6593      	str	r3, [r2, #88]	; 0x58
 800bb70:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <HAL_PCD_MspInit+0x74>)
 800bb72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb78:	60bb      	str	r3, [r7, #8]
 800bb7a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2100      	movs	r1, #0
 800bb80:	2014      	movs	r0, #20
 800bb82:	f7f7 f890 	bl	8002ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800bb86:	2014      	movs	r0, #20
 800bb88:	f7f7 f8a7 	bl	8002cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb8c:	bf00      	nop
 800bb8e:	3750      	adds	r7, #80	; 0x50
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	40005c00 	.word	0x40005c00
 800bb98:	40021000 	.word	0x40021000

0800bb9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	f7fe fe20 	bl	800a7f8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bbd2:	78fa      	ldrb	r2, [r7, #3]
 800bbd4:	6879      	ldr	r1, [r7, #4]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	440b      	add	r3, r1
 800bbe0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	f7fe fe5a 	bl	800a8a2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bbee:	bf00      	nop
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bc08:	78fa      	ldrb	r2, [r7, #3]
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	00db      	lsls	r3, r3, #3
 800bc14:	440b      	add	r3, r1
 800bc16:	3324      	adds	r3, #36	; 0x24
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	78fb      	ldrb	r3, [r7, #3]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f7fe fea3 	bl	800a968 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bc22:	bf00      	nop
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fe ffb7 	bl	800abac <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	795b      	ldrb	r3, [r3, #5]
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d001      	beq.n	800bc5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bc5a:	f7f5 f993 	bl	8000f84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc64:	7bfa      	ldrb	r2, [r7, #15]
 800bc66:	4611      	mov	r1, r2
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe ff61 	bl	800ab30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fe ff0d 	bl	800aa94 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe ff5c 	bl	800ab50 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7a5b      	ldrb	r3, [r3, #9]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d005      	beq.n	800bcac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <HAL_PCD_SuspendCallback+0x30>)
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	4a03      	ldr	r2, [pc, #12]	; (800bcb4 <HAL_PCD_SuspendCallback+0x30>)
 800bca6:	f043 0306 	orr.w	r3, r3, #6
 800bcaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	e000ed00 	.word	0xe000ed00

0800bcb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	7a5b      	ldrb	r3, [r3, #9]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d007      	beq.n	800bcd8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcc8:	4b08      	ldr	r3, [pc, #32]	; (800bcec <HAL_PCD_ResumeCallback+0x34>)
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	4a07      	ldr	r2, [pc, #28]	; (800bcec <HAL_PCD_ResumeCallback+0x34>)
 800bcce:	f023 0306 	bic.w	r3, r3, #6
 800bcd2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bcd4:	f000 f9d4 	bl	800c080 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe ff4c 	bl	800ab7c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	e000ed00 	.word	0xe000ed00

0800bcf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bcf8:	4a22      	ldr	r2, [pc, #136]	; (800bd84 <USBD_LL_Init+0x94>)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a20      	ldr	r2, [pc, #128]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bd08:	4b1e      	ldr	r3, [pc, #120]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd0a:	4a1f      	ldr	r2, [pc, #124]	; (800bd88 <USBD_LL_Init+0x98>)
 800bd0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bd0e:	4b1d      	ldr	r3, [pc, #116]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd10:	2208      	movs	r2, #8
 800bd12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bd14:	4b1b      	ldr	r3, [pc, #108]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd16:	2202      	movs	r2, #2
 800bd18:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd1a:	4b1a      	ldr	r3, [pc, #104]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bd20:	4b18      	ldr	r3, [pc, #96]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bd26:	4b17      	ldr	r3, [pc, #92]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bd2c:	4b15      	ldr	r3, [pc, #84]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bd32:	4b14      	ldr	r3, [pc, #80]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bd38:	4812      	ldr	r0, [pc, #72]	; (800bd84 <USBD_LL_Init+0x94>)
 800bd3a:	f7f7 fc75 	bl	8003628 <HAL_PCD_Init>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d001      	beq.n	800bd48 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bd44:	f7f5 f91e 	bl	8000f84 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd4e:	2318      	movs	r3, #24
 800bd50:	2200      	movs	r2, #0
 800bd52:	2100      	movs	r1, #0
 800bd54:	f7f9 f917 	bl	8004f86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd5e:	2358      	movs	r3, #88	; 0x58
 800bd60:	2200      	movs	r2, #0
 800bd62:	2180      	movs	r1, #128	; 0x80
 800bd64:	f7f9 f90f 	bl	8004f86 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd72:	2200      	movs	r2, #0
 800bd74:	2181      	movs	r1, #129	; 0x81
 800bd76:	f7f9 f906 	bl	8004f86 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20000b38 	.word	0x20000b38
 800bd88:	40005c00 	.word	0x40005c00

0800bd8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7f7 fd0e 	bl	80037c4 <HAL_PCD_Start>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 f96c 	bl	800c08c <USBD_Get_USB_Status>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	4608      	mov	r0, r1
 800bdcc:	4611      	mov	r1, r2
 800bdce:	461a      	mov	r2, r3
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	70fb      	strb	r3, [r7, #3]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	70bb      	strb	r3, [r7, #2]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bdea:	78bb      	ldrb	r3, [r7, #2]
 800bdec:	883a      	ldrh	r2, [r7, #0]
 800bdee:	78f9      	ldrb	r1, [r7, #3]
 800bdf0:	f7f7 fe55 	bl	8003a9e <HAL_PCD_EP_Open>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdf8:	7bfb      	ldrb	r3, [r7, #15]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f000 f946 	bl	800c08c <USBD_Get_USB_Status>
 800be00:	4603      	mov	r3, r0
 800be02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be04:	7bbb      	ldrb	r3, [r7, #14]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	460b      	mov	r3, r1
 800be18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be28:	78fa      	ldrb	r2, [r7, #3]
 800be2a:	4611      	mov	r1, r2
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7f7 fe93 	bl	8003b58 <HAL_PCD_EP_Close>
 800be32:	4603      	mov	r3, r0
 800be34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 f927 	bl	800c08c <USBD_Get_USB_Status>
 800be3e:	4603      	mov	r3, r0
 800be40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be42:	7bbb      	ldrb	r3, [r7, #14]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be66:	78fa      	ldrb	r2, [r7, #3]
 800be68:	4611      	mov	r1, r2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7f7 ff24 	bl	8003cb8 <HAL_PCD_EP_SetStall>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be74:	7bfb      	ldrb	r3, [r7, #15]
 800be76:	4618      	mov	r0, r3
 800be78:	f000 f908 	bl	800c08c <USBD_Get_USB_Status>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be80:	7bbb      	ldrb	r3, [r7, #14]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bea4:	78fa      	ldrb	r2, [r7, #3]
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7f7 ff57 	bl	8003d5c <HAL_PCD_EP_ClrStall>
 800beae:	4603      	mov	r3, r0
 800beb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 f8e9 	bl	800c08c <USBD_Get_USB_Status>
 800beba:	4603      	mov	r3, r0
 800bebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	460b      	mov	r3, r1
 800bed2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800beda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bedc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	da0b      	bge.n	800befc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800beea:	68f9      	ldr	r1, [r7, #12]
 800beec:	4613      	mov	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	440b      	add	r3, r1
 800bef6:	3312      	adds	r3, #18
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	e00b      	b.n	800bf14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800befc:	78fb      	ldrb	r3, [r7, #3]
 800befe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf02:	68f9      	ldr	r1, [r7, #12]
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	440b      	add	r3, r1
 800bf0e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800bf12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf3a:	78fa      	ldrb	r2, [r7, #3]
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7f7 fd89 	bl	8003a56 <HAL_PCD_SetAddress>
 800bf44:	4603      	mov	r3, r0
 800bf46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 f89e 	bl	800c08c <USBD_Get_USB_Status>
 800bf50:	4603      	mov	r3, r0
 800bf52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b086      	sub	sp, #24
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	603b      	str	r3, [r7, #0]
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf7c:	7af9      	ldrb	r1, [r7, #11]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	f7f7 fe62 	bl	8003c4a <HAL_PCD_EP_Transmit>
 800bf86:	4603      	mov	r3, r0
 800bf88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f87d 	bl	800c08c <USBD_Get_USB_Status>
 800bf92:	4603      	mov	r3, r0
 800bf94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf96:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	607a      	str	r2, [r7, #4]
 800bfaa:	603b      	str	r3, [r7, #0]
 800bfac:	460b      	mov	r3, r1
 800bfae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfbe:	7af9      	ldrb	r1, [r7, #11]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	f7f7 fe10 	bl	8003be8 <HAL_PCD_EP_Receive>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 f85c 	bl	800c08c <USBD_Get_USB_Status>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <HAL_PCDEx_LPM_Callback+0x18>
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d013      	beq.n	800c022 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bffa:	e023      	b.n	800c044 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7a5b      	ldrb	r3, [r3, #9]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d007      	beq.n	800c014 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c004:	f000 f83c 	bl	800c080 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c008:	4b10      	ldr	r3, [pc, #64]	; (800c04c <HAL_PCDEx_LPM_Callback+0x68>)
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	4a0f      	ldr	r2, [pc, #60]	; (800c04c <HAL_PCDEx_LPM_Callback+0x68>)
 800c00e:	f023 0306 	bic.w	r3, r3, #6
 800c012:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fdae 	bl	800ab7c <USBD_LL_Resume>
    break;
 800c020:	e010      	b.n	800c044 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fd91 	bl	800ab50 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	7a5b      	ldrb	r3, [r3, #9]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d005      	beq.n	800c042 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c036:	4b05      	ldr	r3, [pc, #20]	; (800c04c <HAL_PCDEx_LPM_Callback+0x68>)
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	4a04      	ldr	r2, [pc, #16]	; (800c04c <HAL_PCDEx_LPM_Callback+0x68>)
 800c03c:	f043 0306 	orr.w	r3, r3, #6
 800c040:	6113      	str	r3, [r2, #16]
    break;
 800c042:	bf00      	nop
}
 800c044:	bf00      	nop
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	e000ed00 	.word	0xe000ed00

0800c050 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c058:	4b03      	ldr	r3, [pc, #12]	; (800c068 <USBD_static_malloc+0x18>)
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	20000e14 	.word	0x20000e14

0800c06c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]

}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c084:	f7f4 fc14 	bl	80008b0 <SystemClock_Config>
}
 800c088:	bf00      	nop
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	4603      	mov	r3, r0
 800c094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c09a:	79fb      	ldrb	r3, [r7, #7]
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d817      	bhi.n	800c0d0 <USBD_Get_USB_Status+0x44>
 800c0a0:	a201      	add	r2, pc, #4	; (adr r2, 800c0a8 <USBD_Get_USB_Status+0x1c>)
 800c0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a6:	bf00      	nop
 800c0a8:	0800c0b9 	.word	0x0800c0b9
 800c0ac:	0800c0bf 	.word	0x0800c0bf
 800c0b0:	0800c0c5 	.word	0x0800c0c5
 800c0b4:	0800c0cb 	.word	0x0800c0cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c0bc:	e00b      	b.n	800c0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c2:	e008      	b.n	800c0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c8:	e005      	b.n	800c0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ce:	e002      	b.n	800c0d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d4:	bf00      	nop
  }
  return usb_status;
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <memset>:
 800c0e4:	4402      	add	r2, r0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d100      	bne.n	800c0ee <memset+0xa>
 800c0ec:	4770      	bx	lr
 800c0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c0f2:	e7f9      	b.n	800c0e8 <memset+0x4>

0800c0f4 <__libc_init_array>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	4d0d      	ldr	r5, [pc, #52]	; (800c12c <__libc_init_array+0x38>)
 800c0f8:	4c0d      	ldr	r4, [pc, #52]	; (800c130 <__libc_init_array+0x3c>)
 800c0fa:	1b64      	subs	r4, r4, r5
 800c0fc:	10a4      	asrs	r4, r4, #2
 800c0fe:	2600      	movs	r6, #0
 800c100:	42a6      	cmp	r6, r4
 800c102:	d109      	bne.n	800c118 <__libc_init_array+0x24>
 800c104:	4d0b      	ldr	r5, [pc, #44]	; (800c134 <__libc_init_array+0x40>)
 800c106:	4c0c      	ldr	r4, [pc, #48]	; (800c138 <__libc_init_array+0x44>)
 800c108:	f000 f818 	bl	800c13c <_init>
 800c10c:	1b64      	subs	r4, r4, r5
 800c10e:	10a4      	asrs	r4, r4, #2
 800c110:	2600      	movs	r6, #0
 800c112:	42a6      	cmp	r6, r4
 800c114:	d105      	bne.n	800c122 <__libc_init_array+0x2e>
 800c116:	bd70      	pop	{r4, r5, r6, pc}
 800c118:	f855 3b04 	ldr.w	r3, [r5], #4
 800c11c:	4798      	blx	r3
 800c11e:	3601      	adds	r6, #1
 800c120:	e7ee      	b.n	800c100 <__libc_init_array+0xc>
 800c122:	f855 3b04 	ldr.w	r3, [r5], #4
 800c126:	4798      	blx	r3
 800c128:	3601      	adds	r6, #1
 800c12a:	e7f2      	b.n	800c112 <__libc_init_array+0x1e>
 800c12c:	0800c1ac 	.word	0x0800c1ac
 800c130:	0800c1ac 	.word	0x0800c1ac
 800c134:	0800c1ac 	.word	0x0800c1ac
 800c138:	0800c1b0 	.word	0x0800c1b0

0800c13c <_init>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	bf00      	nop
 800c140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c142:	bc08      	pop	{r3}
 800c144:	469e      	mov	lr, r3
 800c146:	4770      	bx	lr

0800c148 <_fini>:
 800c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14a:	bf00      	nop
 800c14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14e:	bc08      	pop	{r3}
 800c150:	469e      	mov	lr, r3
 800c152:	4770      	bx	lr
