
Gamepad_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b484  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b65c  0800b65c  0001b65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6b4  0800b6b4  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  0800b6b4  0800b6b4  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b6b4  0800b6b4  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6b4  0800b6b4  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b8  0800b6b8  0001b6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b6bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb0  20000168  0800b824  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e18  0800b824  00020e18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0c4  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040b2  00000000  00000000  0003b29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  0003f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000126c  00000000  00000000  00040b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005004  00000000  00000000  00041df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db1b  00000000  00000000  00046df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9d3a  00000000  00000000  00064913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006568  00000000  00000000  0013e650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00144bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000168 	.word	0x20000168
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b644 	.word	0x0800b644

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000016c 	.word	0x2000016c
 8000214:	0800b644 	.word	0x0800b644

08000218 <ADC_DMA_Init>:

uint32_t adc_buffer1 [BUFFER_SIZE];
uint32_t adc_buffer2 [BUFFER_SIZE];

void ADC_DMA_Init (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA (&hadc1, (uint32_t *)adc_buffer1, BUFFER_SIZE);
 800021c:	2202      	movs	r2, #2
 800021e:	4907      	ldr	r1, [pc, #28]	; (800023c <ADC_DMA_Init+0x24>)
 8000220:	4807      	ldr	r0, [pc, #28]	; (8000240 <ADC_DMA_Init+0x28>)
 8000222:	f001 fb83 	bl	800192c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA (&hadc2, (uint32_t *)adc_buffer2, BUFFER_SIZE);
 8000226:	2202      	movs	r2, #2
 8000228:	4906      	ldr	r1, [pc, #24]	; (8000244 <ADC_DMA_Init+0x2c>)
 800022a:	4807      	ldr	r0, [pc, #28]	; (8000248 <ADC_DMA_Init+0x30>)
 800022c:	f001 fb7e 	bl	800192c <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start (&htim6);
 8000230:	4806      	ldr	r0, [pc, #24]	; (800024c <ADC_DMA_Init+0x34>)
 8000232:	f005 fc41 	bl	8005ab8 <HAL_TIM_Base_Start>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000184 	.word	0x20000184
 8000240:	20000324 	.word	0x20000324
 8000244:	2000018c 	.word	0x2000018c
 8000248:	20000390 	.word	0x20000390
 800024c:	20000554 	.word	0x20000554

08000250 <UpdateButton>:
};

GamepadReport_TypeDef gamepad_report = {0};

void UpdateButton (void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
    gamepad_report.buttons = 0;
 8000254:	4b2f      	ldr	r3, [pc, #188]	; (8000314 <UpdateButton+0xc4>)
 8000256:	2200      	movs	r2, #0
 8000258:	801a      	strh	r2, [r3, #0]

    if (Left)      gamepad_report.buttons |= (1 << 0);
 800025a:	4b2f      	ldr	r3, [pc, #188]	; (8000318 <UpdateButton+0xc8>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d006      	beq.n	8000270 <UpdateButton+0x20>
 8000262:	4b2c      	ldr	r3, [pc, #176]	; (8000314 <UpdateButton+0xc4>)
 8000264:	881b      	ldrh	r3, [r3, #0]
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	b29a      	uxth	r2, r3
 800026c:	4b29      	ldr	r3, [pc, #164]	; (8000314 <UpdateButton+0xc4>)
 800026e:	801a      	strh	r2, [r3, #0]
    if (Up)        gamepad_report.buttons |= (1 << 1);
 8000270:	4b2a      	ldr	r3, [pc, #168]	; (800031c <UpdateButton+0xcc>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d006      	beq.n	8000286 <UpdateButton+0x36>
 8000278:	4b26      	ldr	r3, [pc, #152]	; (8000314 <UpdateButton+0xc4>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	f043 0302 	orr.w	r3, r3, #2
 8000280:	b29a      	uxth	r2, r3
 8000282:	4b24      	ldr	r3, [pc, #144]	; (8000314 <UpdateButton+0xc4>)
 8000284:	801a      	strh	r2, [r3, #0]
    if (Right)     gamepad_report.buttons |= (1 << 2);
 8000286:	4b26      	ldr	r3, [pc, #152]	; (8000320 <UpdateButton+0xd0>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d006      	beq.n	800029c <UpdateButton+0x4c>
 800028e:	4b21      	ldr	r3, [pc, #132]	; (8000314 <UpdateButton+0xc4>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	b29a      	uxth	r2, r3
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <UpdateButton+0xc4>)
 800029a:	801a      	strh	r2, [r3, #0]
    if (Down)      gamepad_report.buttons |= (1 << 3);
 800029c:	4b21      	ldr	r3, [pc, #132]	; (8000324 <UpdateButton+0xd4>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d006      	beq.n	80002b2 <UpdateButton+0x62>
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <UpdateButton+0xc4>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	f043 0308 	orr.w	r3, r3, #8
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <UpdateButton+0xc4>)
 80002b0:	801a      	strh	r2, [r3, #0]
    if (Circle)    gamepad_report.buttons |= (1 << 4);
 80002b2:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <UpdateButton+0xd8>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d006      	beq.n	80002c8 <UpdateButton+0x78>
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <UpdateButton+0xc4>)
 80002bc:	881b      	ldrh	r3, [r3, #0]
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <UpdateButton+0xc4>)
 80002c6:	801a      	strh	r2, [r3, #0]
    if (Triangle)  gamepad_report.buttons |= (1 << 5);
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <UpdateButton+0xdc>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d006      	beq.n	80002de <UpdateButton+0x8e>
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <UpdateButton+0xc4>)
 80002d2:	881b      	ldrh	r3, [r3, #0]
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	b29a      	uxth	r2, r3
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <UpdateButton+0xc4>)
 80002dc:	801a      	strh	r2, [r3, #0]
    if (Chrest)    gamepad_report.buttons |= (1 << 6);
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <UpdateButton+0xe0>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d006      	beq.n	80002f4 <UpdateButton+0xa4>
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <UpdateButton+0xc4>)
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <UpdateButton+0xc4>)
 80002f2:	801a      	strh	r2, [r3, #0]
    if (Square)    gamepad_report.buttons |= (1 << 7);
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <UpdateButton+0xe4>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d006      	beq.n	800030a <UpdateButton+0xba>
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <UpdateButton+0xc4>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b03      	ldr	r3, [pc, #12]	; (8000314 <UpdateButton+0xc4>)
 8000308:	801a      	strh	r2, [r3, #0]
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	2000031c 	.word	0x2000031c
 8000318:	20000314 	.word	0x20000314
 800031c:	20000315 	.word	0x20000315
 8000320:	20000316 	.word	0x20000316
 8000324:	20000317 	.word	0x20000317
 8000328:	20000318 	.word	0x20000318
 800032c:	20000319 	.word	0x20000319
 8000330:	2000031a 	.word	0x2000031a
 8000334:	2000031b 	.word	0x2000031b

08000338 <UpdateJoystick>:

void UpdateJoystick (void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    gamepad_report.x1 = (uint8_t)((adc_buffer1 [0] * 255 / 4095) - 128);
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <UpdateJoystick+0xa0>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4613      	mov	r3, r2
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	1a9a      	subs	r2, r3, r2
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <UpdateJoystick+0xa4>)
 8000348:	fba3 1302 	umull	r1, r3, r3, r2
 800034c:	1ad2      	subs	r2, r2, r3
 800034e:	0852      	lsrs	r2, r2, #1
 8000350:	4413      	add	r3, r2
 8000352:	0adb      	lsrs	r3, r3, #11
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3b80      	subs	r3, #128	; 0x80
 8000358:	b2db      	uxtb	r3, r3
 800035a:	b25a      	sxtb	r2, r3
 800035c:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <UpdateJoystick+0xa8>)
 800035e:	709a      	strb	r2, [r3, #2]
    gamepad_report.y1 = (uint8_t)((adc_buffer1 [1] * 255 / 4095) - 128);
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <UpdateJoystick+0xa0>)
 8000362:	685a      	ldr	r2, [r3, #4]
 8000364:	4613      	mov	r3, r2
 8000366:	021b      	lsls	r3, r3, #8
 8000368:	1a9a      	subs	r2, r3, r2
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <UpdateJoystick+0xa4>)
 800036c:	fba3 1302 	umull	r1, r3, r3, r2
 8000370:	1ad2      	subs	r2, r2, r3
 8000372:	0852      	lsrs	r2, r2, #1
 8000374:	4413      	add	r3, r2
 8000376:	0adb      	lsrs	r3, r3, #11
 8000378:	b2db      	uxtb	r3, r3
 800037a:	3b80      	subs	r3, #128	; 0x80
 800037c:	b2db      	uxtb	r3, r3
 800037e:	b25a      	sxtb	r2, r3
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <UpdateJoystick+0xa8>)
 8000382:	70da      	strb	r2, [r3, #3]
    gamepad_report.x2 = (uint8_t)((adc_buffer2 [0] * 255 / 4095) - 128);
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <UpdateJoystick+0xac>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4613      	mov	r3, r2
 800038a:	021b      	lsls	r3, r3, #8
 800038c:	1a9a      	subs	r2, r3, r2
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <UpdateJoystick+0xa4>)
 8000390:	fba3 1302 	umull	r1, r3, r3, r2
 8000394:	1ad2      	subs	r2, r2, r3
 8000396:	0852      	lsrs	r2, r2, #1
 8000398:	4413      	add	r3, r2
 800039a:	0adb      	lsrs	r3, r3, #11
 800039c:	b2db      	uxtb	r3, r3
 800039e:	3b80      	subs	r3, #128	; 0x80
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	b25a      	sxtb	r2, r3
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <UpdateJoystick+0xa8>)
 80003a6:	711a      	strb	r2, [r3, #4]
    gamepad_report.y2 = (uint8_t)((adc_buffer2 [1] * 255 / 4095) - 128);
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <UpdateJoystick+0xac>)
 80003aa:	685a      	ldr	r2, [r3, #4]
 80003ac:	4613      	mov	r3, r2
 80003ae:	021b      	lsls	r3, r3, #8
 80003b0:	1a9a      	subs	r2, r3, r2
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <UpdateJoystick+0xa4>)
 80003b4:	fba3 1302 	umull	r1, r3, r3, r2
 80003b8:	1ad2      	subs	r2, r2, r3
 80003ba:	0852      	lsrs	r2, r2, #1
 80003bc:	4413      	add	r3, r2
 80003be:	0adb      	lsrs	r3, r3, #11
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	3b80      	subs	r3, #128	; 0x80
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	b25a      	sxtb	r2, r3
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <UpdateJoystick+0xa8>)
 80003ca:	715a      	strb	r2, [r3, #5]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000184 	.word	0x20000184
 80003dc:	00100101 	.word	0x00100101
 80003e0:	2000031c 	.word	0x2000031c
 80003e4:	2000018c 	.word	0x2000018c

080003e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	if (hadc -> Instance == hadc1.Instance || hadc->Instance == hadc2.Instance)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_ADC_ConvCpltCallback+0x2c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d005      	beq.n	8000408 <HAL_ADC_ConvCpltCallback+0x20>
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <HAL_ADC_ConvCpltCallback+0x30>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d101      	bne.n	800040c <HAL_ADC_ConvCpltCallback+0x24>
	{
		SendReport ();
 8000408:	f000 f808 	bl	800041c <SendReport>
	}
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000324 	.word	0x20000324
 8000418:	20000390 	.word	0x20000390

0800041c <SendReport>:

void SendReport (void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
    UpdateButton();
 8000420:	f7ff ff16 	bl	8000250 <UpdateButton>
    UpdateJoystick();
 8000424:	f7ff ff88 	bl	8000338 <UpdateJoystick>
    USBD_HID_SendReport (&hUsbDeviceFS, (uint8_t *) &gamepad_report, sizeof (gamepad_report));
 8000428:	2206      	movs	r2, #6
 800042a:	4903      	ldr	r1, [pc, #12]	; (8000438 <SendReport+0x1c>)
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <SendReport+0x20>)
 800042e:	f009 fb4b 	bl	8009ac8 <USBD_HID_SendReport>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000031c 	.word	0x2000031c
 800043c:	20000658 	.word	0x20000658

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f000 fe5f 	bl	8001106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f820 	bl	800048c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044c:	f000 fb0a 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000450:	f000 face 	bl	80009f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000454:	f000 f864 	bl	8000520 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000458:	f000 f8dc 	bl	8000614 <MX_ADC2_Init>
  MX_USB_Device_Init();
 800045c:	f00a fcb0 	bl	800adc0 <MX_USB_Device_Init>
  MX_TIM6_Init();
 8000460:	f000 fa14 	bl	800088c <MX_TIM6_Init>
  MX_TIM3_Init();
 8000464:	f000 f93e 	bl	80006e4 <MX_TIM3_Init>
  MX_TIM17_Init();
 8000468:	f000 fa48 	bl	80008fc <MX_TIM17_Init>
  MX_TIM4_Init();
 800046c:	f000 f9b2 	bl	80007d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  extern uint16_t pwmData [numLEDs * LEDbits];

  HAL_TIM_PWM_Start_DMA (&htim3, TIM_CHANNEL_2, (uint32_t*) pwmData, sizeof (pwmData) / sizeof (uint16_t));
 8000470:	23c0      	movs	r3, #192	; 0xc0
 8000472:	4a04      	ldr	r2, [pc, #16]	; (8000484 <main+0x44>)
 8000474:	2104      	movs	r1, #4
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <main+0x48>)
 8000478:	f005 fbd8 	bl	8005c2c <HAL_TIM_PWM_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_DMA_Init();
 800047c:	f7ff fecc 	bl	8000218 <ADC_DMA_Init>
 8000480:	e7fc      	b.n	800047c <main+0x3c>
 8000482:	bf00      	nop
 8000484:	20000194 	.word	0x20000194
 8000488:	200004bc 	.word	0x200004bc

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b094      	sub	sp, #80	; 0x50
 8000490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	2238      	movs	r2, #56	; 0x38
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f00b f8a6 	bl	800b5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004b2:	f004 fb0f 	bl	8004ad4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c0:	2302      	movs	r3, #2
 80004c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c4:	2303      	movs	r3, #3
 80004c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80004c8:	2303      	movs	r3, #3
 80004ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80004cc:	230c      	movs	r3, #12
 80004ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004d0:	2302      	movs	r3, #2
 80004d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004d4:	2304      	movs	r3, #4
 80004d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004d8:	2302      	movs	r3, #2
 80004da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004dc:	f107 0318 	add.w	r3, r7, #24
 80004e0:	4618      	mov	r0, r3
 80004e2:	f004 fbab 	bl	8004c3c <HAL_RCC_OscConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80004ec:	f000 fb3a 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f0:	230f      	movs	r3, #15
 80004f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004f4:	2302      	movs	r3, #2
 80004f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f004 fea9 	bl	8005260 <HAL_RCC_ClockConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000514:	f000 fb26 	bl	8000b64 <Error_Handler>
  }
}
 8000518:	bf00      	nop
 800051a:	3750      	adds	r7, #80	; 0x50
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08c      	sub	sp, #48	; 0x30
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2220      	movs	r2, #32
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f00b f857 	bl	800b5ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800053e:	4b33      	ldr	r3, [pc, #204]	; (800060c <MX_ADC1_Init+0xec>)
 8000540:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000544:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <MX_ADC1_Init+0xec>)
 8000548:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800054c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054e:	4b2f      	ldr	r3, [pc, #188]	; (800060c <MX_ADC1_Init+0xec>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000554:	4b2d      	ldr	r3, [pc, #180]	; (800060c <MX_ADC1_Init+0xec>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800055a:	4b2c      	ldr	r3, [pc, #176]	; (800060c <MX_ADC1_Init+0xec>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000560:	4b2a      	ldr	r3, [pc, #168]	; (800060c <MX_ADC1_Init+0xec>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000566:	4b29      	ldr	r3, [pc, #164]	; (800060c <MX_ADC1_Init+0xec>)
 8000568:	2204      	movs	r2, #4
 800056a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <MX_ADC1_Init+0xec>)
 800056e:	2200      	movs	r2, #0
 8000570:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000572:	4b26      	ldr	r3, [pc, #152]	; (800060c <MX_ADC1_Init+0xec>)
 8000574:	2200      	movs	r2, #0
 8000576:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <MX_ADC1_Init+0xec>)
 800057a:	2201      	movs	r2, #1
 800057c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057e:	4b23      	ldr	r3, [pc, #140]	; (800060c <MX_ADC1_Init+0xec>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <MX_ADC1_Init+0xec>)
 8000588:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800058c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_ADC1_Init+0xec>)
 8000590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000594:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC1_Init+0xec>)
 8000598:	2201      	movs	r2, #1
 800059a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_ADC1_Init+0xec>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_ADC1_Init+0xec>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <MX_ADC1_Init+0xec>)
 80005ae:	f001 f839 	bl	8001624 <HAL_ADC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005b8:	f000 fad4 	bl	8000b64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	4619      	mov	r1, r3
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <MX_ADC1_Init+0xec>)
 80005c8:	f001 ffa8 	bl	800251c <HAL_ADCEx_MultiModeConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005d2:	f000 fac7 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_ADC1_Init+0xf0>)
 80005d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005da:	2306      	movs	r3, #6
 80005dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e2:	237f      	movs	r3, #127	; 0x7f
 80005e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e6:	2304      	movs	r3, #4
 80005e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <MX_ADC1_Init+0xec>)
 80005f4:	f001 fa62 	bl	8001abc <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005fe:	f000 fab1 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3730      	adds	r7, #48	; 0x30
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000324 	.word	0x20000324
 8000610:	0c900008 	.word	0x0c900008

08000614 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f00a ffe3 	bl	800b5ec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000628:	4a2c      	ldr	r2, [pc, #176]	; (80006dc <MX_ADC2_Init+0xc8>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800062e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000632:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800064e:	2204      	movs	r2, #4
 8000650:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000654:	2200      	movs	r2, #0
 8000656:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800065a:	2200      	movs	r2, #0
 800065c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000660:	2201      	movs	r2, #1
 8000662:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800066e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800067e:	2201      	movs	r2, #1
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000686:	2200      	movs	r2, #0
 8000688:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ADC2_Init+0xc4>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_ADC2_Init+0xc4>)
 8000694:	f000 ffc6 	bl	8001624 <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800069e:	f000 fa61 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_ADC2_Init+0xcc>)
 80006a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	; 0x7f
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_ADC2_Init+0xc4>)
 80006c0:	f001 f9fc 	bl	8001abc <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80006ca:	f000 fa4b 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000390 	.word	0x20000390
 80006dc:	50000100 	.word	0x50000100
 80006e0:	08600004 	.word	0x08600004

080006e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	; 0x38
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_TIM3_Init+0xe8>)
 8000718:	4a2d      	ldr	r2, [pc, #180]	; (80007d0 <MX_TIM3_Init+0xec>)
 800071a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_TIM3_Init+0xe8>)
 800071e:	f240 128f 	movw	r2, #399	; 0x18f
 8000722:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <MX_TIM3_Init+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 599;
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_TIM3_Init+0xe8>)
 800072c:	f240 2257 	movw	r2, #599	; 0x257
 8000730:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_TIM3_Init+0xe8>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_TIM3_Init+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800073e:	4823      	ldr	r0, [pc, #140]	; (80007cc <MX_TIM3_Init+0xe8>)
 8000740:	f005 f962 	bl	8005a08 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800074a:	f000 fa0b 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000758:	4619      	mov	r1, r3
 800075a:	481c      	ldr	r0, [pc, #112]	; (80007cc <MX_TIM3_Init+0xe8>)
 800075c:	f005 fd92 	bl	8006284 <HAL_TIM_ConfigClockSource>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000766:	f000 f9fd 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800076a:	4818      	ldr	r0, [pc, #96]	; (80007cc <MX_TIM3_Init+0xe8>)
 800076c:	f005 fa06 	bl	8005b7c <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000776:	f000 f9f5 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <MX_TIM3_Init+0xe8>)
 800078a:	f006 fbb9 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000794:	f000 f9e6 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	2204      	movs	r2, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM3_Init+0xe8>)
 80007b0:	f005 fc54 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80007ba:	f000 f9d3 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM3_Init+0xe8>)
 80007c0:	f000 fb92 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 80007c4:	bf00      	nop
 80007c6:	3738      	adds	r7, #56	; 0x38
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200004bc 	.word	0x200004bc
 80007d0:	40000400 	.word	0x40000400

080007d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]
 80007f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_TIM4_Init+0xb0>)
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <MX_TIM4_Init+0xb4>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 399;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_TIM4_Init+0xb0>)
 8000800:	f240 128f 	movw	r2, #399	; 0x18f
 8000804:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_TIM4_Init+0xb0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 599;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM4_Init+0xb0>)
 800080e:	f240 2257 	movw	r2, #599	; 0x257
 8000812:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_TIM4_Init+0xb0>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM4_Init+0xb0>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_TIM4_Init+0xb0>)
 8000822:	f005 f9ab 	bl	8005b7c <HAL_TIM_PWM_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 f99a 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_TIM4_Init+0xb0>)
 8000840:	f006 fb5e 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800084a:	f000 f98b 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084e:	2360      	movs	r3, #96	; 0x60
 8000850:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2208      	movs	r2, #8
 8000862:	4619      	mov	r1, r3
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <MX_TIM4_Init+0xb0>)
 8000866:	f005 fbf9 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000870:	f000 f978 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <MX_TIM4_Init+0xb0>)
 8000876:	f000 fb37 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000508 	.word	0x20000508
 8000888:	40000800 	.word	0x40000800

0800088c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM6_Init+0x68>)
 800089e:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <MX_TIM6_Init+0x6c>)
 80008a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47999;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008a4:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80008a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008c0:	f005 f8a2 	bl	8005a08 <HAL_TIM_Base_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008ca:	f000 f94b 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ce:	2320      	movs	r3, #32
 80008d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_TIM6_Init+0x68>)
 80008dc:	f006 fb10 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 f93d 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000554 	.word	0x20000554
 80008f8:	40001000 	.word	0x40001000

080008fc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000902:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	2234      	movs	r2, #52	; 0x34
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f00a fe65 	bl	800b5ec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000922:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <MX_TIM17_Init+0xec>)
 8000924:	4a31      	ldr	r2, [pc, #196]	; (80009ec <MX_TIM17_Init+0xf0>)
 8000926:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000928:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <MX_TIM17_Init+0xec>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <MX_TIM17_Init+0xec>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <MX_TIM17_Init+0xec>)
 8000936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_TIM17_Init+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <MX_TIM17_Init+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_TIM17_Init+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800094e:	4826      	ldr	r0, [pc, #152]	; (80009e8 <MX_TIM17_Init+0xec>)
 8000950:	f005 f85a 	bl	8005a08 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800095a:	f000 f903 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800095e:	4822      	ldr	r0, [pc, #136]	; (80009e8 <MX_TIM17_Init+0xec>)
 8000960:	f005 f90c 	bl	8005b7c <HAL_TIM_PWM_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800096a:	f000 f8fb 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	; 0x60
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800097a:	2300      	movs	r3, #0
 800097c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	4815      	ldr	r0, [pc, #84]	; (80009e8 <MX_TIM17_Init+0xec>)
 8000994:	f005 fb62 	bl	800605c <HAL_TIM_PWM_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800099e:	f000 f8e1 	bl	8000b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM17_Init+0xec>)
 80009ca:	f006 fb1b 	bl	8007004 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80009d4:	f000 f8c6 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM17_Init+0xec>)
 80009da:	f000 fa85 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200005a0 	.word	0x200005a0
 80009ec:	40014800 	.word	0x40014800

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_DMA_Init+0x70>)
 80009f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009fa:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <MX_DMA_Init+0x70>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6493      	str	r3, [r2, #72]	; 0x48
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_DMA_Init+0x70>)
 8000a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_DMA_Init+0x70>)
 8000a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a12:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <MX_DMA_Init+0x70>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6493      	str	r3, [r2, #72]	; 0x48
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_DMA_Init+0x70>)
 8000a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	200b      	movs	r0, #11
 8000a2c:	f001 fef5 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a30:	200b      	movs	r0, #11
 8000a32:	f001 ff0c 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	200c      	movs	r0, #12
 8000a3c:	f001 feed 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a40:	200c      	movs	r0, #12
 8000a42:	f001 ff04 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	200d      	movs	r0, #13
 8000a4c:	f001 fee5 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a50:	200d      	movs	r0, #13
 8000a52:	f001 fefc 	bl	800284e <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7a:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a80:	f043 0320 	orr.w	r3, r3, #32
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a30      	ldr	r2, [pc, #192]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_GPIO_Init+0xf4>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	481f      	ldr	r0, [pc, #124]	; (8000b5c <MX_GPIO_Init+0xf8>)
 8000ae0:	f002 fac4 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4819      	ldr	r0, [pc, #100]	; (8000b60 <MX_GPIO_Init+0xfc>)
 8000afa:	f002 f935 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 PA8 PA9
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 8000afe:	f248 7328 	movw	r3, #34600	; 0x8728
 8000b02:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f002 f927 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <MX_GPIO_Init+0xf8>)
 8000b32:	f002 f919 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000b36:	23f8      	movs	r3, #248	; 0xf8
 8000b38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0xf8>)
 8000b4a:	f002 f90d 	bl	8002d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	; 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	48001800 	.word	0x48001800

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6613      	str	r3, [r2, #96]	; 0x60
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ba6:	f004 f839 	bl	8004c1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09c      	sub	sp, #112	; 0x70
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	2244      	movs	r2, #68	; 0x44
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f00a fd07 	bl	800b5ec <memset>
  if(hadc->Instance==ADC1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000be6:	d16a      	bne.n	8000cbe <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bf2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f004 fd15 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c04:	f7ff ffae 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c08:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <HAL_ADC_MspInit+0x1ec>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a65      	ldr	r2, [pc, #404]	; (8000da4 <HAL_ADC_MspInit+0x1ec>)
 8000c10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c12:	4b64      	ldr	r3, [pc, #400]	; (8000da4 <HAL_ADC_MspInit+0x1ec>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10b      	bne.n	8000c32 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c1a:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a62      	ldr	r2, [pc, #392]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b60      	ldr	r3, [pc, #384]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b5d      	ldr	r3, [pc, #372]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a5c      	ldr	r2, [pc, #368]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b5a      	ldr	r3, [pc, #360]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f002 f882 	bl	8002d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c64:	4b51      	ldr	r3, [pc, #324]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c66:	4a52      	ldr	r2, [pc, #328]	; (8000db0 <HAL_ADC_MspInit+0x1f8>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c6a:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c82:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c8a:	4b48      	ldr	r3, [pc, #288]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c92:	4b46      	ldr	r3, [pc, #280]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c94:	2220      	movs	r2, #32
 8000c96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c98:	4b44      	ldr	r3, [pc, #272]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ca0:	4842      	ldr	r0, [pc, #264]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000ca2:	f001 fdef 	bl	8002884 <HAL_DMA_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000cac:	f7ff ff5a 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000cb4:	655a      	str	r2, [r3, #84]	; 0x54
 8000cb6:	4a3d      	ldr	r2, [pc, #244]	; (8000dac <HAL_ADC_MspInit+0x1f4>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cbc:	e06e      	b.n	8000d9c <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a3c      	ldr	r2, [pc, #240]	; (8000db4 <HAL_ADC_MspInit+0x1fc>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d169      	bne.n	8000d9c <HAL_ADC_MspInit+0x1e4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ccc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cd2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f004 fca5 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 8000ce4:	f7ff ff3e 	bl	8000b64 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <HAL_ADC_MspInit+0x1ec>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a2d      	ldr	r2, [pc, #180]	; (8000da4 <HAL_ADC_MspInit+0x1ec>)
 8000cf0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_ADC_MspInit+0x1ec>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10b      	bne.n	8000d12 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a2a      	ldr	r2, [pc, #168]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <HAL_ADC_MspInit+0x1f0>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d2a:	2342      	movs	r3, #66	; 0x42
 8000d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f002 f812 	bl	8002d68 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d46:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_ADC_MspInit+0x204>)
 8000d48:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d4c:	2224      	movs	r2, #36	; 0x24
 8000d4e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d68:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d70:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d74:	2220      	movs	r2, #32
 8000d76:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d82:	f001 fd7f 	bl	8002884 <HAL_DMA_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 8000d8c:	f7ff feea 	bl	8000b64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d94:	655a      	str	r2, [r3, #84]	; 0x54
 8000d96:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_ADC_MspInit+0x200>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000d9c:	bf00      	nop
 8000d9e:	3770      	adds	r7, #112	; 0x70
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000064c 	.word	0x2000064c
 8000da8:	40021000 	.word	0x40021000
 8000dac:	200003fc 	.word	0x200003fc
 8000db0:	40020008 	.word	0x40020008
 8000db4:	50000100 	.word	0x50000100
 8000db8:	2000045c 	.word	0x2000045c
 8000dbc:	4002001c 	.word	0x4002001c

08000dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a30      	ldr	r2, [pc, #192]	; (8000e90 <HAL_TIM_Base_MspInit+0xd0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10c      	bne.n	8000dec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	4a2f      	ldr	r2, [pc, #188]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000dea:	e04d      	b.n	8000e88 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <HAL_TIM_Base_MspInit+0xd8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10c      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a26      	ldr	r2, [pc, #152]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000dfc:	f043 0310 	orr.w	r3, r3, #16
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
}
 8000e0e:	e03b      	b.n	8000e88 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM17)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <HAL_TIM_Base_MspInit+0xdc>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d136      	bne.n	8000e88 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e24:	6613      	str	r3, [r2, #96]	; 0x60
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_TIM_Base_MspInit+0xd4>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_TIM_Base_MspInit+0xe4>)
 8000e36:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e3a:	2254      	movs	r2, #84	; 0x54
 8000e3c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e40:	2210      	movs	r2, #16
 8000e42:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e56:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e60:	2220      	movs	r2, #32
 8000e62:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e6e:	f001 fd09 	bl	8002884 <HAL_DMA_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 8000e78:	f7ff fe74 	bl	8000b64 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_TIM_Base_MspInit+0xe0>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40000400 	.word	0x40000400
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40001000 	.word	0x40001000
 8000e9c:	40014800 	.word	0x40014800
 8000ea0:	200005ec 	.word	0x200005ec
 8000ea4:	40020030 	.word	0x40020030

08000ea8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_TIM_PWM_MspInit+0x38>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40000800 	.word	0x40000800
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <HAL_TIM_MspPostInit+0xf0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d11d      	bne.n	8000f46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a33      	ldr	r2, [pc, #204]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f22:	2310      	movs	r3, #16
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f26:	2312      	movs	r3, #18
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f32:	2302      	movs	r3, #2
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f001 ff12 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000f44:	e044      	b.n	8000fd0 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM4)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <HAL_TIM_MspPostInit+0xf8>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d11d      	bne.n	8000f8c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <HAL_TIM_MspPostInit+0xfc>)
 8000f86:	f001 feef 	bl	8002d68 <HAL_GPIO_Init>
}
 8000f8a:	e021      	b.n	8000fd0 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM17)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <HAL_TIM_MspPostInit+0x100>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d11c      	bne.n	8000fd0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_TIM_MspPostInit+0xf4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f001 fecc 	bl	8002d68 <HAL_GPIO_Init>
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40000800 	.word	0x40000800
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	40014800 	.word	0x40014800

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f8b8 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <DMA1_Channel1_IRQHandler+0x10>)
 8001046:	f001 fd40 	bl	8002aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200003fc 	.word	0x200003fc

08001054 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA1_Channel2_IRQHandler+0x10>)
 800105a:	f001 fd36 	bl	8002aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000045c 	.word	0x2000045c

08001068 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA1_Channel3_IRQHandler+0x10>)
 800106e:	f001 fd2c 	bl	8002aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200005ec 	.word	0x200005ec

0800107c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <USB_LP_IRQHandler+0x10>)
 8001082:	f002 f8fb 	bl	800327c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000b28 	.word	0x20000b28

08001090 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b8:	f7ff ffea 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <LoopForever+0xe>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <LoopForever+0x16>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f00a fa8b 	bl	800b5fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e6:	f7ff f9ab 	bl	8000440 <main>

080010ea <LoopForever>:

LoopForever:
    b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   r0, =_estack
 80010ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80010f8:	0800b6bc 	.word	0x0800b6bc
  ldr r2, =_sbss
 80010fc:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001100:	20000e18 	.word	0x20000e18

08001104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_2_IRQHandler>

08001106 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f001 fb77 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f80e 	bl	8001138 <HAL_InitTick>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	71fb      	strb	r3, [r7, #7]
 8001126:	e001      	b.n	800112c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001128:	f7ff fd22 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800112c:	79fb      	ldrb	r3, [r7, #7]

}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_InitTick+0x68>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d022      	beq.n	8001192 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_InitTick+0x6c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_InitTick+0x68>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001158:	fbb1 f3f3 	udiv	r3, r1, r3
 800115c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fb82 	bl	800286a <HAL_SYSTICK_Config>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10f      	bne.n	800118c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	d809      	bhi.n	8001186 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001172:	2200      	movs	r2, #0
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	f04f 30ff 	mov.w	r0, #4294967295
 800117a:	f001 fb4e 	bl	800281a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_InitTick+0x70>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e007      	b.n	8001196 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e004      	b.n	8001196 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e001      	b.n	8001196 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x1c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x20>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x1c>)
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	20000650 	.word	0x20000650
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000650 	.word	0x20000650

080011e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3360      	adds	r3, #96	; 0x60
 8001262:	461a      	mov	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <LL_ADC_SetOffset+0x44>)
 8001272:	4013      	ands	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	4313      	orrs	r3, r2
 8001280:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001288:	bf00      	nop
 800128a:	371c      	adds	r7, #28
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	03fff000 	.word	0x03fff000

08001298 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3360      	adds	r3, #96	; 0x60
 80012a6:	461a      	mov	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3360      	adds	r3, #96	; 0x60
 80012d4:	461a      	mov	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b087      	sub	sp, #28
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3360      	adds	r3, #96	; 0x60
 800130a:	461a      	mov	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	431a      	orrs	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3360      	adds	r3, #96	; 0x60
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	615a      	str	r2, [r3, #20]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b087      	sub	sp, #28
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3330      	adds	r3, #48	; 0x30
 80013c2:	461a      	mov	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	4413      	add	r3, r2
 80013d0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	211f      	movs	r1, #31
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	401a      	ands	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0e9b      	lsrs	r3, r3, #26
 80013ea:	f003 011f 	and.w	r1, r3, #31
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	431a      	orrs	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800140a:	b480      	push	{r7}
 800140c:	b087      	sub	sp, #28
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3314      	adds	r3, #20
 800141a:	461a      	mov	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	0e5b      	lsrs	r3, r3, #25
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	4413      	add	r3, r2
 8001428:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	0d1b      	lsrs	r3, r3, #20
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2107      	movs	r1, #7
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	0d1b      	lsrs	r3, r3, #20
 8001444:	f003 031f 	and.w	r3, r3, #31
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	431a      	orrs	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0318 	and.w	r3, r3, #24
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001484:	40d9      	lsrs	r1, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	400b      	ands	r3, r1
 800148a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148e:	431a      	orrs	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	0007ffff 	.word	0x0007ffff

080014a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 031f 	and.w	r3, r3, #31
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6093      	str	r3, [r2, #8]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014fc:	d101      	bne.n	8001502 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001524:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800154c:	d101      	bne.n	8001552 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001574:	f043 0201 	orr.w	r2, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <LL_ADC_IsEnabled+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_IsEnabled+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c2:	f043 0204 	orr.w	r2, r3, #4
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d101      	bne.n	80015ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b08      	cmp	r3, #8
 800160e:	d101      	bne.n	8001614 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e167      	b.n	800190e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fab3 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff3f 	bl	80014e8 <LL_ADC_IsDeepPowerDownEnabled>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff25 	bl	80014c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff5a 	bl	8001538 <LL_ADC_IsInternalRegulatorEnabled>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d115      	bne.n	80016b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff3e 	bl	8001510 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001694:	4ba0      	ldr	r3, [pc, #640]	; (8001918 <HAL_ADC_Init+0x2f4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	4aa0      	ldr	r2, [pc, #640]	; (800191c <HAL_ADC_Init+0x2f8>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	099b      	lsrs	r3, r3, #6
 80016a2:	3301      	adds	r3, #1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016a8:	e002      	b.n	80016b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f9      	bne.n	80016aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff3c 	bl	8001538 <LL_ADC_IsInternalRegulatorEnabled>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10d      	bne.n	80016e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	f043 0210 	orr.w	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff75 	bl	80015d6 <LL_ADC_REG_IsConversionOngoing>
 80016ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 8100 	bne.w	80018fc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 80fc 	bne.w	80018fc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800170c:	f043 0202 	orr.w	r2, r3, #2
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff35 	bl	8001588 <LL_ADC_IsEnabled>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d111      	bne.n	8001748 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001724:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001728:	f7ff ff2e 	bl	8001588 <LL_ADC_IsEnabled>
 800172c:	4604      	mov	r4, r0
 800172e:	487c      	ldr	r0, [pc, #496]	; (8001920 <HAL_ADC_Init+0x2fc>)
 8001730:	f7ff ff2a 	bl	8001588 <LL_ADC_IsEnabled>
 8001734:	4603      	mov	r3, r0
 8001736:	4323      	orrs	r3, r4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4619      	mov	r1, r3
 8001742:	4878      	ldr	r0, [pc, #480]	; (8001924 <HAL_ADC_Init+0x300>)
 8001744:	f7ff fd50 	bl	80011e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7f5b      	ldrb	r3, [r3, #29]
 800174c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001752:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001758:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800175e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001766:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001772:	2b01      	cmp	r3, #1
 8001774:	d106      	bne.n	8001784 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	3b01      	subs	r3, #1
 800177c:	045b      	lsls	r3, r3, #17
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001788:	2b00      	cmp	r3, #0
 800178a:	d009      	beq.n	80017a0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	4b60      	ldr	r3, [pc, #384]	; (8001928 <HAL_ADC_Init+0x304>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	69b9      	ldr	r1, [r7, #24]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff14 	bl	80015fc <LL_ADC_INJ_IsConversionOngoing>
 80017d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d16d      	bne.n	80018b8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d16a      	bne.n	80018b8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017fe:	f023 0302 	bic.w	r3, r3, #2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	69b9      	ldr	r1, [r7, #24]
 8001808:	430b      	orrs	r3, r1
 800180a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d017      	beq.n	8001844 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001822:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800182c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001830:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6911      	ldr	r1, [r2, #16]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	430b      	orrs	r3, r1
 800183e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001842:	e013      	b.n	800186c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001852:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001864:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001868:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001872:	2b01      	cmp	r3, #1
 8001874:	d118      	bne.n	80018a8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800188c:	4311      	orrs	r1, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001898:	430a      	orrs	r2, r1
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	e007      	b.n	80018b8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10c      	bne.n	80018da <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f023 010f 	bic.w	r1, r3, #15
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	1e5a      	subs	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
 80018d8:	e007      	b.n	80018ea <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 020f 	bic.w	r2, r2, #15
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80018fa:	e007      	b.n	800190c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	f043 0210 	orr.w	r2, r3, #16
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800190c:	7ffb      	ldrb	r3, [r7, #31]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	053e2d63 	.word	0x053e2d63
 8001920:	50000100 	.word	0x50000100
 8001924:	50000300 	.word	0x50000300
 8001928:	fff04007 	.word	0xfff04007

0800192c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001938:	4851      	ldr	r0, [pc, #324]	; (8001a80 <HAL_ADC_Start_DMA+0x154>)
 800193a:	f7ff fdb5 	bl	80014a8 <LL_ADC_GetMultimode>
 800193e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe46 	bl	80015d6 <LL_ADC_REG_IsConversionOngoing>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 808f 	bne.w	8001a70 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_ADC_Start_DMA+0x34>
 800195c:	2302      	movs	r3, #2
 800195e:	e08a      	b.n	8001a76 <HAL_ADC_Start_DMA+0x14a>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d002      	beq.n	800197a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b09      	cmp	r3, #9
 8001978:	d173      	bne.n	8001a62 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fc8e 	bl	800229c <ADC_Enable>
 8001980:	4603      	mov	r3, r0
 8001982:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d166      	bne.n	8001a58 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <HAL_ADC_Start_DMA+0x158>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d002      	beq.n	80019ae <HAL_ADC_Start_DMA+0x82>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e001      	b.n	80019b2 <HAL_ADC_Start_DMA+0x86>
 80019ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d002      	beq.n	80019c0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019dc:	f023 0206 	bic.w	r2, r3, #6
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	661a      	str	r2, [r3, #96]	; 0x60
 80019e4:	e002      	b.n	80019ec <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f0:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <HAL_ADC_Start_DMA+0x15c>)
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <HAL_ADC_Start_DMA+0x160>)
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_ADC_Start_DMA+0x164>)
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	221c      	movs	r2, #28
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0210 	orr.w	r2, r2, #16
 8001a22:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3340      	adds	r3, #64	; 0x40
 8001a3e:	4619      	mov	r1, r3
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f000 ffc6 	bl	80029d4 <HAL_DMA_Start_IT>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fdac 	bl	80015ae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a56:	e00d      	b.n	8001a74 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001a60:	e008      	b.n	8001a74 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001a6e:	e001      	b.n	8001a74 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a70:	2302      	movs	r3, #2
 8001a72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	50000300 	.word	0x50000300
 8001a84:	50000100 	.word	0x50000100
 8001a88:	080023a9 	.word	0x080023a9
 8001a8c:	08002481 	.word	0x08002481
 8001a90:	0800249d 	.word	0x0800249d

08001a94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0b6      	sub	sp, #216	; 0xd8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x22>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e3c8      	b.n	8002270 <HAL_ADC_ConfigChannel+0x7b4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd73 	bl	80015d6 <LL_ADC_REG_IsConversionOngoing>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 83ad 	bne.w	8002252 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f7ff fc54 	bl	80013b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fd61 	bl	80015d6 <LL_ADC_REG_IsConversionOngoing>
 8001b14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fd6d 	bl	80015fc <LL_ADC_INJ_IsConversionOngoing>
 8001b22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 81d9 	bne.w	8001ee2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 81d4 	bne.w	8001ee2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b42:	d10f      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff fc5b 	bl	800140a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fc02 	bl	8001366 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b62:	e00e      	b.n	8001b82 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	461a      	mov	r2, r3
 8001b72:	f7ff fc4a 	bl	800140a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fbf2 	bl	8001366 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d022      	beq.n	8001bea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bb4:	f7ff fb4c 	bl	8001250 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6919      	ldr	r1, [r3, #16]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f7ff fb98 	bl	80012fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x124>
 8001bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x126>
 8001be0:	2300      	movs	r3, #0
 8001be2:	461a      	mov	r2, r3
 8001be4:	f7ff fba4 	bl	8001330 <LL_ADC_SetOffsetSaturation>
 8001be8:	e17b      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fb51 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x15a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fb46 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	0e9b      	lsrs	r3, r3, #26
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	e01e      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x198>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fb3b 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e004      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1b0>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0e9b      	lsrs	r3, r3, #26
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	e018      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1e2>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001c90:	2320      	movs	r3, #32
 8001c92:	e004      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001c94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d106      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fb0a 	bl	80012c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff faee 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x220>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fae3 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	f003 021f 	and.w	r2, r3, #31
 8001cda:	e01e      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x25e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fad8 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001cfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e004      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x276>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	0e9b      	lsrs	r3, r3, #26
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	e018      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x2a8>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d56:	2320      	movs	r3, #32
 8001d58:	e004      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2101      	movs	r1, #1
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff faa7 	bl	80012c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fa8b 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x2e6>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2102      	movs	r1, #2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fa80 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	0e9b      	lsrs	r3, r3, #26
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	e01e      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x324>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2102      	movs	r1, #2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fa75 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	e004      	b.n	8001dde <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x33c>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0e9b      	lsrs	r3, r3, #26
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	e016      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x36a>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	e004      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d106      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2102      	movs	r1, #2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fa46 	bl	80012c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fa2a 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10a      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x3a8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2103      	movs	r1, #3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fa1f 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	0e9b      	lsrs	r3, r3, #26
 8001e5e:	f003 021f 	and.w	r2, r3, #31
 8001e62:	e017      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x3d8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2103      	movs	r1, #3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fa14 	bl	8001298 <LL_ADC_GetOffsetChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e7e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x3f0>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	e011      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x414>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2103      	movs	r1, #3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f9f1 	bl	80012c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fb4e 	bl	8001588 <LL_ADC_IsEnabled>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 8140 	bne.w	8002174 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff faad 	bl	8001460 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4a8f      	ldr	r2, [pc, #572]	; (8002148 <HAL_ADC_ConfigChannel+0x68c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	f040 8131 	bne.w	8002174 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10b      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x47e>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	bf94      	ite	ls
 8001f32:	2301      	movls	r3, #1
 8001f34:	2300      	movhi	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	e019      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x4b2>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f52:	2320      	movs	r3, #32
 8001f54:	e003      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	bf94      	ite	ls
 8001f68:	2301      	movls	r3, #1
 8001f6a:	2300      	movhi	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d079      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d107      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x4d2>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0e9b      	lsrs	r3, r3, #26
 8001f84:	3301      	adds	r3, #1
 8001f86:	069b      	lsls	r3, r3, #26
 8001f88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8c:	e015      	b.n	8001fba <HAL_ADC_ConfigChannel+0x4fe>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	e003      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	069b      	lsls	r3, r3, #26
 8001fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x51e>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	e017      	b.n	800200a <HAL_ADC_ConfigChannel+0x54e>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e003      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	ea42 0103 	orr.w	r1, r2, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10a      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x574>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	3301      	adds	r3, #1
 8002022:	f003 021f 	and.w	r2, r3, #31
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	e018      	b.n	8002062 <HAL_ADC_ConfigChannel+0x5a6>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	e003      	b.n	8002054 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	f003 021f 	and.w	r2, r3, #31
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002062:	430b      	orrs	r3, r1
 8002064:	e081      	b.n	800216a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x5c6>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	3301      	adds	r3, #1
 800207a:	069b      	lsls	r3, r3, #26
 800207c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002080:	e015      	b.n	80020ae <HAL_ADC_ConfigChannel+0x5f2>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e003      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3301      	adds	r3, #1
 80020a8:	069b      	lsls	r3, r3, #26
 80020aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d109      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x612>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	3301      	adds	r3, #1
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	e017      	b.n	80020fe <HAL_ADC_ConfigChannel+0x642>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	61fb      	str	r3, [r7, #28]
  return result;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e003      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	ea42 0103 	orr.w	r1, r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <HAL_ADC_ConfigChannel+0x66e>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0e9b      	lsrs	r3, r3, #26
 8002114:	3301      	adds	r3, #1
 8002116:	f003 021f 	and.w	r2, r3, #31
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	3b1e      	subs	r3, #30
 8002122:	051b      	lsls	r3, r3, #20
 8002124:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002128:	e01e      	b.n	8002168 <HAL_ADC_ConfigChannel+0x6ac>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	613b      	str	r3, [r7, #16]
  return result;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d104      	bne.n	800214c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002142:	2320      	movs	r3, #32
 8002144:	e006      	b.n	8002154 <HAL_ADC_ConfigChannel+0x698>
 8002146:	bf00      	nop
 8002148:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3301      	adds	r3, #1
 8002156:	f003 021f 	and.w	r2, r3, #31
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	3b1e      	subs	r3, #30
 8002162:	051b      	lsls	r3, r3, #20
 8002164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002168:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216e:	4619      	mov	r1, r3
 8002170:	f7ff f94b 	bl	800140a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_ADC_ConfigChannel+0x7bc>)
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d071      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002180:	483e      	ldr	r0, [pc, #248]	; (800227c <HAL_ADC_ConfigChannel+0x7c0>)
 8002182:	f7ff f857 	bl	8001234 <LL_ADC_GetCommonPathInternalCh>
 8002186:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3c      	ldr	r2, [pc, #240]	; (8002280 <HAL_ADC_ConfigChannel+0x7c4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_ADC_ConfigChannel+0x6e2>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a3a      	ldr	r2, [pc, #232]	; (8002284 <HAL_ADC_ConfigChannel+0x7c8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d127      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800219e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d121      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b2:	d157      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021bc:	4619      	mov	r1, r3
 80021be:	482f      	ldr	r0, [pc, #188]	; (800227c <HAL_ADC_ConfigChannel+0x7c0>)
 80021c0:	f7ff f825 	bl	800120e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c4:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_ADC_ConfigChannel+0x7cc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	4a30      	ldr	r2, [pc, #192]	; (800228c <HAL_ADC_ConfigChannel+0x7d0>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021de:	e002      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ec:	e03a      	b.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a27      	ldr	r2, [pc, #156]	; (8002290 <HAL_ADC_ConfigChannel+0x7d4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d113      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10d      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a22      	ldr	r2, [pc, #136]	; (8002294 <HAL_ADC_ConfigChannel+0x7d8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02a      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800220e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002216:	4619      	mov	r1, r3
 8002218:	4818      	ldr	r0, [pc, #96]	; (800227c <HAL_ADC_ConfigChannel+0x7c0>)
 800221a:	f7fe fff8 	bl	800120e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800221e:	e021      	b.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <HAL_ADC_ConfigChannel+0x7dc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d11c      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800222a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d116      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_ADC_ConfigChannel+0x7d8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d011      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002248:	4619      	mov	r1, r3
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <HAL_ADC_ConfigChannel+0x7c0>)
 800224c:	f7fe ffdf 	bl	800120e <LL_ADC_SetCommonPathInternalCh>
 8002250:	e008      	b.n	8002264 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	f043 0220 	orr.w	r2, r3, #32
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800226c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002270:	4618      	mov	r0, r3
 8002272:	37d8      	adds	r7, #216	; 0xd8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	80080000 	.word	0x80080000
 800227c:	50000300 	.word	0x50000300
 8002280:	c3210000 	.word	0xc3210000
 8002284:	90c00010 	.word	0x90c00010
 8002288:	20000000 	.word	0x20000000
 800228c:	053e2d63 	.word	0x053e2d63
 8002290:	c7520000 	.word	0xc7520000
 8002294:	50000100 	.word	0x50000100
 8002298:	cb840000 	.word	0xcb840000

0800229c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f96b 	bl	8001588 <LL_ADC_IsEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d169      	bne.n	800238c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <ADC_Enable+0xfc>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e055      	b.n	800238e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff f93a 	bl	8001560 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022ec:	482b      	ldr	r0, [pc, #172]	; (800239c <ADC_Enable+0x100>)
 80022ee:	f7fe ffa1 	bl	8001234 <LL_ADC_GetCommonPathInternalCh>
 80022f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80022f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <ADC_Enable+0x104>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <ADC_Enable+0x108>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002316:	e002      	b.n	800231e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	3b01      	subs	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f9      	bne.n	8002318 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002324:	f7fe ff54 	bl	80011d0 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800232a:	e028      	b.n	800237e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff f929 	bl	8001588 <LL_ADC_IsEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f90d 	bl	8001560 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002346:	f7fe ff43 	bl	80011d0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d914      	bls.n	800237e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d00d      	beq.n	800237e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	f043 0210 	orr.w	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e007      	b.n	800238e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d1cf      	bne.n	800232c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	8000003f 	.word	0x8000003f
 800239c:	50000300 	.word	0x50000300
 80023a0:	20000000 	.word	0x20000000
 80023a4:	053e2d63 	.word	0x053e2d63

080023a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d14b      	bne.n	800245a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d021      	beq.n	8002420 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe ffd3 	bl	800138c <LL_ADC_REG_IsTriggerSourceSWStart>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d032      	beq.n	8002452 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d12b      	bne.n	8002452 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11f      	bne.n	8002452 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	65da      	str	r2, [r3, #92]	; 0x5c
 800241e:	e018      	b.n	8002452 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d111      	bne.n	8002452 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7fd ffc8 	bl	80003e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002458:	e00e      	b.n	8002478 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fb1e 	bl	8001aa8 <HAL_ADC_ErrorCallback>
}
 800246c:	e004      	b.n	8002478 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff fb00 	bl	8001a94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ba:	f043 0204 	orr.w	r2, r3, #4
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7ff faf0 	bl	8001aa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <LL_ADC_IsEnabled>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <LL_ADC_IsEnabled+0x18>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <LL_ADC_IsEnabled+0x1a>
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b04      	cmp	r3, #4
 8002508:	d101      	bne.n	800250e <LL_ADC_REG_IsConversionOngoing+0x18>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b0a1      	sub	sp, #132	; 0x84
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002536:	2302      	movs	r3, #2
 8002538:	e08b      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002542:	2300      	movs	r3, #0
 8002544:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002546:	2300      	movs	r3, #0
 8002548:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002552:	d102      	bne.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002554:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	e001      	b.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e06a      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ffb9 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 8002584:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ffb3 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d14c      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002598:	2b00      	cmp	r3, #0
 800259a:	d149      	bne.n	8002630 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800259c:	4b30      	ldr	r3, [pc, #192]	; (8002660 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800259e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d028      	beq.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ba:	035b      	lsls	r3, r3, #13
 80025bc:	430b      	orrs	r3, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025c8:	f7ff ff82 	bl	80024d0 <LL_ADC_IsEnabled>
 80025cc:	4604      	mov	r4, r0
 80025ce:	4823      	ldr	r0, [pc, #140]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025d0:	f7ff ff7e 	bl	80024d0 <LL_ADC_IsEnabled>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4323      	orrs	r3, r4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d133      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025e4:	f023 030f 	bic.w	r3, r3, #15
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	6811      	ldr	r1, [r2, #0]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	6892      	ldr	r2, [r2, #8]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	431a      	orrs	r2, r3
 80025f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025f8:	e024      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002604:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002606:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800260a:	f7ff ff61 	bl	80024d0 <LL_ADC_IsEnabled>
 800260e:	4604      	mov	r4, r0
 8002610:	4812      	ldr	r0, [pc, #72]	; (800265c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002612:	f7ff ff5d 	bl	80024d0 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	4323      	orrs	r3, r4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002626:	f023 030f 	bic.w	r3, r3, #15
 800262a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800262c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800262e:	e009      	b.n	8002644 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	f043 0220 	orr.w	r2, r3, #32
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002642:	e000      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002644:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800264e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002652:	4618      	mov	r0, r3
 8002654:	3784      	adds	r7, #132	; 0x84
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	bf00      	nop
 800265c:	50000100 	.word	0x50000100
 8002660:	50000300 	.word	0x50000300

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff40 	bl	80026ac <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff90 	bl	8002758 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5f 	bl	8002704 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff33 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa4 	bl	80027c0 <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e08d      	b.n	80029b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_DMA_Init+0x138>)
 800289e:	429a      	cmp	r2, r3
 80028a0:	d80f      	bhi.n	80028c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b45      	ldr	r3, [pc, #276]	; (80029c0 <HAL_DMA_Init+0x13c>)
 80028aa:	4413      	add	r3, r2
 80028ac:	4a45      	ldr	r2, [pc, #276]	; (80029c4 <HAL_DMA_Init+0x140>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a42      	ldr	r2, [pc, #264]	; (80029c8 <HAL_DMA_Init+0x144>)
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
 80028c0:	e00e      	b.n	80028e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_DMA_Init+0x148>)
 80028ca:	4413      	add	r3, r2
 80028cc:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <HAL_DMA_Init+0x140>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	009a      	lsls	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <HAL_DMA_Init+0x14c>)
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f9b6 	bl	8002ca4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002940:	d102      	bne.n	8002948 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800295c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_DMA_Init+0x104>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d80c      	bhi.n	8002988 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f9d6 	bl	8002d20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	e008      	b.n	800299a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40020407 	.word	0x40020407
 80029c0:	bffdfff8 	.word	0xbffdfff8
 80029c4:	cccccccd 	.word	0xcccccccd
 80029c8:	40020000 	.word	0x40020000
 80029cc:	bffdfbf8 	.word	0xbffdfbf8
 80029d0:	40020400 	.word	0x40020400

080029d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Start_IT+0x20>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e066      	b.n	8002ac2 <HAL_DMA_Start_IT+0xee>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d155      	bne.n	8002ab4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f8fb 	bl	8002c28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 020e 	orr.w	r2, r2, #14
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e00f      	b.n	8002a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 020a 	orr.w	r2, r2, #10
 8002a6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e005      	b.n	8002ac0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2204      	movs	r2, #4
 8002aec:	409a      	lsls	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d026      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x7a>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d021      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0204 	bic.w	r2, r2, #4
 8002b1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f003 021f 	and.w	r2, r3, #31
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d071      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b42:	e06c      	b.n	8002c1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02e      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d029      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 020a 	bic.w	r2, r2, #10
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	f003 021f 	and.w	r2, r3, #31
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2102      	movs	r1, #2
 8002b96:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d038      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002bb4:	e033      	b.n	8002c1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02a      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d025      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020e 	bic.w	r2, r2, #14
 8002be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d004      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
}
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f003 021f 	and.w	r2, r3, #31
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f202 	lsl.w	r2, r1, r2
 8002c64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d108      	bne.n	8002c88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c86:	e007      	b.n	8002c98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	60da      	str	r2, [r3, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d802      	bhi.n	8002cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e001      	b.n	8002cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002cc0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3b08      	subs	r3, #8
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	009a      	lsls	r2, r3, #2
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002cee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40020407 	.word	0x40020407
 8002d10:	40020800 	.word	0x40020800
 8002d14:	40020820 	.word	0x40020820
 8002d18:	cccccccd 	.word	0xcccccccd
 8002d1c:	40020880 	.word	0x40020880

08002d20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	1000823f 	.word	0x1000823f
 8002d64:	40020940 	.word	0x40020940

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d76:	e15a      	b.n	800302e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 814c 	beq.w	8003028 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d005      	beq.n	8002da8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d130      	bne.n	8002e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dde:	2201      	movs	r2, #1
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f003 0201 	and.w	r2, r3, #1
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d017      	beq.n	8002e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d123      	bne.n	8002e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	220f      	movs	r2, #15
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	08da      	lsrs	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3208      	adds	r2, #8
 8002e94:	6939      	ldr	r1, [r7, #16]
 8002e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0203 	and.w	r2, r3, #3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80a6 	beq.w	8003028 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002edc:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_GPIO_Init+0x2e4>)
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	4a5a      	ldr	r2, [pc, #360]	; (800304c <HAL_GPIO_Init+0x2e4>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee8:	4b58      	ldr	r3, [pc, #352]	; (800304c <HAL_GPIO_Init+0x2e4>)
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef4:	4a56      	ldr	r2, [pc, #344]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	3302      	adds	r3, #2
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	220f      	movs	r2, #15
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f1e:	d01f      	beq.n	8002f60 <HAL_GPIO_Init+0x1f8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <HAL_GPIO_Init+0x2ec>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d019      	beq.n	8002f5c <HAL_GPIO_Init+0x1f4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a4b      	ldr	r2, [pc, #300]	; (8003058 <HAL_GPIO_Init+0x2f0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <HAL_GPIO_Init+0x1f0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a4a      	ldr	r2, [pc, #296]	; (800305c <HAL_GPIO_Init+0x2f4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00d      	beq.n	8002f54 <HAL_GPIO_Init+0x1ec>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a49      	ldr	r2, [pc, #292]	; (8003060 <HAL_GPIO_Init+0x2f8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d007      	beq.n	8002f50 <HAL_GPIO_Init+0x1e8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a48      	ldr	r2, [pc, #288]	; (8003064 <HAL_GPIO_Init+0x2fc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d101      	bne.n	8002f4c <HAL_GPIO_Init+0x1e4>
 8002f48:	2305      	movs	r3, #5
 8002f4a:	e00a      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f4c:	2306      	movs	r3, #6
 8002f4e:	e008      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e006      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f54:	2303      	movs	r3, #3
 8002f56:	e004      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e002      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f60:	2300      	movs	r3, #0
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	f002 0203 	and.w	r2, r2, #3
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	4093      	lsls	r3, r2
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f72:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_GPIO_Init+0x2e8>)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f80:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fa4:	4a30      	ldr	r2, [pc, #192]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002faa:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fce:	4a26      	ldr	r2, [pc, #152]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_GPIO_Init+0x300>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_GPIO_Init+0x300>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003022:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_GPIO_Init+0x300>)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f ae9d 	bne.w	8002d78 <HAL_GPIO_Init+0x10>
  }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000
 8003054:	48000400 	.word	0x48000400
 8003058:	48000800 	.word	0x48000800
 800305c:	48000c00 	.word	0x48000c00
 8003060:	48001000 	.word	0x48001000
 8003064:	48001400 	.word	0x48001400
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003088:	e002      	b.n	8003090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0c0      	b.n	8003230 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f007 ffb2 	bl	800b02c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 f838 	bl	800714a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e03e      	b.n	800315e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3311      	adds	r3, #17
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	3310      	adds	r3, #16
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	3313      	adds	r3, #19
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	3320      	adds	r3, #32
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	440b      	add	r3, r1
 800313e:	3324      	adds	r3, #36	; 0x24
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	3301      	adds	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	791b      	ldrb	r3, [r3, #4]
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3bb      	bcc.n	80030e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e044      	b.n	80031f8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	3301      	adds	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	791b      	ldrb	r3, [r3, #4]
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d3b5      	bcc.n	800316e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800320e:	f003 ffb7 	bl	8007180 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7a9b      	ldrb	r3, [r3, #10]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d102      	bne.n	800322e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f001 fc29 	bl	8004a80 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_PCD_Start+0x16>
 800324a:	2302      	movs	r3, #2
 800324c:	e012      	b.n	8003274 <HAL_PCD_Start+0x3c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f003 ff5e 	bl	800711c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f006 fa1e 	bl	80096a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f006 fa23 	bl	80096d4 <USB_ReadInterrupts>
 800328e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 faec 	bl	8003878 <PCD_EP_ISR_Handler>

    return;
 80032a0:	e110      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032be:	b292      	uxth	r2, r2
 80032c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f007 ff42 	bl	800b14e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80032ca:	2100      	movs	r1, #0
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8fc 	bl	80034ca <HAL_PCD_SetAddress>

    return;
 80032d2:	e0f7      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00c      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032f0:	b292      	uxth	r2, r2
 80032f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80032f6:	e0e5      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003314:	b292      	uxth	r2, r2
 8003316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800331a:	e0d3      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d034      	beq.n	8003390 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0204 	bic.w	r2, r2, #4
 8003338:	b292      	uxth	r2, r2
 800333a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0208 	bic.w	r2, r2, #8
 8003350:	b292      	uxth	r2, r2
 8003352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800335c:	2b01      	cmp	r3, #1
 800335e:	d107      	bne.n	8003370 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003368:	2100      	movs	r1, #0
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f008 f8be 	bl	800b4ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f007 ff25 	bl	800b1c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003388:	b292      	uxth	r2, r2
 800338a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800338e:	e099      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003396:	2b00      	cmp	r3, #0
 8003398:	d027      	beq.n	80033ea <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0208 	orr.w	r2, r2, #8
 80033ac:	b292      	uxth	r2, r2
 80033ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c4:	b292      	uxth	r2, r2
 80033c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0204 	orr.w	r2, r2, #4
 80033dc:	b292      	uxth	r2, r2
 80033de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f007 fed2 	bl	800b18c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033e8:	e06c      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d040      	beq.n	8003476 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003406:	b292      	uxth	r2, r2
 8003408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d12b      	bne.n	800346e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0204 	orr.w	r2, r2, #4
 8003428:	b292      	uxth	r2, r2
 800342a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003436:	b29a      	uxth	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0208 	orr.w	r2, r2, #8
 8003440:	b292      	uxth	r2, r2
 8003442:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003456:	b29b      	uxth	r3, r3
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003464:	2101      	movs	r1, #1
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f008 f840 	bl	800b4ec <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800346c:	e02a      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f007 fe8c 	bl	800b18c <HAL_PCD_SuspendCallback>
    return;
 8003474:	e026      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00f      	beq.n	80034a0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003488:	b29a      	uxth	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003492:	b292      	uxth	r2, r2
 8003494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f007 fe4a 	bl	800b132 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800349e:	e011      	b.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034bc:	b292      	uxth	r2, r2
 80034be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80034c2:	bf00      	nop
  }
}
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_PCD_SetAddress+0x1a>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e012      	b.n	800350a <HAL_PCD_SetAddress+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f006 f8bf 	bl	800967e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	4608      	mov	r0, r1
 800351c:	4611      	mov	r1, r2
 800351e:	461a      	mov	r2, r3
 8003520:	4603      	mov	r3, r0
 8003522:	70fb      	strb	r3, [r7, #3]
 8003524:	460b      	mov	r3, r1
 8003526:	803b      	strh	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003534:	2b00      	cmp	r3, #0
 8003536:	da0e      	bge.n	8003556 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 0207 	and.w	r2, r3, #7
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	3310      	adds	r3, #16
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	705a      	strb	r2, [r3, #1]
 8003554:	e00e      	b.n	8003574 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 0207 	and.w	r2, r3, #7
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003580:	883a      	ldrh	r2, [r7, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	78ba      	ldrb	r2, [r7, #2]
 800358a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800358c:	78bb      	ldrb	r3, [r7, #2]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d102      	bne.n	8003598 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_PCD_EP_Open+0x94>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e00e      	b.n	80035c4 <HAL_PCD_EP_Open+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 fe01 	bl	80071bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80035c2:	7afb      	ldrb	r3, [r7, #11]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	da0e      	bge.n	80035fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	f003 0207 	and.w	r2, r3, #7
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3310      	adds	r3, #16
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	4413      	add	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	705a      	strb	r2, [r3, #1]
 80035fc:	e00e      	b.n	800361c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	f003 0207 	and.w	r2, r3, #7
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	b2da      	uxtb	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_PCD_EP_Close+0x6a>
 8003632:	2302      	movs	r3, #2
 8003634:	e00e      	b.n	8003654 <HAL_PCD_EP_Close+0x88>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	4618      	mov	r0, r3
 8003646:	f004 f97d 	bl	8007944 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	460b      	mov	r3, r1
 800366a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366c:	7afb      	ldrb	r3, [r7, #11]
 800366e:	f003 0207 	and.w	r2, r3, #7
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369c:	7afb      	ldrb	r3, [r7, #11]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 fb35 	bl	8007d1e <USB_EPStartXfer>

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	460b      	mov	r3, r1
 80036cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ce:	7afb      	ldrb	r3, [r7, #11]
 80036d0:	f003 0207 	and.w	r2, r3, #7
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	3310      	adds	r3, #16
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2201      	movs	r2, #1
 8003708:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	b2da      	uxtb	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6979      	ldr	r1, [r7, #20]
 800371c:	4618      	mov	r0, r3
 800371e:	f004 fafe 	bl	8007d1e <USB_EPStartXfer>

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	7912      	ldrb	r2, [r2, #4]
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e03e      	b.n	80037c8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800374a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800374e:	2b00      	cmp	r3, #0
 8003750:	da0e      	bge.n	8003770 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	f003 0207 	and.w	r2, r3, #7
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	3310      	adds	r3, #16
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	705a      	strb	r2, [r3, #1]
 800376e:	e00c      	b.n	800378a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_PCD_EP_SetStall+0x7e>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e00e      	b.n	80037c8 <HAL_PCD_EP_SetStall+0x9c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f005 fe61 	bl	8009480 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	7912      	ldrb	r2, [r2, #4]
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e040      	b.n	8003870 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	da0e      	bge.n	8003814 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 0207 	and.w	r2, r3, #7
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	3310      	adds	r3, #16
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	705a      	strb	r2, [r3, #1]
 8003812:	e00e      	b.n	8003832 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 0207 	and.w	r2, r3, #7
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_PCD_EP_ClrStall+0x82>
 800384e:	2302      	movs	r3, #2
 8003850:	e00e      	b.n	8003870 <HAL_PCD_EP_ClrStall+0xa0>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f005 fe5e 	bl	8009522 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b096      	sub	sp, #88	; 0x58
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003880:	e3ae      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800388a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800388e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800389c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 8170 	bne.w	8003b86 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80038a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d14d      	bne.n	800394e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	81fb      	strh	r3, [r7, #14]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	89fb      	ldrh	r3, [r7, #14]
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3310      	adds	r3, #16
 80038da:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	4413      	add	r3, r2
 80038f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003902:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	441a      	add	r2, r3
 800390e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003910:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003912:	2100      	movs	r1, #0
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f007 fbf2 	bl	800b0fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7b1b      	ldrb	r3, [r3, #12]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 835d 	beq.w	8003fe0 <PCD_EP_ISR_Handler+0x768>
 8003926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 8358 	bne.w	8003fe0 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7b1b      	ldrb	r3, [r3, #12]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800393a:	b2da      	uxtb	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b292      	uxth	r2, r2
 8003942:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	731a      	strb	r2, [r3, #12]
 800394c:	e348      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003954:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003960:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003968:	2b00      	cmp	r3, #0
 800396a:	d032      	beq.n	80039d2 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003974:	b29b      	uxth	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4413      	add	r3, r2
 8003986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003992:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800399e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80039a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f005 fee6 	bl	8009778 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039b8:	4013      	ands	r3, r2
 80039ba:	823b      	strh	r3, [r7, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	8a3a      	ldrh	r2, [r7, #16]
 80039c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039c6:	b292      	uxth	r2, r2
 80039c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f007 fb6a 	bl	800b0a4 <HAL_PCD_SetupStageCallback>
 80039d0:	e306      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039d2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f280 8302 	bge.w	8003fe0 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039e8:	4013      	ands	r3, r2
 80039ea:	83fb      	strh	r3, [r7, #30]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	8bfa      	ldrh	r2, [r7, #30]
 80039f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039f6:	b292      	uxth	r2, r2
 80039f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	4413      	add	r3, r2
 8003a14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a20:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <PCD_EP_ISR_Handler+0x1e6>
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d015      	beq.n	8003a5e <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a38:	6959      	ldr	r1, [r3, #20]
 8003a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a40:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f005 fe98 	bl	8009778 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	441a      	add	r2, r3
 8003a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a54:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a56:	2100      	movs	r1, #0
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f007 fb35 	bl	800b0c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003a68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 82b5 	bne.w	8003fe0 <PCD_EP_ISR_Handler+0x768>
 8003a76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a82:	f000 82ad 	beq.w	8003fe0 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	801a      	strh	r2, [r3, #0]
 8003ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b3e      	cmp	r3, #62	; 0x3e
 8003abc:	d91d      	bls.n	8003afa <PCD_EP_ISR_Handler+0x282>
 8003abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d102      	bne.n	8003ad8 <PCD_EP_ISR_Handler+0x260>
 8003ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	029b      	lsls	r3, r3, #10
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	801a      	strh	r2, [r3, #0]
 8003af8:	e026      	b.n	8003b48 <PCD_EP_ISR_Handler+0x2d0>
 8003afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <PCD_EP_ISR_Handler+0x2a0>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e017      	b.n	8003b48 <PCD_EP_ISR_Handler+0x2d0>
 8003b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <PCD_EP_ISR_Handler+0x2ba>
 8003b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2e:	3301      	adds	r3, #1
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b58:	827b      	strh	r3, [r7, #18]
 8003b5a:	8a7b      	ldrh	r3, [r7, #18]
 8003b5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b60:	827b      	strh	r3, [r7, #18]
 8003b62:	8a7b      	ldrh	r3, [r7, #18]
 8003b64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b68:	827b      	strh	r3, [r7, #18]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	8a7b      	ldrh	r3, [r7, #18]
 8003b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	8013      	strh	r3, [r2, #0]
 8003b84:	e22c      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b9a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f280 80f6 	bge.w	8003d90 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bba:	4013      	ands	r3, r2
 8003bbc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003bda:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf2:	7b1b      	ldrb	r3, [r3, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d123      	bne.n	8003c40 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c1c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003c20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 808e 	beq.w	8003d46 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c30:	6959      	ldr	r1, [r3, #20]
 8003c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c34:	88da      	ldrh	r2, [r3, #6]
 8003c36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c3a:	f005 fd9d 	bl	8009778 <USB_ReadPMA>
 8003c3e:	e082      	b.n	8003d46 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c42:	78db      	ldrb	r3, [r3, #3]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d10a      	bne.n	8003c5e <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f9d3 	bl	8003ffc <HAL_PCD_EP_DB_Receive>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003c5c:	e073      	b.n	8003d46 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c78:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d022      	beq.n	8003d02 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003ce4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d02c      	beq.n	8003d46 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf2:	6959      	ldr	r1, [r3, #20]
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf6:	891a      	ldrh	r2, [r3, #8]
 8003cf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003cfc:	f005 fd3c 	bl	8009778 <USB_ReadPMA>
 8003d00:	e021      	b.n	8003d46 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d26:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003d2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d38:	6959      	ldr	r1, [r3, #20]
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3c:	895a      	ldrh	r2, [r3, #10]
 8003d3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d42:	f005 fd19 	bl	8009778 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d4e:	441a      	add	r2, r3
 8003d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d52:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003d5c:	441a      	add	r2, r3
 8003d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d60:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <PCD_EP_ISR_Handler+0x4fe>
 8003d6a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d206      	bcs.n	8003d84 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f007 f9a3 	bl	800b0c8 <HAL_PCD_DataOutStageCallback>
 8003d82:	e005      	b.n	8003d90 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 ffc7 	bl	8007d1e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8121 	beq.w	8003fe0 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d9e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	3310      	adds	r3, #16
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df0:	78db      	ldrb	r3, [r3, #3]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f040 80a2 	bne.w	8003f3c <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8003df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e00:	7b1b      	ldrb	r3, [r3, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8093 	beq.w	8003f2e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d046      	beq.n	8003ea2 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d126      	bne.n	8003e6a <PCD_EP_ISR_Handler+0x5f2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	4413      	add	r3, r2
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	00da      	lsls	r2, r3, #3
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e42:	623b      	str	r3, [r7, #32]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	801a      	strh	r2, [r3, #0]
 8003e68:	e061      	b.n	8003f2e <PCD_EP_ISR_Handler+0x6b6>
 8003e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6c:	785b      	ldrb	r3, [r3, #1]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d15d      	bne.n	8003f2e <PCD_EP_ISR_Handler+0x6b6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	4413      	add	r3, r2
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	00da      	lsls	r2, r3, #3
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	4413      	add	r3, r2
 8003e94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	801a      	strh	r2, [r3, #0]
 8003ea0:	e045      	b.n	8003f2e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d126      	bne.n	8003efe <PCD_EP_ISR_Handler+0x686>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	4413      	add	r3, r2
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	00da      	lsls	r2, r3, #3
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	801a      	strh	r2, [r3, #0]
 8003efc:	e017      	b.n	8003f2e <PCD_EP_ISR_Handler+0x6b6>
 8003efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d113      	bne.n	8003f2e <PCD_EP_ISR_Handler+0x6b6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f14:	4413      	add	r3, r2
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	00da      	lsls	r2, r3, #3
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f20:	4413      	add	r3, r2
 8003f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f007 f8e2 	bl	800b0fe <HAL_PCD_DataInStageCallback>
 8003f3a:	e051      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003f3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d144      	bne.n	8003fd2 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d907      	bls.n	8003f8c <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f84:	1ad2      	subs	r2, r2, r3
 8003f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f88:	619a      	str	r2, [r3, #24]
 8003f8a:	e002      	b.n	8003f92 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f007 f8ac 	bl	800b0fe <HAL_PCD_DataInStageCallback>
 8003fa6:	e01b      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003fb0:	441a      	add	r2, r3
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003fbe:	441a      	add	r2, r3
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f003 fea7 	bl	8007d1e <USB_EPStartXfer>
 8003fd0:	e006      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003fd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f917 	bl	800420e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f6ff ac48 	blt.w	8003882 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3758      	adds	r7, #88	; 0x58
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d07c      	beq.n	800410e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	4413      	add	r3, r2
 800402e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004038:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	8b7b      	ldrh	r3, [r7, #26]
 8004040:	429a      	cmp	r2, r3
 8004042:	d306      	bcc.n	8004052 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	8b7b      	ldrh	r3, [r7, #26]
 800404a:	1ad2      	subs	r2, r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	619a      	str	r2, [r3, #24]
 8004050:	e002      	b.n	8004058 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d123      	bne.n	80040a8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	833b      	strh	r3, [r7, #24]
 800407c:	8b3b      	ldrh	r3, [r7, #24]
 800407e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004082:	833b      	strh	r3, [r7, #24]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	8b3b      	ldrh	r3, [r7, #24]
 8004094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01f      	beq.n	80040f2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040cc:	82fb      	strh	r3, [r7, #22]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	8afb      	ldrh	r3, [r7, #22]
 80040de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80040f2:	8b7b      	ldrh	r3, [r7, #26]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8085 	beq.w	8004204 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6959      	ldr	r1, [r3, #20]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	891a      	ldrh	r2, [r3, #8]
 8004106:	8b7b      	ldrh	r3, [r7, #26]
 8004108:	f005 fb36 	bl	8009778 <USB_ReadPMA>
 800410c:	e07a      	b.n	8004204 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	4413      	add	r3, r2
 8004128:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004132:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	8b7b      	ldrh	r3, [r7, #26]
 800413a:	429a      	cmp	r2, r3
 800413c:	d306      	bcc.n	800414c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	8b7b      	ldrh	r3, [r7, #26]
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	619a      	str	r2, [r3, #24]
 800414a:	e002      	b.n	8004152 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2200      	movs	r2, #0
 8004150:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d123      	bne.n	80041a2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	83fb      	strh	r3, [r7, #30]
 8004176:	8bfb      	ldrh	r3, [r7, #30]
 8004178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800417c:	83fb      	strh	r3, [r7, #30]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	8bfb      	ldrh	r3, [r7, #30]
 800418e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419e:	b29b      	uxth	r3, r3
 80041a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d11f      	bne.n	80041ec <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	83bb      	strh	r3, [r7, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	441a      	add	r2, r3
 80041d6:	8bbb      	ldrh	r3, [r7, #28]
 80041d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041ec:	8b7b      	ldrh	r3, [r7, #26]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6959      	ldr	r1, [r3, #20]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	895a      	ldrh	r2, [r3, #10]
 80041fe:	8b7b      	ldrh	r3, [r7, #26]
 8004200:	f005 faba 	bl	8009778 <USB_ReadPMA>
    }
  }

  return count;
 8004204:	8b7b      	ldrh	r3, [r7, #26]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b0a4      	sub	sp, #144	; 0x90
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	4613      	mov	r3, r2
 800421a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 81db 	beq.w	80045de <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004230:	b29b      	uxth	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	4413      	add	r3, r2
 8004242:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800424c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004258:	429a      	cmp	r2, r3
 800425a:	d907      	bls.n	800426c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	699a      	ldr	r2, [r3, #24]
 8004260:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004264:	1ad2      	subs	r2, r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	619a      	str	r2, [r3, #24]
 800426a:	e002      	b.n	8004272 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2200      	movs	r2, #0
 8004270:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 80b9 	bne.w	80043ee <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d126      	bne.n	80042d2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004292:	b29b      	uxth	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	4413      	add	r3, r2
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	00da      	lsls	r2, r3, #3
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	4413      	add	r3, r2
 80042a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	801a      	strh	r2, [r3, #0]
 80042d0:	e01a      	b.n	8004308 <HAL_PCD_EP_DB_Transmit+0xfa>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d116      	bne.n	8004308 <HAL_PCD_EP_DB_Transmit+0xfa>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ee:	4413      	add	r3, r2
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	00da      	lsls	r2, r3, #3
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	4413      	add	r3, r2
 80042fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004300:	633b      	str	r3, [r7, #48]	; 0x30
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	2200      	movs	r2, #0
 8004306:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d126      	bne.n	8004364 <HAL_PCD_EP_DB_Transmit+0x156>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004324:	b29b      	uxth	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	00da      	lsls	r2, r3, #3
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004348:	b29a      	uxth	r2, r3
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800435c:	b29a      	uxth	r2, r3
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	801a      	strh	r2, [r3, #0]
 8004362:	e017      	b.n	8004394 <HAL_PCD_EP_DB_Transmit+0x186>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d113      	bne.n	8004394 <HAL_PCD_EP_DB_Transmit+0x186>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	4413      	add	r3, r2
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	00da      	lsls	r2, r3, #3
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	4413      	add	r3, r2
 8004388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	2200      	movs	r2, #0
 8004392:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	4619      	mov	r1, r3
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f006 feaf 	bl	800b0fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 82fa 	beq.w	80049a0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	82fb      	strh	r3, [r7, #22]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	8afb      	ldrh	r3, [r7, #22]
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]
 80043ec:	e2d8      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d021      	beq.n	800443c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004442:	2b01      	cmp	r3, #1
 8004444:	f040 82ac 	bne.w	80049a0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004450:	441a      	add	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	69da      	ldr	r2, [r3, #28]
 800445a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800445e:	441a      	add	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	429a      	cmp	r2, r3
 800446e:	d30b      	bcc.n	8004488 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004480:	1ad2      	subs	r2, r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	621a      	str	r2, [r3, #32]
 8004486:	e017      	b.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d108      	bne.n	80044a2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004490:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044a0:	e00a      	b.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2200      	movs	r2, #0
 80044b6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d165      	bne.n	800458c <HAL_PCD_EP_DB_Transmit+0x37e>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d4:	4413      	add	r3, r2
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	00da      	lsls	r2, r3, #3
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	4413      	add	r3, r2
 80044e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044fc:	2b3e      	cmp	r3, #62	; 0x3e
 80044fe:	d91d      	bls.n	800453c <HAL_PCD_EP_DB_Transmit+0x32e>
 8004500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	64bb      	str	r3, [r7, #72]	; 0x48
 8004508:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2b00      	cmp	r3, #0
 8004512:	d102      	bne.n	800451a <HAL_PCD_EP_DB_Transmit+0x30c>
 8004514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004516:	3b01      	subs	r3, #1
 8004518:	64bb      	str	r3, [r7, #72]	; 0x48
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29a      	uxth	r2, r3
 8004520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004522:	b29b      	uxth	r3, r3
 8004524:	029b      	lsls	r3, r3, #10
 8004526:	b29b      	uxth	r3, r3
 8004528:	4313      	orrs	r3, r2
 800452a:	b29b      	uxth	r3, r3
 800452c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004534:	b29a      	uxth	r2, r3
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e044      	b.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800453c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <HAL_PCD_EP_DB_Transmit+0x34c>
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004552:	b29a      	uxth	r2, r3
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	e035      	b.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800455a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	64bb      	str	r3, [r7, #72]	; 0x48
 8004562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_PCD_EP_DB_Transmit+0x366>
 800456e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004570:	3301      	adds	r3, #1
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29a      	uxth	r2, r3
 800457a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457c:	b29b      	uxth	r3, r3
 800457e:	029b      	lsls	r3, r3, #10
 8004580:	b29b      	uxth	r3, r3
 8004582:	4313      	orrs	r3, r2
 8004584:	b29a      	uxth	r2, r3
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e01c      	b.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d118      	bne.n	80045c6 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	647b      	str	r3, [r7, #68]	; 0x44
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a8:	4413      	add	r3, r2
 80045aa:	647b      	str	r3, [r7, #68]	; 0x44
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	00da      	lsls	r2, r3, #3
 80045b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b4:	4413      	add	r3, r2
 80045b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045ba:	643b      	str	r3, [r7, #64]	; 0x40
 80045bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6959      	ldr	r1, [r3, #20]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	891a      	ldrh	r2, [r3, #8]
 80045d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f005 f88c 	bl	80096f4 <USB_WritePMA>
 80045dc:	e1e0      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004602:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800460e:	429a      	cmp	r2, r3
 8004610:	d307      	bcc.n	8004622 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	619a      	str	r2, [r3, #24]
 8004620:	e002      	b.n	8004628 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 80c0 	bne.w	80047b2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d126      	bne.n	8004688 <HAL_PCD_EP_DB_Transmit+0x47a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004648:	b29b      	uxth	r3, r3
 800464a:	461a      	mov	r2, r3
 800464c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800464e:	4413      	add	r3, r2
 8004650:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	00da      	lsls	r2, r3, #3
 8004658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800465a:	4413      	add	r3, r2
 800465c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004660:	67bb      	str	r3, [r7, #120]	; 0x78
 8004662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466c:	b29a      	uxth	r2, r3
 800466e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004670:	801a      	strh	r2, [r3, #0]
 8004672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004680:	b29a      	uxth	r2, r3
 8004682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e01a      	b.n	80046be <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d116      	bne.n	80046be <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	667b      	str	r3, [r7, #100]	; 0x64
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046a4:	4413      	add	r3, r2
 80046a6:	667b      	str	r3, [r7, #100]	; 0x64
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	00da      	lsls	r2, r3, #3
 80046ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046b0:	4413      	add	r3, r2
 80046b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046b6:	663b      	str	r3, [r7, #96]	; 0x60
 80046b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ba:	2200      	movs	r2, #0
 80046bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	677b      	str	r3, [r7, #116]	; 0x74
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d12b      	bne.n	8004724 <HAL_PCD_EP_DB_Transmit+0x516>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046da:	b29b      	uxth	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	4413      	add	r3, r2
 80046e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	00da      	lsls	r2, r3, #3
 80046ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ec:	4413      	add	r3, r2
 80046ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004702:	b29a      	uxth	r2, r3
 8004704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004708:	801a      	strh	r2, [r3, #0]
 800470a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471a:	b29a      	uxth	r2, r3
 800471c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e017      	b.n	8004754 <HAL_PCD_EP_DB_Transmit+0x546>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d113      	bne.n	8004754 <HAL_PCD_EP_DB_Transmit+0x546>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004734:	b29b      	uxth	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473a:	4413      	add	r3, r2
 800473c:	677b      	str	r3, [r7, #116]	; 0x74
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	00da      	lsls	r2, r3, #3
 8004744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004746:	4413      	add	r3, r2
 8004748:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800474c:	673b      	str	r3, [r7, #112]	; 0x70
 800474e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004750:	2200      	movs	r2, #0
 8004752:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	4619      	mov	r1, r3
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f006 fccf 	bl	800b0fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 811a 	bne.w	80049a0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800479c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	8013      	strh	r3, [r2, #0]
 80047b0:	e0f6      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d121      	bne.n	8004800 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004806:	2b01      	cmp	r3, #1
 8004808:	f040 80ca 	bne.w	80049a0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004814:	441a      	add	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004822:	441a      	add	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d30b      	bcc.n	800484c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004844:	1ad2      	subs	r2, r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	621a      	str	r2, [r3, #32]
 800484a:	e017      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d108      	bne.n	8004866 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004854:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004864:	e00a      	b.n	800487c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	657b      	str	r3, [r7, #84]	; 0x54
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d165      	bne.n	8004956 <HAL_PCD_EP_DB_Transmit+0x748>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800489e:	4413      	add	r3, r2
 80048a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	00da      	lsls	r2, r3, #3
 80048a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048aa:	4413      	add	r3, r2
 80048ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80048b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048bc:	b29a      	uxth	r2, r3
 80048be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c6:	2b3e      	cmp	r3, #62	; 0x3e
 80048c8:	d91d      	bls.n	8004906 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80048ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80048de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048e0:	3b01      	subs	r3, #1
 80048e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	029b      	lsls	r3, r3, #10
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048fe:	b29a      	uxth	r2, r3
 8004900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	e041      	b.n	800498a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_PCD_EP_DB_Transmit+0x716>
 800490e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491c:	b29a      	uxth	r2, r3
 800491e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	e032      	b.n	800498a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	66bb      	str	r3, [r7, #104]	; 0x68
 800492c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_PCD_EP_DB_Transmit+0x730>
 8004938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800493a:	3301      	adds	r3, #1
 800493c:	66bb      	str	r3, [r7, #104]	; 0x68
 800493e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29a      	uxth	r2, r3
 8004944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004946:	b29b      	uxth	r3, r3
 8004948:	029b      	lsls	r3, r3, #10
 800494a:	b29b      	uxth	r3, r3
 800494c:	4313      	orrs	r3, r2
 800494e:	b29a      	uxth	r2, r3
 8004950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	e019      	b.n	800498a <HAL_PCD_EP_DB_Transmit+0x77c>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	785b      	ldrb	r3, [r3, #1]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d115      	bne.n	800498a <HAL_PCD_EP_DB_Transmit+0x77c>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800496c:	4413      	add	r3, r2
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	00da      	lsls	r2, r3, #3
 8004976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004978:	4413      	add	r3, r2
 800497a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800497e:	653b      	str	r3, [r7, #80]	; 0x50
 8004980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004984:	b29a      	uxth	r2, r3
 8004986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004988:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6959      	ldr	r1, [r3, #20]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	895a      	ldrh	r2, [r3, #10]
 8004996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800499a:	b29b      	uxth	r3, r3
 800499c:	f004 feaa 	bl	80096f4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ba:	82bb      	strh	r3, [r7, #20]
 80049bc:	8abb      	ldrh	r3, [r7, #20]
 80049be:	f083 0310 	eor.w	r3, r3, #16
 80049c2:	82bb      	strh	r3, [r7, #20]
 80049c4:	8abb      	ldrh	r3, [r7, #20]
 80049c6:	f083 0320 	eor.w	r3, r3, #32
 80049ca:	82bb      	strh	r3, [r7, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	8abb      	ldrh	r3, [r7, #20]
 80049dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3790      	adds	r7, #144	; 0x90
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b087      	sub	sp, #28
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	817b      	strh	r3, [r7, #10]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004a0c:	897b      	ldrh	r3, [r7, #10]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00b      	beq.n	8004a30 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	f003 0207 	and.w	r2, r3, #7
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	3310      	adds	r3, #16
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e009      	b.n	8004a44 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a30:	897a      	ldrh	r2, [r7, #10]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d107      	bne.n	8004a5a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	80da      	strh	r2, [r3, #6]
 8004a58:	e00b      	b.n	8004a72 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f043 0302 	orr.w	r3, r3, #2
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d141      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ae2:	4b4b      	ldr	r3, [pc, #300]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aee:	d131      	bne.n	8004b54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004af0:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af6:	4a46      	ldr	r2, [pc, #280]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b08:	4a41      	ldr	r2, [pc, #260]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b10:	4b40      	ldr	r3, [pc, #256]	; (8004c14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2232      	movs	r2, #50	; 0x32
 8004b16:	fb02 f303 	mul.w	r3, r2, r3
 8004b1a:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	0c9b      	lsrs	r3, r3, #18
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b26:	e002      	b.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b2e:	4b38      	ldr	r3, [pc, #224]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3a:	d102      	bne.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f2      	bne.n	8004b28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b42:	4b33      	ldr	r3, [pc, #204]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4e:	d158      	bne.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e057      	b.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b54:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b64:	e04d      	b.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6c:	d141      	bne.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b6e:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	d131      	bne.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b82:	4a23      	ldr	r2, [pc, #140]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b8c:	4b20      	ldr	r3, [pc, #128]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b94:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2232      	movs	r2, #50	; 0x32
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	0c9b      	lsrs	r3, r3, #18
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bb2:	e002      	b.n	8004bba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d102      	bne.n	8004bce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f2      	bne.n	8004bb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bda:	d112      	bne.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e011      	b.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bf0:	e007      	b.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bfa:	4a05      	ldr	r2, [pc, #20]	; (8004c10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40007000 	.word	0x40007000
 8004c14:	20000000 	.word	0x20000000
 8004c18:	431bde83 	.word	0x431bde83

08004c1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c2a:	6093      	str	r3, [r2, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40007000 	.word	0x40007000

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e2fe      	b.n	800524c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d075      	beq.n	8004d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5a:	4b97      	ldr	r3, [pc, #604]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c64:	4b94      	ldr	r3, [pc, #592]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	d102      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3e>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d002      	beq.n	8004c80 <HAL_RCC_OscConfig+0x44>
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d10b      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	4b8d      	ldr	r3, [pc, #564]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05b      	beq.n	8004d44 <HAL_RCC_OscConfig+0x108>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d157      	bne.n	8004d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e2d9      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x74>
 8004ca2:	4b85      	ldr	r3, [pc, #532]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a84      	ldr	r2, [pc, #528]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x98>
 8004cba:	4b7f      	ldr	r3, [pc, #508]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7e      	ldr	r2, [pc, #504]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b7c      	ldr	r3, [pc, #496]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7b      	ldr	r2, [pc, #492]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cd4:	4b78      	ldr	r3, [pc, #480]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a77      	ldr	r2, [pc, #476]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a74      	ldr	r2, [pc, #464]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fc fa6c 	bl	80011d0 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fc fa68 	bl	80011d0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e29e      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0xc0>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fc fa58 	bl	80011d0 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fc fa54 	bl	80011d0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e28a      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d36:	4b60      	ldr	r3, [pc, #384]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0xe8>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d075      	beq.n	8004e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d52:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d5c:	4b56      	ldr	r3, [pc, #344]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_OscConfig+0x136>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d002      	beq.n	8004d78 <HAL_RCC_OscConfig+0x13c>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d11f      	bne.n	8004db8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d78:	4b4f      	ldr	r3, [pc, #316]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x154>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e25d      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	4b49      	ldr	r3, [pc, #292]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	4946      	ldr	r1, [pc, #280]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004da4:	4b45      	ldr	r3, [pc, #276]	; (8004ebc <HAL_RCC_OscConfig+0x280>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fc f9c5 	bl	8001138 <HAL_InitTick>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d043      	beq.n	8004e3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e249      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d023      	beq.n	8004e08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc0:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fc fa00 	bl	80011d0 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd4:	f7fc f9fc 	bl	80011d0 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e232      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de6:	4b34      	ldr	r3, [pc, #208]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df2:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	061b      	lsls	r3, r3, #24
 8004e00:	492d      	ldr	r1, [pc, #180]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	604b      	str	r3, [r1, #4]
 8004e06:	e01a      	b.n	8004e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e08:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fc f9dc 	bl	80011d0 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1c:	f7fc f9d8 	bl	80011d0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e20e      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x1e0>
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d041      	beq.n	8004ece <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01c      	beq.n	8004e8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e52:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fc f9b5 	bl	80011d0 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fc f9b1 	bl	80011d0 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e1e7      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0ef      	beq.n	8004e6a <HAL_RCC_OscConfig+0x22e>
 8004e8a:	e020      	b.n	8004ece <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e92:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <HAL_RCC_OscConfig+0x27c>)
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9c:	f7fc f998 	bl	80011d0 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea2:	e00d      	b.n	8004ec0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea4:	f7fc f994 	bl	80011d0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d906      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e1ca      	b.n	800524c <HAL_RCC_OscConfig+0x610>
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ec0:	4b8c      	ldr	r3, [pc, #560]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1ea      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 80a6 	beq.w	8005028 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004edc:	2300      	movs	r3, #0
 8004ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ee0:	4b84      	ldr	r3, [pc, #528]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x2b4>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x2b6>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef6:	4b7f      	ldr	r3, [pc, #508]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	4a7e      	ldr	r2, [pc, #504]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6593      	str	r3, [r2, #88]	; 0x58
 8004f02:	4b7c      	ldr	r3, [pc, #496]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f12:	4b79      	ldr	r3, [pc, #484]	; (80050f8 <HAL_RCC_OscConfig+0x4bc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d118      	bne.n	8004f50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f1e:	4b76      	ldr	r3, [pc, #472]	; (80050f8 <HAL_RCC_OscConfig+0x4bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a75      	ldr	r2, [pc, #468]	; (80050f8 <HAL_RCC_OscConfig+0x4bc>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7fc f951 	bl	80011d0 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f32:	f7fc f94d 	bl	80011d0 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e183      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f44:	4b6c      	ldr	r3, [pc, #432]	; (80050f8 <HAL_RCC_OscConfig+0x4bc>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d108      	bne.n	8004f6a <HAL_RCC_OscConfig+0x32e>
 8004f58:	4b66      	ldr	r3, [pc, #408]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	4a65      	ldr	r2, [pc, #404]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f68:	e024      	b.n	8004fb4 <HAL_RCC_OscConfig+0x378>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b05      	cmp	r3, #5
 8004f70:	d110      	bne.n	8004f94 <HAL_RCC_OscConfig+0x358>
 8004f72:	4b60      	ldr	r3, [pc, #384]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	4a5e      	ldr	r2, [pc, #376]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f82:	4b5c      	ldr	r3, [pc, #368]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	4a5a      	ldr	r2, [pc, #360]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f92:	e00f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x378>
 8004f94:	4b57      	ldr	r3, [pc, #348]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	4a56      	ldr	r2, [pc, #344]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa4:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	4a52      	ldr	r2, [pc, #328]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004fac:	f023 0304 	bic.w	r3, r3, #4
 8004fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d016      	beq.n	8004fea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fc f908 	bl	80011d0 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fc f904 	bl	80011d0 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e138      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fda:	4b46      	ldr	r3, [pc, #280]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ed      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x388>
 8004fe8:	e015      	b.n	8005016 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fc f8f1 	bl	80011d0 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff2:	f7fc f8ed 	bl	80011d0 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e121      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005008:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ed      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005016:	7ffb      	ldrb	r3, [r7, #31]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d105      	bne.n	8005028 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	4a34      	ldr	r2, [pc, #208]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8005022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005026:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d03c      	beq.n	80050ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01c      	beq.n	8005076 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800503c:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 800503e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005042:	4a2c      	ldr	r2, [pc, #176]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fc f8c0 	bl	80011d0 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005054:	f7fc f8bc 	bl	80011d0 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e0f2      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005066:	4b23      	ldr	r3, [pc, #140]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8005068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ef      	beq.n	8005054 <HAL_RCC_OscConfig+0x418>
 8005074:	e01b      	b.n	80050ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 8005078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005086:	f7fc f8a3 	bl	80011d0 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800508e:	f7fc f89f 	bl	80011d0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e0d5      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050a0:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 80050a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1ef      	bne.n	800508e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80c9 	beq.w	800524a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050b8:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	f000 8083 	beq.w	80051cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d15e      	bne.n	800518c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ce:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <HAL_RCC_OscConfig+0x4b8>)
 80050d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050da:	f7fc f879 	bl	80011d0 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e0:	e00c      	b.n	80050fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e2:	f7fc f875 	bl	80011d0 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d905      	bls.n	80050fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e0ab      	b.n	800524c <HAL_RCC_OscConfig+0x610>
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050fc:	4b55      	ldr	r3, [pc, #340]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1ec      	bne.n	80050e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005108:	4b52      	ldr	r3, [pc, #328]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	4b52      	ldr	r3, [pc, #328]	; (8005258 <HAL_RCC_OscConfig+0x61c>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6a11      	ldr	r1, [r2, #32]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005118:	3a01      	subs	r2, #1
 800511a:	0112      	lsls	r2, r2, #4
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005122:	0212      	lsls	r2, r2, #8
 8005124:	4311      	orrs	r1, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800512a:	0852      	lsrs	r2, r2, #1
 800512c:	3a01      	subs	r2, #1
 800512e:	0552      	lsls	r2, r2, #21
 8005130:	4311      	orrs	r1, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005136:	0852      	lsrs	r2, r2, #1
 8005138:	3a01      	subs	r2, #1
 800513a:	0652      	lsls	r2, r2, #25
 800513c:	4311      	orrs	r1, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005142:	06d2      	lsls	r2, r2, #27
 8005144:	430a      	orrs	r2, r1
 8005146:	4943      	ldr	r1, [pc, #268]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 8005148:	4313      	orrs	r3, r2
 800514a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800514c:	4b41      	ldr	r3, [pc, #260]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a40      	ldr	r2, [pc, #256]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 8005152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005156:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005158:	4b3e      	ldr	r3, [pc, #248]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a3d      	ldr	r2, [pc, #244]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800515e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005162:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fc f834 	bl	80011d0 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fc f830 	bl	80011d0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e066      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517e:	4b35      	ldr	r3, [pc, #212]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x530>
 800518a:	e05e      	b.n	800524a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518c:	4b31      	ldr	r3, [pc, #196]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a30      	ldr	r2, [pc, #192]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 8005192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fc f81a 	bl	80011d0 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fc f816 	bl	80011d0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e04c      	b.n	800524c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b2:	4b28      	ldr	r3, [pc, #160]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051be:	4b25      	ldr	r3, [pc, #148]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	4924      	ldr	r1, [pc, #144]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80051c4:	4b25      	ldr	r3, [pc, #148]	; (800525c <HAL_RCC_OscConfig+0x620>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
 80051ca:	e03e      	b.n	800524a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e039      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <HAL_RCC_OscConfig+0x618>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f003 0203 	and.w	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d12c      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	3b01      	subs	r3, #1
 80051f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d123      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d11b      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d113      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	3b01      	subs	r3, #1
 800522c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d109      	bne.n	8005246 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	3b01      	subs	r3, #1
 8005240:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d001      	beq.n	800524a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000
 8005258:	019f800c 	.word	0x019f800c
 800525c:	feeefffc 	.word	0xfeeefffc

08005260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e11e      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005278:	4b91      	ldr	r3, [pc, #580]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d910      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005286:	4b8e      	ldr	r3, [pc, #568]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 020f 	bic.w	r2, r3, #15
 800528e:	498c      	ldr	r1, [pc, #560]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005296:	4b8a      	ldr	r3, [pc, #552]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e106      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d073      	beq.n	800539c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d129      	bne.n	8005310 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052bc:	4b81      	ldr	r3, [pc, #516]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0f4      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052cc:	f000 f966 	bl	800559c <RCC_GetSysClockFreqFromPLLSource>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4a7c      	ldr	r2, [pc, #496]	; (80054c8 <HAL_RCC_ClockConfig+0x268>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d93f      	bls.n	800535a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052da:	4b7a      	ldr	r3, [pc, #488]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d033      	beq.n	800535a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d12f      	bne.n	800535a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052fa:	4b72      	ldr	r3, [pc, #456]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005302:	4a70      	ldr	r2, [pc, #448]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e024      	b.n	800535a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d107      	bne.n	8005328 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005318:	4b6a      	ldr	r3, [pc, #424]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d109      	bne.n	8005338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0c6      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005328:	4b66      	ldr	r3, [pc, #408]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0be      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005338:	f000 f8ce 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 800533c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4a61      	ldr	r2, [pc, #388]	; (80054c8 <HAL_RCC_ClockConfig+0x268>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d909      	bls.n	800535a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005346:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534e:	4a5d      	ldr	r2, [pc, #372]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800535a:	4b5a      	ldr	r3, [pc, #360]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f023 0203 	bic.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4957      	ldr	r1, [pc, #348]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005368:	4313      	orrs	r3, r2
 800536a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536c:	f7fb ff30 	bl	80011d0 <HAL_GetTick>
 8005370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005372:	e00a      	b.n	800538a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005374:	f7fb ff2c 	bl	80011d0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e095      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538a:	4b4e      	ldr	r3, [pc, #312]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 020c 	and.w	r2, r3, #12
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	429a      	cmp	r2, r3
 800539a:	d1eb      	bne.n	8005374 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d023      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b4:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a42      	ldr	r2, [pc, #264]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d007      	beq.n	80053dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053cc:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053d4:	4a3b      	ldr	r2, [pc, #236]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053dc:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4936      	ldr	r1, [pc, #216]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
 80053ee:	e008      	b.n	8005402 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d105      	bne.n	8005402 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053f6:	4b33      	ldr	r3, [pc, #204]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	4a32      	ldr	r2, [pc, #200]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 80053fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005400:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d21d      	bcs.n	800544c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005410:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f023 020f 	bic.w	r2, r3, #15
 8005418:	4929      	ldr	r1, [pc, #164]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005420:	f7fb fed6 	bl	80011d0 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fb fed2 	bl	80011d0 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e03b      	b.n	80054b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <HAL_RCC_ClockConfig+0x260>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d1ed      	bne.n	8005428 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005458:	4b1a      	ldr	r3, [pc, #104]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4917      	ldr	r1, [pc, #92]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	490f      	ldr	r1, [pc, #60]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800548a:	f000 f825 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 800548e:	4602      	mov	r2, r0
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_RCC_ClockConfig+0x264>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	490c      	ldr	r1, [pc, #48]	; (80054cc <HAL_RCC_ClockConfig+0x26c>)
 800549c:	5ccb      	ldrb	r3, [r1, r3]
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x270>)
 80054a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <HAL_RCC_ClockConfig+0x274>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fb fe42 	bl	8001138 <HAL_InitTick>
 80054b4:	4603      	mov	r3, r0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40022000 	.word	0x40022000
 80054c4:	40021000 	.word	0x40021000
 80054c8:	04c4b400 	.word	0x04c4b400
 80054cc:	0800b6a4 	.word	0x0800b6a4
 80054d0:	20000000 	.word	0x20000000
 80054d4:	20000004 	.word	0x20000004

080054d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054de:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d102      	bne.n	80054f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054ea:	4b2a      	ldr	r3, [pc, #168]	; (8005594 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e047      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054f0:	4b27      	ldr	r3, [pc, #156]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d102      	bne.n	8005502 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054fc:	4b26      	ldr	r3, [pc, #152]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	e03e      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005502:	4b23      	ldr	r3, [pc, #140]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b0c      	cmp	r3, #12
 800550c:	d136      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	091b      	lsrs	r3, r3, #4
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	3301      	adds	r3, #1
 8005524:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d10c      	bne.n	8005546 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800552c:	4a1a      	ldr	r2, [pc, #104]	; (8005598 <HAL_RCC_GetSysClockFreq+0xc0>)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005536:	68d2      	ldr	r2, [r2, #12]
 8005538:	0a12      	lsrs	r2, r2, #8
 800553a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	617b      	str	r3, [r7, #20]
      break;
 8005544:	e00c      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005546:	4a13      	ldr	r2, [pc, #76]	; (8005594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005550:	68d2      	ldr	r2, [r2, #12]
 8005552:	0a12      	lsrs	r2, r2, #8
 8005554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]
      break;
 800555e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	0e5b      	lsrs	r3, r3, #25
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	3301      	adds	r3, #1
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	e001      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005580:	693b      	ldr	r3, [r7, #16]
}
 8005582:	4618      	mov	r0, r3
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40021000 	.word	0x40021000
 8005594:	00f42400 	.word	0x00f42400
 8005598:	02dc6c00 	.word	0x02dc6c00

0800559c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055a2:	4b1e      	ldr	r3, [pc, #120]	; (800561c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	3301      	adds	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d10c      	bne.n	80055da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055c0:	4a17      	ldr	r2, [pc, #92]	; (8005620 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ca:	68d2      	ldr	r2, [r2, #12]
 80055cc:	0a12      	lsrs	r2, r2, #8
 80055ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	617b      	str	r3, [r7, #20]
    break;
 80055d8:	e00c      	b.n	80055f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055da:	4a12      	ldr	r2, [pc, #72]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e2:	4a0e      	ldr	r2, [pc, #56]	; (800561c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055e4:	68d2      	ldr	r2, [r2, #12]
 80055e6:	0a12      	lsrs	r2, r2, #8
 80055e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055ec:	fb02 f303 	mul.w	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]
    break;
 80055f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	0e5b      	lsrs	r3, r3, #25
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	3301      	adds	r3, #1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800560e:	687b      	ldr	r3, [r7, #4]
}
 8005610:	4618      	mov	r0, r3
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40021000 	.word	0x40021000
 8005620:	02dc6c00 	.word	0x02dc6c00
 8005624:	00f42400 	.word	0x00f42400

08005628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005630:	2300      	movs	r3, #0
 8005632:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005634:	2300      	movs	r3, #0
 8005636:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8098 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005646:	2300      	movs	r3, #0
 8005648:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564a:	4b43      	ldr	r3, [pc, #268]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800564c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005656:	4b40      	ldr	r3, [pc, #256]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565a:	4a3f      	ldr	r2, [pc, #252]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800565c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005660:	6593      	str	r3, [r2, #88]	; 0x58
 8005662:	4b3d      	ldr	r3, [pc, #244]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566e:	2301      	movs	r3, #1
 8005670:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005672:	4b3a      	ldr	r3, [pc, #232]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a39      	ldr	r2, [pc, #228]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800567e:	f7fb fda7 	bl	80011d0 <HAL_GetTick>
 8005682:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005684:	e009      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005686:	f7fb fda3 	bl	80011d0 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d902      	bls.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	74fb      	strb	r3, [r7, #19]
        break;
 8005698:	e005      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800569a:	4b30      	ldr	r3, [pc, #192]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0ef      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d159      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056ac:	4b2a      	ldr	r3, [pc, #168]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01e      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d019      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056c8:	4b23      	ldr	r3, [pc, #140]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056d4:	4b20      	ldr	r3, [pc, #128]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056da:	4a1f      	ldr	r2, [pc, #124]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056e4:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056f4:	4a18      	ldr	r2, [pc, #96]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fb fd63 	bl	80011d0 <HAL_GetTick>
 800570a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800570c:	e00b      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570e:	f7fb fd5f 	bl	80011d0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	f241 3288 	movw	r2, #5000	; 0x1388
 800571c:	4293      	cmp	r3, r2
 800571e:	d902      	bls.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	74fb      	strb	r3, [r7, #19]
            break;
 8005724:	e006      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0ec      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005734:	7cfb      	ldrb	r3, [r7, #19]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10b      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	4903      	ldr	r1, [pc, #12]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005750:	e008      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005752:	7cfb      	ldrb	r3, [r7, #19]
 8005754:	74bb      	strb	r3, [r7, #18]
 8005756:	e005      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005758:	40021000 	.word	0x40021000
 800575c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	7cfb      	ldrb	r3, [r7, #19]
 8005762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005764:	7c7b      	ldrb	r3, [r7, #17]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576a:	4ba6      	ldr	r3, [pc, #664]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	4aa5      	ldr	r2, [pc, #660]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005782:	4ba0      	ldr	r3, [pc, #640]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f023 0203 	bic.w	r2, r3, #3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	499c      	ldr	r1, [pc, #624]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057a4:	4b97      	ldr	r3, [pc, #604]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f023 020c 	bic.w	r2, r3, #12
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4994      	ldr	r1, [pc, #592]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057c6:	4b8f      	ldr	r3, [pc, #572]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	498b      	ldr	r1, [pc, #556]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057e8:	4b86      	ldr	r3, [pc, #536]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	4983      	ldr	r1, [pc, #524]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800580a:	4b7e      	ldr	r3, [pc, #504]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	497a      	ldr	r1, [pc, #488]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800582c:	4b75      	ldr	r3, [pc, #468]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	4972      	ldr	r1, [pc, #456]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800584e:	4b6d      	ldr	r3, [pc, #436]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	4969      	ldr	r1, [pc, #420]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005870:	4b64      	ldr	r3, [pc, #400]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	4961      	ldr	r1, [pc, #388]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005892:	4b5c      	ldr	r3, [pc, #368]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	4958      	ldr	r1, [pc, #352]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d015      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058b4:	4b53      	ldr	r3, [pc, #332]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	4950      	ldr	r1, [pc, #320]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d2:	d105      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d4:	4b4b      	ldr	r3, [pc, #300]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a4a      	ldr	r2, [pc, #296]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d015      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058ec:	4b45      	ldr	r3, [pc, #276]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	4942      	ldr	r1, [pc, #264]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590a:	d105      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590c:	4b3d      	ldr	r3, [pc, #244]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a3c      	ldr	r2, [pc, #240]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005916:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d015      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005924:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4934      	ldr	r1, [pc, #208]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005942:	d105      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005944:	4b2f      	ldr	r3, [pc, #188]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4a2e      	ldr	r2, [pc, #184]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800594e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800595c:	4b29      	ldr	r3, [pc, #164]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	4926      	ldr	r1, [pc, #152]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800597a:	d105      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800597c:	4b21      	ldr	r3, [pc, #132]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a20      	ldr	r2, [pc, #128]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005986:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d015      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005994:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	4918      	ldr	r1, [pc, #96]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b2:	d105      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059b4:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d015      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059cc:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	490a      	ldr	r1, [pc, #40]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ea:	d105      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40021000 	.word	0x40021000

08005a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e049      	b.n	8005aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fb f9c6 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f000 fe06 	bl	8006658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d001      	beq.n	8005ad0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e042      	b.n	8005b56 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <HAL_TIM_Base_Start+0xac>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d018      	beq.n	8005b14 <HAL_TIM_Base_Start+0x5c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aea:	d013      	beq.n	8005b14 <HAL_TIM_Base_Start+0x5c>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <HAL_TIM_Base_Start+0xb0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00e      	beq.n	8005b14 <HAL_TIM_Base_Start+0x5c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1c      	ldr	r2, [pc, #112]	; (8005b6c <HAL_TIM_Base_Start+0xb4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d009      	beq.n	8005b14 <HAL_TIM_Base_Start+0x5c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a1a      	ldr	r2, [pc, #104]	; (8005b70 <HAL_TIM_Base_Start+0xb8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d004      	beq.n	8005b14 <HAL_TIM_Base_Start+0x5c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a19      	ldr	r2, [pc, #100]	; (8005b74 <HAL_TIM_Base_Start+0xbc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d115      	bne.n	8005b40 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <HAL_TIM_Base_Start+0xc0>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d015      	beq.n	8005b52 <HAL_TIM_Base_Start+0x9a>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2c:	d011      	beq.n	8005b52 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0201 	orr.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3e:	e008      	b.n	8005b52 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e000      	b.n	8005b54 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40013400 	.word	0x40013400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	00010007 	.word	0x00010007

08005b7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e049      	b.n	8005c22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fb f980 	bl	8000ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f000 fd4c 	bl	8006658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e03c      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d109      	bne.n	8005c72 <HAL_TIM_PWM_Start_DMA+0x46>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	bf0c      	ite	eq
 8005c6a:	2301      	moveq	r3, #1
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	e02f      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d109      	bne.n	8005c8c <HAL_TIM_PWM_Start_DMA+0x60>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e022      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b0c      	cmp	r3, #12
 8005c90:	d109      	bne.n	8005ca6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	e015      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d109      	bne.n	8005cc0 <HAL_TIM_PWM_Start_DMA+0x94>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	bf0c      	ite	eq
 8005cb8:	2301      	moveq	r3, #1
 8005cba:	2300      	movne	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e008      	b.n	8005cd2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	bf0c      	ite	eq
 8005ccc:	2301      	moveq	r3, #1
 8005cce:	2300      	movne	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e1a6      	b.n	8006028 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e03c      	b.n	8005d6e <HAL_TIM_PWM_Start_DMA+0x142>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d109      	bne.n	8005d0e <HAL_TIM_PWM_Start_DMA+0xe2>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	e02f      	b.n	8005d6e <HAL_TIM_PWM_Start_DMA+0x142>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d109      	bne.n	8005d28 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	bf0c      	ite	eq
 8005d20:	2301      	moveq	r3, #1
 8005d22:	2300      	movne	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	e022      	b.n	8005d6e <HAL_TIM_PWM_Start_DMA+0x142>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b0c      	cmp	r3, #12
 8005d2c:	d109      	bne.n	8005d42 <HAL_TIM_PWM_Start_DMA+0x116>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	bf0c      	ite	eq
 8005d3a:	2301      	moveq	r3, #1
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	e015      	b.n	8005d6e <HAL_TIM_PWM_Start_DMA+0x142>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d109      	bne.n	8005d5c <HAL_TIM_PWM_Start_DMA+0x130>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	bf0c      	ite	eq
 8005d54:	2301      	moveq	r3, #1
 8005d56:	2300      	movne	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e008      	b.n	8005d6e <HAL_TIM_PWM_Start_DMA+0x142>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d034      	beq.n	8005ddc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_TIM_PWM_Start_DMA+0x152>
 8005d78:	887b      	ldrh	r3, [r7, #2]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e152      	b.n	8006028 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <HAL_TIM_PWM_Start_DMA+0x166>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d90:	e026      	b.n	8005de0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d104      	bne.n	8005da2 <HAL_TIM_PWM_Start_DMA+0x176>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da0:	e01e      	b.n	8005de0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_PWM_Start_DMA+0x186>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db0:	e016      	b.n	8005de0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIM_PWM_Start_DMA+0x196>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc0:	e00e      	b.n	8005de0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d104      	bne.n	8005dd2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dd0:	e006      	b.n	8005de0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dda:	e001      	b.n	8005de0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e123      	b.n	8006028 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	f200 80ae 	bhi.w	8005f44 <HAL_TIM_PWM_Start_DMA+0x318>
 8005de8:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8005dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005f45 	.word	0x08005f45
 8005df8:	08005f45 	.word	0x08005f45
 8005dfc:	08005f45 	.word	0x08005f45
 8005e00:	08005e6d 	.word	0x08005e6d
 8005e04:	08005f45 	.word	0x08005f45
 8005e08:	08005f45 	.word	0x08005f45
 8005e0c:	08005f45 	.word	0x08005f45
 8005e10:	08005eb5 	.word	0x08005eb5
 8005e14:	08005f45 	.word	0x08005f45
 8005e18:	08005f45 	.word	0x08005f45
 8005e1c:	08005f45 	.word	0x08005f45
 8005e20:	08005efd 	.word	0x08005efd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	4a81      	ldr	r2, [pc, #516]	; (8006030 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	4a80      	ldr	r2, [pc, #512]	; (8006034 <HAL_TIM_PWM_Start_DMA+0x408>)
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	4a7f      	ldr	r2, [pc, #508]	; (8006038 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005e3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3334      	adds	r3, #52	; 0x34
 8005e48:	461a      	mov	r2, r3
 8005e4a:	887b      	ldrh	r3, [r7, #2]
 8005e4c:	f7fc fdc2 	bl	80029d4 <HAL_DMA_Start_IT>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0e6      	b.n	8006028 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e68:	60da      	str	r2, [r3, #12]
      break;
 8005e6a:	e06e      	b.n	8005f4a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	4a6f      	ldr	r2, [pc, #444]	; (8006030 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005e72:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	4a6e      	ldr	r2, [pc, #440]	; (8006034 <HAL_TIM_PWM_Start_DMA+0x408>)
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	4a6d      	ldr	r2, [pc, #436]	; (8006038 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005e82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3338      	adds	r3, #56	; 0x38
 8005e90:	461a      	mov	r2, r3
 8005e92:	887b      	ldrh	r3, [r7, #2]
 8005e94:	f7fc fd9e 	bl	80029d4 <HAL_DMA_Start_IT>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e0c2      	b.n	8006028 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eb0:	60da      	str	r2, [r3, #12]
      break;
 8005eb2:	e04a      	b.n	8005f4a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	4a5d      	ldr	r2, [pc, #372]	; (8006030 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	4a5c      	ldr	r2, [pc, #368]	; (8006034 <HAL_TIM_PWM_Start_DMA+0x408>)
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a5b      	ldr	r2, [pc, #364]	; (8006038 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	333c      	adds	r3, #60	; 0x3c
 8005ed8:	461a      	mov	r2, r3
 8005eda:	887b      	ldrh	r3, [r7, #2]
 8005edc:	f7fc fd7a 	bl	80029d4 <HAL_DMA_Start_IT>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e09e      	b.n	8006028 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef8:	60da      	str	r2, [r3, #12]
      break;
 8005efa:	e026      	b.n	8005f4a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	4a4b      	ldr	r2, [pc, #300]	; (8006030 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	4a4a      	ldr	r2, [pc, #296]	; (8006034 <HAL_TIM_PWM_Start_DMA+0x408>)
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	4a49      	ldr	r2, [pc, #292]	; (8006038 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005f12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3340      	adds	r3, #64	; 0x40
 8005f20:	461a      	mov	r2, r3
 8005f22:	887b      	ldrh	r3, [r7, #2]
 8005f24:	f7fc fd56 	bl	80029d4 <HAL_DMA_Start_IT>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e07a      	b.n	8006028 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f40:	60da      	str	r2, [r3, #12]
      break;
 8005f42:	e002      	b.n	8005f4a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	75fb      	strb	r3, [r7, #23]
      break;
 8005f48:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d16a      	bne.n	8006026 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2201      	movs	r2, #1
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 ffab 	bl	8006eb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a36      	ldr	r2, [pc, #216]	; (800603c <HAL_TIM_PWM_Start_DMA+0x410>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <HAL_TIM_PWM_Start_DMA+0x364>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a34      	ldr	r2, [pc, #208]	; (8006040 <HAL_TIM_PWM_Start_DMA+0x414>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00e      	beq.n	8005f90 <HAL_TIM_PWM_Start_DMA+0x364>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a33      	ldr	r2, [pc, #204]	; (8006044 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <HAL_TIM_PWM_Start_DMA+0x364>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a31      	ldr	r2, [pc, #196]	; (8006048 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <HAL_TIM_PWM_Start_DMA+0x364>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a30      	ldr	r2, [pc, #192]	; (800604c <HAL_TIM_PWM_Start_DMA+0x420>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d101      	bne.n	8005f94 <HAL_TIM_PWM_Start_DMA+0x368>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <HAL_TIM_PWM_Start_DMA+0x36a>
 8005f94:	2300      	movs	r3, #0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a23      	ldr	r2, [pc, #140]	; (800603c <HAL_TIM_PWM_Start_DMA+0x410>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d018      	beq.n	8005fe6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbc:	d013      	beq.n	8005fe6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a23      	ldr	r2, [pc, #140]	; (8006050 <HAL_TIM_PWM_Start_DMA+0x424>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00e      	beq.n	8005fe6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a21      	ldr	r2, [pc, #132]	; (8006054 <HAL_TIM_PWM_Start_DMA+0x428>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <HAL_TIM_PWM_Start_DMA+0x414>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d004      	beq.n	8005fe6 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a18      	ldr	r2, [pc, #96]	; (8006044 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d115      	bne.n	8006012 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b06      	cmp	r3, #6
 8005ff6:	d015      	beq.n	8006024 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffe:	d011      	beq.n	8006024 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006010:	e008      	b.n	8006024 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e000      	b.n	8006026 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006024:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006026:	7dfb      	ldrb	r3, [r7, #23]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	08006547 	.word	0x08006547
 8006034:	080065ef 	.word	0x080065ef
 8006038:	080064b5 	.word	0x080064b5
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40013400 	.word	0x40013400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	00010007 	.word	0x00010007

0800605c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006076:	2302      	movs	r3, #2
 8006078:	e0ff      	b.n	800627a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b14      	cmp	r3, #20
 8006086:	f200 80f0 	bhi.w	800626a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060e5 	.word	0x080060e5
 8006094:	0800626b 	.word	0x0800626b
 8006098:	0800626b 	.word	0x0800626b
 800609c:	0800626b 	.word	0x0800626b
 80060a0:	08006125 	.word	0x08006125
 80060a4:	0800626b 	.word	0x0800626b
 80060a8:	0800626b 	.word	0x0800626b
 80060ac:	0800626b 	.word	0x0800626b
 80060b0:	08006167 	.word	0x08006167
 80060b4:	0800626b 	.word	0x0800626b
 80060b8:	0800626b 	.word	0x0800626b
 80060bc:	0800626b 	.word	0x0800626b
 80060c0:	080061a7 	.word	0x080061a7
 80060c4:	0800626b 	.word	0x0800626b
 80060c8:	0800626b 	.word	0x0800626b
 80060cc:	0800626b 	.word	0x0800626b
 80060d0:	080061e9 	.word	0x080061e9
 80060d4:	0800626b 	.word	0x0800626b
 80060d8:	0800626b 	.word	0x0800626b
 80060dc:	0800626b 	.word	0x0800626b
 80060e0:	08006229 	.word	0x08006229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fb50 	bl	8006790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0208 	orr.w	r2, r2, #8
 80060fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0204 	bic.w	r2, r2, #4
 800610e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	619a      	str	r2, [r3, #24]
      break;
 8006122:	e0a5      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fbc0 	bl	80068b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6999      	ldr	r1, [r3, #24]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	021a      	lsls	r2, r3, #8
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]
      break;
 8006164:	e084      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fc29 	bl	80069c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0208 	orr.w	r2, r2, #8
 8006180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0204 	bic.w	r2, r2, #4
 8006190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	61da      	str	r2, [r3, #28]
      break;
 80061a4:	e064      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fc91 	bl	8006ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	021a      	lsls	r2, r3, #8
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	61da      	str	r2, [r3, #28]
      break;
 80061e6:	e043      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fcfa 	bl	8006be8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0208 	orr.w	r2, r2, #8
 8006202:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006226:	e023      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fd3e 	bl	8006cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006242:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006252:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	021a      	lsls	r2, r3, #8
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006268:	e002      	b.n	8006270 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	75fb      	strb	r3, [r7, #23]
      break;
 800626e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006278:	7dfb      	ldrb	r3, [r7, #23]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop

08006284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_ConfigClockSource+0x1c>
 800629c:	2302      	movs	r3, #2
 800629e:	e0de      	b.n	800645e <HAL_TIM_ConfigClockSource+0x1da>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80062be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a63      	ldr	r2, [pc, #396]	; (8006468 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	f000 80a9 	beq.w	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 80062e0:	4a61      	ldr	r2, [pc, #388]	; (8006468 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	f200 80ae 	bhi.w	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 80062e8:	4a60      	ldr	r2, [pc, #384]	; (800646c <HAL_TIM_ConfigClockSource+0x1e8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f000 80a1 	beq.w	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 80062f0:	4a5e      	ldr	r2, [pc, #376]	; (800646c <HAL_TIM_ConfigClockSource+0x1e8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f200 80a6 	bhi.w	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 80062f8:	4a5d      	ldr	r2, [pc, #372]	; (8006470 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	f000 8099 	beq.w	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 8006300:	4a5b      	ldr	r2, [pc, #364]	; (8006470 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f200 809e 	bhi.w	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 8006308:	4a5a      	ldr	r2, [pc, #360]	; (8006474 <HAL_TIM_ConfigClockSource+0x1f0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	f000 8091 	beq.w	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 8006310:	4a58      	ldr	r2, [pc, #352]	; (8006474 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f200 8096 	bhi.w	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 8006318:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800631c:	f000 8089 	beq.w	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 8006320:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006324:	f200 808e 	bhi.w	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 8006328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632c:	d03e      	beq.n	80063ac <HAL_TIM_ConfigClockSource+0x128>
 800632e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006332:	f200 8087 	bhi.w	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	f000 8086 	beq.w	800644a <HAL_TIM_ConfigClockSource+0x1c6>
 800633e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006342:	d87f      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 8006344:	2b70      	cmp	r3, #112	; 0x70
 8006346:	d01a      	beq.n	800637e <HAL_TIM_ConfigClockSource+0xfa>
 8006348:	2b70      	cmp	r3, #112	; 0x70
 800634a:	d87b      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 800634c:	2b60      	cmp	r3, #96	; 0x60
 800634e:	d050      	beq.n	80063f2 <HAL_TIM_ConfigClockSource+0x16e>
 8006350:	2b60      	cmp	r3, #96	; 0x60
 8006352:	d877      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 8006354:	2b50      	cmp	r3, #80	; 0x50
 8006356:	d03c      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x14e>
 8006358:	2b50      	cmp	r3, #80	; 0x50
 800635a:	d873      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d058      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x18e>
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d86f      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 8006364:	2b30      	cmp	r3, #48	; 0x30
 8006366:	d064      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 8006368:	2b30      	cmp	r3, #48	; 0x30
 800636a:	d86b      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 800636c:	2b20      	cmp	r3, #32
 800636e:	d060      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 8006370:	2b20      	cmp	r3, #32
 8006372:	d867      	bhi.n	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
 8006374:	2b00      	cmp	r3, #0
 8006376:	d05c      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 8006378:	2b10      	cmp	r3, #16
 800637a:	d05a      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x1ae>
 800637c:	e062      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800638e:	f000 fd71 	bl	8006e74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	609a      	str	r2, [r3, #8]
      break;
 80063aa:	e04f      	b.n	800644c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063bc:	f000 fd5a 	bl	8006e74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ce:	609a      	str	r2, [r3, #8]
      break;
 80063d0:	e03c      	b.n	800644c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063de:	461a      	mov	r2, r3
 80063e0:	f000 fccc 	bl	8006d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2150      	movs	r1, #80	; 0x50
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fd25 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 80063f0:	e02c      	b.n	800644c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063fe:	461a      	mov	r2, r3
 8006400:	f000 fceb 	bl	8006dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2160      	movs	r1, #96	; 0x60
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fd15 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 8006410:	e01c      	b.n	800644c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800641e:	461a      	mov	r2, r3
 8006420:	f000 fcac 	bl	8006d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2140      	movs	r1, #64	; 0x40
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fd05 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 8006430:	e00c      	b.n	800644c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f000 fcfc 	bl	8006e3a <TIM_ITRx_SetConfig>
      break;
 8006442:	e003      	b.n	800644c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
      break;
 8006448:	e000      	b.n	800644c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800644a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	00100070 	.word	0x00100070
 800646c:	00100040 	.word	0x00100040
 8006470:	00100030 	.word	0x00100030
 8006474:	00100020 	.word	0x00100020

08006478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d107      	bne.n	80064dc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064da:	e02a      	b.n	8006532 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d107      	bne.n	80064f6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2202      	movs	r2, #2
 80064ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f4:	e01d      	b.n	8006532 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d107      	bne.n	8006510 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2204      	movs	r2, #4
 8006504:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800650e:	e010      	b.n	8006532 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	429a      	cmp	r2, r3
 8006518:	d107      	bne.n	800652a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2208      	movs	r2, #8
 800651e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006528:	e003      	b.n	8006532 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff ffb4 	bl	80064a0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	771a      	strb	r2, [r3, #28]
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d10b      	bne.n	8006576 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d136      	bne.n	80065da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006574:	e031      	b.n	80065da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d10b      	bne.n	8006598 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2202      	movs	r2, #2
 8006584:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d125      	bne.n	80065da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006596:	e020      	b.n	80065da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d10b      	bne.n	80065ba <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2204      	movs	r2, #4
 80065a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d114      	bne.n	80065da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b8:	e00f      	b.n	80065da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d10a      	bne.n	80065da <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2208      	movs	r2, #8
 80065c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff ff4c 	bl	8006478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	771a      	strb	r2, [r3, #28]
}
 80065e6:	bf00      	nop
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d103      	bne.n	800660e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	771a      	strb	r2, [r3, #28]
 800660c:	e019      	b.n	8006642 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d103      	bne.n	8006620 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2202      	movs	r2, #2
 800661c:	771a      	strb	r2, [r3, #28]
 800661e:	e010      	b.n	8006642 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	429a      	cmp	r2, r3
 8006628:	d103      	bne.n	8006632 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2204      	movs	r2, #4
 800662e:	771a      	strb	r2, [r3, #28]
 8006630:	e007      	b.n	8006642 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d102      	bne.n	8006642 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2208      	movs	r2, #8
 8006640:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7ff ff22 	bl	800648c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	771a      	strb	r2, [r3, #28]
}
 800664e:	bf00      	nop
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a42      	ldr	r2, [pc, #264]	; (8006774 <TIM_Base_SetConfig+0x11c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00f      	beq.n	8006690 <TIM_Base_SetConfig+0x38>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006676:	d00b      	beq.n	8006690 <TIM_Base_SetConfig+0x38>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a3f      	ldr	r2, [pc, #252]	; (8006778 <TIM_Base_SetConfig+0x120>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d007      	beq.n	8006690 <TIM_Base_SetConfig+0x38>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3e      	ldr	r2, [pc, #248]	; (800677c <TIM_Base_SetConfig+0x124>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_Base_SetConfig+0x38>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a3d      	ldr	r2, [pc, #244]	; (8006780 <TIM_Base_SetConfig+0x128>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d108      	bne.n	80066a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a33      	ldr	r2, [pc, #204]	; (8006774 <TIM_Base_SetConfig+0x11c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01b      	beq.n	80066e2 <TIM_Base_SetConfig+0x8a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d017      	beq.n	80066e2 <TIM_Base_SetConfig+0x8a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a30      	ldr	r2, [pc, #192]	; (8006778 <TIM_Base_SetConfig+0x120>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <TIM_Base_SetConfig+0x8a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2f      	ldr	r2, [pc, #188]	; (800677c <TIM_Base_SetConfig+0x124>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00f      	beq.n	80066e2 <TIM_Base_SetConfig+0x8a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2e      	ldr	r2, [pc, #184]	; (8006780 <TIM_Base_SetConfig+0x128>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_Base_SetConfig+0x8a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2d      	ldr	r2, [pc, #180]	; (8006784 <TIM_Base_SetConfig+0x12c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_Base_SetConfig+0x8a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a2c      	ldr	r2, [pc, #176]	; (8006788 <TIM_Base_SetConfig+0x130>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_Base_SetConfig+0x8a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a2b      	ldr	r2, [pc, #172]	; (800678c <TIM_Base_SetConfig+0x134>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d108      	bne.n	80066f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a16      	ldr	r2, [pc, #88]	; (8006774 <TIM_Base_SetConfig+0x11c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00f      	beq.n	8006740 <TIM_Base_SetConfig+0xe8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a17      	ldr	r2, [pc, #92]	; (8006780 <TIM_Base_SetConfig+0x128>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_Base_SetConfig+0xe8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a16      	ldr	r2, [pc, #88]	; (8006784 <TIM_Base_SetConfig+0x12c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_Base_SetConfig+0xe8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a15      	ldr	r2, [pc, #84]	; (8006788 <TIM_Base_SetConfig+0x130>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0xe8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a14      	ldr	r2, [pc, #80]	; (800678c <TIM_Base_SetConfig+0x134>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d103      	bne.n	8006748 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b01      	cmp	r3, #1
 8006758:	d105      	bne.n	8006766 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	611a      	str	r2, [r3, #16]
  }
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40012c00 	.word	0x40012c00
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40013400 	.word	0x40013400
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800

08006790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f023 0201 	bic.w	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 0302 	bic.w	r3, r3, #2
 80067dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a2c      	ldr	r2, [pc, #176]	; (800689c <TIM_OC1_SetConfig+0x10c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00f      	beq.n	8006810 <TIM_OC1_SetConfig+0x80>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a2b      	ldr	r2, [pc, #172]	; (80068a0 <TIM_OC1_SetConfig+0x110>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00b      	beq.n	8006810 <TIM_OC1_SetConfig+0x80>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a2a      	ldr	r2, [pc, #168]	; (80068a4 <TIM_OC1_SetConfig+0x114>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_OC1_SetConfig+0x80>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a29      	ldr	r2, [pc, #164]	; (80068a8 <TIM_OC1_SetConfig+0x118>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_OC1_SetConfig+0x80>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a28      	ldr	r2, [pc, #160]	; (80068ac <TIM_OC1_SetConfig+0x11c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10c      	bne.n	800682a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0308 	bic.w	r3, r3, #8
 8006816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 0304 	bic.w	r3, r3, #4
 8006828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <TIM_OC1_SetConfig+0x10c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_OC1_SetConfig+0xc2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <TIM_OC1_SetConfig+0x110>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_OC1_SetConfig+0xc2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a19      	ldr	r2, [pc, #100]	; (80068a4 <TIM_OC1_SetConfig+0x114>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_OC1_SetConfig+0xc2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <TIM_OC1_SetConfig+0x118>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_OC1_SetConfig+0xc2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a17      	ldr	r2, [pc, #92]	; (80068ac <TIM_OC1_SetConfig+0x11c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d111      	bne.n	8006876 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	621a      	str	r2, [r3, #32]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40013400 	.word	0x40013400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40014800 	.word	0x40014800

080068b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f023 0210 	bic.w	r2, r3, #16
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f023 0320 	bic.w	r3, r3, #32
 80068fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a28      	ldr	r2, [pc, #160]	; (80069b0 <TIM_OC2_SetConfig+0x100>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC2_SetConfig+0x6c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <TIM_OC2_SetConfig+0x104>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10d      	bne.n	8006938 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <TIM_OC2_SetConfig+0x100>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00f      	beq.n	8006960 <TIM_OC2_SetConfig+0xb0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <TIM_OC2_SetConfig+0x104>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00b      	beq.n	8006960 <TIM_OC2_SetConfig+0xb0>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <TIM_OC2_SetConfig+0x108>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d007      	beq.n	8006960 <TIM_OC2_SetConfig+0xb0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1a      	ldr	r2, [pc, #104]	; (80069bc <TIM_OC2_SetConfig+0x10c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC2_SetConfig+0xb0>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <TIM_OC2_SetConfig+0x110>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d113      	bne.n	8006988 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40013400 	.word	0x40013400
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400
 80069c0:	40014800 	.word	0x40014800

080069c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a27      	ldr	r2, [pc, #156]	; (8006ac0 <TIM_OC3_SetConfig+0xfc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d003      	beq.n	8006a2e <TIM_OC3_SetConfig+0x6a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <TIM_OC3_SetConfig+0x100>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d10d      	bne.n	8006a4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <TIM_OC3_SetConfig+0xfc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00f      	beq.n	8006a72 <TIM_OC3_SetConfig+0xae>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1b      	ldr	r2, [pc, #108]	; (8006ac4 <TIM_OC3_SetConfig+0x100>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00b      	beq.n	8006a72 <TIM_OC3_SetConfig+0xae>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1a      	ldr	r2, [pc, #104]	; (8006ac8 <TIM_OC3_SetConfig+0x104>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d007      	beq.n	8006a72 <TIM_OC3_SetConfig+0xae>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a19      	ldr	r2, [pc, #100]	; (8006acc <TIM_OC3_SetConfig+0x108>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d003      	beq.n	8006a72 <TIM_OC3_SetConfig+0xae>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <TIM_OC3_SetConfig+0x10c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d113      	bne.n	8006a9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40013400 	.word	0x40013400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800

08006ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a28      	ldr	r2, [pc, #160]	; (8006bd4 <TIM_OC4_SetConfig+0x100>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC4_SetConfig+0x6c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <TIM_OC4_SetConfig+0x104>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10d      	bne.n	8006b5c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <TIM_OC4_SetConfig+0x100>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00f      	beq.n	8006b84 <TIM_OC4_SetConfig+0xb0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <TIM_OC4_SetConfig+0x104>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00b      	beq.n	8006b84 <TIM_OC4_SetConfig+0xb0>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <TIM_OC4_SetConfig+0x108>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d007      	beq.n	8006b84 <TIM_OC4_SetConfig+0xb0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <TIM_OC4_SetConfig+0x10c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC4_SetConfig+0xb0>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <TIM_OC4_SetConfig+0x110>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d113      	bne.n	8006bac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	019b      	lsls	r3, r3, #6
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	019b      	lsls	r3, r3, #6
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40013400 	.word	0x40013400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800

08006be8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	041b      	lsls	r3, r3, #16
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <TIM_OC5_SetConfig+0xb4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00f      	beq.n	8006c62 <TIM_OC5_SetConfig+0x7a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <TIM_OC5_SetConfig+0xb8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00b      	beq.n	8006c62 <TIM_OC5_SetConfig+0x7a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <TIM_OC5_SetConfig+0xbc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d007      	beq.n	8006c62 <TIM_OC5_SetConfig+0x7a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <TIM_OC5_SetConfig+0xc0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d003      	beq.n	8006c62 <TIM_OC5_SetConfig+0x7a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a13      	ldr	r2, [pc, #76]	; (8006cac <TIM_OC5_SetConfig+0xc4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d109      	bne.n	8006c76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	621a      	str	r2, [r3, #32]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800

08006cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	051b      	lsls	r3, r3, #20
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <TIM_OC6_SetConfig+0xb8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00f      	beq.n	8006d2c <TIM_OC6_SetConfig+0x7c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <TIM_OC6_SetConfig+0xbc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00b      	beq.n	8006d2c <TIM_OC6_SetConfig+0x7c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <TIM_OC6_SetConfig+0xc0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d007      	beq.n	8006d2c <TIM_OC6_SetConfig+0x7c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <TIM_OC6_SetConfig+0xc4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_OC6_SetConfig+0x7c>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a14      	ldr	r2, [pc, #80]	; (8006d78 <TIM_OC6_SetConfig+0xc8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d109      	bne.n	8006d40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	029b      	lsls	r3, r3, #10
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40013400 	.word	0x40013400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40014400 	.word	0x40014400
 8006d78:	40014800 	.word	0x40014800

08006d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0201 	bic.w	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f023 030a 	bic.w	r3, r3, #10
 8006db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f023 0210 	bic.w	r2, r3, #16
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	031b      	lsls	r3, r3, #12
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	621a      	str	r2, [r3, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f043 0307 	orr.w	r3, r3, #7
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	609a      	str	r2, [r3, #8]
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	021a      	lsls	r2, r3, #8
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1a      	ldr	r2, [r3, #32]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1a      	ldr	r2, [r3, #32]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	431a      	orrs	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e065      	b.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a2c      	ldr	r2, [pc, #176]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d004      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2b      	ldr	r2, [pc, #172]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d108      	bne.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d018      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8e:	d013      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00e      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a12      	ldr	r2, [pc, #72]	; (8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a13      	ldr	r2, [pc, #76]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40014000 	.word	0x40014000

08007004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800701c:	2302      	movs	r3, #2
 800701e:	e073      	b.n	8007108 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4313      	orrs	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	041b      	lsls	r3, r3, #16
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a19      	ldr	r2, [pc, #100]	; (8007114 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a18      	ldr	r2, [pc, #96]	; (8007118 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d11c      	bne.n	80070f6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	051b      	lsls	r3, r3, #20
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40012c00 	.word	0x40012c00
 8007118:	40013400 	.word	0x40013400

0800711c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800712c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007130:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	b29a      	uxth	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800714a:	b480      	push	{r7}
 800714c:	b085      	sub	sp, #20
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007152:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007156:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800715e:	b29a      	uxth	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	b29b      	uxth	r3, r3
 8007164:	43db      	mvns	r3, r3
 8007166:	b29b      	uxth	r3, r3
 8007168:	4013      	ands	r3, r2
 800716a:	b29a      	uxth	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	1d3b      	adds	r3, r7, #4
 800718a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071bc:	b480      	push	{r7}
 80071be:	b09d      	sub	sp, #116	; 0x74
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	78db      	ldrb	r3, [r3, #3]
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d81f      	bhi.n	800722e <USB_ActivateEndpoint+0x72>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <USB_ActivateEndpoint+0x38>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007205 	.word	0x08007205
 80071f8:	08007221 	.word	0x08007221
 80071fc:	08007237 	.word	0x08007237
 8007200:	08007213 	.word	0x08007213
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007204:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800720c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007210:	e012      	b.n	8007238 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007212:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007216:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800721a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800721e:	e00b      	b.n	8007238 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007220:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007224:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007228:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800722c:	e004      	b.n	8007238 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007234:	e000      	b.n	8007238 <USB_ActivateEndpoint+0x7c>
      break;
 8007236:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	441a      	add	r2, r3
 8007242:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800724e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007256:	b29b      	uxth	r3, r3
 8007258:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	b21b      	sxth	r3, r3
 800726a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	b21a      	sxth	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	b21b      	sxth	r3, r3
 800727a:	4313      	orrs	r3, r2
 800727c:	b21b      	sxth	r3, r3
 800727e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	441a      	add	r2, r3
 800728c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	7b1b      	ldrb	r3, [r3, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f040 8178 	bne.w	800759e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8084 	beq.w	80073c0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	4413      	add	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	00da      	lsls	r2, r3, #3
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	88db      	ldrh	r3, [r3, #6]
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	827b      	strh	r3, [r7, #18]
 80072fa:	8a7b      	ldrh	r3, [r7, #18]
 80072fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01b      	beq.n	800733c <USB_ActivateEndpoint+0x180>
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731a:	823b      	strh	r3, [r7, #16]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	441a      	add	r2, r3
 8007326:	8a3b      	ldrh	r3, [r7, #16]
 8007328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007338:	b29b      	uxth	r3, r3
 800733a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	78db      	ldrb	r3, [r3, #3]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d020      	beq.n	8007386 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735a:	81bb      	strh	r3, [r7, #12]
 800735c:	89bb      	ldrh	r3, [r7, #12]
 800735e:	f083 0320 	eor.w	r3, r3, #32
 8007362:	81bb      	strh	r3, [r7, #12]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	441a      	add	r2, r3
 800736e:	89bb      	ldrh	r3, [r7, #12]
 8007370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800737c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007380:	b29b      	uxth	r3, r3
 8007382:	8013      	strh	r3, [r2, #0]
 8007384:	e2d5      	b.n	8007932 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739c:	81fb      	strh	r3, [r7, #14]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	441a      	add	r2, r3
 80073a8:	89fb      	ldrh	r3, [r7, #14]
 80073aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	8013      	strh	r3, [r2, #0]
 80073be:	e2b8      	b.n	8007932 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	633b      	str	r3, [r7, #48]	; 0x30
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	4413      	add	r3, r2
 80073d2:	633b      	str	r3, [r7, #48]	; 0x30
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	00da      	lsls	r2, r3, #3
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	4413      	add	r3, r2
 80073de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	88db      	ldrh	r3, [r3, #6]
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073fe:	b29b      	uxth	r3, r3
 8007400:	461a      	mov	r2, r3
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	4413      	add	r3, r2
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	00da      	lsls	r2, r3, #3
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	4413      	add	r3, r2
 8007412:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007422:	b29a      	uxth	r2, r3
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	2b3e      	cmp	r3, #62	; 0x3e
 800742e:	d91d      	bls.n	800746c <USB_ActivateEndpoint+0x2b0>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	095b      	lsrs	r3, r3, #5
 8007436:	66bb      	str	r3, [r7, #104]	; 0x68
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f003 031f 	and.w	r3, r3, #31
 8007440:	2b00      	cmp	r3, #0
 8007442:	d102      	bne.n	800744a <USB_ActivateEndpoint+0x28e>
 8007444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007446:	3b01      	subs	r3, #1
 8007448:	66bb      	str	r3, [r7, #104]	; 0x68
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29a      	uxth	r2, r3
 8007450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007452:	b29b      	uxth	r3, r3
 8007454:	029b      	lsls	r3, r3, #10
 8007456:	b29b      	uxth	r3, r3
 8007458:	4313      	orrs	r3, r2
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007464:	b29a      	uxth	r2, r3
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	e026      	b.n	80074ba <USB_ActivateEndpoint+0x2fe>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <USB_ActivateEndpoint+0x2ce>
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007482:	b29a      	uxth	r2, r3
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	e017      	b.n	80074ba <USB_ActivateEndpoint+0x2fe>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	085b      	lsrs	r3, r3, #1
 8007490:	66bb      	str	r3, [r7, #104]	; 0x68
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <USB_ActivateEndpoint+0x2e8>
 800749e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074a0:	3301      	adds	r3, #1
 80074a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	029b      	lsls	r3, r3, #10
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80074c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01b      	beq.n	800750a <USB_ActivateEndpoint+0x34e>
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e8:	843b      	strh	r3, [r7, #32]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	441a      	add	r2, r3
 80074f4:	8c3b      	ldrh	r3, [r7, #32]
 80074f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007506:	b29b      	uxth	r3, r3
 8007508:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d124      	bne.n	800755c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007528:	83bb      	strh	r3, [r7, #28]
 800752a:	8bbb      	ldrh	r3, [r7, #28]
 800752c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007530:	83bb      	strh	r3, [r7, #28]
 8007532:	8bbb      	ldrh	r3, [r7, #28]
 8007534:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007538:	83bb      	strh	r3, [r7, #28]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	441a      	add	r2, r3
 8007544:	8bbb      	ldrh	r3, [r7, #28]
 8007546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800754a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800754e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007556:	b29b      	uxth	r3, r3
 8007558:	8013      	strh	r3, [r2, #0]
 800755a:	e1ea      	b.n	8007932 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	83fb      	strh	r3, [r7, #30]
 8007574:	8bfb      	ldrh	r3, [r7, #30]
 8007576:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800757a:	83fb      	strh	r3, [r7, #30]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	441a      	add	r2, r3
 8007586:	8bfb      	ldrh	r3, [r7, #30]
 8007588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007598:	b29b      	uxth	r3, r3
 800759a:	8013      	strh	r3, [r2, #0]
 800759c:	e1c9      	b.n	8007932 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d11e      	bne.n	80075e4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075bc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80075da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075de:	b29b      	uxth	r3, r3
 80075e0:	8013      	strh	r3, [r2, #0]
 80075e2:	e01d      	b.n	8007620 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80075f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	441a      	add	r2, r3
 8007608:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800760c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761c:	b29b      	uxth	r3, r3
 800761e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762a:	b29b      	uxth	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007630:	4413      	add	r3, r2
 8007632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	00da      	lsls	r2, r3, #3
 800763a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763c:	4413      	add	r3, r2
 800763e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007642:	65bb      	str	r3, [r7, #88]	; 0x58
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	891b      	ldrh	r3, [r3, #8]
 8007648:	085b      	lsrs	r3, r3, #1
 800764a:	b29b      	uxth	r3, r3
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	657b      	str	r3, [r7, #84]	; 0x54
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007664:	4413      	add	r3, r2
 8007666:	657b      	str	r3, [r7, #84]	; 0x54
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	00da      	lsls	r2, r3, #3
 800766e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007670:	4413      	add	r3, r2
 8007672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007676:	653b      	str	r3, [r7, #80]	; 0x50
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	895b      	ldrh	r3, [r3, #10]
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	b29b      	uxth	r3, r3
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007686:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 8093 	bne.w	80077b8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80076a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80076a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01b      	beq.n	80076e6 <USB_ActivateEndpoint+0x52a>
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	441a      	add	r2, r3
 80076d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80076d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80076f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01b      	beq.n	8007736 <USB_ActivateEndpoint+0x57a>
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007714:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	441a      	add	r2, r3
 8007720:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800772a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007732:	b29b      	uxth	r3, r3
 8007734:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774c:	873b      	strh	r3, [r7, #56]	; 0x38
 800774e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007750:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007754:	873b      	strh	r3, [r7, #56]	; 0x38
 8007756:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007758:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800775c:	873b      	strh	r3, [r7, #56]	; 0x38
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	441a      	add	r2, r3
 8007768:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800776a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777a:	b29b      	uxth	r3, r3
 800777c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007794:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	441a      	add	r2, r3
 80077a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	8013      	strh	r3, [r2, #0]
 80077b6:	e0bc      	b.n	8007932 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80077c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80077cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01d      	beq.n	8007810 <USB_ActivateEndpoint+0x654>
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	441a      	add	r2, r3
 80077f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780c:	b29b      	uxth	r3, r3
 800780e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007820:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01d      	beq.n	8007868 <USB_ActivateEndpoint+0x6ac>
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	441a      	add	r2, r3
 8007850:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800785c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007860:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007864:	b29b      	uxth	r3, r3
 8007866:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	78db      	ldrb	r3, [r3, #3]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d024      	beq.n	80078ba <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	b29b      	uxth	r3, r3
 800787e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007886:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800788a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800788e:	f083 0320 	eor.w	r3, r3, #32
 8007892:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	441a      	add	r2, r3
 80078a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80078a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	8013      	strh	r3, [r2, #0]
 80078b8:	e01d      	b.n	80078f6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80078e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	441a      	add	r2, r3
 800791a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800791e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800792a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792e:	b29b      	uxth	r3, r3
 8007930:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007932:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007936:	4618      	mov	r0, r3
 8007938:	3774      	adds	r7, #116	; 0x74
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop

08007944 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007944:	b480      	push	{r7}
 8007946:	b08d      	sub	sp, #52	; 0x34
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	7b1b      	ldrb	r3, [r3, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f040 808e 	bne.w	8007a74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	785b      	ldrb	r3, [r3, #1]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d044      	beq.n	80079ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	81bb      	strh	r3, [r7, #12]
 800796e:	89bb      	ldrh	r3, [r7, #12]
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01b      	beq.n	80079b0 <USB_DeactivateEndpoint+0x6c>
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798e:	817b      	strh	r3, [r7, #10]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	441a      	add	r2, r3
 800799a:	897b      	ldrh	r3, [r7, #10]
 800799c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c6:	813b      	strh	r3, [r7, #8]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	8013      	strh	r3, [r2, #0]
 80079e8:	e192      	b.n	8007d10 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	827b      	strh	r3, [r7, #18]
 80079f8:	8a7b      	ldrh	r3, [r7, #18]
 80079fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d01b      	beq.n	8007a3a <USB_DeactivateEndpoint+0xf6>
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a18:	823b      	strh	r3, [r7, #16]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	441a      	add	r2, r3
 8007a24:	8a3b      	ldrh	r3, [r7, #16]
 8007a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a50:	81fb      	strh	r3, [r7, #14]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	441a      	add	r2, r3
 8007a5c:	89fb      	ldrh	r3, [r7, #14]
 8007a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	8013      	strh	r3, [r2, #0]
 8007a72:	e14d      	b.n	8007d10 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 80a5 	bne.w	8007bc8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	843b      	strh	r3, [r7, #32]
 8007a8c:	8c3b      	ldrh	r3, [r7, #32]
 8007a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01b      	beq.n	8007ace <USB_DeactivateEndpoint+0x18a>
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aac:	83fb      	strh	r3, [r7, #30]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	441a      	add	r2, r3
 8007ab8:	8bfb      	ldrh	r3, [r7, #30]
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	83bb      	strh	r3, [r7, #28]
 8007adc:	8bbb      	ldrh	r3, [r7, #28]
 8007ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01b      	beq.n	8007b1e <USB_DeactivateEndpoint+0x1da>
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afc:	837b      	strh	r3, [r7, #26]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	441a      	add	r2, r3
 8007b08:	8b7b      	ldrh	r3, [r7, #26]
 8007b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b34:	833b      	strh	r3, [r7, #24]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	441a      	add	r2, r3
 8007b40:	8b3b      	ldrh	r3, [r7, #24]
 8007b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6c:	82fb      	strh	r3, [r7, #22]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	441a      	add	r2, r3
 8007b78:	8afb      	ldrh	r3, [r7, #22]
 8007b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba4:	82bb      	strh	r3, [r7, #20]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	441a      	add	r2, r3
 8007bb0:	8abb      	ldrh	r3, [r7, #20]
 8007bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	8013      	strh	r3, [r2, #0]
 8007bc6:	e0a3      	b.n	8007d10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01b      	beq.n	8007c18 <USB_DeactivateEndpoint+0x2d4>
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	441a      	add	r2, r3
 8007c02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007c26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01b      	beq.n	8007c68 <USB_DeactivateEndpoint+0x324>
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c46:	853b      	strh	r3, [r7, #40]	; 0x28
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	441a      	add	r2, r3
 8007c52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	441a      	add	r2, r3
 8007c8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cee:	847b      	strh	r3, [r7, #34]	; 0x22
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	441a      	add	r2, r3
 8007cfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3734      	adds	r7, #52	; 0x34
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b0c2      	sub	sp, #264	; 0x108
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d2c:	6018      	str	r0, [r3, #0]
 8007d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d36:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	785b      	ldrb	r3, [r3, #1]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	f040 86b7 	bne.w	8008ab8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d908      	bls.n	8007d78 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d76:	e007      	b.n	8007d88 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	7b1b      	ldrb	r3, [r3, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d13a      	bne.n	8007e0e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6959      	ldr	r1, [r3, #20]
 8007da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	88da      	ldrh	r2, [r3, #6]
 8007db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007dba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007dbe:	6800      	ldr	r0, [r0, #0]
 8007dc0:	f001 fc98 	bl	80096f4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	4413      	add	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]
 8007de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	00da      	lsls	r2, r3, #3
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	801a      	strh	r2, [r3, #0]
 8007e0a:	f000 be1f 	b.w	8008a4c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	78db      	ldrb	r3, [r3, #3]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	f040 8462 	bne.w	80086e4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6a1a      	ldr	r2, [r3, #32]
 8007e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	f240 83df 	bls.w	80085fc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	441a      	add	r2, r3
 8007e82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6a1a      	ldr	r2, [r3, #32]
 8007ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 81c7 	beq.w	800826e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	633b      	str	r3, [r7, #48]	; 0x30
 8007eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	785b      	ldrb	r3, [r3, #1]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d177      	bne.n	8007fec <USB_EPStartXfer+0x2ce>
 8007efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	4413      	add	r3, r2
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	00da      	lsls	r2, r3, #3
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	4413      	add	r3, r2
 8007f32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f4e:	d921      	bls.n	8007f94 <USB_EPStartXfer+0x276>
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <USB_EPStartXfer+0x252>
 8007f66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	881b      	ldrh	r3, [r3, #0]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	029b      	lsls	r3, r3, #10
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	4313      	orrs	r3, r2
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e050      	b.n	8008036 <USB_EPStartXfer+0x318>
 8007f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <USB_EPStartXfer+0x294>
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	801a      	strh	r2, [r3, #0]
 8007fb0:	e041      	b.n	8008036 <USB_EPStartXfer+0x318>
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb6:	085b      	lsrs	r3, r3, #1
 8007fb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <USB_EPStartXfer+0x2b4>
 8007fc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fcc:	3301      	adds	r3, #1
 8007fce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	029b      	lsls	r3, r3, #10
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	801a      	strh	r2, [r3, #0]
 8007fea:	e024      	b.n	8008036 <USB_EPStartXfer+0x318>
 8007fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d11c      	bne.n	8008036 <USB_EPStartXfer+0x318>
 8007ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800a:	b29b      	uxth	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	4413      	add	r3, r2
 8008012:	633b      	str	r3, [r7, #48]	; 0x30
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	00da      	lsls	r2, r3, #3
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	4413      	add	r3, r2
 8008026:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008030:	b29a      	uxth	r2, r3
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	895b      	ldrh	r3, [r3, #10]
 8008042:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800804a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6959      	ldr	r1, [r3, #20]
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008056:	b29b      	uxth	r3, r3
 8008058:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800805c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008060:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008064:	6800      	ldr	r0, [r0, #0]
 8008066:	f001 fb45 	bl	80096f4 <USB_WritePMA>
            ep->xfer_buff += len;
 800806a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807a:	441a      	add	r2, r3
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6a1a      	ldr	r2, [r3, #32]
 8008094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d90f      	bls.n	80080c4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80080a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6a1a      	ldr	r2, [r3, #32]
 80080b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b4:	1ad2      	subs	r2, r2, r3
 80080b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	621a      	str	r2, [r3, #32]
 80080c2:	e00e      	b.n	80080e2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80080c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80080d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2200      	movs	r2, #0
 80080e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d177      	bne.n	80081e2 <USB_EPStartXfer+0x4c4>
 80080f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800810c:	b29b      	uxth	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	4413      	add	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
 8008116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	00da      	lsls	r2, r3, #3
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	4413      	add	r3, r2
 8008128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008138:	b29a      	uxth	r2, r3
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008142:	2b3e      	cmp	r3, #62	; 0x3e
 8008144:	d921      	bls.n	800818a <USB_EPStartXfer+0x46c>
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008154:	f003 031f 	and.w	r3, r3, #31
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <USB_EPStartXfer+0x448>
 800815c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008160:	3b01      	subs	r3, #1
 8008162:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29a      	uxth	r2, r3
 800816c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008170:	b29b      	uxth	r3, r3
 8008172:	029b      	lsls	r3, r3, #10
 8008174:	b29b      	uxth	r3, r3
 8008176:	4313      	orrs	r3, r2
 8008178:	b29b      	uxth	r3, r3
 800817a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800817e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008182:	b29a      	uxth	r2, r3
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	801a      	strh	r2, [r3, #0]
 8008188:	e056      	b.n	8008238 <USB_EPStartXfer+0x51a>
 800818a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <USB_EPStartXfer+0x48a>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	e047      	b.n	8008238 <USB_EPStartXfer+0x51a>
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ac:	085b      	lsrs	r3, r3, #1
 80081ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <USB_EPStartXfer+0x4aa>
 80081be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081c2:	3301      	adds	r3, #1
 80081c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	029b      	lsls	r3, r3, #10
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	4313      	orrs	r3, r2
 80081da:	b29a      	uxth	r2, r3
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	801a      	strh	r2, [r3, #0]
 80081e0:	e02a      	b.n	8008238 <USB_EPStartXfer+0x51a>
 80081e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d122      	bne.n	8008238 <USB_EPStartXfer+0x51a>
 80081f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	623b      	str	r3, [r7, #32]
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800820c:	b29b      	uxth	r3, r3
 800820e:	461a      	mov	r2, r3
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	4413      	add	r3, r2
 8008214:	623b      	str	r3, [r7, #32]
 8008216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	00da      	lsls	r2, r3, #3
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	4413      	add	r3, r2
 8008228:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800822c:	61fb      	str	r3, [r7, #28]
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008232:	b29a      	uxth	r2, r3
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	891b      	ldrh	r3, [r3, #8]
 8008244:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6959      	ldr	r1, [r3, #20]
 8008254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008258:	b29b      	uxth	r3, r3
 800825a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800825e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008262:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008266:	6800      	ldr	r0, [r0, #0]
 8008268:	f001 fa44 	bl	80096f4 <USB_WritePMA>
 800826c:	e3ee      	b.n	8008a4c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800826e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d177      	bne.n	800836e <USB_EPStartXfer+0x650>
 800827e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	64bb      	str	r3, [r7, #72]	; 0x48
 800828a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008298:	b29b      	uxth	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829e:	4413      	add	r3, r2
 80082a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80082a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	00da      	lsls	r2, r3, #3
 80082b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b2:	4413      	add	r3, r2
 80082b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
 80082ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ce:	2b3e      	cmp	r3, #62	; 0x3e
 80082d0:	d921      	bls.n	8008316 <USB_EPStartXfer+0x5f8>
 80082d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <USB_EPStartXfer+0x5d4>
 80082e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082ec:	3b01      	subs	r3, #1
 80082ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	029b      	lsls	r3, r3, #10
 8008300:	b29b      	uxth	r3, r3
 8008302:	4313      	orrs	r3, r2
 8008304:	b29b      	uxth	r3, r3
 8008306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800830e:	b29a      	uxth	r2, r3
 8008310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008312:	801a      	strh	r2, [r3, #0]
 8008314:	e056      	b.n	80083c4 <USB_EPStartXfer+0x6a6>
 8008316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10a      	bne.n	8008334 <USB_EPStartXfer+0x616>
 800831e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832c:	b29a      	uxth	r2, r3
 800832e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008330:	801a      	strh	r2, [r3, #0]
 8008332:	e047      	b.n	80083c4 <USB_EPStartXfer+0x6a6>
 8008334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008338:	085b      	lsrs	r3, r3, #1
 800833a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d004      	beq.n	8008354 <USB_EPStartXfer+0x636>
 800834a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800834e:	3301      	adds	r3, #1
 8008350:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29a      	uxth	r2, r3
 800835a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800835e:	b29b      	uxth	r3, r3
 8008360:	029b      	lsls	r3, r3, #10
 8008362:	b29b      	uxth	r3, r3
 8008364:	4313      	orrs	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	e02a      	b.n	80083c4 <USB_EPStartXfer+0x6a6>
 800836e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d122      	bne.n	80083c4 <USB_EPStartXfer+0x6a6>
 800837e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	653b      	str	r3, [r7, #80]	; 0x50
 800838a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008398:	b29b      	uxth	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800839e:	4413      	add	r3, r2
 80083a0:	653b      	str	r3, [r7, #80]	; 0x50
 80083a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	00da      	lsls	r2, r3, #3
 80083b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b2:	4413      	add	r3, r2
 80083b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083be:	b29a      	uxth	r2, r3
 80083c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80083c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	891b      	ldrh	r3, [r3, #8]
 80083d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6959      	ldr	r1, [r3, #20]
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083f2:	6800      	ldr	r0, [r0, #0]
 80083f4:	f001 f97e 	bl	80096f4 <USB_WritePMA>
            ep->xfer_buff += len;
 80083f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	695a      	ldr	r2, [r3, #20]
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008408:	441a      	add	r2, r3
 800840a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6a1a      	ldr	r2, [r3, #32]
 8008422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	429a      	cmp	r2, r3
 8008430:	d90f      	bls.n	8008452 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008442:	1ad2      	subs	r2, r2, r3
 8008444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	621a      	str	r2, [r3, #32]
 8008450:	e00e      	b.n	8008470 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2200      	movs	r2, #0
 800846e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	643b      	str	r3, [r7, #64]	; 0x40
 800847c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d177      	bne.n	800857c <USB_EPStartXfer+0x85e>
 800848c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	63bb      	str	r3, [r7, #56]	; 0x38
 8008498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	4413      	add	r3, r2
 80084ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80084b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	00da      	lsls	r2, r3, #3
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	4413      	add	r3, r2
 80084c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084c6:	637b      	str	r3, [r7, #52]	; 0x34
 80084c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d6:	801a      	strh	r2, [r3, #0]
 80084d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084dc:	2b3e      	cmp	r3, #62	; 0x3e
 80084de:	d921      	bls.n	8008524 <USB_EPStartXfer+0x806>
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ee:	f003 031f 	and.w	r3, r3, #31
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <USB_EPStartXfer+0x7e2>
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fa:	3b01      	subs	r3, #1
 80084fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850a:	b29b      	uxth	r3, r3
 800850c:	029b      	lsls	r3, r3, #10
 800850e:	b29b      	uxth	r3, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851c:	b29a      	uxth	r2, r3
 800851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	e050      	b.n	80085c6 <USB_EPStartXfer+0x8a8>
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <USB_EPStartXfer+0x824>
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	b29b      	uxth	r3, r3
 8008532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800853a:	b29a      	uxth	r2, r3
 800853c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e041      	b.n	80085c6 <USB_EPStartXfer+0x8a8>
 8008542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008546:	085b      	lsrs	r3, r3, #1
 8008548:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800854c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <USB_EPStartXfer+0x844>
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855c:	3301      	adds	r3, #1
 800855e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29a      	uxth	r2, r3
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856c:	b29b      	uxth	r3, r3
 800856e:	029b      	lsls	r3, r3, #10
 8008570:	b29b      	uxth	r3, r3
 8008572:	4313      	orrs	r3, r2
 8008574:	b29a      	uxth	r2, r3
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	801a      	strh	r2, [r3, #0]
 800857a:	e024      	b.n	80085c6 <USB_EPStartXfer+0x8a8>
 800857c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d11c      	bne.n	80085c6 <USB_EPStartXfer+0x8a8>
 800858c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a0:	4413      	add	r3, r2
 80085a2:	643b      	str	r3, [r7, #64]	; 0x40
 80085a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	00da      	lsls	r2, r3, #3
 80085b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b4:	4413      	add	r3, r2
 80085b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	895b      	ldrh	r3, [r3, #10]
 80085d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6959      	ldr	r1, [r3, #20]
 80085e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80085f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80085f4:	6800      	ldr	r0, [r0, #0]
 80085f6:	f001 f87d 	bl	80096f4 <USB_WritePMA>
 80085fa:	e227      	b.n	8008a4c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80085fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800860c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	b29b      	uxth	r3, r3
 800862a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800862e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008632:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	441a      	add	r2, r3
 8008650:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008664:	b29b      	uxth	r3, r3
 8008666:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008682:	b29b      	uxth	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008688:	4413      	add	r3, r2
 800868a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800868c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	00da      	lsls	r2, r3, #3
 800869a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800869c:	4413      	add	r3, r2
 800869e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80086ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	891b      	ldrh	r3, [r3, #8]
 80086ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6959      	ldr	r1, [r3, #20]
 80086ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086dc:	6800      	ldr	r0, [r0, #0]
 80086de:	f001 f809 	bl	80096f4 <USB_WritePMA>
 80086e2:	e1b3      	b.n	8008a4c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80086e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6a1a      	ldr	r2, [r3, #32]
 80086f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f4:	1ad2      	subs	r2, r2, r3
 80086f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80c6 	beq.w	80088b6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800872a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	673b      	str	r3, [r7, #112]	; 0x70
 8008736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d177      	bne.n	8008836 <USB_EPStartXfer+0xb18>
 8008746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	66bb      	str	r3, [r7, #104]	; 0x68
 8008752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008760:	b29b      	uxth	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008766:	4413      	add	r3, r2
 8008768:	66bb      	str	r3, [r7, #104]	; 0x68
 800876a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	00da      	lsls	r2, r3, #3
 8008778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800877a:	4413      	add	r3, r2
 800877c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008780:	667b      	str	r3, [r7, #100]	; 0x64
 8008782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800878c:	b29a      	uxth	r2, r3
 800878e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008790:	801a      	strh	r2, [r3, #0]
 8008792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008796:	2b3e      	cmp	r3, #62	; 0x3e
 8008798:	d921      	bls.n	80087de <USB_EPStartXfer+0xac0>
 800879a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80087a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a8:	f003 031f 	and.w	r3, r3, #31
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <USB_EPStartXfer+0xa9c>
 80087b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80087b4:	3b01      	subs	r3, #1
 80087b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80087ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	029b      	lsls	r3, r3, #10
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4313      	orrs	r3, r2
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	e050      	b.n	8008880 <USB_EPStartXfer+0xb62>
 80087de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <USB_EPStartXfer+0xade>
 80087e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	e041      	b.n	8008880 <USB_EPStartXfer+0xb62>
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008800:	085b      	lsrs	r3, r3, #1
 8008802:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <USB_EPStartXfer+0xafe>
 8008812:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008816:	3301      	adds	r3, #1
 8008818:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800881c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29a      	uxth	r2, r3
 8008822:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008826:	b29b      	uxth	r3, r3
 8008828:	029b      	lsls	r3, r3, #10
 800882a:	b29b      	uxth	r3, r3
 800882c:	4313      	orrs	r3, r2
 800882e:	b29a      	uxth	r2, r3
 8008830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008832:	801a      	strh	r2, [r3, #0]
 8008834:	e024      	b.n	8008880 <USB_EPStartXfer+0xb62>
 8008836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d11c      	bne.n	8008880 <USB_EPStartXfer+0xb62>
 8008846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008854:	b29b      	uxth	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800885a:	4413      	add	r3, r2
 800885c:	673b      	str	r3, [r7, #112]	; 0x70
 800885e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	00da      	lsls	r2, r3, #3
 800886c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800886e:	4413      	add	r3, r2
 8008870:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008874:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887a:	b29a      	uxth	r2, r3
 800887c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800887e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6959      	ldr	r1, [r3, #20]
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088ae:	6800      	ldr	r0, [r0, #0]
 80088b0:	f000 ff20 	bl	80096f4 <USB_WritePMA>
 80088b4:	e0ca      	b.n	8008a4c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d177      	bne.n	80089b6 <USB_EPStartXfer+0xc98>
 80088c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	461a      	mov	r2, r3
 80088e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088e6:	4413      	add	r3, r2
 80088e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	00da      	lsls	r2, r3, #3
 80088f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088fa:	4413      	add	r3, r2
 80088fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008900:	67bb      	str	r3, [r7, #120]	; 0x78
 8008902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800890c:	b29a      	uxth	r2, r3
 800890e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008910:	801a      	strh	r2, [r3, #0]
 8008912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008916:	2b3e      	cmp	r3, #62	; 0x3e
 8008918:	d921      	bls.n	800895e <USB_EPStartXfer+0xc40>
 800891a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800891e:	095b      	lsrs	r3, r3, #5
 8008920:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008928:	f003 031f 	and.w	r3, r3, #31
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <USB_EPStartXfer+0xc1c>
 8008930:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008934:	3b01      	subs	r3, #1
 8008936:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800893a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008944:	b29b      	uxth	r3, r3
 8008946:	029b      	lsls	r3, r3, #10
 8008948:	b29b      	uxth	r3, r3
 800894a:	4313      	orrs	r3, r2
 800894c:	b29b      	uxth	r3, r3
 800894e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008956:	b29a      	uxth	r2, r3
 8008958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800895a:	801a      	strh	r2, [r3, #0]
 800895c:	e05c      	b.n	8008a18 <USB_EPStartXfer+0xcfa>
 800895e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <USB_EPStartXfer+0xc5e>
 8008966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29b      	uxth	r3, r3
 800896c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008974:	b29a      	uxth	r2, r3
 8008976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	e04d      	b.n	8008a18 <USB_EPStartXfer+0xcfa>
 800897c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <USB_EPStartXfer+0xc7e>
 8008992:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008996:	3301      	adds	r3, #1
 8008998:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800899c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	029b      	lsls	r3, r3, #10
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089b2:	801a      	strh	r2, [r3, #0]
 80089b4:	e030      	b.n	8008a18 <USB_EPStartXfer+0xcfa>
 80089b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	785b      	ldrb	r3, [r3, #1]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d128      	bne.n	8008a18 <USB_EPStartXfer+0xcfa>
 80089c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ea:	4413      	add	r3, r2
 80089ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	00da      	lsls	r2, r3, #3
 80089fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a02:	4413      	add	r3, r2
 8008a04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	891b      	ldrh	r3, [r3, #8]
 8008a24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6959      	ldr	r1, [r3, #20]
 8008a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a46:	6800      	ldr	r0, [r0, #0]
 8008a48:	f000 fe54 	bl	80096f4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a72:	817b      	strh	r3, [r7, #10]
 8008a74:	897b      	ldrh	r3, [r7, #10]
 8008a76:	f083 0310 	eor.w	r3, r3, #16
 8008a7a:	817b      	strh	r3, [r7, #10]
 8008a7c:	897b      	ldrh	r3, [r7, #10]
 8008a7e:	f083 0320 	eor.w	r3, r3, #32
 8008a82:	817b      	strh	r3, [r7, #10]
 8008a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	441a      	add	r2, r3
 8008a9e:	897b      	ldrh	r3, [r7, #10]
 8008aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	8013      	strh	r3, [r2, #0]
 8008ab4:	f000 bcde 	b.w	8009474 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	7b1b      	ldrb	r3, [r3, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f040 80bb 	bne.w	8008c40 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d917      	bls.n	8008b16 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	619a      	str	r2, [r3, #24]
 8008b14:	e00e      	b.n	8008b34 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2200      	movs	r2, #0
 8008b32:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b58:	4413      	add	r3, r2
 8008b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	00da      	lsls	r2, r3, #3
 8008b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b70:	4413      	add	r3, r2
 8008b72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b92:	2b3e      	cmp	r3, #62	; 0x3e
 8008b94:	d924      	bls.n	8008be0 <USB_EPStartXfer+0xec2>
 8008b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d104      	bne.n	8008bb6 <USB_EPStartXfer+0xe98>
 8008bac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	029b      	lsls	r3, r3, #10
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	f000 bc10 	b.w	8009400 <USB_EPStartXfer+0x16e2>
 8008be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10c      	bne.n	8008c02 <USB_EPStartXfer+0xee4>
 8008be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bfe:	801a      	strh	r2, [r3, #0]
 8008c00:	e3fe      	b.n	8009400 <USB_EPStartXfer+0x16e2>
 8008c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c06:	085b      	lsrs	r3, r3, #1
 8008c08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d004      	beq.n	8008c22 <USB_EPStartXfer+0xf04>
 8008c18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	029b      	lsls	r3, r3, #10
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	4313      	orrs	r3, r2
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	e3df      	b.n	8009400 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	78db      	ldrb	r3, [r3, #3]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	f040 8218 	bne.w	8009082 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f040 809d 	bne.w	8008d9e <USB_EPStartXfer+0x1080>
 8008c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	461a      	mov	r2, r3
 8008c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c88:	4413      	add	r3, r2
 8008c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	00da      	lsls	r2, r3, #3
 8008c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cbc:	801a      	strh	r2, [r3, #0]
 8008cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b3e      	cmp	r3, #62	; 0x3e
 8008ccc:	d92b      	bls.n	8008d26 <USB_EPStartXfer+0x1008>
 8008cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f003 031f 	and.w	r3, r3, #31
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <USB_EPStartXfer+0xfe0>
 8008cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	029b      	lsls	r3, r3, #10
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	4313      	orrs	r3, r2
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d22:	801a      	strh	r2, [r3, #0]
 8008d24:	e070      	b.n	8008e08 <USB_EPStartXfer+0x10ea>
 8008d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10c      	bne.n	8008d50 <USB_EPStartXfer+0x1032>
 8008d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d4c:	801a      	strh	r2, [r3, #0]
 8008d4e:	e05b      	b.n	8008e08 <USB_EPStartXfer+0x10ea>
 8008d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	085b      	lsrs	r3, r3, #1
 8008d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <USB_EPStartXfer+0x1062>
 8008d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	029b      	lsls	r3, r3, #10
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	4313      	orrs	r3, r2
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d9a:	801a      	strh	r2, [r3, #0]
 8008d9c:	e034      	b.n	8008e08 <USB_EPStartXfer+0x10ea>
 8008d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d12c      	bne.n	8008e08 <USB_EPStartXfer+0x10ea>
 8008dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	00da      	lsls	r2, r3, #3
 8008de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dea:	4413      	add	r3, r2
 8008dec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f040 809d 	bne.w	8008f62 <USB_EPStartXfer+0x1244>
 8008e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	00da      	lsls	r2, r3, #3
 8008e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e64:	4413      	add	r3, r2
 8008e66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e80:	801a      	strh	r2, [r3, #0]
 8008e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8008e90:	d92b      	bls.n	8008eea <USB_EPStartXfer+0x11cc>
 8008e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	095b      	lsrs	r3, r3, #5
 8008ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f003 031f 	and.w	r3, r3, #31
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d104      	bne.n	8008ec2 <USB_EPStartXfer+0x11a4>
 8008eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	029b      	lsls	r3, r3, #10
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ee6:	801a      	strh	r2, [r3, #0]
 8008ee8:	e069      	b.n	8008fbe <USB_EPStartXfer+0x12a0>
 8008eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10c      	bne.n	8008f14 <USB_EPStartXfer+0x11f6>
 8008efa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	e054      	b.n	8008fbe <USB_EPStartXfer+0x12a0>
 8008f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	085b      	lsrs	r3, r3, #1
 8008f22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d004      	beq.n	8008f44 <USB_EPStartXfer+0x1226>
 8008f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f3e:	3301      	adds	r3, #1
 8008f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	029b      	lsls	r3, r3, #10
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f5e:	801a      	strh	r2, [r3, #0]
 8008f60:	e02d      	b.n	8008fbe <USB_EPStartXfer+0x12a0>
 8008f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d125      	bne.n	8008fbe <USB_EPStartXfer+0x12a0>
 8008f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f88:	4413      	add	r3, r2
 8008f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	00da      	lsls	r2, r3, #3
 8008f9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fbc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8218 	beq.w	8009400 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ff0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <USB_EPStartXfer+0x12ea>
 8008ffc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10d      	bne.n	8009024 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009008:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800900c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009010:	2b00      	cmp	r3, #0
 8009012:	f040 81f5 	bne.w	8009400 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009016:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800901a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	f040 81ee 	bne.w	8009400 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800904e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	441a      	add	r2, r3
 8009068:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800906c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800907c:	b29b      	uxth	r3, r3
 800907e:	8013      	strh	r3, [r2, #0]
 8009080:	e1be      	b.n	8009400 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	78db      	ldrb	r3, [r3, #3]
 800908e:	2b01      	cmp	r3, #1
 8009090:	f040 81b4 	bne.w	80093fc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	699a      	ldr	r2, [r3, #24]
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d917      	bls.n	80090e0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80090b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80090c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d0:	1ad2      	subs	r2, r2, r3
 80090d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	619a      	str	r2, [r3, #24]
 80090de:	e00e      	b.n	80090fe <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80090e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80090f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2200      	movs	r2, #0
 80090fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80090fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f040 8085 	bne.w	800921a <USB_EPStartXfer+0x14fc>
 8009110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800911e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800912c:	b29b      	uxth	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009134:	4413      	add	r3, r2
 8009136:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800913a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	00da      	lsls	r2, r3, #3
 8009148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800914c:	4413      	add	r3, r2
 800914e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009162:	b29a      	uxth	r2, r3
 8009164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009168:	801a      	strh	r2, [r3, #0]
 800916a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800916e:	2b3e      	cmp	r3, #62	; 0x3e
 8009170:	d923      	bls.n	80091ba <USB_EPStartXfer+0x149c>
 8009172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009176:	095b      	lsrs	r3, r3, #5
 8009178:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009180:	f003 031f 	and.w	r3, r3, #31
 8009184:	2b00      	cmp	r3, #0
 8009186:	d104      	bne.n	8009192 <USB_EPStartXfer+0x1474>
 8009188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800918c:	3b01      	subs	r3, #1
 800918e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	b29a      	uxth	r2, r3
 800919a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800919e:	b29b      	uxth	r3, r3
 80091a0:	029b      	lsls	r3, r3, #10
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	4313      	orrs	r3, r2
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091b6:	801a      	strh	r2, [r3, #0]
 80091b8:	e060      	b.n	800927c <USB_EPStartXfer+0x155e>
 80091ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10c      	bne.n	80091dc <USB_EPStartXfer+0x14be>
 80091c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091d8:	801a      	strh	r2, [r3, #0]
 80091da:	e04f      	b.n	800927c <USB_EPStartXfer+0x155e>
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e0:	085b      	lsrs	r3, r3, #1
 80091e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <USB_EPStartXfer+0x14de>
 80091f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091f6:	3301      	adds	r3, #1
 80091f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	b29a      	uxth	r2, r3
 8009204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009208:	b29b      	uxth	r3, r3
 800920a:	029b      	lsls	r3, r3, #10
 800920c:	b29b      	uxth	r3, r3
 800920e:	4313      	orrs	r3, r2
 8009210:	b29a      	uxth	r2, r3
 8009212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009216:	801a      	strh	r2, [r3, #0]
 8009218:	e030      	b.n	800927c <USB_EPStartXfer+0x155e>
 800921a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d128      	bne.n	800927c <USB_EPStartXfer+0x155e>
 800922a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009246:	b29b      	uxth	r3, r3
 8009248:	461a      	mov	r2, r3
 800924a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800924e:	4413      	add	r3, r2
 8009250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	00da      	lsls	r2, r3, #3
 8009262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009266:	4413      	add	r3, r2
 8009268:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800926c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009274:	b29a      	uxth	r2, r3
 8009276:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800927a:	801a      	strh	r2, [r3, #0]
 800927c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800928a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800928e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	785b      	ldrb	r3, [r3, #1]
 8009296:	2b00      	cmp	r3, #0
 8009298:	f040 8085 	bne.w	80093a6 <USB_EPStartXfer+0x1688>
 800929c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	461a      	mov	r2, r3
 80092bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092c0:	4413      	add	r3, r2
 80092c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	00da      	lsls	r2, r3, #3
 80092d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092d8:	4413      	add	r3, r2
 80092da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092f4:	801a      	strh	r2, [r3, #0]
 80092f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092fa:	2b3e      	cmp	r3, #62	; 0x3e
 80092fc:	d923      	bls.n	8009346 <USB_EPStartXfer+0x1628>
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930c:	f003 031f 	and.w	r3, r3, #31
 8009310:	2b00      	cmp	r3, #0
 8009312:	d104      	bne.n	800931e <USB_EPStartXfer+0x1600>
 8009314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009318:	3b01      	subs	r3, #1
 800931a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800931e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29a      	uxth	r2, r3
 8009326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800932a:	b29b      	uxth	r3, r3
 800932c:	029b      	lsls	r3, r3, #10
 800932e:	b29b      	uxth	r3, r3
 8009330:	4313      	orrs	r3, r2
 8009332:	b29b      	uxth	r3, r3
 8009334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800933c:	b29a      	uxth	r2, r3
 800933e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009342:	801a      	strh	r2, [r3, #0]
 8009344:	e05c      	b.n	8009400 <USB_EPStartXfer+0x16e2>
 8009346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10c      	bne.n	8009368 <USB_EPStartXfer+0x164a>
 800934e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800935a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800935e:	b29a      	uxth	r2, r3
 8009360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	e04b      	b.n	8009400 <USB_EPStartXfer+0x16e2>
 8009368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800936c:	085b      	lsrs	r3, r3, #1
 800936e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d004      	beq.n	8009388 <USB_EPStartXfer+0x166a>
 800937e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009382:	3301      	adds	r3, #1
 8009384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	b29a      	uxth	r2, r3
 8009390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009394:	b29b      	uxth	r3, r3
 8009396:	029b      	lsls	r3, r3, #10
 8009398:	b29b      	uxth	r3, r3
 800939a:	4313      	orrs	r3, r2
 800939c:	b29a      	uxth	r2, r3
 800939e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093a2:	801a      	strh	r2, [r3, #0]
 80093a4:	e02c      	b.n	8009400 <USB_EPStartXfer+0x16e2>
 80093a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	785b      	ldrb	r3, [r3, #1]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d124      	bne.n	8009400 <USB_EPStartXfer+0x16e2>
 80093b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	461a      	mov	r2, r3
 80093c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093cc:	4413      	add	r3, r2
 80093ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	00da      	lsls	r2, r3, #3
 80093e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093e4:	4413      	add	r3, r2
 80093e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093f8:	801a      	strh	r2, [r3, #0]
 80093fa:	e001      	b.n	8009400 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e03a      	b.n	8009476 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	b29b      	uxth	r3, r3
 800941e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009426:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800942a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800942e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009432:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009436:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800943a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800943e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	441a      	add	r2, r3
 800945c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009470:	b29b      	uxth	r3, r3
 8009472:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d020      	beq.n	80094d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a8:	81bb      	strh	r3, [r7, #12]
 80094aa:	89bb      	ldrh	r3, [r7, #12]
 80094ac:	f083 0310 	eor.w	r3, r3, #16
 80094b0:	81bb      	strh	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	441a      	add	r2, r3
 80094bc:	89bb      	ldrh	r3, [r7, #12]
 80094be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	8013      	strh	r3, [r2, #0]
 80094d2:	e01f      	b.n	8009514 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ea:	81fb      	strh	r3, [r7, #14]
 80094ec:	89fb      	ldrh	r3, [r7, #14]
 80094ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094f2:	81fb      	strh	r3, [r7, #14]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	441a      	add	r2, r3
 80094fe:	89fb      	ldrh	r3, [r7, #14]
 8009500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800950c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009510:	b29b      	uxth	r3, r3
 8009512:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009522:	b480      	push	{r7}
 8009524:	b087      	sub	sp, #28
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	7b1b      	ldrb	r3, [r3, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	f040 809d 	bne.w	8009670 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d04c      	beq.n	80095d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	823b      	strh	r3, [r7, #16]
 800954c:	8a3b      	ldrh	r3, [r7, #16]
 800954e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01b      	beq.n	800958e <USB_EPClearStall+0x6c>
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956c:	81fb      	strh	r3, [r7, #14]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	441a      	add	r2, r3
 8009578:	89fb      	ldrh	r3, [r7, #14]
 800957a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800957e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800958a:	b29b      	uxth	r3, r3
 800958c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	78db      	ldrb	r3, [r3, #3]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d06c      	beq.n	8009670 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ac:	81bb      	strh	r3, [r7, #12]
 80095ae:	89bb      	ldrh	r3, [r7, #12]
 80095b0:	f083 0320 	eor.w	r3, r3, #32
 80095b4:	81bb      	strh	r3, [r7, #12]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	441a      	add	r2, r3
 80095c0:	89bb      	ldrh	r3, [r7, #12]
 80095c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	8013      	strh	r3, [r2, #0]
 80095d6:	e04b      	b.n	8009670 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	82fb      	strh	r3, [r7, #22]
 80095e6:	8afb      	ldrh	r3, [r7, #22]
 80095e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01b      	beq.n	8009628 <USB_EPClearStall+0x106>
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	82bb      	strh	r3, [r7, #20]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	441a      	add	r2, r3
 8009612:	8abb      	ldrh	r3, [r7, #20]
 8009614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800961c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009624:	b29b      	uxth	r3, r3
 8009626:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b29b      	uxth	r3, r3
 8009636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800963a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800963e:	827b      	strh	r3, [r7, #18]
 8009640:	8a7b      	ldrh	r3, [r7, #18]
 8009642:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009646:	827b      	strh	r3, [r7, #18]
 8009648:	8a7b      	ldrh	r3, [r7, #18]
 800964a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800964e:	827b      	strh	r3, [r7, #18]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	441a      	add	r2, r3
 800965a:	8a7b      	ldrh	r3, [r7, #18]
 800965c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800966c:	b29b      	uxth	r3, r3
 800966e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800968a:	78fb      	ldrb	r3, [r7, #3]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d103      	bne.n	8009698 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2280      	movs	r2, #128	; 0x80
 8009694:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80096e6:	68fb      	ldr	r3, [r7, #12]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b08b      	sub	sp, #44	; 0x2c
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4611      	mov	r1, r2
 8009700:	461a      	mov	r2, r3
 8009702:	460b      	mov	r3, r1
 8009704:	80fb      	strh	r3, [r7, #6]
 8009706:	4613      	mov	r3, r2
 8009708:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800970a:	88bb      	ldrh	r3, [r7, #4]
 800970c:	3301      	adds	r3, #1
 800970e:	085b      	lsrs	r3, r3, #1
 8009710:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800971a:	88fa      	ldrh	r2, [r7, #6]
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009724:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
 800972a:	e01b      	b.n	8009764 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	3301      	adds	r3, #1
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	021b      	lsls	r3, r3, #8
 800973a:	b21a      	sxth	r2, r3
 800973c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009740:	4313      	orrs	r3, r2
 8009742:	b21b      	sxth	r3, r3
 8009744:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	8a7a      	ldrh	r2, [r7, #18]
 800974a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	3302      	adds	r3, #2
 8009750:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	3301      	adds	r3, #1
 8009756:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	3301      	adds	r3, #1
 800975c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	3b01      	subs	r3, #1
 8009762:	627b      	str	r3, [r7, #36]	; 0x24
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e0      	bne.n	800972c <USB_WritePMA+0x38>
  }
}
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	372c      	adds	r7, #44	; 0x2c
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009778:	b480      	push	{r7}
 800977a:	b08b      	sub	sp, #44	; 0x2c
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	4611      	mov	r1, r2
 8009784:	461a      	mov	r2, r3
 8009786:	460b      	mov	r3, r1
 8009788:	80fb      	strh	r3, [r7, #6]
 800978a:	4613      	mov	r3, r2
 800978c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800978e:	88bb      	ldrh	r3, [r7, #4]
 8009790:	085b      	lsrs	r3, r3, #1
 8009792:	b29b      	uxth	r3, r3
 8009794:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800979e:	88fa      	ldrh	r2, [r7, #6]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	627b      	str	r3, [r7, #36]	; 0x24
 80097ae:	e018      	b.n	80097e2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	3302      	adds	r3, #2
 80097bc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	3301      	adds	r3, #1
 80097ca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	0a1b      	lsrs	r3, r3, #8
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	3301      	adds	r3, #1
 80097da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	3b01      	subs	r3, #1
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e3      	bne.n	80097b0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80097e8:	88bb      	ldrh	r3, [r7, #4]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d007      	beq.n	8009804 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	701a      	strb	r2, [r3, #0]
  }
}
 8009804:	bf00      	nop
 8009806:	372c      	adds	r7, #44	; 0x2c
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800981c:	2010      	movs	r0, #16
 800981e:	f001 fe9b 	bl	800b558 <USBD_static_malloc>
 8009822:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009832:	2302      	movs	r3, #2
 8009834:	e01b      	b.n	800986e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	7c1b      	ldrb	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d103      	bne.n	800984e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2207      	movs	r2, #7
 800984a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800984c:	e002      	b.n	8009854 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009854:	2304      	movs	r3, #4
 8009856:	2203      	movs	r2, #3
 8009858:	2181      	movs	r1, #129	; 0x81
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 fd35 	bl	800b2ca <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8009882:	2181      	movs	r1, #129	; 0x81
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f001 fd46 	bl	800b316 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800989c:	2b00      	cmp	r3, #0
 800989e:	d009      	beq.n	80098b4 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 fe64 	bl	800b574 <USBD_static_free>
    pdev->pClassData = NULL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098d0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e0e8      	b.n	8009ab6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d046      	beq.n	800997e <USBD_HID_Setup+0xbe>
 80098f0:	2b20      	cmp	r3, #32
 80098f2:	f040 80d8 	bne.w	8009aa6 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	785b      	ldrb	r3, [r3, #1]
 80098fa:	3b02      	subs	r3, #2
 80098fc:	2b09      	cmp	r3, #9
 80098fe:	d836      	bhi.n	800996e <USBD_HID_Setup+0xae>
 8009900:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <USBD_HID_Setup+0x48>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	0800995f 	.word	0x0800995f
 800990c:	0800993f 	.word	0x0800993f
 8009910:	0800996f 	.word	0x0800996f
 8009914:	0800996f 	.word	0x0800996f
 8009918:	0800996f 	.word	0x0800996f
 800991c:	0800996f 	.word	0x0800996f
 8009920:	0800996f 	.word	0x0800996f
 8009924:	0800996f 	.word	0x0800996f
 8009928:	0800994d 	.word	0x0800994d
 800992c:	08009931 	.word	0x08009931
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	885b      	ldrh	r3, [r3, #2]
 8009934:	b2db      	uxtb	r3, r3
 8009936:	461a      	mov	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	601a      	str	r2, [r3, #0]
          break;
 800993c:	e01e      	b.n	800997c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2201      	movs	r2, #1
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 f9d8 	bl	800acfa <USBD_CtlSendData>
          break;
 800994a:	e017      	b.n	800997c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	885b      	ldrh	r3, [r3, #2]
 8009950:	0a1b      	lsrs	r3, r3, #8
 8009952:	b29b      	uxth	r3, r3
 8009954:	b2db      	uxtb	r3, r3
 8009956:	461a      	mov	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	605a      	str	r2, [r3, #4]
          break;
 800995c:	e00e      	b.n	800997c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3304      	adds	r3, #4
 8009962:	2201      	movs	r2, #1
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 f9c7 	bl	800acfa <USBD_CtlSendData>
          break;
 800996c:	e006      	b.n	800997c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 f951 	bl	800ac18 <USBD_CtlError>
          ret = USBD_FAIL;
 8009976:	2303      	movs	r3, #3
 8009978:	75fb      	strb	r3, [r7, #23]
          break;
 800997a:	bf00      	nop
      }
      break;
 800997c:	e09a      	b.n	8009ab4 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	785b      	ldrb	r3, [r3, #1]
 8009982:	2b0b      	cmp	r3, #11
 8009984:	f200 8086 	bhi.w	8009a94 <USBD_HID_Setup+0x1d4>
 8009988:	a201      	add	r2, pc, #4	; (adr r2, 8009990 <USBD_HID_Setup+0xd0>)
 800998a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998e:	bf00      	nop
 8009990:	080099c1 	.word	0x080099c1
 8009994:	08009aa3 	.word	0x08009aa3
 8009998:	08009a95 	.word	0x08009a95
 800999c:	08009a95 	.word	0x08009a95
 80099a0:	08009a95 	.word	0x08009a95
 80099a4:	08009a95 	.word	0x08009a95
 80099a8:	080099eb 	.word	0x080099eb
 80099ac:	08009a95 	.word	0x08009a95
 80099b0:	08009a95 	.word	0x08009a95
 80099b4:	08009a95 	.word	0x08009a95
 80099b8:	08009a43 	.word	0x08009a43
 80099bc:	08009a6d 	.word	0x08009a6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d107      	bne.n	80099dc <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099cc:	f107 030a 	add.w	r3, r7, #10
 80099d0:	2202      	movs	r2, #2
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 f990 	bl	800acfa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099da:	e063      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80099dc:	6839      	ldr	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 f91a 	bl	800ac18 <USBD_CtlError>
            ret = USBD_FAIL;
 80099e4:	2303      	movs	r3, #3
 80099e6:	75fb      	strb	r3, [r7, #23]
          break;
 80099e8:	e05c      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	885b      	ldrh	r3, [r3, #2]
 80099ee:	0a1b      	lsrs	r3, r3, #8
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b22      	cmp	r3, #34	; 0x22
 80099f4:	d108      	bne.n	8009a08 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88db      	ldrh	r3, [r3, #6]
 80099fa:	2b4a      	cmp	r3, #74	; 0x4a
 80099fc:	bf28      	it	cs
 80099fe:	234a      	movcs	r3, #74	; 0x4a
 8009a00:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009a02:	4b2f      	ldr	r3, [pc, #188]	; (8009ac0 <USBD_HID_Setup+0x200>)
 8009a04:	613b      	str	r3, [r7, #16]
 8009a06:	e015      	b.n	8009a34 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	885b      	ldrh	r3, [r3, #2]
 8009a0c:	0a1b      	lsrs	r3, r3, #8
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	2b21      	cmp	r3, #33	; 0x21
 8009a12:	d108      	bne.n	8009a26 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8009a14:	4b2b      	ldr	r3, [pc, #172]	; (8009ac4 <USBD_HID_Setup+0x204>)
 8009a16:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	88db      	ldrh	r3, [r3, #6]
 8009a1c:	2b09      	cmp	r3, #9
 8009a1e:	bf28      	it	cs
 8009a20:	2309      	movcs	r3, #9
 8009a22:	82bb      	strh	r3, [r7, #20]
 8009a24:	e006      	b.n	8009a34 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 f8f5 	bl	800ac18 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	75fb      	strb	r3, [r7, #23]
            break;
 8009a32:	e037      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a34:	8abb      	ldrh	r3, [r7, #20]
 8009a36:	461a      	mov	r2, r3
 8009a38:	6939      	ldr	r1, [r7, #16]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f001 f95d 	bl	800acfa <USBD_CtlSendData>
          break;
 8009a40:	e030      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d107      	bne.n	8009a5e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3308      	adds	r3, #8
 8009a52:	2201      	movs	r2, #1
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 f94f 	bl	800acfa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a5c:	e022      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 f8d9 	bl	800ac18 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a66:	2303      	movs	r3, #3
 8009a68:	75fb      	strb	r3, [r7, #23]
          break;
 8009a6a:	e01b      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d106      	bne.n	8009a86 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	885b      	ldrh	r3, [r3, #2]
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	461a      	mov	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a84:	e00e      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 f8c5 	bl	800ac18 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	75fb      	strb	r3, [r7, #23]
          break;
 8009a92:	e007      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 f8be 	bl	800ac18 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	75fb      	strb	r3, [r7, #23]
          break;
 8009aa0:	e000      	b.n	8009aa4 <USBD_HID_Setup+0x1e4>
          break;
 8009aa2:	bf00      	nop
      }
      break;
 8009aa4:	e006      	b.n	8009ab4 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 f8b5 	bl	800ac18 <USBD_CtlError>
      ret = USBD_FAIL;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab2:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200000c8 	.word	0x200000c8
 8009ac4:	200000b0 	.word	0x200000b0

08009ac8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009adc:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e013      	b.n	8009b10 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d10c      	bne.n	8009b0e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	7b1b      	ldrb	r3, [r3, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d108      	bne.n	8009b0e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2201      	movs	r2, #1
 8009b00:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8009b02:	88fb      	ldrh	r3, [r7, #6]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	2181      	movs	r1, #129	; 0x81
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f001 fcac 	bl	800b466 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2222      	movs	r2, #34	; 0x22
 8009b24:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8009b26:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	20000044 	.word	0x20000044

08009b38 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2222      	movs	r2, #34	; 0x22
 8009b44:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8009b46:	4b03      	ldr	r3, [pc, #12]	; (8009b54 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	20000068 	.word	0x20000068

08009b58 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2222      	movs	r2, #34	; 0x22
 8009b64:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8009b66:	4b03      	ldr	r3, [pc, #12]	; (8009b74 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	2000008c 	.word	0x2000008c

08009b78 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	220a      	movs	r2, #10
 8009ba8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009baa:	4b03      	ldr	r3, [pc, #12]	; (8009bb8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	200000bc 	.word	0x200000bc

08009bbc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d101      	bne.n	8009bd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e01f      	b.n	8009c14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	79fa      	ldrb	r2, [r7, #7]
 8009c06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f001 faf5 	bl	800b1f8 <USBD_LL_Init>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e016      	b.n	8009c62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	f107 020e 	add.w	r2, r7, #14
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
 8009c58:	4602      	mov	r2, r0
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f001 fb0e 	bl	800b294 <USBD_LL_Start>
 8009c78:	4603      	mov	r3, r0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	4798      	blx	r3
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d007      	beq.n	8009cf6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	78fa      	ldrb	r2, [r7, #3]
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
  }

  return USBD_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 ff46 	bl	800aba4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009d26:	461a      	mov	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d34:	f003 031f 	and.w	r3, r3, #31
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d01a      	beq.n	8009d72 <USBD_LL_SetupStage+0x72>
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d822      	bhi.n	8009d86 <USBD_LL_SetupStage+0x86>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <USBD_LL_SetupStage+0x4a>
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d00a      	beq.n	8009d5e <USBD_LL_SetupStage+0x5e>
 8009d48:	e01d      	b.n	8009d86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f9ee 	bl	800a134 <USBD_StdDevReq>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d5c:	e020      	b.n	8009da0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fa52 	bl	800a210 <USBD_StdItfReq>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d70:	e016      	b.n	8009da0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fa91 	bl	800a2a2 <USBD_StdEPReq>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]
      break;
 8009d84:	e00c      	b.n	8009da0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 fadd 	bl	800b354 <USBD_LL_StallEP>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9e:	bf00      	nop
  }

  return ret;
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b086      	sub	sp, #24
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	60f8      	str	r0, [r7, #12]
 8009db2:	460b      	mov	r3, r1
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d138      	bne.n	8009e30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009dc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d14a      	bne.n	8009e66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d913      	bls.n	8009e04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	1ad2      	subs	r2, r2, r3
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	68da      	ldr	r2, [r3, #12]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	4293      	cmp	r3, r2
 8009df4:	bf28      	it	cs
 8009df6:	4613      	movcs	r3, r2
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6879      	ldr	r1, [r7, #4]
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 ffa8 	bl	800ad52 <USBD_CtlContinueRx>
 8009e02:	e030      	b.n	8009e66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d10b      	bne.n	8009e28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 ffa3 	bl	800ad74 <USBD_CtlSendStatus>
 8009e2e:	e01a      	b.n	8009e66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d114      	bne.n	8009e66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00e      	beq.n	8009e66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	7afa      	ldrb	r2, [r7, #11]
 8009e52:	4611      	mov	r1, r2
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	4798      	blx	r3
 8009e58:	4603      	mov	r3, r0
 8009e5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	e000      	b.n	8009e68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009e7e:	7afb      	ldrb	r3, [r7, #11]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d16b      	bne.n	8009f5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	3314      	adds	r3, #20
 8009e88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d156      	bne.n	8009f42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d914      	bls.n	8009eca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	1ad2      	subs	r2, r2, r3
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 ff3a 	bl	800ad30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f001 faf0 	bl	800b4a8 <USBD_LL_PrepareReceive>
 8009ec8:	e03b      	b.n	8009f42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	68da      	ldr	r2, [r3, #12]
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d11c      	bne.n	8009f10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d316      	bcc.n	8009f10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d20f      	bcs.n	8009f10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 ff1b 	bl	800ad30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f02:	2300      	movs	r3, #0
 8009f04:	2200      	movs	r2, #0
 8009f06:	2100      	movs	r1, #0
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f001 facd 	bl	800b4a8 <USBD_LL_PrepareReceive>
 8009f0e:	e018      	b.n	8009f42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d10b      	bne.n	8009f34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d005      	beq.n	8009f34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f34:	2180      	movs	r1, #128	; 0x80
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f001 fa0c 	bl	800b354 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 ff2c 	bl	800ad9a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d122      	bne.n	8009f92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fe98 	bl	8009c82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f5a:	e01a      	b.n	8009f92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d114      	bne.n	8009f92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00e      	beq.n	8009f92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	7afa      	ldrb	r2, [r7, #11]
 8009f7e:	4611      	mov	r1, r2
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	4798      	blx	r3
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	e000      	b.n	8009f94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e02f      	b.n	800a030 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00f      	beq.n	8009ffa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d009      	beq.n	8009ffa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	6852      	ldr	r2, [r2, #4]
 8009ff2:	b2d2      	uxtb	r2, r2
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ffa:	2340      	movs	r3, #64	; 0x40
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2100      	movs	r1, #0
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 f962 	bl	800b2ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2240      	movs	r2, #64	; 0x40
 800a012:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a016:	2340      	movs	r3, #64	; 0x40
 800a018:	2200      	movs	r2, #0
 800a01a:	2180      	movs	r1, #128	; 0x80
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f001 f954 	bl	800b2ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2240      	movs	r2, #64	; 0x40
 800a02c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	78fa      	ldrb	r2, [r7, #3]
 800a048:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a066:	b2da      	uxtb	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2204      	movs	r2, #4
 800a072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b04      	cmp	r3, #4
 800a096:	d106      	bne.n	800a0a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e012      	b.n	800a0f0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d10b      	bne.n	800a0ee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d005      	beq.n	800a0ee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	3301      	adds	r3, #1
 800a10e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a116:	8a3b      	ldrh	r3, [r7, #16]
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	b21a      	sxth	r2, r3
 800a11c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a120:	4313      	orrs	r3, r2
 800a122:	b21b      	sxth	r3, r3
 800a124:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a126:	89fb      	ldrh	r3, [r7, #14]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	371c      	adds	r7, #28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a14a:	2b40      	cmp	r3, #64	; 0x40
 800a14c:	d005      	beq.n	800a15a <USBD_StdDevReq+0x26>
 800a14e:	2b40      	cmp	r3, #64	; 0x40
 800a150:	d853      	bhi.n	800a1fa <USBD_StdDevReq+0xc6>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00b      	beq.n	800a16e <USBD_StdDevReq+0x3a>
 800a156:	2b20      	cmp	r3, #32
 800a158:	d14f      	bne.n	800a1fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	4798      	blx	r3
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]
      break;
 800a16c:	e04a      	b.n	800a204 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	785b      	ldrb	r3, [r3, #1]
 800a172:	2b09      	cmp	r3, #9
 800a174:	d83b      	bhi.n	800a1ee <USBD_StdDevReq+0xba>
 800a176:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <USBD_StdDevReq+0x48>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a1d1 	.word	0x0800a1d1
 800a180:	0800a1e5 	.word	0x0800a1e5
 800a184:	0800a1ef 	.word	0x0800a1ef
 800a188:	0800a1db 	.word	0x0800a1db
 800a18c:	0800a1ef 	.word	0x0800a1ef
 800a190:	0800a1af 	.word	0x0800a1af
 800a194:	0800a1a5 	.word	0x0800a1a5
 800a198:	0800a1ef 	.word	0x0800a1ef
 800a19c:	0800a1c7 	.word	0x0800a1c7
 800a1a0:	0800a1b9 	.word	0x0800a1b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f9de 	bl	800a568 <USBD_GetDescriptor>
          break;
 800a1ac:	e024      	b.n	800a1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fb6d 	bl	800a890 <USBD_SetAddress>
          break;
 800a1b6:	e01f      	b.n	800a1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fbac 	bl	800a918 <USBD_SetConfig>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
          break;
 800a1c4:	e018      	b.n	800a1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fc4b 	bl	800aa64 <USBD_GetConfig>
          break;
 800a1ce:	e013      	b.n	800a1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fc7c 	bl	800aad0 <USBD_GetStatus>
          break;
 800a1d8:	e00e      	b.n	800a1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fcab 	bl	800ab38 <USBD_SetFeature>
          break;
 800a1e2:	e009      	b.n	800a1f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fcba 	bl	800ab60 <USBD_ClrFeature>
          break;
 800a1ec:	e004      	b.n	800a1f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fd11 	bl	800ac18 <USBD_CtlError>
          break;
 800a1f6:	bf00      	nop
      }
      break;
 800a1f8:	e004      	b.n	800a204 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fd0b 	bl	800ac18 <USBD_CtlError>
      break;
 800a202:	bf00      	nop
  }

  return ret;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop

0800a210 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	d005      	beq.n	800a236 <USBD_StdItfReq+0x26>
 800a22a:	2b40      	cmp	r3, #64	; 0x40
 800a22c:	d82f      	bhi.n	800a28e <USBD_StdItfReq+0x7e>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <USBD_StdItfReq+0x26>
 800a232:	2b20      	cmp	r3, #32
 800a234:	d12b      	bne.n	800a28e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	2b02      	cmp	r3, #2
 800a242:	d81d      	bhi.n	800a280 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	889b      	ldrh	r3, [r3, #4]
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d813      	bhi.n	800a276 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	4798      	blx	r3
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	88db      	ldrh	r3, [r3, #6]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d110      	bne.n	800a28a <USBD_StdItfReq+0x7a>
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10d      	bne.n	800a28a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fd80 	bl	800ad74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a274:	e009      	b.n	800a28a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fccd 	bl	800ac18 <USBD_CtlError>
          break;
 800a27e:	e004      	b.n	800a28a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fcc8 	bl	800ac18 <USBD_CtlError>
          break;
 800a288:	e000      	b.n	800a28c <USBD_StdItfReq+0x7c>
          break;
 800a28a:	bf00      	nop
      }
      break;
 800a28c:	e004      	b.n	800a298 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fcc1 	bl	800ac18 <USBD_CtlError>
      break;
 800a296:	bf00      	nop
  }

  return ret;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	889b      	ldrh	r3, [r3, #4]
 800a2b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2be:	2b40      	cmp	r3, #64	; 0x40
 800a2c0:	d007      	beq.n	800a2d2 <USBD_StdEPReq+0x30>
 800a2c2:	2b40      	cmp	r3, #64	; 0x40
 800a2c4:	f200 8145 	bhi.w	800a552 <USBD_StdEPReq+0x2b0>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00c      	beq.n	800a2e6 <USBD_StdEPReq+0x44>
 800a2cc:	2b20      	cmp	r3, #32
 800a2ce:	f040 8140 	bne.w	800a552 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	4798      	blx	r3
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e4:	e13a      	b.n	800a55c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	785b      	ldrb	r3, [r3, #1]
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d007      	beq.n	800a2fe <USBD_StdEPReq+0x5c>
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	f300 8129 	bgt.w	800a546 <USBD_StdEPReq+0x2a4>
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d07f      	beq.n	800a3f8 <USBD_StdEPReq+0x156>
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d03c      	beq.n	800a376 <USBD_StdEPReq+0xd4>
 800a2fc:	e123      	b.n	800a546 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d002      	beq.n	800a310 <USBD_StdEPReq+0x6e>
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d016      	beq.n	800a33c <USBD_StdEPReq+0x9a>
 800a30e:	e02c      	b.n	800a36a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00d      	beq.n	800a332 <USBD_StdEPReq+0x90>
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	2b80      	cmp	r3, #128	; 0x80
 800a31a:	d00a      	beq.n	800a332 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f817 	bl	800b354 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a326:	2180      	movs	r1, #128	; 0x80
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f001 f813 	bl	800b354 <USBD_LL_StallEP>
 800a32e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a330:	e020      	b.n	800a374 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fc6f 	bl	800ac18 <USBD_CtlError>
              break;
 800a33a:	e01b      	b.n	800a374 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	885b      	ldrh	r3, [r3, #2]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10e      	bne.n	800a362 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <USBD_StdEPReq+0xc0>
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	2b80      	cmp	r3, #128	; 0x80
 800a34e:	d008      	beq.n	800a362 <USBD_StdEPReq+0xc0>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	88db      	ldrh	r3, [r3, #6]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a358:	7bbb      	ldrb	r3, [r7, #14]
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fff9 	bl	800b354 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fd06 	bl	800ad74 <USBD_CtlSendStatus>

              break;
 800a368:	e004      	b.n	800a374 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fc53 	bl	800ac18 <USBD_CtlError>
              break;
 800a372:	bf00      	nop
          }
          break;
 800a374:	e0ec      	b.n	800a550 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d002      	beq.n	800a388 <USBD_StdEPReq+0xe6>
 800a382:	2b03      	cmp	r3, #3
 800a384:	d016      	beq.n	800a3b4 <USBD_StdEPReq+0x112>
 800a386:	e030      	b.n	800a3ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00d      	beq.n	800a3aa <USBD_StdEPReq+0x108>
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	2b80      	cmp	r3, #128	; 0x80
 800a392:	d00a      	beq.n	800a3aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 ffdb 	bl	800b354 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a39e:	2180      	movs	r1, #128	; 0x80
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 ffd7 	bl	800b354 <USBD_LL_StallEP>
 800a3a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3a8:	e025      	b.n	800a3f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fc33 	bl	800ac18 <USBD_CtlError>
              break;
 800a3b2:	e020      	b.n	800a3f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	885b      	ldrh	r3, [r3, #2]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d11b      	bne.n	800a3f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d004      	beq.n	800a3d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 ffe1 	bl	800b392 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fccf 	bl	800ad74 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a3e8:	e004      	b.n	800a3f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fc13 	bl	800ac18 <USBD_CtlError>
              break;
 800a3f2:	e000      	b.n	800a3f6 <USBD_StdEPReq+0x154>
              break;
 800a3f4:	bf00      	nop
          }
          break;
 800a3f6:	e0ab      	b.n	800a550 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d002      	beq.n	800a40a <USBD_StdEPReq+0x168>
 800a404:	2b03      	cmp	r3, #3
 800a406:	d032      	beq.n	800a46e <USBD_StdEPReq+0x1cc>
 800a408:	e097      	b.n	800a53a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <USBD_StdEPReq+0x17e>
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2b80      	cmp	r3, #128	; 0x80
 800a414:	d004      	beq.n	800a420 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fbfd 	bl	800ac18 <USBD_CtlError>
                break;
 800a41e:	e091      	b.n	800a544 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a424:	2b00      	cmp	r3, #0
 800a426:	da0b      	bge.n	800a440 <USBD_StdEPReq+0x19e>
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	3310      	adds	r3, #16
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	4413      	add	r3, r2
 800a43c:	3304      	adds	r3, #4
 800a43e:	e00b      	b.n	800a458 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	4413      	add	r3, r2
 800a456:	3304      	adds	r3, #4
 800a458:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2202      	movs	r2, #2
 800a464:	4619      	mov	r1, r3
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fc47 	bl	800acfa <USBD_CtlSendData>
              break;
 800a46c:	e06a      	b.n	800a544 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a46e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a472:	2b00      	cmp	r3, #0
 800a474:	da11      	bge.n	800a49a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a476:	7bbb      	ldrb	r3, [r7, #14]
 800a478:	f003 020f 	and.w	r2, r3, #15
 800a47c:	6879      	ldr	r1, [r7, #4]
 800a47e:	4613      	mov	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	440b      	add	r3, r1
 800a488:	3324      	adds	r3, #36	; 0x24
 800a48a:	881b      	ldrh	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d117      	bne.n	800a4c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fbc0 	bl	800ac18 <USBD_CtlError>
                  break;
 800a498:	e054      	b.n	800a544 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	f003 020f 	and.w	r2, r3, #15
 800a4a0:	6879      	ldr	r1, [r7, #4]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d104      	bne.n	800a4c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fbad 	bl	800ac18 <USBD_CtlError>
                  break;
 800a4be:	e041      	b.n	800a544 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	da0b      	bge.n	800a4e0 <USBD_StdEPReq+0x23e>
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	3310      	adds	r3, #16
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	4413      	add	r3, r2
 800a4dc:	3304      	adds	r3, #4
 800a4de:	e00b      	b.n	800a4f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <USBD_StdEPReq+0x264>
 800a500:	7bbb      	ldrb	r3, [r7, #14]
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d103      	bne.n	800a50e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	e00e      	b.n	800a52c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	4619      	mov	r1, r3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 ff5c 	bl	800b3d0 <USBD_LL_IsStallEP>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d003      	beq.n	800a526 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2201      	movs	r2, #1
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	e002      	b.n	800a52c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2202      	movs	r2, #2
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fbe1 	bl	800acfa <USBD_CtlSendData>
              break;
 800a538:	e004      	b.n	800a544 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fb6b 	bl	800ac18 <USBD_CtlError>
              break;
 800a542:	bf00      	nop
          }
          break;
 800a544:	e004      	b.n	800a550 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fb65 	bl	800ac18 <USBD_CtlError>
          break;
 800a54e:	bf00      	nop
      }
      break;
 800a550:	e004      	b.n	800a55c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fb5f 	bl	800ac18 <USBD_CtlError>
      break;
 800a55a:	bf00      	nop
  }

  return ret;
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
	...

0800a568 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	885b      	ldrh	r3, [r3, #2]
 800a582:	0a1b      	lsrs	r3, r3, #8
 800a584:	b29b      	uxth	r3, r3
 800a586:	3b01      	subs	r3, #1
 800a588:	2b0e      	cmp	r3, #14
 800a58a:	f200 8152 	bhi.w	800a832 <USBD_GetDescriptor+0x2ca>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <USBD_GetDescriptor+0x2c>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a605 	.word	0x0800a605
 800a598:	0800a61d 	.word	0x0800a61d
 800a59c:	0800a65d 	.word	0x0800a65d
 800a5a0:	0800a833 	.word	0x0800a833
 800a5a4:	0800a833 	.word	0x0800a833
 800a5a8:	0800a7d3 	.word	0x0800a7d3
 800a5ac:	0800a7ff 	.word	0x0800a7ff
 800a5b0:	0800a833 	.word	0x0800a833
 800a5b4:	0800a833 	.word	0x0800a833
 800a5b8:	0800a833 	.word	0x0800a833
 800a5bc:	0800a833 	.word	0x0800a833
 800a5c0:	0800a833 	.word	0x0800a833
 800a5c4:	0800a833 	.word	0x0800a833
 800a5c8:	0800a833 	.word	0x0800a833
 800a5cc:	0800a5d1 	.word	0x0800a5d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	7c12      	ldrb	r2, [r2, #16]
 800a5e8:	f107 0108 	add.w	r1, r7, #8
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4798      	blx	r3
 800a5f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5f2:	e126      	b.n	800a842 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fb0e 	bl	800ac18 <USBD_CtlError>
        err++;
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	3301      	adds	r3, #1
 800a600:	72fb      	strb	r3, [r7, #11]
      break;
 800a602:	e11e      	b.n	800a842 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7c12      	ldrb	r2, [r2, #16]
 800a610:	f107 0108 	add.w	r1, r7, #8
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
 800a618:	60f8      	str	r0, [r7, #12]
      break;
 800a61a:	e112      	b.n	800a842 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7c1b      	ldrb	r3, [r3, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10d      	bne.n	800a640 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62c:	f107 0208 	add.w	r2, r7, #8
 800a630:	4610      	mov	r0, r2
 800a632:	4798      	blx	r3
 800a634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3301      	adds	r3, #1
 800a63a:	2202      	movs	r2, #2
 800a63c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a63e:	e100      	b.n	800a842 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a648:	f107 0208 	add.w	r2, r7, #8
 800a64c:	4610      	mov	r0, r2
 800a64e:	4798      	blx	r3
 800a650:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3301      	adds	r3, #1
 800a656:	2202      	movs	r2, #2
 800a658:	701a      	strb	r2, [r3, #0]
      break;
 800a65a:	e0f2      	b.n	800a842 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	885b      	ldrh	r3, [r3, #2]
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b05      	cmp	r3, #5
 800a664:	f200 80ac 	bhi.w	800a7c0 <USBD_GetDescriptor+0x258>
 800a668:	a201      	add	r2, pc, #4	; (adr r2, 800a670 <USBD_GetDescriptor+0x108>)
 800a66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66e:	bf00      	nop
 800a670:	0800a689 	.word	0x0800a689
 800a674:	0800a6bd 	.word	0x0800a6bd
 800a678:	0800a6f1 	.word	0x0800a6f1
 800a67c:	0800a725 	.word	0x0800a725
 800a680:	0800a759 	.word	0x0800a759
 800a684:	0800a78d 	.word	0x0800a78d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	7c12      	ldrb	r2, [r2, #16]
 800a6a0:	f107 0108 	add.w	r1, r7, #8
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	4798      	blx	r3
 800a6a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6aa:	e091      	b.n	800a7d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fab2 	bl	800ac18 <USBD_CtlError>
            err++;
 800a6b4:	7afb      	ldrb	r3, [r7, #11]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6ba:	e089      	b.n	800a7d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00b      	beq.n	800a6e0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	7c12      	ldrb	r2, [r2, #16]
 800a6d4:	f107 0108 	add.w	r1, r7, #8
 800a6d8:	4610      	mov	r0, r2
 800a6da:	4798      	blx	r3
 800a6dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6de:	e077      	b.n	800a7d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fa98 	bl	800ac18 <USBD_CtlError>
            err++;
 800a6e8:	7afb      	ldrb	r3, [r7, #11]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a6ee:	e06f      	b.n	800a7d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	7c12      	ldrb	r2, [r2, #16]
 800a708:	f107 0108 	add.w	r1, r7, #8
 800a70c:	4610      	mov	r0, r2
 800a70e:	4798      	blx	r3
 800a710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a712:	e05d      	b.n	800a7d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fa7e 	bl	800ac18 <USBD_CtlError>
            err++;
 800a71c:	7afb      	ldrb	r3, [r7, #11]
 800a71e:	3301      	adds	r3, #1
 800a720:	72fb      	strb	r3, [r7, #11]
          break;
 800a722:	e055      	b.n	800a7d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00b      	beq.n	800a748 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	7c12      	ldrb	r2, [r2, #16]
 800a73c:	f107 0108 	add.w	r1, r7, #8
 800a740:	4610      	mov	r0, r2
 800a742:	4798      	blx	r3
 800a744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a746:	e043      	b.n	800a7d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fa64 	bl	800ac18 <USBD_CtlError>
            err++;
 800a750:	7afb      	ldrb	r3, [r7, #11]
 800a752:	3301      	adds	r3, #1
 800a754:	72fb      	strb	r3, [r7, #11]
          break;
 800a756:	e03b      	b.n	800a7d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	7c12      	ldrb	r2, [r2, #16]
 800a770:	f107 0108 	add.w	r1, r7, #8
 800a774:	4610      	mov	r0, r2
 800a776:	4798      	blx	r3
 800a778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a77a:	e029      	b.n	800a7d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fa4a 	bl	800ac18 <USBD_CtlError>
            err++;
 800a784:	7afb      	ldrb	r3, [r7, #11]
 800a786:	3301      	adds	r3, #1
 800a788:	72fb      	strb	r3, [r7, #11]
          break;
 800a78a:	e021      	b.n	800a7d0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a792:	699b      	ldr	r3, [r3, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00b      	beq.n	800a7b0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	7c12      	ldrb	r2, [r2, #16]
 800a7a4:	f107 0108 	add.w	r1, r7, #8
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	4798      	blx	r3
 800a7ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7ae:	e00f      	b.n	800a7d0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fa30 	bl	800ac18 <USBD_CtlError>
            err++;
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a7be:	e007      	b.n	800a7d0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fa28 	bl	800ac18 <USBD_CtlError>
          err++;
 800a7c8:	7afb      	ldrb	r3, [r7, #11]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a7ce:	bf00      	nop
      }
      break;
 800a7d0:	e037      	b.n	800a842 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7c1b      	ldrb	r3, [r3, #16]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d109      	bne.n	800a7ee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e2:	f107 0208 	add.w	r2, r7, #8
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	4798      	blx	r3
 800a7ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a7ec:	e029      	b.n	800a842 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fa11 	bl	800ac18 <USBD_CtlError>
        err++;
 800a7f6:	7afb      	ldrb	r3, [r7, #11]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	72fb      	strb	r3, [r7, #11]
      break;
 800a7fc:	e021      	b.n	800a842 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	7c1b      	ldrb	r3, [r3, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10d      	bne.n	800a822 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80e:	f107 0208 	add.w	r2, r7, #8
 800a812:	4610      	mov	r0, r2
 800a814:	4798      	blx	r3
 800a816:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3301      	adds	r3, #1
 800a81c:	2207      	movs	r2, #7
 800a81e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a820:	e00f      	b.n	800a842 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f9f7 	bl	800ac18 <USBD_CtlError>
        err++;
 800a82a:	7afb      	ldrb	r3, [r7, #11]
 800a82c:	3301      	adds	r3, #1
 800a82e:	72fb      	strb	r3, [r7, #11]
      break;
 800a830:	e007      	b.n	800a842 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f9ef 	bl	800ac18 <USBD_CtlError>
      err++;
 800a83a:	7afb      	ldrb	r3, [r7, #11]
 800a83c:	3301      	adds	r3, #1
 800a83e:	72fb      	strb	r3, [r7, #11]
      break;
 800a840:	bf00      	nop
  }

  if (err != 0U)
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d11e      	bne.n	800a886 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	88db      	ldrh	r3, [r3, #6]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d016      	beq.n	800a87e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a850:	893b      	ldrh	r3, [r7, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00e      	beq.n	800a874 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	88da      	ldrh	r2, [r3, #6]
 800a85a:	893b      	ldrh	r3, [r7, #8]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	bf28      	it	cs
 800a860:	4613      	movcs	r3, r2
 800a862:	b29b      	uxth	r3, r3
 800a864:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a866:	893b      	ldrh	r3, [r7, #8]
 800a868:	461a      	mov	r2, r3
 800a86a:	68f9      	ldr	r1, [r7, #12]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fa44 	bl	800acfa <USBD_CtlSendData>
 800a872:	e009      	b.n	800a888 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f9ce 	bl	800ac18 <USBD_CtlError>
 800a87c:	e004      	b.n	800a888 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fa78 	bl	800ad74 <USBD_CtlSendStatus>
 800a884:	e000      	b.n	800a888 <USBD_GetDescriptor+0x320>
    return;
 800a886:	bf00      	nop
  }
}
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop

0800a890 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	889b      	ldrh	r3, [r3, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d131      	bne.n	800a906 <USBD_SetAddress+0x76>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	88db      	ldrh	r3, [r3, #6]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d12d      	bne.n	800a906 <USBD_SetAddress+0x76>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	885b      	ldrh	r3, [r3, #2]
 800a8ae:	2b7f      	cmp	r3, #127	; 0x7f
 800a8b0:	d829      	bhi.n	800a906 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	885b      	ldrh	r3, [r3, #2]
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d104      	bne.n	800a8d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f9a3 	bl	800ac18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d2:	e01d      	b.n	800a910 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7bfa      	ldrb	r2, [r7, #15]
 800a8d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fda1 	bl	800b428 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fa44 	bl	800ad74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8fa:	e009      	b.n	800a910 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a904:	e004      	b.n	800a910 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f985 	bl	800ac18 <USBD_CtlError>
  }
}
 800a90e:	bf00      	nop
 800a910:	bf00      	nop
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	885b      	ldrh	r3, [r3, #2]
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	4b4c      	ldr	r3, [pc, #304]	; (800aa60 <USBD_SetConfig+0x148>)
 800a92e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a930:	4b4b      	ldr	r3, [pc, #300]	; (800aa60 <USBD_SetConfig+0x148>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d905      	bls.n	800a944 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f96c 	bl	800ac18 <USBD_CtlError>
    return USBD_FAIL;
 800a940:	2303      	movs	r3, #3
 800a942:	e088      	b.n	800aa56 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d002      	beq.n	800a956 <USBD_SetConfig+0x3e>
 800a950:	2b03      	cmp	r3, #3
 800a952:	d025      	beq.n	800a9a0 <USBD_SetConfig+0x88>
 800a954:	e071      	b.n	800aa3a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a956:	4b42      	ldr	r3, [pc, #264]	; (800aa60 <USBD_SetConfig+0x148>)
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d01c      	beq.n	800a998 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a95e:	4b40      	ldr	r3, [pc, #256]	; (800aa60 <USBD_SetConfig+0x148>)
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a968:	4b3d      	ldr	r3, [pc, #244]	; (800aa60 <USBD_SetConfig+0x148>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7ff f992 	bl	8009c98 <USBD_SetClassConfig>
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d004      	beq.n	800a988 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f949 	bl	800ac18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a986:	e065      	b.n	800aa54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f9f3 	bl	800ad74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2203      	movs	r2, #3
 800a992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a996:	e05d      	b.n	800aa54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f9eb 	bl	800ad74 <USBD_CtlSendStatus>
      break;
 800a99e:	e059      	b.n	800aa54 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a9a0:	4b2f      	ldr	r3, [pc, #188]	; (800aa60 <USBD_SetConfig+0x148>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d112      	bne.n	800a9ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a9b0:	4b2b      	ldr	r3, [pc, #172]	; (800aa60 <USBD_SetConfig+0x148>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9ba:	4b29      	ldr	r3, [pc, #164]	; (800aa60 <USBD_SetConfig+0x148>)
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff f985 	bl	8009cd0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f9d4 	bl	800ad74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9cc:	e042      	b.n	800aa54 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a9ce:	4b24      	ldr	r3, [pc, #144]	; (800aa60 <USBD_SetConfig+0x148>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d02a      	beq.n	800aa32 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff f973 	bl	8009cd0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a9ea:	4b1d      	ldr	r3, [pc, #116]	; (800aa60 <USBD_SetConfig+0x148>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9f4:	4b1a      	ldr	r3, [pc, #104]	; (800aa60 <USBD_SetConfig+0x148>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff f94c 	bl	8009c98 <USBD_SetClassConfig>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00f      	beq.n	800aa2a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f903 	bl	800ac18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff f958 	bl	8009cd0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa28:	e014      	b.n	800aa54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f9a2 	bl	800ad74 <USBD_CtlSendStatus>
      break;
 800aa30:	e010      	b.n	800aa54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f99e 	bl	800ad74 <USBD_CtlSendStatus>
      break;
 800aa38:	e00c      	b.n	800aa54 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f8eb 	bl	800ac18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa42:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <USBD_SetConfig+0x148>)
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff f941 	bl	8009cd0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	73fb      	strb	r3, [r7, #15]
      break;
 800aa52:	bf00      	nop
  }

  return ret;
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000654 	.word	0x20000654

0800aa64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	88db      	ldrh	r3, [r3, #6]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d004      	beq.n	800aa80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f8cd 	bl	800ac18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aa7e:	e023      	b.n	800aac8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	dc02      	bgt.n	800aa92 <USBD_GetConfig+0x2e>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dc03      	bgt.n	800aa98 <USBD_GetConfig+0x34>
 800aa90:	e015      	b.n	800aabe <USBD_GetConfig+0x5a>
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d00b      	beq.n	800aaae <USBD_GetConfig+0x4a>
 800aa96:	e012      	b.n	800aabe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f927 	bl	800acfa <USBD_CtlSendData>
        break;
 800aaac:	e00c      	b.n	800aac8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	3304      	adds	r3, #4
 800aab2:	2201      	movs	r2, #1
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f91f 	bl	800acfa <USBD_CtlSendData>
        break;
 800aabc:	e004      	b.n	800aac8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f8a9 	bl	800ac18 <USBD_CtlError>
        break;
 800aac6:	bf00      	nop
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d81e      	bhi.n	800ab26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	88db      	ldrh	r3, [r3, #6]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d004      	beq.n	800aafa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f890 	bl	800ac18 <USBD_CtlError>
        break;
 800aaf8:	e01a      	b.n	800ab30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d005      	beq.n	800ab16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	f043 0202 	orr.w	r2, r3, #2
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f8eb 	bl	800acfa <USBD_CtlSendData>
      break;
 800ab24:	e004      	b.n	800ab30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f875 	bl	800ac18 <USBD_CtlError>
      break;
 800ab2e:	bf00      	nop
  }
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	885b      	ldrh	r3, [r3, #2]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d106      	bne.n	800ab58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f90e 	bl	800ad74 <USBD_CtlSendStatus>
  }
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	3b01      	subs	r3, #1
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d80b      	bhi.n	800ab90 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	885b      	ldrh	r3, [r3, #2]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d10c      	bne.n	800ab9a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f8f3 	bl	800ad74 <USBD_CtlSendStatus>
      }
      break;
 800ab8e:	e004      	b.n	800ab9a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f840 	bl	800ac18 <USBD_CtlError>
      break;
 800ab98:	e000      	b.n	800ab9c <USBD_ClrFeature+0x3c>
      break;
 800ab9a:	bf00      	nop
  }
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	781a      	ldrb	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3301      	adds	r3, #1
 800abbe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	781a      	ldrb	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3301      	adds	r3, #1
 800abcc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f7ff fa92 	bl	800a0f8 <SWAPBYTE>
 800abd4:	4603      	mov	r3, r0
 800abd6:	461a      	mov	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3301      	adds	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3301      	adds	r3, #1
 800abe6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7ff fa85 	bl	800a0f8 <SWAPBYTE>
 800abee:	4603      	mov	r3, r0
 800abf0:	461a      	mov	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3301      	adds	r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f7ff fa78 	bl	800a0f8 <SWAPBYTE>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	80da      	strh	r2, [r3, #6]
}
 800ac10:	bf00      	nop
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac22:	2180      	movs	r1, #128	; 0x80
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fb95 	bl	800b354 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fb91 	bl	800b354 <USBD_LL_StallEP>
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b086      	sub	sp, #24
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d036      	beq.n	800acbe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ac54:	6938      	ldr	r0, [r7, #16]
 800ac56:	f000 f836 	bl	800acc6 <USBD_GetLen>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	7812      	ldrb	r2, [r2, #0]
 800ac72:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	3301      	adds	r3, #1
 800ac78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	4413      	add	r3, r2
 800ac80:	2203      	movs	r2, #3
 800ac82:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	3301      	adds	r3, #1
 800ac88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ac8a:	e013      	b.n	800acb4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	4413      	add	r3, r2
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	7812      	ldrb	r2, [r2, #0]
 800ac96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	613b      	str	r3, [r7, #16]
    idx++;
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	3301      	adds	r3, #1
 800aca2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	4413      	add	r3, r2
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
    idx++;
 800acae:	7dfb      	ldrb	r3, [r7, #23]
 800acb0:	3301      	adds	r3, #1
 800acb2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1e7      	bne.n	800ac8c <USBD_GetString+0x52>
 800acbc:	e000      	b.n	800acc0 <USBD_GetString+0x86>
    return;
 800acbe:	bf00      	nop
  }
}
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b085      	sub	sp, #20
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800acd6:	e005      	b.n	800ace4 <USBD_GetLen+0x1e>
  {
    len++;
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	3301      	adds	r3, #1
 800acdc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	3301      	adds	r3, #1
 800ace2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1f5      	bne.n	800acd8 <USBD_GetLen+0x12>
  }

  return len;
 800acec:	7bfb      	ldrb	r3, [r7, #15]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	2100      	movs	r1, #0
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 fba0 	bl	800b466 <USBD_LL_Transmit>

  return USBD_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	2100      	movs	r1, #0
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 fb8f 	bl	800b466 <USBD_LL_Transmit>

  return USBD_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	60f8      	str	r0, [r7, #12]
 800ad5a:	60b9      	str	r1, [r7, #8]
 800ad5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	2100      	movs	r1, #0
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 fb9f 	bl	800b4a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2204      	movs	r2, #4
 800ad80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad84:	2300      	movs	r3, #0
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fb6b 	bl	800b466 <USBD_LL_Transmit>

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2205      	movs	r2, #5
 800ada6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adaa:	2300      	movs	r3, #0
 800adac:	2200      	movs	r2, #0
 800adae:	2100      	movs	r1, #0
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fb79 	bl	800b4a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 800adc4:	2200      	movs	r2, #0
 800adc6:	490e      	ldr	r1, [pc, #56]	; (800ae00 <MX_USB_Device_Init+0x40>)
 800adc8:	480e      	ldr	r0, [pc, #56]	; (800ae04 <MX_USB_Device_Init+0x44>)
 800adca:	f7fe fef7 	bl	8009bbc <USBD_Init>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800add4:	f7f5 fec6 	bl	8000b64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 800add8:	490b      	ldr	r1, [pc, #44]	; (800ae08 <MX_USB_Device_Init+0x48>)
 800adda:	480a      	ldr	r0, [pc, #40]	; (800ae04 <MX_USB_Device_Init+0x44>)
 800addc:	f7fe ff1e 	bl	8009c1c <USBD_RegisterClass>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ade6:	f7f5 febd 	bl	8000b64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800adea:	4806      	ldr	r0, [pc, #24]	; (800ae04 <MX_USB_Device_Init+0x44>)
 800adec:	f7fe ff3d 	bl	8009c6a <USBD_Start>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <MX_USB_Device_Init+0x3a>
    Error_Handler();
 800adf6:	f7f5 feb5 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800adfa:	bf00      	nop
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	20000114 	.word	0x20000114
 800ae04:	20000658 	.word	0x20000658
 800ae08:	2000000c 	.word	0x2000000c

0800ae0c <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	6039      	str	r1, [r7, #0]
 800ae16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	2212      	movs	r2, #18
 800ae1c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 800ae1e:	4b03      	ldr	r3, [pc, #12]	; (800ae2c <USBD_HID_DeviceDescriptor+0x20>)
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	20000134 	.word	0x20000134

0800ae30 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	6039      	str	r1, [r7, #0]
 800ae3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2204      	movs	r2, #4
 800ae40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ae42:	4b03      	ldr	r3, [pc, #12]	; (800ae50 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	20000148 	.word	0x20000148

0800ae54 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	6039      	str	r1, [r7, #0]
 800ae5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d105      	bne.n	800ae72 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	4907      	ldr	r1, [pc, #28]	; (800ae88 <USBD_HID_ProductStrDescriptor+0x34>)
 800ae6a:	4808      	ldr	r0, [pc, #32]	; (800ae8c <USBD_HID_ProductStrDescriptor+0x38>)
 800ae6c:	f7ff fee5 	bl	800ac3a <USBD_GetString>
 800ae70:	e004      	b.n	800ae7c <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	4904      	ldr	r1, [pc, #16]	; (800ae88 <USBD_HID_ProductStrDescriptor+0x34>)
 800ae76:	4805      	ldr	r0, [pc, #20]	; (800ae8c <USBD_HID_ProductStrDescriptor+0x38>)
 800ae78:	f7ff fedf 	bl	800ac3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae7c:	4b02      	ldr	r3, [pc, #8]	; (800ae88 <USBD_HID_ProductStrDescriptor+0x34>)
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20000928 	.word	0x20000928
 800ae8c:	0800b65c 	.word	0x0800b65c

0800ae90 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	4904      	ldr	r1, [pc, #16]	; (800aeb0 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 800aea0:	4804      	ldr	r0, [pc, #16]	; (800aeb4 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 800aea2:	f7ff feca 	bl	800ac3a <USBD_GetString>
  return USBD_StrDesc;
 800aea6:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20000928 	.word	0x20000928
 800aeb4:	0800b674 	.word	0x0800b674

0800aeb8 <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	6039      	str	r1, [r7, #0]
 800aec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	221a      	movs	r2, #26
 800aec8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aeca:	f000 f843 	bl	800af54 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800aece:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <USBD_HID_SerialStrDescriptor+0x20>)
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	2000014c 	.word	0x2000014c

0800aedc <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	6039      	str	r1, [r7, #0]
 800aee6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aee8:	79fb      	ldrb	r3, [r7, #7]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d105      	bne.n	800aefa <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	4907      	ldr	r1, [pc, #28]	; (800af10 <USBD_HID_ConfigStrDescriptor+0x34>)
 800aef2:	4808      	ldr	r0, [pc, #32]	; (800af14 <USBD_HID_ConfigStrDescriptor+0x38>)
 800aef4:	f7ff fea1 	bl	800ac3a <USBD_GetString>
 800aef8:	e004      	b.n	800af04 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	4904      	ldr	r1, [pc, #16]	; (800af10 <USBD_HID_ConfigStrDescriptor+0x34>)
 800aefe:	4805      	ldr	r0, [pc, #20]	; (800af14 <USBD_HID_ConfigStrDescriptor+0x38>)
 800af00:	f7ff fe9b 	bl	800ac3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800af04:	4b02      	ldr	r3, [pc, #8]	; (800af10 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20000928 	.word	0x20000928
 800af14:	0800b688 	.word	0x0800b688

0800af18 <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	6039      	str	r1, [r7, #0]
 800af22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	4907      	ldr	r1, [pc, #28]	; (800af4c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800af2e:	4808      	ldr	r0, [pc, #32]	; (800af50 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800af30:	f7ff fe83 	bl	800ac3a <USBD_GetString>
 800af34:	e004      	b.n	800af40 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	4904      	ldr	r1, [pc, #16]	; (800af4c <USBD_HID_InterfaceStrDescriptor+0x34>)
 800af3a:	4805      	ldr	r0, [pc, #20]	; (800af50 <USBD_HID_InterfaceStrDescriptor+0x38>)
 800af3c:	f7ff fe7d 	bl	800ac3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800af40:	4b02      	ldr	r3, [pc, #8]	; (800af4c <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000928 	.word	0x20000928
 800af50:	0800b694 	.word	0x0800b694

0800af54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af5a:	4b0f      	ldr	r3, [pc, #60]	; (800af98 <Get_SerialNum+0x44>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af60:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <Get_SerialNum+0x48>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800af66:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <Get_SerialNum+0x4c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4413      	add	r3, r2
 800af72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d009      	beq.n	800af8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af7a:	2208      	movs	r2, #8
 800af7c:	4909      	ldr	r1, [pc, #36]	; (800afa4 <Get_SerialNum+0x50>)
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f000 f814 	bl	800afac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af84:	2204      	movs	r2, #4
 800af86:	4908      	ldr	r1, [pc, #32]	; (800afa8 <Get_SerialNum+0x54>)
 800af88:	68b8      	ldr	r0, [r7, #8]
 800af8a:	f000 f80f 	bl	800afac <IntToUnicode>
  }
}
 800af8e:	bf00      	nop
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	1fff7590 	.word	0x1fff7590
 800af9c:	1fff7594 	.word	0x1fff7594
 800afa0:	1fff7598 	.word	0x1fff7598
 800afa4:	2000014e 	.word	0x2000014e
 800afa8:	2000015e 	.word	0x2000015e

0800afac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800afbe:	2300      	movs	r3, #0
 800afc0:	75fb      	strb	r3, [r7, #23]
 800afc2:	e027      	b.n	800b014 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	0f1b      	lsrs	r3, r3, #28
 800afc8:	2b09      	cmp	r3, #9
 800afca:	d80b      	bhi.n	800afe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	0f1b      	lsrs	r3, r3, #28
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	4619      	mov	r1, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	440b      	add	r3, r1
 800afdc:	3230      	adds	r2, #48	; 0x30
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	e00a      	b.n	800affa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	0f1b      	lsrs	r3, r3, #28
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	4619      	mov	r1, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	440b      	add	r3, r1
 800aff4:	3237      	adds	r2, #55	; 0x37
 800aff6:	b2d2      	uxtb	r2, r2
 800aff8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	011b      	lsls	r3, r3, #4
 800affe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	3301      	adds	r3, #1
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	4413      	add	r3, r2
 800b00a:	2200      	movs	r2, #0
 800b00c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	3301      	adds	r3, #1
 800b012:	75fb      	strb	r3, [r7, #23]
 800b014:	7dfa      	ldrb	r2, [r7, #23]
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d3d3      	bcc.n	800afc4 <IntToUnicode+0x18>
  }
}
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
	...

0800b02c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b094      	sub	sp, #80	; 0x50
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b034:	f107 030c 	add.w	r3, r7, #12
 800b038:	2244      	movs	r2, #68	; 0x44
 800b03a:	2100      	movs	r1, #0
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 fad5 	bl	800b5ec <memset>
  if(pcdHandle->Instance==USB)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a15      	ldr	r2, [pc, #84]	; (800b09c <HAL_PCD_MspInit+0x70>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d123      	bne.n	800b094 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b04c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b050:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b052:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b056:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b058:	f107 030c 	add.w	r3, r7, #12
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fa fae3 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b068:	f7f5 fd7c 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b06c:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <HAL_PCD_MspInit+0x74>)
 800b06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b070:	4a0b      	ldr	r2, [pc, #44]	; (800b0a0 <HAL_PCD_MspInit+0x74>)
 800b072:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b076:	6593      	str	r3, [r2, #88]	; 0x58
 800b078:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <HAL_PCD_MspInit+0x74>)
 800b07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b07c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b080:	60bb      	str	r3, [r7, #8]
 800b082:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b084:	2200      	movs	r2, #0
 800b086:	2100      	movs	r1, #0
 800b088:	2014      	movs	r0, #20
 800b08a:	f7f7 fbc6 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b08e:	2014      	movs	r0, #20
 800b090:	f7f7 fbdd 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b094:	bf00      	nop
 800b096:	3750      	adds	r7, #80	; 0x50
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	40005c00 	.word	0x40005c00
 800b0a0:	40021000 	.word	0x40021000

0800b0a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4610      	mov	r0, r2
 800b0bc:	f7fe fe20 	bl	8009d00 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b0da:	78fa      	ldrb	r2, [r7, #3]
 800b0dc:	6879      	ldr	r1, [r7, #4]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	00db      	lsls	r3, r3, #3
 800b0e6:	440b      	add	r3, r1
 800b0e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	78fb      	ldrb	r3, [r7, #3]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	f7fe fe5a 	bl	8009daa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b0f6:	bf00      	nop
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	460b      	mov	r3, r1
 800b108:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b110:	78fa      	ldrb	r2, [r7, #3]
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	440b      	add	r3, r1
 800b11e:	3324      	adds	r3, #36	; 0x24
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	78fb      	ldrb	r3, [r7, #3]
 800b124:	4619      	mov	r1, r3
 800b126:	f7fe fea3 	bl	8009e70 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b082      	sub	sp, #8
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b140:	4618      	mov	r0, r3
 800b142:	f7fe ffb7 	bl	800a0b4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b146:	bf00      	nop
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b156:	2301      	movs	r3, #1
 800b158:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	795b      	ldrb	r3, [r3, #5]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d001      	beq.n	800b166 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b162:	f7f5 fcff 	bl	8000b64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b16c:	7bfa      	ldrb	r2, [r7, #15]
 800b16e:	4611      	mov	r1, r2
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe ff61 	bl	800a038 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fe ff0d 	bl	8009f9c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b182:	bf00      	nop
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe ff5c 	bl	800a058 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	7a5b      	ldrb	r3, [r3, #9]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d005      	beq.n	800b1b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1a8:	4b04      	ldr	r3, [pc, #16]	; (800b1bc <HAL_PCD_SuspendCallback+0x30>)
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	4a03      	ldr	r2, [pc, #12]	; (800b1bc <HAL_PCD_SuspendCallback+0x30>)
 800b1ae:	f043 0306 	orr.w	r3, r3, #6
 800b1b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	e000ed00 	.word	0xe000ed00

0800b1c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	7a5b      	ldrb	r3, [r3, #9]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d007      	beq.n	800b1e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1d0:	4b08      	ldr	r3, [pc, #32]	; (800b1f4 <HAL_PCD_ResumeCallback+0x34>)
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	4a07      	ldr	r2, [pc, #28]	; (800b1f4 <HAL_PCD_ResumeCallback+0x34>)
 800b1d6:	f023 0306 	bic.w	r3, r3, #6
 800b1da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b1dc:	f000 f9d4 	bl	800b588 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe ff4c 	bl	800a084 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	e000ed00 	.word	0xe000ed00

0800b1f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b200:	4a22      	ldr	r2, [pc, #136]	; (800b28c <USBD_LL_Init+0x94>)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a20      	ldr	r2, [pc, #128]	; (800b28c <USBD_LL_Init+0x94>)
 800b20c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b210:	4b1e      	ldr	r3, [pc, #120]	; (800b28c <USBD_LL_Init+0x94>)
 800b212:	4a1f      	ldr	r2, [pc, #124]	; (800b290 <USBD_LL_Init+0x98>)
 800b214:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b216:	4b1d      	ldr	r3, [pc, #116]	; (800b28c <USBD_LL_Init+0x94>)
 800b218:	2208      	movs	r2, #8
 800b21a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b21c:	4b1b      	ldr	r3, [pc, #108]	; (800b28c <USBD_LL_Init+0x94>)
 800b21e:	2202      	movs	r2, #2
 800b220:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b222:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <USBD_LL_Init+0x94>)
 800b224:	2202      	movs	r2, #2
 800b226:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b228:	4b18      	ldr	r3, [pc, #96]	; (800b28c <USBD_LL_Init+0x94>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b22e:	4b17      	ldr	r3, [pc, #92]	; (800b28c <USBD_LL_Init+0x94>)
 800b230:	2200      	movs	r2, #0
 800b232:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b234:	4b15      	ldr	r3, [pc, #84]	; (800b28c <USBD_LL_Init+0x94>)
 800b236:	2200      	movs	r2, #0
 800b238:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b23a:	4b14      	ldr	r3, [pc, #80]	; (800b28c <USBD_LL_Init+0x94>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b240:	4812      	ldr	r0, [pc, #72]	; (800b28c <USBD_LL_Init+0x94>)
 800b242:	f7f7 ff2b 	bl	800309c <HAL_PCD_Init>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b24c:	f7f5 fc8a 	bl	8000b64 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b256:	2318      	movs	r3, #24
 800b258:	2200      	movs	r2, #0
 800b25a:	2100      	movs	r1, #0
 800b25c:	f7f9 fbcd 	bl	80049fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b266:	2358      	movs	r3, #88	; 0x58
 800b268:	2200      	movs	r2, #0
 800b26a:	2180      	movs	r1, #128	; 0x80
 800b26c:	f7f9 fbc5 	bl	80049fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b27a:	2200      	movs	r2, #0
 800b27c:	2181      	movs	r1, #129	; 0x81
 800b27e:	f7f9 fbbc 	bl	80049fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	20000b28 	.word	0x20000b28
 800b290:	40005c00 	.word	0x40005c00

0800b294 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7f7 ffc4 	bl	8003238 <HAL_PCD_Start>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 f96c 	bl	800b594 <USBD_Get_USB_Status>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	4603      	mov	r3, r0
 800b2da:	70fb      	strb	r3, [r7, #3]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70bb      	strb	r3, [r7, #2]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b2f2:	78bb      	ldrb	r3, [r7, #2]
 800b2f4:	883a      	ldrh	r2, [r7, #0]
 800b2f6:	78f9      	ldrb	r1, [r7, #3]
 800b2f8:	f7f8 f90b 	bl	8003512 <HAL_PCD_EP_Open>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b300:	7bfb      	ldrb	r3, [r7, #15]
 800b302:	4618      	mov	r0, r3
 800b304:	f000 f946 	bl	800b594 <USBD_Get_USB_Status>
 800b308:	4603      	mov	r3, r0
 800b30a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b330:	78fa      	ldrb	r2, [r7, #3]
 800b332:	4611      	mov	r1, r2
 800b334:	4618      	mov	r0, r3
 800b336:	f7f8 f949 	bl	80035cc <HAL_PCD_EP_Close>
 800b33a:	4603      	mov	r3, r0
 800b33c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
 800b340:	4618      	mov	r0, r3
 800b342:	f000 f927 	bl	800b594 <USBD_Get_USB_Status>
 800b346:	4603      	mov	r3, r0
 800b348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b34a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	460b      	mov	r3, r1
 800b35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b36e:	78fa      	ldrb	r2, [r7, #3]
 800b370:	4611      	mov	r1, r2
 800b372:	4618      	mov	r0, r3
 800b374:	f7f8 f9da 	bl	800372c <HAL_PCD_EP_SetStall>
 800b378:	4603      	mov	r3, r0
 800b37a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 f908 	bl	800b594 <USBD_Get_USB_Status>
 800b384:	4603      	mov	r3, r0
 800b386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b388:	7bbb      	ldrb	r3, [r7, #14]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	460b      	mov	r3, r1
 800b39c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3ac:	78fa      	ldrb	r2, [r7, #3]
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7f8 fa0d 	bl	80037d0 <HAL_PCD_EP_ClrStall>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 f8e9 	bl	800b594 <USBD_Get_USB_Status>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b3e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	da0b      	bge.n	800b404 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3f2:	68f9      	ldr	r1, [r7, #12]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4413      	add	r3, r2
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	440b      	add	r3, r1
 800b3fe:	3312      	adds	r3, #18
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	e00b      	b.n	800b41c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b404:	78fb      	ldrb	r3, [r7, #3]
 800b406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b40a:	68f9      	ldr	r1, [r7, #12]
 800b40c:	4613      	mov	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4413      	add	r3, r2
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	440b      	add	r3, r1
 800b416:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800b41a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b442:	78fa      	ldrb	r2, [r7, #3]
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f7f8 f83f 	bl	80034ca <HAL_PCD_SetAddress>
 800b44c:	4603      	mov	r3, r0
 800b44e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	4618      	mov	r0, r3
 800b454:	f000 f89e 	bl	800b594 <USBD_Get_USB_Status>
 800b458:	4603      	mov	r3, r0
 800b45a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b086      	sub	sp, #24
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	607a      	str	r2, [r7, #4]
 800b470:	603b      	str	r3, [r7, #0]
 800b472:	460b      	mov	r3, r1
 800b474:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b484:	7af9      	ldrb	r1, [r7, #11]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	f7f8 f918 	bl	80036be <HAL_PCD_EP_Transmit>
 800b48e:	4603      	mov	r3, r0
 800b490:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b492:	7dfb      	ldrb	r3, [r7, #23]
 800b494:	4618      	mov	r0, r3
 800b496:	f000 f87d 	bl	800b594 <USBD_Get_USB_Status>
 800b49a:	4603      	mov	r3, r0
 800b49c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b49e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	607a      	str	r2, [r7, #4]
 800b4b2:	603b      	str	r3, [r7, #0]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b4c6:	7af9      	ldrb	r1, [r7, #11]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	f7f8 f8c6 	bl	800365c <HAL_PCD_EP_Receive>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4d4:	7dfb      	ldrb	r3, [r7, #23]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 f85c 	bl	800b594 <USBD_Get_USB_Status>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b4e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b4f8:	78fb      	ldrb	r3, [r7, #3]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d002      	beq.n	800b504 <HAL_PCDEx_LPM_Callback+0x18>
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d013      	beq.n	800b52a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b502:	e023      	b.n	800b54c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7a5b      	ldrb	r3, [r3, #9]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d007      	beq.n	800b51c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b50c:	f000 f83c 	bl	800b588 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b510:	4b10      	ldr	r3, [pc, #64]	; (800b554 <HAL_PCDEx_LPM_Callback+0x68>)
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	4a0f      	ldr	r2, [pc, #60]	; (800b554 <HAL_PCDEx_LPM_Callback+0x68>)
 800b516:	f023 0306 	bic.w	r3, r3, #6
 800b51a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe fdae 	bl	800a084 <USBD_LL_Resume>
    break;
 800b528:	e010      	b.n	800b54c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b530:	4618      	mov	r0, r3
 800b532:	f7fe fd91 	bl	800a058 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	7a5b      	ldrb	r3, [r3, #9]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b53e:	4b05      	ldr	r3, [pc, #20]	; (800b554 <HAL_PCDEx_LPM_Callback+0x68>)
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	4a04      	ldr	r2, [pc, #16]	; (800b554 <HAL_PCDEx_LPM_Callback+0x68>)
 800b544:	f043 0306 	orr.w	r3, r3, #6
 800b548:	6113      	str	r3, [r2, #16]
    break;
 800b54a:	bf00      	nop
}
 800b54c:	bf00      	nop
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	e000ed00 	.word	0xe000ed00

0800b558 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b560:	4b03      	ldr	r3, [pc, #12]	; (800b570 <USBD_static_malloc+0x18>)
}
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	20000e04 	.word	0x20000e04

0800b574 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]

}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b58c:	f7f4 ff7e 	bl	800048c <SystemClock_Config>
}
 800b590:	bf00      	nop
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d817      	bhi.n	800b5d8 <USBD_Get_USB_Status+0x44>
 800b5a8:	a201      	add	r2, pc, #4	; (adr r2, 800b5b0 <USBD_Get_USB_Status+0x1c>)
 800b5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ae:	bf00      	nop
 800b5b0:	0800b5c1 	.word	0x0800b5c1
 800b5b4:	0800b5c7 	.word	0x0800b5c7
 800b5b8:	0800b5cd 	.word	0x0800b5cd
 800b5bc:	0800b5d3 	.word	0x0800b5d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c4:	e00b      	b.n	800b5de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ca:	e008      	b.n	800b5de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d0:	e005      	b.n	800b5de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d6:	e002      	b.n	800b5de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	73fb      	strb	r3, [r7, #15]
    break;
 800b5dc:	bf00      	nop
  }
  return usb_status;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <memset>:
 800b5ec:	4402      	add	r2, r0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d100      	bne.n	800b5f6 <memset+0xa>
 800b5f4:	4770      	bx	lr
 800b5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5fa:	e7f9      	b.n	800b5f0 <memset+0x4>

0800b5fc <__libc_init_array>:
 800b5fc:	b570      	push	{r4, r5, r6, lr}
 800b5fe:	4d0d      	ldr	r5, [pc, #52]	; (800b634 <__libc_init_array+0x38>)
 800b600:	4c0d      	ldr	r4, [pc, #52]	; (800b638 <__libc_init_array+0x3c>)
 800b602:	1b64      	subs	r4, r4, r5
 800b604:	10a4      	asrs	r4, r4, #2
 800b606:	2600      	movs	r6, #0
 800b608:	42a6      	cmp	r6, r4
 800b60a:	d109      	bne.n	800b620 <__libc_init_array+0x24>
 800b60c:	4d0b      	ldr	r5, [pc, #44]	; (800b63c <__libc_init_array+0x40>)
 800b60e:	4c0c      	ldr	r4, [pc, #48]	; (800b640 <__libc_init_array+0x44>)
 800b610:	f000 f818 	bl	800b644 <_init>
 800b614:	1b64      	subs	r4, r4, r5
 800b616:	10a4      	asrs	r4, r4, #2
 800b618:	2600      	movs	r6, #0
 800b61a:	42a6      	cmp	r6, r4
 800b61c:	d105      	bne.n	800b62a <__libc_init_array+0x2e>
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	f855 3b04 	ldr.w	r3, [r5], #4
 800b624:	4798      	blx	r3
 800b626:	3601      	adds	r6, #1
 800b628:	e7ee      	b.n	800b608 <__libc_init_array+0xc>
 800b62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b62e:	4798      	blx	r3
 800b630:	3601      	adds	r6, #1
 800b632:	e7f2      	b.n	800b61a <__libc_init_array+0x1e>
 800b634:	0800b6b4 	.word	0x0800b6b4
 800b638:	0800b6b4 	.word	0x0800b6b4
 800b63c:	0800b6b4 	.word	0x0800b6b4
 800b640:	0800b6b8 	.word	0x0800b6b8

0800b644 <_init>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	bf00      	nop
 800b648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64a:	bc08      	pop	{r3}
 800b64c:	469e      	mov	lr, r3
 800b64e:	4770      	bx	lr

0800b650 <_fini>:
 800b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b652:	bf00      	nop
 800b654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b656:	bc08      	pop	{r3}
 800b658:	469e      	mov	lr, r3
 800b65a:	4770      	bx	lr
